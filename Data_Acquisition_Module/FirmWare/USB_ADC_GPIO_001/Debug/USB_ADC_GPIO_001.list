
USB_ADC_GPIO_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08008c70  08008c70  00018c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cb4  08008cb4  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  08008cb4  08008cb4  00018cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cbc  08008cbc  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cbc  08008cbc  00018cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cc0  08008cc0  00018cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08008cc4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d0  2**0
                  CONTENTS
 10 .bss          00001d20  200001d0  200001d0  000201d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ef0  20001ef0  000201d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c63f  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b03  00000000  00000000  0003c83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001218  00000000  00000000  00040348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001090  00000000  00000000  00041560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026073  00000000  00000000  000425f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017162  00000000  00000000  00068663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9bd3  00000000  00000000  0007f7c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00159398  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c38  00000000  00000000  001593ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d0 	.word	0x200001d0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c58 	.word	0x08008c58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d4 	.word	0x200001d4
 80001c4:	08008c58 	.word	0x08008c58

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96e 	b.w	8000ca8 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468c      	mov	ip, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 8083 	bne.w	8000afa <__udivmoddi4+0x116>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4617      	mov	r7, r2
 80009f8:	d947      	bls.n	8000a8a <__udivmoddi4+0xa6>
 80009fa:	fab2 f282 	clz	r2, r2
 80009fe:	b142      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	f1c2 0020 	rsb	r0, r2, #32
 8000a04:	fa24 f000 	lsr.w	r0, r4, r0
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	4097      	lsls	r7, r2
 8000a0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbbc f6f8 	udiv	r6, ip, r8
 8000a1c:	fa1f fe87 	uxth.w	lr, r7
 8000a20:	fb08 c116 	mls	r1, r8, r6, ip
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f10e 	mul.w	r1, r6, lr
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a36:	f080 8119 	bcs.w	8000c6c <__udivmoddi4+0x288>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8116 	bls.w	8000c6c <__udivmoddi4+0x288>
 8000a40:	3e02      	subs	r6, #2
 8000a42:	443b      	add	r3, r7
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	45a6      	cmp	lr, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8105 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a66:	45a6      	cmp	lr, r4
 8000a68:	f240 8102 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443c      	add	r4, r7
 8000a70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a74:	eba4 040e 	sub.w	r4, r4, lr
 8000a78:	2600      	movs	r6, #0
 8000a7a:	b11d      	cbz	r5, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c5 4300 	strd	r4, r3, [r5]
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	b902      	cbnz	r2, 8000a8e <__udivmoddi4+0xaa>
 8000a8c:	deff      	udf	#255	; 0xff
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d150      	bne.n	8000b38 <__udivmoddi4+0x154>
 8000a96:	1bcb      	subs	r3, r1, r7
 8000a98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	2601      	movs	r6, #1
 8000aa2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000aa6:	0c21      	lsrs	r1, r4, #16
 8000aa8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d907      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 8000ab8:	1879      	adds	r1, r7, r1
 8000aba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0xe2>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	f200 80e9 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000ac6:	4684      	mov	ip, r0
 8000ac8:	1ac9      	subs	r1, r1, r3
 8000aca:	b2a3      	uxth	r3, r4
 8000acc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad8:	fb08 f800 	mul.w	r8, r8, r0
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d907      	bls.n	8000af0 <__udivmoddi4+0x10c>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x10a>
 8000ae8:	45a0      	cmp	r8, r4
 8000aea:	f200 80d9 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000aee:	4618      	mov	r0, r3
 8000af0:	eba4 0408 	sub.w	r4, r4, r8
 8000af4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af8:	e7bf      	b.n	8000a7a <__udivmoddi4+0x96>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x12e>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <__udivmoddi4+0x282>
 8000b04:	2600      	movs	r6, #0
 8000b06:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f683 	clz	r6, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d14a      	bne.n	8000bb0 <__udivmoddi4+0x1cc>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0x140>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80b8 	bhi.w	8000c94 <__udivmoddi4+0x2b0>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0103 	sbc.w	r1, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d0a8      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000b32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b36:	e7a5      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000b38:	f1c2 0320 	rsb	r3, r2, #32
 8000b3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b40:	4097      	lsls	r7, r2
 8000b42:	fa01 f002 	lsl.w	r0, r1, r2
 8000b46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4a:	40d9      	lsrs	r1, r3
 8000b4c:	4330      	orrs	r0, r6
 8000b4e:	0c03      	lsrs	r3, r0, #16
 8000b50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f108 	mul.w	r1, r6, r8
 8000b64:	4299      	cmp	r1, r3
 8000b66:	fa04 f402 	lsl.w	r4, r4, r2
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x19c>
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b72:	f080 808d 	bcs.w	8000c90 <__udivmoddi4+0x2ac>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 808a 	bls.w	8000c90 <__udivmoddi4+0x2ac>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	443b      	add	r3, r7
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b281      	uxth	r1, r0
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b90:	fb00 f308 	mul.w	r3, r0, r8
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x1c4>
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b9e:	d273      	bcs.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d971      	bls.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4439      	add	r1, r7
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bae:	e778      	b.n	8000aa2 <__udivmoddi4+0xbe>
 8000bb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	0c3b      	lsrs	r3, r7, #16
 8000bd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd6:	fa1f f884 	uxth.w	r8, r4
 8000bda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000be2:	fb09 fa08 	mul.w	sl, r9, r8
 8000be6:	458a      	cmp	sl, r1
 8000be8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bec:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x220>
 8000bf2:	1861      	adds	r1, r4, r1
 8000bf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf8:	d248      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfa:	458a      	cmp	sl, r1
 8000bfc:	d946      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4421      	add	r1, r4
 8000c04:	eba1 010a 	sub.w	r1, r1, sl
 8000c08:	b2bf      	uxth	r7, r7
 8000c0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c16:	fb00 f808 	mul.w	r8, r0, r8
 8000c1a:	45b8      	cmp	r8, r7
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x24a>
 8000c1e:	19e7      	adds	r7, r4, r7
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c24:	d22e      	bcs.n	8000c84 <__udivmoddi4+0x2a0>
 8000c26:	45b8      	cmp	r8, r7
 8000c28:	d92c      	bls.n	8000c84 <__udivmoddi4+0x2a0>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4427      	add	r7, r4
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	eba7 0708 	sub.w	r7, r7, r8
 8000c36:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3a:	454f      	cmp	r7, r9
 8000c3c:	46c6      	mov	lr, r8
 8000c3e:	4649      	mov	r1, r9
 8000c40:	d31a      	bcc.n	8000c78 <__udivmoddi4+0x294>
 8000c42:	d017      	beq.n	8000c74 <__udivmoddi4+0x290>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x27a>
 8000c46:	ebb3 020e 	subs.w	r2, r3, lr
 8000c4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c52:	40f2      	lsrs	r2, r6
 8000c54:	ea4c 0202 	orr.w	r2, ip, r2
 8000c58:	40f7      	lsrs	r7, r6
 8000c5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e70b      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e9      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6fd      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c74:	4543      	cmp	r3, r8
 8000c76:	d2e5      	bcs.n	8000c44 <__udivmoddi4+0x260>
 8000c78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7df      	b.n	8000c44 <__udivmoddi4+0x260>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e7d2      	b.n	8000c2e <__udivmoddi4+0x24a>
 8000c88:	4660      	mov	r0, ip
 8000c8a:	e78d      	b.n	8000ba8 <__udivmoddi4+0x1c4>
 8000c8c:	4681      	mov	r9, r0
 8000c8e:	e7b9      	b.n	8000c04 <__udivmoddi4+0x220>
 8000c90:	4666      	mov	r6, ip
 8000c92:	e775      	b.n	8000b80 <__udivmoddi4+0x19c>
 8000c94:	4630      	mov	r0, r6
 8000c96:	e74a      	b.n	8000b2e <__udivmoddi4+0x14a>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	4439      	add	r1, r7
 8000c9e:	e713      	b.n	8000ac8 <__udivmoddi4+0xe4>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	e724      	b.n	8000af0 <__udivmoddi4+0x10c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <Set_Sync_Pin>:

extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;
extern ADC_HandleTypeDef hadc3;

void Set_Sync_Pin(){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (SYNC_PORT, SYNC_PIN, 1);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb6:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <Set_Sync_Pin+0x14>)
 8000cb8:	f001 ffec 	bl	8002c94 <HAL_GPIO_WritePin>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40020c00 	.word	0x40020c00

08000cc4 <Clr_Sync_Pin>:

void Clr_Sync_Pin(){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (SYNC_PORT, SYNC_PIN, 0);	
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cce:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <Clr_Sync_Pin+0x14>)
 8000cd0:	f001 ffe0 	bl	8002c94 <HAL_GPIO_WritePin>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40020c00 	.word	0x40020c00

08000cdc <Set_DCDC_En_Pin>:

void Set_DCDC_En_Pin(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (DCDC_EN_PORT, DCDC_EN_PIN, 1);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce6:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <Set_DCDC_En_Pin+0x14>)
 8000ce8:	f001 ffd4 	bl	8002c94 <HAL_GPIO_WritePin>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40020c00 	.word	0x40020c00

08000cf4 <Clr_DCDC_En_Pin>:

void Clr_DCDC_En_Pin(){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (DCDC_EN_PORT, DCDC_EN_PIN, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfe:	4802      	ldr	r0, [pc, #8]	; (8000d08 <Clr_DCDC_En_Pin+0x14>)
 8000d00:	f001 ffc8 	bl	8002c94 <HAL_GPIO_WritePin>
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40020c00 	.word	0x40020c00

08000d0c <ADC_Measurement>:

    return g_ADCValue;
}


int  ADC_Measurement(int N_ADC, int ADC_CHANNEL){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09a      	sub	sp, #104	; 0x68
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]

	int g_ADCValue;

	ADC_HandleTypeDef hadc;

	if(N_ADC == 1){hadc = hadc1;}
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d107      	bne.n	8000d2c <ADC_Measurement+0x20>
 8000d1c:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <ADC_Measurement+0xb4>)
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4611      	mov	r1, r2
 8000d24:	2248      	movs	r2, #72	; 0x48
 8000d26:	4618      	mov	r0, r3
 8000d28:	f007 ff80 	bl	8008c2c <memcpy>
	if(N_ADC == 2){hadc = hadc2;}
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d107      	bne.n	8000d42 <ADC_Measurement+0x36>
 8000d32:	4a24      	ldr	r2, [pc, #144]	; (8000dc4 <ADC_Measurement+0xb8>)
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4611      	mov	r1, r2
 8000d3a:	2248      	movs	r2, #72	; 0x48
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f007 ff75 	bl	8008c2c <memcpy>
	if(N_ADC == 3){hadc = hadc3;}
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d107      	bne.n	8000d58 <ADC_Measurement+0x4c>
 8000d48:	4a1f      	ldr	r2, [pc, #124]	; (8000dc8 <ADC_Measurement+0xbc>)
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4611      	mov	r1, r2
 8000d50:	2248      	movs	r2, #72	; 0x48
 8000d52:	4618      	mov	r0, r3
 8000d54:	f007 ff6a 	bl	8008c2c <memcpy>

	ADC_ChannelConfTypeDef adcChannel;

    adcChannel.Channel = ADC_CHANNEL;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	60fb      	str	r3, [r7, #12]
    adcChannel.Rank = 1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
    adcChannel.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d60:	2307      	movs	r3, #7
 8000d62:	617b      	str	r3, [r7, #20]
    adcChannel.Offset = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]

    if (HAL_ADC_ConfigChannel(&hadc, &adcChannel) != HAL_OK)
 8000d68:	f107 020c 	add.w	r2, r7, #12
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 fac2 	bl	80022fc <HAL_ADC_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d000      	beq.n	8000d80 <ADC_Measurement+0x74>
    {
        asm("bkpt 255");
 8000d7e:	beff      	bkpt	0x00ff
    }

    HAL_ADC_Start(&hadc);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 f91b 	bl	8001fc0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc, 100) == HAL_OK)
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	2164      	movs	r1, #100	; 0x64
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 fa1a 	bl	80021ca <HAL_ADC_PollForConversion>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d106      	bne.n	8000daa <ADC_Measurement+0x9e>
    g_ADCValue = HAL_ADC_GetValue(&hadc);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fa9d 	bl	80022e0 <HAL_ADC_GetValue>
 8000da6:	4603      	mov	r3, r0
 8000da8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_ADC_Stop(&hadc);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 f9d8 	bl	8002164 <HAL_ADC_Stop>

    return g_ADCValue;
 8000db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3768      	adds	r7, #104	; 0x68
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000498 	.word	0x20000498
 8000dc4:	2000041c 	.word	0x2000041c
 8000dc8:	200004e0 	.word	0x200004e0

08000dcc <All_Parameters_Measurement>:

void All_Parameters_Measurement(s_ADC* stm32ADC){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	stm32ADC->I_in = ADC_Measurement(I_IN_ADC, I_IN_PIN);
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f7ff ff98 	bl	8000d0c <ADC_Measurement>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	601a      	str	r2, [r3, #0]
	stm32ADC->U_in = ADC_Measurement(U_IN_ADC, U_IN_PIN);
 8000de2:	2100      	movs	r1, #0
 8000de4:	2001      	movs	r0, #1
 8000de6:	f7ff ff91 	bl	8000d0c <ADC_Measurement>
 8000dea:	4602      	mov	r2, r0
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	605a      	str	r2, [r3, #4]
	stm32ADC->I_out = ADC_Measurement(I_OUT_ADC, I_OUT_PIN);
 8000df0:	2100      	movs	r1, #0
 8000df2:	2002      	movs	r0, #2
 8000df4:	f7ff ff8a 	bl	8000d0c <ADC_Measurement>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
	stm32ADC->U_out = ADC_Measurement(U_OUT_ADC, U_OUT_PIN);
 8000dfe:	2102      	movs	r1, #2
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff ff83 	bl	8000d0c <ADC_Measurement>
 8000e06:	4602      	mov	r2, r0
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	60da      	str	r2, [r3, #12]
	stm32ADC->t_1  = ADC_Measurement(T_1_ADC, T_1_PIN);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f7ff ff7c 	bl	8000d0c <ADC_Measurement>
 8000e14:	4602      	mov	r2, r0
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	611a      	str	r2, [r3, #16]
	stm32ADC->t_2  = ADC_Measurement(T_2_ADC, T_2_PIN);
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f7ff ff75 	bl	8000d0c <ADC_Measurement>
 8000e22:	4602      	mov	r2, r0
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	615a      	str	r2, [r3, #20]
	stm32ADC->t_3  = ADC_Measurement(T_3_ADC, T_3_PIN);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f7ff ff6e 	bl	8000d0c <ADC_Measurement>
 8000e30:	4602      	mov	r2, r0
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	619a      	str	r2, [r3, #24]
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <TxBuffer_Send>:

void TxBuffer_Send(uint8_t* Tx_Buf){
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t *)Tx_Buf, TX_DATA_SZ);
 8000e46:	2110      	movs	r1, #16
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f007 fa6f 	bl	800832c <CDC_Transmit_FS>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <Convert_ADC_to_Tx_format>:

extern int FLAG_New_Data_Received;



void Convert_ADC_to_Tx_format( s_ADC *stm32ADC,  s_Tx_Parameters *Tx_Prms) {
 8000e58:	b5b0      	push	{r4, r5, r7, lr}
 8000e5a:	b0a2      	sub	sp, #136	; 0x88
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	double K_I_1st_byte; // number of units in second byte for 1 unit in first byte
	double K_U_1st_byte; // number of units in second byte for 1 unit in first byte
	double K_t_1st_byte; // number of units in second byte for 1 unit in first byte


	I_ADCunit = ADC_U_Ref / (dI_dUADC * ADC_Resolution);
 8000e62:	4bb0      	ldr	r3, [pc, #704]	; (8001124 <Convert_ADC_to_Tx_format+0x2cc>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fb12 	bl	8000490 <__aeabi_f2d>
 8000e6c:	4604      	mov	r4, r0
 8000e6e:	460d      	mov	r5, r1
 8000e70:	4bad      	ldr	r3, [pc, #692]	; (8001128 <Convert_ADC_to_Tx_format+0x2d0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fb0b 	bl	8000490 <__aeabi_f2d>
 8000e7a:	4bac      	ldr	r3, [pc, #688]	; (800112c <Convert_ADC_to_Tx_format+0x2d4>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	f7ff fb5e 	bl	8000540 <__aeabi_dmul>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4620      	mov	r0, r4
 8000e8a:	4629      	mov	r1, r5
 8000e8c:	f7ff fc82 	bl	8000794 <__aeabi_ddiv>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	U_ADCunit = ADC_U_Ref / (dU_dUADC * ADC_Resolution);
 8000e98:	4ba2      	ldr	r3, [pc, #648]	; (8001124 <Convert_ADC_to_Tx_format+0x2cc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff faf7 	bl	8000490 <__aeabi_f2d>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	460d      	mov	r5, r1
 8000ea6:	4ba0      	ldr	r3, [pc, #640]	; (8001128 <Convert_ADC_to_Tx_format+0x2d0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff faf0 	bl	8000490 <__aeabi_f2d>
 8000eb0:	4b9f      	ldr	r3, [pc, #636]	; (8001130 <Convert_ADC_to_Tx_format+0x2d8>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f7ff fb43 	bl	8000540 <__aeabi_dmul>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	4629      	mov	r1, r5
 8000ec2:	f7ff fc67 	bl	8000794 <__aeabi_ddiv>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	t_ADCunit = ADC_U_Ref / (dt_dUADC * ADC_Resolution);
 8000ece:	4b95      	ldr	r3, [pc, #596]	; (8001124 <Convert_ADC_to_Tx_format+0x2cc>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fadc 	bl	8000490 <__aeabi_f2d>
 8000ed8:	4604      	mov	r4, r0
 8000eda:	460d      	mov	r5, r1
 8000edc:	4b92      	ldr	r3, [pc, #584]	; (8001128 <Convert_ADC_to_Tx_format+0x2d0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fad5 	bl	8000490 <__aeabi_f2d>
 8000ee6:	4b93      	ldr	r3, [pc, #588]	; (8001134 <Convert_ADC_to_Tx_format+0x2dc>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	f7ff fb28 	bl	8000540 <__aeabi_dmul>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	f7ff fc4c 	bl	8000794 <__aeabi_ddiv>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	K_I_adc_to_rx = I_ADCunit / I_TXunit;
 8000f04:	4b8c      	ldr	r3, [pc, #560]	; (8001138 <Convert_ADC_to_Tx_format+0x2e0>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000f0e:	f7ff fc41 	bl	8000794 <__aeabi_ddiv>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	K_U_adc_to_rx = U_ADCunit / U_TXunit;
 8000f1a:	4b88      	ldr	r3, [pc, #544]	; (800113c <Convert_ADC_to_Tx_format+0x2e4>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f20:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8000f24:	f7ff fc36 	bl	8000794 <__aeabi_ddiv>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	K_t_adc_to_rx = t_ADCunit / t_TXunit;
 8000f30:	4b83      	ldr	r3, [pc, #524]	; (8001140 <Convert_ADC_to_Tx_format+0x2e8>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8000f3a:	f7ff fc2b 	bl	8000794 <__aeabi_ddiv>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	I_in__Utx = K_I_adc_to_rx * (double)stm32ADC->I_in;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fa8e 	bl	800046c <__aeabi_i2d>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8000f58:	f7ff faf2 	bl	8000540 <__aeabi_dmul>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	U_in__Utx = K_U_adc_to_rx * (double)stm32ADC->U_in;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa7f 	bl	800046c <__aeabi_i2d>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000f76:	f7ff fae3 	bl	8000540 <__aeabi_dmul>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	I_out_Utx = K_I_adc_to_rx * (double)stm32ADC->I_out;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa70 	bl	800046c <__aeabi_i2d>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8000f94:	f7ff fad4 	bl	8000540 <__aeabi_dmul>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	U_out_Utx = K_U_adc_to_rx * (double)stm32ADC->U_out;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa61 	bl	800046c <__aeabi_i2d>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000fb2:	f7ff fac5 	bl	8000540 <__aeabi_dmul>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	t_1___Utx = K_t_adc_to_rx * (double)stm32ADC->t_1;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fa52 	bl	800046c <__aeabi_i2d>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000fd0:	f7ff fab6 	bl	8000540 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	t_2___Utx = K_t_adc_to_rx * (double)stm32ADC->t_2;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fa43 	bl	800046c <__aeabi_i2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000fee:	f7ff faa7 	bl	8000540 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	t_3___Utx = K_t_adc_to_rx * (double)stm32ADC->t_3;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa34 	bl	800046c <__aeabi_i2d>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800100c:	f7ff fa98 	bl	8000540 <__aeabi_dmul>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Split data for 1st and 2nd bytes to transmit

	K_I_1st_byte = (I_TX_1st_byte / I_TXunit);
 8001018:	4b4a      	ldr	r3, [pc, #296]	; (8001144 <Convert_ADC_to_Tx_format+0x2ec>)
 800101a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800101e:	4b46      	ldr	r3, [pc, #280]	; (8001138 <Convert_ADC_to_Tx_format+0x2e0>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff fbb6 	bl	8000794 <__aeabi_ddiv>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	K_U_1st_byte = (U_TX_1st_byte / U_TXunit);
 8001030:	4b45      	ldr	r3, [pc, #276]	; (8001148 <Convert_ADC_to_Tx_format+0x2f0>)
 8001032:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001036:	4b41      	ldr	r3, [pc, #260]	; (800113c <Convert_ADC_to_Tx_format+0x2e4>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fbaa 	bl	8000794 <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	e9c7 2304 	strd	r2, r3, [r7, #16]
	K_t_1st_byte = (t_TX_1st_byte / t_TXunit);
 8001048:	4b40      	ldr	r3, [pc, #256]	; (800114c <Convert_ADC_to_Tx_format+0x2f4>)
 800104a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800104e:	4b3c      	ldr	r3, [pc, #240]	; (8001140 <Convert_ADC_to_Tx_format+0x2e8>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	f7ff fb9e 	bl	8000794 <__aeabi_ddiv>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	Tx_Prms->I_in_1 = (int)(I_in__Utx / K_I_1st_byte);
 8001060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001064:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001068:	f7ff fb94 	bl	8000794 <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fc76 	bl	8000964 <__aeabi_d2iz>
 8001078:	4602      	mov	r2, r0
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	601a      	str	r2, [r3, #0]
	Tx_Prms->I_in_2 = (int)(I_in__Utx - (double)Tx_Prms->I_in_1 * K_I_1st_byte);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f9f2 	bl	800046c <__aeabi_i2d>
 8001088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800108c:	f7ff fa58 	bl	8000540 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001098:	f7ff f89a 	bl	80001d0 <__aeabi_dsub>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fc5e 	bl	8000964 <__aeabi_d2iz>
 80010a8:	4602      	mov	r2, r0
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	605a      	str	r2, [r3, #4]
	Tx_Prms->U_in_1 = (int)(U_in__Utx / K_U_1st_byte);
 80010ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80010b6:	f7ff fb6d 	bl	8000794 <__aeabi_ddiv>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fc4f 	bl	8000964 <__aeabi_d2iz>
 80010c6:	4602      	mov	r2, r0
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	609a      	str	r2, [r3, #8]
	Tx_Prms->U_in_2 = (int)(U_in__Utx - (double)Tx_Prms->U_in_1 * K_U_1st_byte);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff f9cb 	bl	800046c <__aeabi_i2d>
 80010d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010da:	f7ff fa31 	bl	8000540 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80010e6:	f7ff f873 	bl	80001d0 <__aeabi_dsub>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fc37 	bl	8000964 <__aeabi_d2iz>
 80010f6:	4602      	mov	r2, r0
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	60da      	str	r2, [r3, #12]
	Tx_Prms->I_out_1 = (int)(I_out_Utx / K_I_1st_byte);
 80010fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001100:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001104:	f7ff fb46 	bl	8000794 <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fc28 	bl	8000964 <__aeabi_d2iz>
 8001114:	4602      	mov	r2, r0
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	611a      	str	r2, [r3, #16]
	Tx_Prms->I_out_2 = (int)(I_out_Utx - (double)Tx_Prms->I_out_1 * K_I_1st_byte);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	4618      	mov	r0, r3
 8001120:	e016      	b.n	8001150 <Convert_ADC_to_Tx_format+0x2f8>
 8001122:	bf00      	nop
 8001124:	20000004 	.word	0x20000004
 8001128:	20000000 	.word	0x20000000
 800112c:	20000038 	.word	0x20000038
 8001130:	20000040 	.word	0x20000040
 8001134:	20000048 	.word	0x20000048
 8001138:	20000008 	.word	0x20000008
 800113c:	20000010 	.word	0x20000010
 8001140:	20000018 	.word	0x20000018
 8001144:	20000020 	.word	0x20000020
 8001148:	20000028 	.word	0x20000028
 800114c:	20000030 	.word	0x20000030
 8001150:	f7ff f98c 	bl	800046c <__aeabi_i2d>
 8001154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001158:	f7ff f9f2 	bl	8000540 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001164:	f7ff f834 	bl	80001d0 <__aeabi_dsub>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fbf8 	bl	8000964 <__aeabi_d2iz>
 8001174:	4602      	mov	r2, r0
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	615a      	str	r2, [r3, #20]
	Tx_Prms->U_out_1 = (int)(U_out_Utx / K_U_1st_byte);
 800117a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800117e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001182:	f7ff fb07 	bl	8000794 <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fbe9 	bl	8000964 <__aeabi_d2iz>
 8001192:	4602      	mov	r2, r0
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	619a      	str	r2, [r3, #24]
	Tx_Prms->U_out_2 = (int)(U_out_Utx - (double)Tx_Prms->U_out_1 * K_U_1st_byte);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f965 	bl	800046c <__aeabi_i2d>
 80011a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011a6:	f7ff f9cb 	bl	8000540 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80011b2:	f7ff f80d 	bl	80001d0 <__aeabi_dsub>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fbd1 	bl	8000964 <__aeabi_d2iz>
 80011c2:	4602      	mov	r2, r0
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	61da      	str	r2, [r3, #28]

	Tx_Prms->T1_1 = (int)(t_1___Utx / K_t_1st_byte);
 80011c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011d0:	f7ff fae0 	bl	8000794 <__aeabi_ddiv>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fbc2 	bl	8000964 <__aeabi_d2iz>
 80011e0:	4602      	mov	r2, r0
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	621a      	str	r2, [r3, #32]
	Tx_Prms->T1_2 = (int)(t_1___Utx - (double)Tx_Prms->T1_1 * K_t_1st_byte);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f93e 	bl	800046c <__aeabi_i2d>
 80011f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011f4:	f7ff f9a4 	bl	8000540 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001200:	f7fe ffe6 	bl	80001d0 <__aeabi_dsub>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fbaa 	bl	8000964 <__aeabi_d2iz>
 8001210:	4602      	mov	r2, r0
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
	Tx_Prms->T2_1 = (int)(t_2___Utx / K_t_1st_byte);
 8001216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800121a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800121e:	f7ff fab9 	bl	8000794 <__aeabi_ddiv>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fb9b 	bl	8000964 <__aeabi_d2iz>
 800122e:	4602      	mov	r2, r0
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
	Tx_Prms->T2_2 = (int)(t_2___Utx - (double)Tx_Prms->T2_1 * K_t_1st_byte);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f917 	bl	800046c <__aeabi_i2d>
 800123e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001242:	f7ff f97d 	bl	8000540 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800124e:	f7fe ffbf 	bl	80001d0 <__aeabi_dsub>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fb83 	bl	8000964 <__aeabi_d2iz>
 800125e:	4602      	mov	r2, r0
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
	Tx_Prms->T3_1 = (int)(t_3___Utx / K_t_1st_byte);
 8001264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001268:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800126c:	f7ff fa92 	bl	8000794 <__aeabi_ddiv>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fb74 	bl	8000964 <__aeabi_d2iz>
 800127c:	4602      	mov	r2, r0
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	631a      	str	r2, [r3, #48]	; 0x30
	Tx_Prms->T3_2 = (int)(t_3___Utx - (double)Tx_Prms->T3_1 * K_t_1st_byte);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f8f0 	bl	800046c <__aeabi_i2d>
 800128c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001290:	f7ff f956 	bl	8000540 <__aeabi_dmul>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800129c:	f7fe ff98 	bl	80001d0 <__aeabi_dsub>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fb5c 	bl	8000964 <__aeabi_d2iz>
 80012ac:	4602      	mov	r2, r0
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34

}
 80012b2:	bf00      	nop
 80012b4:	3788      	adds	r7, #136	; 0x88
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ba:	bf00      	nop

080012bc <Create_Tx_Buffer>:

void Create_Tx_Buffer( s_Tx_Parameters* Tx_Prms, uint8_t TX_Buf[TX_BUF_SZ]) {
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	int Head, Tail;
	Head = 0xFF;
 80012c6:	23ff      	movs	r3, #255	; 0xff
 80012c8:	60fb      	str	r3, [r7, #12]
	Tail = 0xFE;
 80012ca:	23fe      	movs	r3, #254	; 0xfe
 80012cc:	60bb      	str	r3, [r7, #8]
	TX_Buf[ 0] = Head;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	701a      	strb	r2, [r3, #0]
	TX_Buf[ 1] = Tx_Prms->I_in_1;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	701a      	strb	r2, [r3, #0]
	TX_Buf[ 2] = Tx_Prms->I_in_2;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	3302      	adds	r3, #2
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	701a      	strb	r2, [r3, #0]
	TX_Buf[ 3] = Tx_Prms->U_in_1;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	3303      	adds	r3, #3
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	701a      	strb	r2, [r3, #0]
	TX_Buf[ 4] = Tx_Prms->U_in_2;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3304      	adds	r3, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	701a      	strb	r2, [r3, #0]
	TX_Buf[ 5] = Tx_Prms->I_out_1;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691a      	ldr	r2, [r3, #16]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3305      	adds	r3, #5
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	701a      	strb	r2, [r3, #0]
	TX_Buf[ 6] = Tx_Prms->I_out_2;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695a      	ldr	r2, [r3, #20]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	3306      	adds	r3, #6
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	701a      	strb	r2, [r3, #0]
	TX_Buf[ 7] = Tx_Prms->U_out_1;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699a      	ldr	r2, [r3, #24]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	3307      	adds	r3, #7
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	701a      	strb	r2, [r3, #0]
	TX_Buf[ 8] = Tx_Prms->U_out_2;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69da      	ldr	r2, [r3, #28]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	3308      	adds	r3, #8
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	701a      	strb	r2, [r3, #0]
	TX_Buf[ 9] = Tx_Prms->T1_1;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1a      	ldr	r2, [r3, #32]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3309      	adds	r3, #9
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]
	TX_Buf[10] = Tx_Prms->T1_2;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	330a      	adds	r3, #10
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	701a      	strb	r2, [r3, #0]
	TX_Buf[11] = Tx_Prms->T2_1;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	330b      	adds	r3, #11
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	701a      	strb	r2, [r3, #0]
	TX_Buf[12] = Tx_Prms->T2_2;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	330c      	adds	r3, #12
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	701a      	strb	r2, [r3, #0]
	TX_Buf[13] = Tx_Prms->T3_1;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	330d      	adds	r3, #13
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]
	TX_Buf[14] = Tx_Prms->T3_2;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	330e      	adds	r3, #14
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	701a      	strb	r2, [r3, #0]
	TX_Buf[15] = Tail;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	330f      	adds	r3, #15
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	701a      	strb	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <Process_Rx_Parcel>:
	RX_Buf[5] = (uint8_t)Rx_Parameters->t_Active ;
	RX_Buf[6] = (uint8_t)Rx_Parameters->t_ADC    ;
	RX_Buf[7] = (uint8_t)Rx_Parameters->N_Periods;
	RX_Buf[8] = (uint8_t)Tail                    ;
}
int Process_Rx_Parcel( s_Rx_Parameters* Rx_Parameters, uint8_t RX_Buf[RX_BUF_SZ]) {
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	int error;
	int Head, Tail;
	Head                     = (int)RX_Buf[0];
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	613b      	str	r3, [r7, #16]
	Rx_Parameters->t_Seed    = (int)RX_Buf[1];
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	601a      	str	r2, [r3, #0]
	Rx_Parameters->t_Period  = (int)RX_Buf[2];
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	3302      	adds	r3, #2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	605a      	str	r2, [r3, #4]
	Rx_Parameters->t_Strobe  = (int)RX_Buf[3];
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	3303      	adds	r3, #3
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	609a      	str	r2, [r3, #8]
	Rx_Parameters->t_Delay   = (int)RX_Buf[4];
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	3304      	adds	r3, #4
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60da      	str	r2, [r3, #12]
	Rx_Parameters->t_Active  = (int)RX_Buf[5];
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	3305      	adds	r3, #5
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	611a      	str	r2, [r3, #16]
	Rx_Parameters->t_ADC     = (int)RX_Buf[6];
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	3306      	adds	r3, #6
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	615a      	str	r2, [r3, #20]
	Rx_Parameters->N_Periods = (int)RX_Buf[7];
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3307      	adds	r3, #7
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
	Tail                     = (int)RX_Buf[8];
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	3308      	adds	r3, #8
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]
	if ((Head == 0xFF) && (Tail == 0xFE)) {	error = 0; FLAG_New_Data_Received = 0; }
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	2bff      	cmp	r3, #255	; 0xff
 8001404:	d108      	bne.n	8001418 <Process_Rx_Parcel+0x84>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2bfe      	cmp	r3, #254	; 0xfe
 800140a:	d105      	bne.n	8001418 <Process_Rx_Parcel+0x84>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <Process_Rx_Parcel+0x98>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e001      	b.n	800141c <Process_Rx_Parcel+0x88>
	else { error = 1; }
 8001418:	2301      	movs	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
	return error;
 800141c:	697b      	ldr	r3, [r7, #20]
}
 800141e:	4618      	mov	r0, r3
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200001f0 	.word	0x200001f0

08001430 <Initialize_System>:

void Initialize_System( s_System* Sys) {
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	Sys->InPeriod_cntr = 0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
	Sys->Periods_cntr  = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
	Sys->Seeds_cntr    = 0;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
	Sys->ADC_cntr      = 0;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
	Sys->Strobe = 0;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
	Sys->DCDC_On = 0;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <Initialize_System2>:

void Initialize_System2(s_Rx_Parameters* Rx_Parameters) {
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	Rx_Parameters->t_Seed = 0x30;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2230      	movs	r2, #48	; 0x30
 8001474:	601a      	str	r2, [r3, #0]
	Rx_Parameters->t_Period = 0xF8;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	22f8      	movs	r2, #248	; 0xf8
 800147a:	605a      	str	r2, [r3, #4]
	Rx_Parameters->t_Strobe = 0x01;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	609a      	str	r2, [r3, #8]
	Rx_Parameters->t_Delay = 0x0A;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	220a      	movs	r2, #10
 8001486:	60da      	str	r2, [r3, #12]
	Rx_Parameters->t_Active = 0x04;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2204      	movs	r2, #4
 800148c:	611a      	str	r2, [r3, #16]
	Rx_Parameters->t_ADC = 0xFA;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	22fa      	movs	r2, #250	; 0xfa
 8001492:	615a      	str	r2, [r3, #20]
	Rx_Parameters->N_Periods = 251;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	22fb      	movs	r2, #251	; 0xfb
 8001498:	619a      	str	r2, [r3, #24]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <Timer_100us>:
		          uint8_t RX_Buf[RX_BUF_SZ],
	              s_System *Sys,
	              s_ADC* stm32ADC,
	              s_Tx_Parameters* Tx_Parameters,
				  uint8_t TX_Buf[TX_BUF_SZ]
	) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
	if (FLAG_New_Data_Received == 1) {
 80014b6:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <Timer_100us+0x144>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d106      	bne.n	80014cc <Timer_100us+0x24>
		Initialize_System(Sys);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffb6 	bl	8001430 <Initialize_System>
		Process_Rx_Parcel(Rx_Parameters, RX_Buf);
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7ff ff64 	bl	8001394 <Process_Rx_Parcel>
	}
	if ( (Sys->Periods_cntr >= 0) && (Sys->Periods_cntr < Rx_Parameters->N_Periods) ){
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f2c0 8086 	blt.w	80015e2 <Timer_100us+0x13a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	429a      	cmp	r2, r3
 80014e0:	da7f      	bge.n	80015e2 <Timer_100us+0x13a>
		if (Sys->ADC_cntr >= Rx_Parameters->t_ADC) {
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	db1c      	blt.n	8001528 <Timer_100us+0x80>

			static int kk = 0;
//			int A;
//			uint8_t A1[2];

			Sys->ADC_cntr = 0;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
//			ADC_Measurement_Imitation(ADC);
//			A = Run_ADC();

			All_Parameters_Measurement(stm32ADC);
 80014f4:	6838      	ldr	r0, [r7, #0]
 80014f6:	f7ff fc69 	bl	8000dcc <All_Parameters_Measurement>

		    Convert_ADC_to_Tx_format(stm32ADC, Tx_Parameters);
 80014fa:	69b9      	ldr	r1, [r7, #24]
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f7ff fcab 	bl	8000e58 <Convert_ADC_to_Tx_format>
		    Create_Tx_Buffer(Tx_Parameters, (uint8_t*)TX_Buf);
 8001502:	69f9      	ldr	r1, [r7, #28]
 8001504:	69b8      	ldr	r0, [r7, #24]
 8001506:	f7ff fed9 	bl	80012bc <Create_Tx_Buffer>

//		    A1[0] = 0xFF & A;
//		    A1[1] = 0xFF & (A >> 8);

		    if(kk >= 30){
 800150a:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <Timer_100us+0x148>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b1d      	cmp	r3, #29
 8001510:	dd05      	ble.n	800151e <Timer_100us+0x76>
//		        CDC_Transmit_FS(A1, 2);
		        kk = 0;
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <Timer_100us+0x148>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
			TxBuffer_Send(Tx_Buf);
 8001518:	4836      	ldr	r0, [pc, #216]	; (80015f4 <Timer_100us+0x14c>)
 800151a:	f7ff fc90 	bl	8000e3e <TxBuffer_Send>
		    }
		    kk = kk + 1;
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <Timer_100us+0x148>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a32      	ldr	r2, [pc, #200]	; (80015f0 <Timer_100us+0x148>)
 8001526:	6013      	str	r3, [r2, #0]
		}
		Sys->ADC_cntr = Sys->ADC_cntr + 1;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	60da      	str	r2, [r3, #12]
		if (Sys->Seeds_cntr >= Rx_Parameters->t_Seed) {
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	db4c      	blt.n	80015d8 <Timer_100us+0x130>
			Sys->Seeds_cntr = 0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
		
			Sys->ADC_cntr = Sys->ADC_cntr + 1;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60da      	str	r2, [r3, #12]
			if (Sys->InPeriod_cntr >= Rx_Parameters->t_Period) {
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	429a      	cmp	r2, r3
 8001558:	db15      	blt.n	8001586 <Timer_100us+0xde>
				Sys->InPeriod_cntr = 0;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
				Sys->Strobe = 1;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	611a      	str	r2, [r3, #16]
				Sys->DCDC_On = 0;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
				if(Rx_Parameters->N_Periods != 251){
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2bfb      	cmp	r3, #251	; 0xfb
 8001572:	d004      	beq.n	800157e <Timer_100us+0xd6>
				    Sys->Periods_cntr = Sys->Periods_cntr + 1;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	609a      	str	r2, [r3, #8]
				}
				Set_Sync_Pin();
 800157e:	f7ff fb95 	bl	8000cac <Set_Sync_Pin>
				Clr_DCDC_En_Pin();
 8001582:	f7ff fbb7 	bl	8000cf4 <Clr_DCDC_En_Pin>
			}
			if (Sys->InPeriod_cntr == Rx_Parameters->t_Strobe) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	429a      	cmp	r2, r3
 8001590:	d104      	bne.n	800159c <Timer_100us+0xf4>
				Sys->Strobe = 0;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
				Clr_Sync_Pin();
 8001598:	f7ff fb94 	bl	8000cc4 <Clr_Sync_Pin>

			}
			if (Sys->InPeriod_cntr == Rx_Parameters->t_Delay) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d104      	bne.n	80015b2 <Timer_100us+0x10a>
				Sys->DCDC_On = 1;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	615a      	str	r2, [r3, #20]
				Set_DCDC_En_Pin();
 80015ae:	f7ff fb95 	bl	8000cdc <Set_DCDC_En_Pin>
			}
			if (Sys->InPeriod_cntr == Rx_Parameters->t_Delay + Rx_Parameters->t_Active) {
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	68d9      	ldr	r1, [r3, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	440b      	add	r3, r1
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d104      	bne.n	80015ce <Timer_100us+0x126>
				Sys->DCDC_On = 0;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
				Clr_DCDC_En_Pin();
 80015ca:	f7ff fb93 	bl	8000cf4 <Clr_DCDC_En_Pin>
			}
			Sys->InPeriod_cntr = Sys->InPeriod_cntr + 1;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	605a      	str	r2, [r3, #4]

		}
		Sys->Seeds_cntr = Sys->Seeds_cntr + 1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	601a      	str	r2, [r3, #0]

	}
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200001f0 	.word	0x200001f0
 80015f0:	200001ec 	.word	0x200001ec
 80015f4:	20000560 	.word	0x20000560

080015f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fe:	f000 fc05 	bl	8001e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001602:	f000 f83f 	bl	8001684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001606:	f000 f9e9 	bl	80019dc <MX_GPIO_Init>
  MX_ADC1_Init();
 800160a:	f000 f8a5 	bl	8001758 <MX_ADC1_Init>
  MX_ADC2_Init();
 800160e:	f000 f8f5 	bl	80017fc <MX_ADC2_Init>
  MX_ADC3_Init();
 8001612:	f000 f945 	bl	80018a0 <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 8001616:	f006 fdb1 	bl	800817c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800161a:	f000 f993 	bl	8001944 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800161e:	4814      	ldr	r0, [pc, #80]	; (8001670 <main+0x78>)
 8001620:	f003 f970 	bl	8004904 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_13, 1);
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162a:	4812      	ldr	r0, [pc, #72]	; (8001674 <main+0x7c>)
 800162c:	f001 fb32 	bl	8002c94 <HAL_GPIO_WritePin>

  uint8_t State;
  State = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Initialize_System(&Sys);
 8001634:	4810      	ldr	r0, [pc, #64]	; (8001678 <main+0x80>)
 8001636:	f7ff fefb 	bl	8001430 <Initialize_System>
  Initialize_System2(&Rx_Parameters);
 800163a:	4810      	ldr	r0, [pc, #64]	; (800167c <main+0x84>)
 800163c:	f7ff ff14 	bl	8001468 <Initialize_System2>

  while (1)
  {
	  int k;
	  for(k = 0; k < 1000000; k++){
 8001640:	2300      	movs	r3, #0
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	e008      	b.n	8001658 <main+0x60>
		  k ++;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	603b      	str	r3, [r7, #0]
		  k --;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	3b01      	subs	r3, #1
 8001650:	603b      	str	r3, [r7, #0]
	  for(k = 0; k < 1000000; k++){
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4a09      	ldr	r2, [pc, #36]	; (8001680 <main+0x88>)
 800165c:	4293      	cmp	r3, r2
 800165e:	ddf2      	ble.n	8001646 <main+0x4e>
	  }
	  State = State ? 0: 1;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	bf0c      	ite	eq
 8001666:	2301      	moveq	r3, #1
 8001668:	2300      	movne	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	71fb      	strb	r3, [r7, #7]
  {
 800166e:	e7e7      	b.n	8001640 <main+0x48>
 8001670:	200005a0 	.word	0x200005a0
 8001674:	40020c00 	.word	0x40020c00
 8001678:	20000480 	.word	0x20000480
 800167c:	20000464 	.word	0x20000464
 8001680:	000f423f 	.word	0x000f423f

08001684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b094      	sub	sp, #80	; 0x50
 8001688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168a:	f107 0320 	add.w	r3, r7, #32
 800168e:	2230      	movs	r2, #48	; 0x30
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f007 fad8 	bl	8008c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <SystemClock_Config+0xcc>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	4a27      	ldr	r2, [pc, #156]	; (8001750 <SystemClock_Config+0xcc>)
 80016b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b6:	6413      	str	r3, [r2, #64]	; 0x40
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <SystemClock_Config+0xcc>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <SystemClock_Config+0xd0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a21      	ldr	r2, [pc, #132]	; (8001754 <SystemClock_Config+0xd0>)
 80016ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <SystemClock_Config+0xd0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e0:	2301      	movs	r3, #1
 80016e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ea:	2302      	movs	r3, #2
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016f4:	2304      	movs	r3, #4
 80016f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80016f8:	2390      	movs	r3, #144	; 0x90
 80016fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001700:	2306      	movs	r3, #6
 8001702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001704:	f107 0320 	add.w	r3, r7, #32
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fc5f 	bl	8003fcc <HAL_RCC_OscConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001714:	f000 f9ec 	bl	8001af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001718:	230f      	movs	r3, #15
 800171a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171c:	2302      	movs	r3, #2
 800171e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001724:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2104      	movs	r1, #4
 8001736:	4618      	mov	r0, r3
 8001738:	f002 fec0 	bl	80044bc <HAL_RCC_ClockConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001742:	f000 f9d5 	bl	8001af0 <Error_Handler>
  }
}
 8001746:	bf00      	nop
 8001748:	3750      	adds	r7, #80	; 0x50
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40007000 	.word	0x40007000

08001758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800175e:	463b      	mov	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_ADC1_Init+0x98>)
 800176c:	4a21      	ldr	r2, [pc, #132]	; (80017f4 <MX_ADC1_Init+0x9c>)
 800176e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <MX_ADC1_Init+0x98>)
 8001772:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001776:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_ADC1_Init+0x98>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_ADC1_Init+0x98>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_ADC1_Init+0x98>)
 8001786:	2200      	movs	r2, #0
 8001788:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_ADC1_Init+0x98>)
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_ADC1_Init+0x98>)
 8001794:	2200      	movs	r2, #0
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <MX_ADC1_Init+0x98>)
 800179a:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <MX_ADC1_Init+0xa0>)
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_ADC1_Init+0x98>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_ADC1_Init+0x98>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_ADC1_Init+0x98>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_ADC1_Init+0x98>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017b8:	480d      	ldr	r0, [pc, #52]	; (80017f0 <MX_ADC1_Init+0x98>)
 80017ba:	f000 fbbd 	bl	8001f38 <HAL_ADC_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017c4:	f000 f994 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_ADC1_Init+0x98>)
 80017da:	f000 fd8f 	bl	80022fc <HAL_ADC_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017e4:	f000 f984 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000498 	.word	0x20000498
 80017f4:	40012000 	.word	0x40012000
 80017f8:	0f000001 	.word	0x0f000001

080017fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001802:	463b      	mov	r3, r7
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_ADC2_Init+0x98>)
 8001810:	4a21      	ldr	r2, [pc, #132]	; (8001898 <MX_ADC2_Init+0x9c>)
 8001812:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_ADC2_Init+0x98>)
 8001816:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800181a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <MX_ADC2_Init+0x98>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_ADC2_Init+0x98>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_ADC2_Init+0x98>)
 800182a:	2200      	movs	r2, #0
 800182c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_ADC2_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_ADC2_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <MX_ADC2_Init+0x98>)
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <MX_ADC2_Init+0xa0>)
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_ADC2_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <MX_ADC2_Init+0x98>)
 800184a:	2201      	movs	r2, #1
 800184c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_ADC2_Init+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <MX_ADC2_Init+0x98>)
 8001858:	2201      	movs	r2, #1
 800185a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <MX_ADC2_Init+0x98>)
 800185e:	f000 fb6b 	bl	8001f38 <HAL_ADC_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001868:	f000 f942 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800186c:	2306      	movs	r3, #6
 800186e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001870:	2301      	movs	r3, #1
 8001872:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_ADC2_Init+0x98>)
 800187e:	f000 fd3d 	bl	80022fc <HAL_ADC_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001888:	f000 f932 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000041c 	.word	0x2000041c
 8001898:	40012100 	.word	0x40012100
 800189c:	0f000001 	.word	0x0f000001

080018a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018a6:	463b      	mov	r3, r7
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <MX_ADC3_Init+0x98>)
 80018b4:	4a21      	ldr	r2, [pc, #132]	; (800193c <MX_ADC3_Init+0x9c>)
 80018b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <MX_ADC3_Init+0x98>)
 80018ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <MX_ADC3_Init+0x98>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <MX_ADC3_Init+0x98>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <MX_ADC3_Init+0x98>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <MX_ADC3_Init+0x98>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <MX_ADC3_Init+0x98>)
 80018dc:	2200      	movs	r2, #0
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <MX_ADC3_Init+0x98>)
 80018e2:	4a17      	ldr	r2, [pc, #92]	; (8001940 <MX_ADC3_Init+0xa0>)
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_ADC3_Init+0x98>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <MX_ADC3_Init+0x98>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_ADC3_Init+0x98>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_ADC3_Init+0x98>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <MX_ADC3_Init+0x98>)
 8001902:	f000 fb19 	bl	8001f38 <HAL_ADC_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800190c:	f000 f8f0 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001910:	230b      	movs	r3, #11
 8001912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800191c:	463b      	mov	r3, r7
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_ADC3_Init+0x98>)
 8001922:	f000 fceb 	bl	80022fc <HAL_ADC_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800192c:	f000 f8e0 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200004e0 	.word	0x200004e0
 800193c:	40012200 	.word	0x40012200
 8001940:	0f000001 	.word	0x0f000001

08001944 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	463b      	mov	r3, r7
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <MX_TIM2_Init+0x94>)
 8001962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001966:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600-1;
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <MX_TIM2_Init+0x94>)
 800196a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800196e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <MX_TIM2_Init+0x94>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <MX_TIM2_Init+0x94>)
 8001978:	2201      	movs	r2, #1
 800197a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <MX_TIM2_Init+0x94>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <MX_TIM2_Init+0x94>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001988:	4813      	ldr	r0, [pc, #76]	; (80019d8 <MX_TIM2_Init+0x94>)
 800198a:	f002 ff6b 	bl	8004864 <HAL_TIM_Base_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001994:	f000 f8ac 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800199e:	f107 0308 	add.w	r3, r7, #8
 80019a2:	4619      	mov	r1, r3
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <MX_TIM2_Init+0x94>)
 80019a6:	f003 f925 	bl	8004bf4 <HAL_TIM_ConfigClockSource>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019b0:	f000 f89e 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019bc:	463b      	mov	r3, r7
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_TIM2_Init+0x94>)
 80019c2:	f003 fb41 	bl	8005048 <HAL_TIMEx_MasterConfigSynchronization>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019cc:	f000 f890 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200005a0 	.word	0x200005a0

080019dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <MX_GPIO_Init+0xb8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a26      	ldr	r2, [pc, #152]	; (8001a94 <MX_GPIO_Init+0xb8>)
 80019fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <MX_GPIO_Init+0xb8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001a68:	480b      	ldr	r0, [pc, #44]	; (8001a98 <MX_GPIO_Init+0xbc>)
 8001a6a:	f001 f913 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a6e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_GPIO_Init+0xbc>)
 8001a88:	f000 ff68 	bl	800295c <HAL_GPIO_Init>

}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020c00 	.word	0x40020c00

08001a9c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
  {
//  	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_12, Timer2_Count);;
  }
  Timer2_Count = Timer2_Count ? 0: 1;
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf0c      	ite	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	2300      	movne	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001ab6:	601a      	str	r2, [r3, #0]

  Timer_100us(&Rx_Parameters, (uint8_t*)&Rx_Buf,
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ac4:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ac6:	4809      	ldr	r0, [pc, #36]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001ac8:	f7ff fcee 	bl	80014a8 <Timer_100us>
  			&Sys, &stm32ADC, &Tx_Parameters, (uint8_t*)&Tx_Buf);


}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200001f4 	.word	0x200001f4
 8001ad8:	20000560 	.word	0x20000560
 8001adc:	20000528 	.word	0x20000528
 8001ae0:	200005f8 	.word	0x200005f8
 8001ae4:	20000480 	.word	0x20000480
 8001ae8:	200005e8 	.word	0x200005e8
 8001aec:	20000464 	.word	0x20000464

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <Error_Handler+0x8>
	...

08001afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_MspInit+0x4c>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800

08001b4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08e      	sub	sp, #56	; 0x38
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_ADC_MspInit+0x168>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d128      	bne.n	8001bc0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
 8001b72:	4b51      	ldr	r3, [pc, #324]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a50      	ldr	r2, [pc, #320]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b4e      	ldr	r3, [pc, #312]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b86:	623b      	str	r3, [r7, #32]
 8001b88:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a49      	ldr	r2, [pc, #292]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001baa:	2303      	movs	r3, #3
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4840      	ldr	r0, [pc, #256]	; (8001cbc <HAL_ADC_MspInit+0x170>)
 8001bba:	f000 fecf 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001bbe:	e074      	b.n	8001caa <HAL_ADC_MspInit+0x15e>
  else if(hadc->Instance==ADC2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a3e      	ldr	r2, [pc, #248]	; (8001cc0 <HAL_ADC_MspInit+0x174>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d142      	bne.n	8001c50 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a39      	ldr	r2, [pc, #228]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001bd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a32      	ldr	r2, [pc, #200]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c1e:	23c0      	movs	r3, #192	; 0xc0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c22:	2303      	movs	r3, #3
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4822      	ldr	r0, [pc, #136]	; (8001cbc <HAL_ADC_MspInit+0x170>)
 8001c32:	f000 fe93 	bl	800295c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c36:	2310      	movs	r3, #16
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c46:	4619      	mov	r1, r3
 8001c48:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <HAL_ADC_MspInit+0x178>)
 8001c4a:	f000 fe87 	bl	800295c <HAL_GPIO_Init>
}
 8001c4e:	e02c      	b.n	8001caa <HAL_ADC_MspInit+0x15e>
  else if(hadc->Instance==ADC3)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_ADC_MspInit+0x17c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d127      	bne.n	8001caa <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001c64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_ADC_MspInit+0x16c>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c92:	2302      	movs	r3, #2
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c96:	2303      	movs	r3, #3
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <HAL_ADC_MspInit+0x178>)
 8001ca6:	f000 fe59 	bl	800295c <HAL_GPIO_Init>
}
 8001caa:	bf00      	nop
 8001cac:	3738      	adds	r7, #56	; 0x38
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40012100 	.word	0x40012100
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	40012200 	.word	0x40012200

08001ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cdc:	d115      	bne.n	8001d0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_TIM_Base_MspInit+0x48>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	201c      	movs	r0, #28
 8001d00:	f000 fdf5 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d04:	201c      	movs	r0, #28
 8001d06:	f000 fe0e 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800

08001d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <NMI_Handler+0x4>

08001d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d22:	e7fe      	b.n	8001d22 <HardFault_Handler+0x4>

08001d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <MemManage_Handler+0x4>

08001d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2e:	e7fe      	b.n	8001d2e <BusFault_Handler+0x4>

08001d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <UsageFault_Handler+0x4>

08001d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d64:	f000 f8a4 	bl	8001eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <TIM2_IRQHandler+0x10>)
 8001d72:	f002 fe37 	bl	80049e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200005a0 	.word	0x200005a0

08001d80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <OTG_FS_IRQHandler+0x10>)
 8001d86:	f001 f8ee 	bl	8002f66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20001ae8 	.word	0x20001ae8

08001d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <SystemInit+0x20>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <SystemInit+0x20>)
 8001da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dbe:	490e      	ldr	r1, [pc, #56]	; (8001df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd4:	4c0b      	ldr	r4, [pc, #44]	; (8001e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001de2:	f7ff ffd7 	bl	8001d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de6:	f006 fefd 	bl	8008be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dea:	f7ff fc05 	bl	80015f8 <main>
  bx  lr    
 8001dee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001dfc:	08008cc4 	.word	0x08008cc4
  ldr r2, =_sbss
 8001e00:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001e04:	20001ef0 	.word	0x20001ef0

08001e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC_IRQHandler>
	...

08001e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <HAL_Init+0x40>)
 8001e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_Init+0x40>)
 8001e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_Init+0x40>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 fd4f 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3a:	200f      	movs	r0, #15
 8001e3c:	f000 f808 	bl	8001e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e40:	f7ff fe5c 	bl	8001afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023c00 	.word	0x40023c00

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x54>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_InitTick+0x58>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fd67 	bl	8002942 <HAL_SYSTICK_Config>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00e      	b.n	8001e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	d80a      	bhi.n	8001e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e84:	2200      	movs	r2, #0
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f000 fd2f 	bl	80028ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <HAL_InitTick+0x5c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000050 	.word	0x20000050
 8001ea8:	20000058 	.word	0x20000058
 8001eac:	20000054 	.word	0x20000054

08001eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000058 	.word	0x20000058
 8001ed4:	20000614 	.word	0x20000614

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000614 	.word	0x20000614

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff ffee 	bl	8001ed8 <HAL_GetTick>
 8001efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d005      	beq.n	8001f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_Delay+0x44>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f16:	bf00      	nop
 8001f18:	f7ff ffde 	bl	8001ed8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d8f7      	bhi.n	8001f18 <HAL_Delay+0x28>
  {
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000058 	.word	0x20000058

08001f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e033      	b.n	8001fb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fdf8 	bl	8001b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d118      	bne.n	8001fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f7e:	f023 0302 	bic.w	r3, r3, #2
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fad8 	bl	8002540 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fa6:	e001      	b.n	8001fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Start+0x1a>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e0b2      	b.n	8002140 <HAL_ADC_Start+0x180>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d018      	beq.n	8002022 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002000:	4b52      	ldr	r3, [pc, #328]	; (800214c <HAL_ADC_Start+0x18c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a52      	ldr	r2, [pc, #328]	; (8002150 <HAL_ADC_Start+0x190>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0c9a      	lsrs	r2, r3, #18
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002014:	e002      	b.n	800201c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	3b01      	subs	r3, #1
 800201a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f9      	bne.n	8002016 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d17a      	bne.n	8002126 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800205a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800206a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800206e:	d106      	bne.n	800207e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	f023 0206 	bic.w	r2, r3, #6
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	645a      	str	r2, [r3, #68]	; 0x44
 800207c:	e002      	b.n	8002084 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800208c:	4b31      	ldr	r3, [pc, #196]	; (8002154 <HAL_ADC_Start+0x194>)
 800208e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002098:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d12a      	bne.n	80020fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a2b      	ldr	r2, [pc, #172]	; (8002158 <HAL_ADC_Start+0x198>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d015      	beq.n	80020dc <HAL_ADC_Start+0x11c>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a29      	ldr	r2, [pc, #164]	; (800215c <HAL_ADC_Start+0x19c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d105      	bne.n	80020c6 <HAL_ADC_Start+0x106>
 80020ba:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_ADC_Start+0x194>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a25      	ldr	r2, [pc, #148]	; (8002160 <HAL_ADC_Start+0x1a0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d136      	bne.n	800213e <HAL_ADC_Start+0x17e>
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_ADC_Start+0x194>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d130      	bne.n	800213e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d129      	bne.n	800213e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	e020      	b.n	800213e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a15      	ldr	r2, [pc, #84]	; (8002158 <HAL_ADC_Start+0x198>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d11b      	bne.n	800213e <HAL_ADC_Start+0x17e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d114      	bne.n	800213e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	e00b      	b.n	800213e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f043 0210 	orr.w	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	20000050 	.word	0x20000050
 8002150:	431bde83 	.word	0x431bde83
 8002154:	40012300 	.word	0x40012300
 8002158:	40012000 	.word	0x40012000
 800215c:	40012100 	.word	0x40012100
 8002160:	40012200 	.word	0x40012200

08002164 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_ADC_Stop+0x16>
 8002176:	2302      	movs	r3, #2
 8002178:	e021      	b.n	80021be <HAL_ADC_Stop+0x5a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d109      	bne.n	80021b4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	f043 0201 	orr.w	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e6:	d113      	bne.n	8002210 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f6:	d10b      	bne.n	8002210 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e063      	b.n	80022d8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002210:	f7ff fe62 	bl	8001ed8 <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002216:	e021      	b.n	800225c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221e:	d01d      	beq.n	800225c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <HAL_ADC_PollForConversion+0x6c>
 8002226:	f7ff fe57 	bl	8001ed8 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d212      	bcs.n	800225c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b02      	cmp	r3, #2
 8002242:	d00b      	beq.n	800225c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f043 0204 	orr.w	r2, r3, #4
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e03d      	b.n	80022d8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b02      	cmp	r3, #2
 8002268:	d1d6      	bne.n	8002218 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f06f 0212 	mvn.w	r2, #18
 8002272:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d123      	bne.n	80022d6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002292:	2b00      	cmp	r3, #0
 8002294:	d11f      	bne.n	80022d6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d111      	bne.n	80022d6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d105      	bne.n	80022d6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f043 0201 	orr.w	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1c>
 8002314:	2302      	movs	r3, #2
 8002316:	e105      	b.n	8002524 <HAL_ADC_ConfigChannel+0x228>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b09      	cmp	r3, #9
 8002326:	d925      	bls.n	8002374 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68d9      	ldr	r1, [r3, #12]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	3b1e      	subs	r3, #30
 800233e:	2207      	movs	r2, #7
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43da      	mvns	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	400a      	ands	r2, r1
 800234c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68d9      	ldr	r1, [r3, #12]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	4603      	mov	r3, r0
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4403      	add	r3, r0
 8002366:	3b1e      	subs	r3, #30
 8002368:	409a      	lsls	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	e022      	b.n	80023ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6919      	ldr	r1, [r3, #16]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	b29b      	uxth	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	2207      	movs	r2, #7
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	400a      	ands	r2, r1
 8002396:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6919      	ldr	r1, [r3, #16]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4403      	add	r3, r0
 80023b0:	409a      	lsls	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d824      	bhi.n	800240c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3b05      	subs	r3, #5
 80023d4:	221f      	movs	r2, #31
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	400a      	ands	r2, r1
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	3b05      	subs	r3, #5
 80023fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	635a      	str	r2, [r3, #52]	; 0x34
 800240a:	e04c      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b0c      	cmp	r3, #12
 8002412:	d824      	bhi.n	800245e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	3b23      	subs	r3, #35	; 0x23
 8002426:	221f      	movs	r2, #31
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43da      	mvns	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	400a      	ands	r2, r1
 8002434:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	4618      	mov	r0, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3b23      	subs	r3, #35	; 0x23
 8002450:	fa00 f203 	lsl.w	r2, r0, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
 800245c:	e023      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	3b41      	subs	r3, #65	; 0x41
 8002470:	221f      	movs	r2, #31
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	400a      	ands	r2, r1
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	4618      	mov	r0, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	3b41      	subs	r3, #65	; 0x41
 800249a:	fa00 f203 	lsl.w	r2, r0, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_ADC_ConfigChannel+0x234>)
 80024a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a21      	ldr	r2, [pc, #132]	; (8002534 <HAL_ADC_ConfigChannel+0x238>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d109      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x1cc>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b12      	cmp	r3, #18
 80024ba:	d105      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a19      	ldr	r2, [pc, #100]	; (8002534 <HAL_ADC_ConfigChannel+0x238>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d123      	bne.n	800251a <HAL_ADC_ConfigChannel+0x21e>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d003      	beq.n	80024e2 <HAL_ADC_ConfigChannel+0x1e6>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b11      	cmp	r3, #17
 80024e0:	d11b      	bne.n	800251a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b10      	cmp	r3, #16
 80024f4:	d111      	bne.n	800251a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_ADC_ConfigChannel+0x23c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a10      	ldr	r2, [pc, #64]	; (800253c <HAL_ADC_ConfigChannel+0x240>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	0c9a      	lsrs	r2, r3, #18
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800250c:	e002      	b.n	8002514 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	3b01      	subs	r3, #1
 8002512:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f9      	bne.n	800250e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40012300 	.word	0x40012300
 8002534:	40012000 	.word	0x40012000
 8002538:	20000050 	.word	0x20000050
 800253c:	431bde83 	.word	0x431bde83

08002540 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002548:	4b79      	ldr	r3, [pc, #484]	; (8002730 <ADC_Init+0x1f0>)
 800254a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	431a      	orrs	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	021a      	lsls	r2, r3, #8
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6899      	ldr	r1, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	4a58      	ldr	r2, [pc, #352]	; (8002734 <ADC_Init+0x1f4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d022      	beq.n	800261e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6899      	ldr	r1, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6899      	ldr	r1, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	e00f      	b.n	800263e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800262c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800263c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0202 	bic.w	r2, r2, #2
 800264c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	7e1b      	ldrb	r3, [r3, #24]
 8002658:	005a      	lsls	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01b      	beq.n	80026a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800267a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800268a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6859      	ldr	r1, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	3b01      	subs	r3, #1
 8002698:	035a      	lsls	r2, r3, #13
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	e007      	b.n	80026b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	051a      	lsls	r2, r3, #20
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6899      	ldr	r1, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026f6:	025a      	lsls	r2, r3, #9
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800270e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6899      	ldr	r1, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	029a      	lsls	r2, r3, #10
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	40012300 	.word	0x40012300
 8002734:	0f000001 	.word	0x0f000001

08002738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276a:	4a04      	ldr	r2, [pc, #16]	; (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60d3      	str	r3, [r2, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <__NVIC_GetPriorityGrouping+0x18>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	f003 0307 	and.w	r3, r3, #7
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db0b      	blt.n	80027c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4907      	ldr	r1, [pc, #28]	; (80027d4 <__NVIC_EnableIRQ+0x38>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2001      	movs	r0, #1
 80027be:	fa00 f202 	lsl.w	r2, r0, r2
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000e100 	.word	0xe000e100

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	; (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	; (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	; 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a4:	d301      	bcc.n	80028aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00f      	b.n	80028ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <SysTick_Config+0x40>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b2:	210f      	movs	r1, #15
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f7ff ff8e 	bl	80027d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <SysTick_Config+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <SysTick_Config+0x40>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff29 	bl	8002738 <__NVIC_SetPriorityGrouping>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002900:	f7ff ff3e 	bl	8002780 <__NVIC_GetPriorityGrouping>
 8002904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff ff8e 	bl	800282c <NVIC_EncodePriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff5d 	bl	80027d8 <__NVIC_SetPriority>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff31 	bl	800279c <__NVIC_EnableIRQ>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ffa2 	bl	8002894 <SysTick_Config>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e16b      	b.n	8002c50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002978:	2201      	movs	r2, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	429a      	cmp	r2, r3
 8002992:	f040 815a 	bne.w	8002c4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d005      	beq.n	80029ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d130      	bne.n	8002a10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	2203      	movs	r2, #3
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e4:	2201      	movs	r2, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 0201 	and.w	r2, r3, #1
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d017      	beq.n	8002a4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d123      	bne.n	8002aa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	69b9      	ldr	r1, [r7, #24]
 8002a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2203      	movs	r2, #3
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0203 	and.w	r2, r3, #3
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80b4 	beq.w	8002c4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b60      	ldr	r3, [pc, #384]	; (8002c68 <HAL_GPIO_Init+0x30c>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	4a5f      	ldr	r2, [pc, #380]	; (8002c68 <HAL_GPIO_Init+0x30c>)
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af0:	6453      	str	r3, [r2, #68]	; 0x44
 8002af2:	4b5d      	ldr	r3, [pc, #372]	; (8002c68 <HAL_GPIO_Init+0x30c>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afe:	4a5b      	ldr	r2, [pc, #364]	; (8002c6c <HAL_GPIO_Init+0x310>)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3302      	adds	r3, #2
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a52      	ldr	r2, [pc, #328]	; (8002c70 <HAL_GPIO_Init+0x314>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d02b      	beq.n	8002b82 <HAL_GPIO_Init+0x226>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a51      	ldr	r2, [pc, #324]	; (8002c74 <HAL_GPIO_Init+0x318>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d025      	beq.n	8002b7e <HAL_GPIO_Init+0x222>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a50      	ldr	r2, [pc, #320]	; (8002c78 <HAL_GPIO_Init+0x31c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01f      	beq.n	8002b7a <HAL_GPIO_Init+0x21e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4f      	ldr	r2, [pc, #316]	; (8002c7c <HAL_GPIO_Init+0x320>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d019      	beq.n	8002b76 <HAL_GPIO_Init+0x21a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4e      	ldr	r2, [pc, #312]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d013      	beq.n	8002b72 <HAL_GPIO_Init+0x216>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4d      	ldr	r2, [pc, #308]	; (8002c84 <HAL_GPIO_Init+0x328>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00d      	beq.n	8002b6e <HAL_GPIO_Init+0x212>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4c      	ldr	r2, [pc, #304]	; (8002c88 <HAL_GPIO_Init+0x32c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d007      	beq.n	8002b6a <HAL_GPIO_Init+0x20e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4b      	ldr	r2, [pc, #300]	; (8002c8c <HAL_GPIO_Init+0x330>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <HAL_GPIO_Init+0x20a>
 8002b62:	2307      	movs	r3, #7
 8002b64:	e00e      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b66:	2308      	movs	r3, #8
 8002b68:	e00c      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b6a:	2306      	movs	r3, #6
 8002b6c:	e00a      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b6e:	2305      	movs	r3, #5
 8002b70:	e008      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b72:	2304      	movs	r3, #4
 8002b74:	e006      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b76:	2303      	movs	r3, #3
 8002b78:	e004      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e002      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_GPIO_Init+0x228>
 8002b82:	2300      	movs	r3, #0
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	f002 0203 	and.w	r2, r2, #3
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	4093      	lsls	r3, r2
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b94:	4935      	ldr	r1, [pc, #212]	; (8002c6c <HAL_GPIO_Init+0x310>)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc6:	4a32      	ldr	r2, [pc, #200]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bcc:	4b30      	ldr	r3, [pc, #192]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bf0:	4a27      	ldr	r2, [pc, #156]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bf6:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c44:	4a12      	ldr	r2, [pc, #72]	; (8002c90 <HAL_GPIO_Init+0x334>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	f67f ae90 	bls.w	8002978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40021400 	.word	0x40021400
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	40021c00 	.word	0x40021c00
 8002c90:	40013c00 	.word	0x40013c00

08002c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca4:	787b      	ldrb	r3, [r7, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cb0:	e003      	b.n	8002cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	041a      	lsls	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc8:	b08f      	sub	sp, #60	; 0x3c
 8002cca:	af0a      	add	r7, sp, #40	; 0x28
 8002ccc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e10f      	b.n	8002ef8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f005 fc62 	bl	80085bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f002 fb3b 	bl	8005392 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	603b      	str	r3, [r7, #0]
 8002d22:	687e      	ldr	r6, [r7, #4]
 8002d24:	466d      	mov	r5, sp
 8002d26:	f106 0410 	add.w	r4, r6, #16
 8002d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d36:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d3a:	1d33      	adds	r3, r6, #4
 8002d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d3e:	6838      	ldr	r0, [r7, #0]
 8002d40:	f002 fa12 	bl	8005168 <USB_CoreInit>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0d0      	b.n	8002ef8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f002 fb29 	bl	80053b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
 8002d66:	e04a      	b.n	8002dfe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	333d      	adds	r3, #61	; 0x3d
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	333c      	adds	r3, #60	; 0x3c
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	b298      	uxth	r0, r3
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3342      	adds	r3, #66	; 0x42
 8002da4:	4602      	mov	r2, r0
 8002da6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002da8:	7bfa      	ldrb	r2, [r7, #15]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	333f      	adds	r3, #63	; 0x3f
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dbc:	7bfa      	ldrb	r2, [r7, #15]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3344      	adds	r3, #68	; 0x44
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	3348      	adds	r3, #72	; 0x48
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	3350      	adds	r3, #80	; 0x50
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d3af      	bcc.n	8002d68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]
 8002e0c:	e044      	b.n	8002e98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e0e:	7bfa      	ldrb	r2, [r7, #15]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	3301      	adds	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d3b5      	bcc.n	8002e0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	687e      	ldr	r6, [r7, #4]
 8002eaa:	466d      	mov	r5, sp
 8002eac:	f106 0410 	add.w	r4, r6, #16
 8002eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ebc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ec0:	1d33      	adds	r3, r6, #4
 8002ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec4:	6838      	ldr	r0, [r7, #0]
 8002ec6:	f002 fac1 	bl	800544c <USB_DevInit>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e00d      	b.n	8002ef8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 fb3d 	bl	8006570 <USB_DevDisconnect>

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_PCD_Start+0x1c>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e020      	b.n	8002f5e <HAL_PCD_Start+0x5e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d109      	bne.n	8002f40 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d005      	beq.n	8002f40 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f002 fa13 	bl	8005370 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f003 faed 	bl	800652e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f66:	b590      	push	{r4, r7, lr}
 8002f68:	b08d      	sub	sp, #52	; 0x34
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 fbab 	bl	80066d8 <USB_GetMode>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f040 839d 	bne.w	80036c4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 fb0f 	bl	80065b2 <USB_ReadInterrupts>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8393 	beq.w	80036c2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f003 fb06 	bl	80065b2 <USB_ReadInterrupts>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d107      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f002 0202 	and.w	r2, r2, #2
 8002fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f003 faf4 	bl	80065b2 <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d161      	bne.n	8003098 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0210 	bic.w	r2, r2, #16
 8002fe2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	3304      	adds	r3, #4
 8003002:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	0c5b      	lsrs	r3, r3, #17
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	2b02      	cmp	r3, #2
 800300e:	d124      	bne.n	800305a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d035      	beq.n	8003088 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003026:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	6a38      	ldr	r0, [r7, #32]
 8003030:	f003 f92b 	bl	800628a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003040:	441a      	add	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003052:	441a      	add	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	619a      	str	r2, [r3, #24]
 8003058:	e016      	b.n	8003088 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	0c5b      	lsrs	r3, r3, #17
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	2b06      	cmp	r3, #6
 8003064:	d110      	bne.n	8003088 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800306c:	2208      	movs	r2, #8
 800306e:	4619      	mov	r1, r3
 8003070:	6a38      	ldr	r0, [r7, #32]
 8003072:	f003 f90a 	bl	800628a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003082:	441a      	add	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0210 	orr.w	r2, r2, #16
 8003096:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fa88 	bl	80065b2 <USB_ReadInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030ac:	d16e      	bne.n	800318c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f003 fa8e 	bl	80065d8 <USB_ReadDevAllOutEpInterrupt>
 80030bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030be:	e062      	b.n	8003186 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d057      	beq.n	800317a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f003 fab3 	bl	8006640 <USB_ReadDevOutEPInterrupt>
 80030da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00c      	beq.n	8003100 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f2:	461a      	mov	r2, r3
 80030f4:	2301      	movs	r3, #1
 80030f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fdb0 	bl	8003c60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003116:	461a      	mov	r2, r3
 8003118:	2308      	movs	r3, #8
 800311a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800311c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 feaa 	bl	8003e78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	4413      	add	r3, r2
 8003136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313a:	461a      	mov	r2, r3
 800313c:	2310      	movs	r3, #16
 800313e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003156:	461a      	mov	r2, r3
 8003158:	2320      	movs	r3, #32
 800315a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003172:	461a      	mov	r2, r3
 8003174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003178:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	3301      	adds	r3, #1
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d199      	bne.n	80030c0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f003 fa0e 	bl	80065b2 <USB_ReadInterrupts>
 8003196:	4603      	mov	r3, r0
 8003198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800319c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031a0:	f040 80c0 	bne.w	8003324 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f003 fa2f 	bl	800660c <USB_ReadDevAllInEpInterrupt>
 80031ae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80031b4:	e0b2      	b.n	800331c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80a7 	beq.w	8003310 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f003 fa55 	bl	800667c <USB_ReadDevInEPInterrupt>
 80031d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d057      	beq.n	800328e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	2201      	movs	r2, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69f9      	ldr	r1, [r7, #28]
 80031fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031fe:	4013      	ands	r3, r2
 8003200:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320e:	461a      	mov	r2, r3
 8003210:	2301      	movs	r3, #1
 8003212:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d132      	bne.n	8003282 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	3348      	adds	r3, #72	; 0x48
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4403      	add	r3, r0
 800323c:	3344      	adds	r3, #68	; 0x44
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4419      	add	r1, r3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4403      	add	r3, r0
 8003250:	3348      	adds	r3, #72	; 0x48
 8003252:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	2b00      	cmp	r3, #0
 8003258:	d113      	bne.n	8003282 <HAL_PCD_IRQHandler+0x31c>
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	3350      	adds	r3, #80	; 0x50
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d108      	bne.n	8003282 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800327a:	461a      	mov	r2, r3
 800327c:	2101      	movs	r1, #1
 800327e:	f003 fa5d 	bl	800673c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	b2db      	uxtb	r3, r3
 8003286:	4619      	mov	r1, r3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f005 fa18 	bl	80086be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a4:	461a      	mov	r2, r3
 80032a6:	2308      	movs	r3, #8
 80032a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c0:	461a      	mov	r2, r3
 80032c2:	2310      	movs	r3, #16
 80032c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032dc:	461a      	mov	r2, r3
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f8:	461a      	mov	r2, r3
 80032fa:	2302      	movs	r3, #2
 80032fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fc1b 	bl	8003b46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	3301      	adds	r3, #1
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	2b00      	cmp	r3, #0
 8003320:	f47f af49 	bne.w	80031b6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f003 f942 	bl	80065b2 <USB_ReadInterrupts>
 800332e:	4603      	mov	r3, r0
 8003330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003338:	d122      	bne.n	8003380 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003354:	2b01      	cmp	r3, #1
 8003356:	d108      	bne.n	800336a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003360:	2100      	movs	r1, #0
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fe26 	bl	8003fb4 <HAL_PCDEx_LPM_Callback>
 8003368:	e002      	b.n	8003370 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f005 fa1e 	bl	80087ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800337e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f003 f914 	bl	80065b2 <USB_ReadInterrupts>
 800338a:	4603      	mov	r3, r0
 800338c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	d112      	bne.n	80033bc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d102      	bne.n	80033ac <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f005 f9da 	bl	8008760 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80033ba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f003 f8f6 	bl	80065b2 <USB_ReadInterrupts>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	f040 80c7 	bne.w	8003562 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2110      	movs	r1, #16
 80033ee:	4618      	mov	r0, r3
 80033f0:	f002 f990 	bl	8005714 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f4:	2300      	movs	r3, #0
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f8:	e056      	b.n	80034a8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003406:	461a      	mov	r2, r3
 8003408:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800340c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341e:	0151      	lsls	r1, r2, #5
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	440a      	add	r2, r1
 8003424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003428:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800342c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343e:	0151      	lsls	r1, r2, #5
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	440a      	add	r2, r1
 8003444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003448:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800344c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345a:	461a      	mov	r2, r3
 800345c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003460:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003472:	0151      	lsls	r1, r2, #5
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	440a      	add	r2, r1
 8003478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800347c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003480:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003492:	0151      	lsls	r1, r2, #5
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	440a      	add	r2, r1
 8003498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800349c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	3301      	adds	r3, #1
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d3a3      	bcc.n	80033fa <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d016      	beq.n	80034fc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d8:	69fa      	ldr	r2, [r7, #28]
 80034da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034de:	f043 030b 	orr.w	r3, r3, #11
 80034e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f4:	f043 030b 	orr.w	r3, r3, #11
 80034f8:	6453      	str	r3, [r2, #68]	; 0x44
 80034fa:	e015      	b.n	8003528 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800350a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800350e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003512:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003522:	f043 030b 	orr.w	r3, r3, #11
 8003526:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003536:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800353a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800354c:	461a      	mov	r2, r3
 800354e:	f003 f8f5 	bl	800673c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003560:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f003 f823 	bl	80065b2 <USB_ReadInterrupts>
 800356c:	4603      	mov	r3, r0
 800356e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003576:	d124      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f003 f8b9 	bl	80066f4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f002 f921 	bl	80057ce <USB_GetDevSpeed>
 800358c:	4603      	mov	r3, r0
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681c      	ldr	r4, [r3, #0]
 8003598:	f001 f958 	bl	800484c <HAL_RCC_GetHCLKFreq>
 800359c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	4620      	mov	r0, r4
 80035a8:	f001 fe40 	bl	800522c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f005 f8ae 	bl	800870e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80035c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f002 fff3 	bl	80065b2 <USB_ReadInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d10a      	bne.n	80035ec <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f005 f88b 	bl	80086f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f002 0208 	and.w	r2, r2, #8
 80035ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f002 ffde 	bl	80065b2 <USB_ReadInterrupts>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003600:	d10f      	bne.n	8003622 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	b2db      	uxtb	r3, r3
 800360a:	4619      	mov	r1, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f005 f8ed 	bl	80087ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003620:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f002 ffc3 	bl	80065b2 <USB_ReadInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003636:	d10f      	bne.n	8003658 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	b2db      	uxtb	r3, r3
 8003640:	4619      	mov	r1, r3
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f005 f8c0 	bl	80087c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f002 ffa8 	bl	80065b2 <USB_ReadInterrupts>
 8003662:	4603      	mov	r3, r0
 8003664:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d10a      	bne.n	8003684 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f005 f8ce 	bl	8008810 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f002 ff92 	bl	80065b2 <USB_ReadInterrupts>
 800368e:	4603      	mov	r3, r0
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b04      	cmp	r3, #4
 8003696:	d115      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f005 f8be 	bl	800882c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6859      	ldr	r1, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
 80036c0:	e000      	b.n	80036c4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80036c2:	bf00      	nop
    }
  }
}
 80036c4:	3734      	adds	r7, #52	; 0x34
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd90      	pop	{r4, r7, pc}

080036ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	460b      	mov	r3, r1
 80036d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_PCD_SetAddress+0x1a>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e013      	b.n	800370c <HAL_PCD_SetAddress+0x42>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	78fa      	ldrb	r2, [r7, #3]
 80036fa:	4611      	mov	r1, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f002 fef0 	bl	80064e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	4608      	mov	r0, r1
 800371e:	4611      	mov	r1, r2
 8003720:	461a      	mov	r2, r3
 8003722:	4603      	mov	r3, r0
 8003724:	70fb      	strb	r3, [r7, #3]
 8003726:	460b      	mov	r3, r1
 8003728:	803b      	strh	r3, [r7, #0]
 800372a:	4613      	mov	r3, r2
 800372c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003732:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003736:	2b00      	cmp	r3, #0
 8003738:	da0f      	bge.n	800375a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3338      	adds	r3, #56	; 0x38
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	3304      	adds	r3, #4
 8003750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	705a      	strb	r2, [r3, #1]
 8003758:	e00f      	b.n	800377a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	f003 020f 	and.w	r2, r3, #15
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4413      	add	r3, r2
 8003770:	3304      	adds	r3, #4
 8003772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	b2da      	uxtb	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003786:	883a      	ldrh	r2, [r7, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	78ba      	ldrb	r2, [r7, #2]
 8003790:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	785b      	ldrb	r3, [r3, #1]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037a4:	78bb      	ldrb	r3, [r7, #2]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d102      	bne.n	80037b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_PCD_EP_Open+0xaa>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e00e      	b.n	80037dc <HAL_PCD_EP_Open+0xc8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68f9      	ldr	r1, [r7, #12]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f002 f823 	bl	8005818 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80037da:	7afb      	ldrb	r3, [r7, #11]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	da0f      	bge.n	8003818 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	f003 020f 	and.w	r2, r3, #15
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	3338      	adds	r3, #56	; 0x38
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	3304      	adds	r3, #4
 800380e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	705a      	strb	r2, [r3, #1]
 8003816:	e00f      	b.n	8003838 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	f003 020f 	and.w	r2, r3, #15
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	3304      	adds	r3, #4
 8003830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_PCD_EP_Close+0x6e>
 800384e:	2302      	movs	r3, #2
 8003850:	e00e      	b.n	8003870 <HAL_PCD_EP_Close+0x8c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68f9      	ldr	r1, [r7, #12]
 8003860:	4618      	mov	r0, r3
 8003862:	f002 f861 	bl	8005928 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	460b      	mov	r3, r1
 8003886:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003888:	7afb      	ldrb	r3, [r7, #11]
 800388a:	f003 020f 	and.w	r2, r3, #15
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4413      	add	r3, r2
 800389e:	3304      	adds	r3, #4
 80038a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2200      	movs	r2, #0
 80038b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2200      	movs	r2, #0
 80038b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ba:	7afb      	ldrb	r3, [r7, #11]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d102      	bne.n	80038d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038d4:	7afb      	ldrb	r3, [r7, #11]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	6979      	ldr	r1, [r7, #20]
 80038ec:	f002 fb3c 	bl	8005f68 <USB_EP0StartXfer>
 80038f0:	e008      	b.n	8003904 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	6979      	ldr	r1, [r7, #20]
 8003900:	f002 f8ee 	bl	8005ae0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	f003 020f 	and.w	r2, r3, #15
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003930:	681b      	ldr	r3, [r3, #0]
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b086      	sub	sp, #24
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
 800394a:	460b      	mov	r3, r1
 800394c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800394e:	7afb      	ldrb	r3, [r7, #11]
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	3338      	adds	r3, #56	; 0x38
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4413      	add	r3, r2
 8003962:	3304      	adds	r3, #4
 8003964:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2200      	movs	r2, #0
 8003976:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2201      	movs	r2, #1
 800397c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800397e:	7afb      	ldrb	r3, [r7, #11]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	b2da      	uxtb	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d102      	bne.n	8003998 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003998:	7afb      	ldrb	r3, [r7, #11]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	6979      	ldr	r1, [r7, #20]
 80039b0:	f002 fada 	bl	8005f68 <USB_EP0StartXfer>
 80039b4:	e008      	b.n	80039c8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	6979      	ldr	r1, [r7, #20]
 80039c4:	f002 f88c 	bl	8005ae0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	f003 020f 	and.w	r2, r3, #15
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d901      	bls.n	80039f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e050      	b.n	8003a92 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	da0f      	bge.n	8003a18 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	f003 020f 	and.w	r2, r3, #15
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	3338      	adds	r3, #56	; 0x38
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	705a      	strb	r2, [r3, #1]
 8003a16:	e00d      	b.n	8003a34 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_PCD_EP_SetStall+0x82>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e01e      	b.n	8003a92 <HAL_PCD_EP_SetStall+0xc0>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68f9      	ldr	r1, [r7, #12]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f002 fc69 	bl	800633a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	b2d9      	uxtb	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a82:	461a      	mov	r2, r3
 8003a84:	f002 fe5a 	bl	800673c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	f003 020f 	and.w	r2, r3, #15
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d901      	bls.n	8003ab8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e042      	b.n	8003b3e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	da0f      	bge.n	8003ae0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	f003 020f 	and.w	r2, r3, #15
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	3338      	adds	r3, #56	; 0x38
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	705a      	strb	r2, [r3, #1]
 8003ade:	e00f      	b.n	8003b00 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	f003 020f 	and.w	r2, r3, #15
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	3304      	adds	r3, #4
 8003af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_PCD_EP_ClrStall+0x86>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e00e      	b.n	8003b3e <HAL_PCD_EP_ClrStall+0xa4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68f9      	ldr	r1, [r7, #12]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f002 fc71 	bl	8006416 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b08a      	sub	sp, #40	; 0x28
 8003b4a:	af02      	add	r7, sp, #8
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	3338      	adds	r3, #56	; 0x38
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d901      	bls.n	8003b7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e06c      	b.n	8003c58 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d902      	bls.n	8003b9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3303      	adds	r3, #3
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ba2:	e02b      	b.n	8003bfc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d902      	bls.n	8003bc0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	3303      	adds	r3, #3
 8003bc4:	089b      	lsrs	r3, r3, #2
 8003bc6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	68d9      	ldr	r1, [r3, #12]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	4603      	mov	r3, r0
 8003bde:	6978      	ldr	r0, [r7, #20]
 8003be0:	f002 fb15 	bl	800620e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	441a      	add	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	441a      	add	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d809      	bhi.n	8003c26 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d203      	bcs.n	8003c26 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1be      	bne.n	8003ba4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d811      	bhi.n	8003c56 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	2201      	movs	r2, #1
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	6939      	ldr	r1, [r7, #16]
 8003c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c52:	4013      	ands	r3, r2
 8003c54:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3720      	adds	r7, #32
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	333c      	adds	r3, #60	; 0x3c
 8003c78:	3304      	adds	r3, #4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	f040 80a0 	bne.w	8003dd8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d015      	beq.n	8003cce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a72      	ldr	r2, [pc, #456]	; (8003e70 <PCD_EP_OutXfrComplete_int+0x210>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	f240 80dd 	bls.w	8003e66 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80d7 	beq.w	8003e66 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cca:	6093      	str	r3, [r2, #8]
 8003ccc:	e0cb      	b.n	8003e66 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d009      	beq.n	8003cec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	6093      	str	r3, [r2, #8]
 8003cea:	e0bc      	b.n	8003e66 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f040 80b7 	bne.w	8003e66 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a5d      	ldr	r2, [pc, #372]	; (8003e70 <PCD_EP_OutXfrComplete_int+0x210>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d90f      	bls.n	8003d20 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d16:	461a      	mov	r2, r3
 8003d18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d1c:	6093      	str	r3, [r2, #8]
 8003d1e:	e0a2      	b.n	8003e66 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d32:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	0159      	lsls	r1, r3, #5
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	440b      	add	r3, r1
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003d46:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4403      	add	r3, r0
 8003d56:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d5a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d6e:	6819      	ldr	r1, [r3, #0]
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4403      	add	r3, r0
 8003d7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4419      	add	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4403      	add	r3, r0
 8003d94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d98:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d114      	bne.n	8003dca <PCD_EP_OutXfrComplete_int+0x16a>
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d108      	bne.n	8003dca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	f002 fcb9 	bl	800673c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f004 fc59 	bl	8008688 <HAL_PCD_DataOutStageCallback>
 8003dd6:	e046      	b.n	8003e66 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4a26      	ldr	r2, [pc, #152]	; (8003e74 <PCD_EP_OutXfrComplete_int+0x214>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d124      	bne.n	8003e2a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df6:	461a      	mov	r2, r3
 8003df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfc:	6093      	str	r3, [r2, #8]
 8003dfe:	e032      	b.n	8003e66 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 0320 	and.w	r3, r3, #32
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e16:	461a      	mov	r2, r3
 8003e18:	2320      	movs	r3, #32
 8003e1a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f004 fc30 	bl	8008688 <HAL_PCD_DataOutStageCallback>
 8003e28:	e01d      	b.n	8003e66 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d114      	bne.n	8003e5a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d108      	bne.n	8003e5a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e52:	461a      	mov	r2, r3
 8003e54:	2100      	movs	r1, #0
 8003e56:	f002 fc71 	bl	800673c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f004 fc11 	bl	8008688 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	4f54300a 	.word	0x4f54300a
 8003e74:	4f54310a 	.word	0x4f54310a

08003e78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	333c      	adds	r3, #60	; 0x3c
 8003e90:	3304      	adds	r3, #4
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a15      	ldr	r2, [pc, #84]	; (8003f00 <PCD_EP_OutSetupPacket_int+0x88>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d90e      	bls.n	8003ecc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d009      	beq.n	8003ecc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f004 fbc9 	bl	8008664 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d90c      	bls.n	8003ef4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d108      	bne.n	8003ef4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003eec:	461a      	mov	r2, r3
 8003eee:	2101      	movs	r1, #1
 8003ef0:	f002 fc24 	bl	800673c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	4f54300a 	.word	0x4f54300a

08003f04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	70fb      	strb	r3, [r7, #3]
 8003f10:	4613      	mov	r3, r2
 8003f12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d107      	bne.n	8003f32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f22:	883b      	ldrh	r3, [r7, #0]
 8003f24:	0419      	lsls	r1, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f30:	e028      	b.n	8003f84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f40:	2300      	movs	r3, #0
 8003f42:	73fb      	strb	r3, [r7, #15]
 8003f44:	e00d      	b.n	8003f62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	3340      	adds	r3, #64	; 0x40
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	4413      	add	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
 8003f62:	7bfa      	ldrb	r2, [r7, #15]
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d3ec      	bcc.n	8003f46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f6c:	883b      	ldrh	r3, [r7, #0]
 8003f6e:	0418      	lsls	r0, r3, #16
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	4302      	orrs	r2, r0
 8003f7c:	3340      	adds	r3, #64	; 0x40
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	887a      	ldrh	r2, [r7, #2]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e264      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d075      	beq.n	80040d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fea:	4ba3      	ldr	r3, [pc, #652]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d00c      	beq.n	8004010 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff6:	4ba0      	ldr	r3, [pc, #640]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d112      	bne.n	8004028 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004002:	4b9d      	ldr	r3, [pc, #628]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800400e:	d10b      	bne.n	8004028 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	4b99      	ldr	r3, [pc, #612]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d05b      	beq.n	80040d4 <HAL_RCC_OscConfig+0x108>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d157      	bne.n	80040d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e23f      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d106      	bne.n	8004040 <HAL_RCC_OscConfig+0x74>
 8004032:	4b91      	ldr	r3, [pc, #580]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a90      	ldr	r2, [pc, #576]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e01d      	b.n	800407c <HAL_RCC_OscConfig+0xb0>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x98>
 800404a:	4b8b      	ldr	r3, [pc, #556]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a8a      	ldr	r2, [pc, #552]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a87      	ldr	r2, [pc, #540]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e00b      	b.n	800407c <HAL_RCC_OscConfig+0xb0>
 8004064:	4b84      	ldr	r3, [pc, #528]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a83      	ldr	r2, [pc, #524]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800406a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	4b81      	ldr	r3, [pc, #516]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a80      	ldr	r2, [pc, #512]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d013      	beq.n	80040ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fd ff28 	bl	8001ed8 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800408c:	f7fd ff24 	bl	8001ed8 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	; 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e204      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b76      	ldr	r3, [pc, #472]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0xc0>
 80040aa:	e014      	b.n	80040d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fd ff14 	bl	8001ed8 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b4:	f7fd ff10 	bl	8001ed8 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	; 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e1f0      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c6:	4b6c      	ldr	r3, [pc, #432]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0xe8>
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d063      	beq.n	80041aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040e2:	4b65      	ldr	r3, [pc, #404]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ee:	4b62      	ldr	r3, [pc, #392]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d11c      	bne.n	8004134 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040fa:	4b5f      	ldr	r3, [pc, #380]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d116      	bne.n	8004134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004106:	4b5c      	ldr	r3, [pc, #368]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_RCC_OscConfig+0x152>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d001      	beq.n	800411e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e1c4      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411e:	4b56      	ldr	r3, [pc, #344]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4952      	ldr	r1, [pc, #328]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004132:	e03a      	b.n	80041aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800413c:	4b4f      	ldr	r3, [pc, #316]	; (800427c <HAL_RCC_OscConfig+0x2b0>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004142:	f7fd fec9 	bl	8001ed8 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800414a:	f7fd fec5 	bl	8001ed8 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1a5      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415c:	4b46      	ldr	r3, [pc, #280]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004168:	4b43      	ldr	r3, [pc, #268]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4940      	ldr	r1, [pc, #256]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	4313      	orrs	r3, r2
 800417a:	600b      	str	r3, [r1, #0]
 800417c:	e015      	b.n	80041aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800417e:	4b3f      	ldr	r3, [pc, #252]	; (800427c <HAL_RCC_OscConfig+0x2b0>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fd fea8 	bl	8001ed8 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418c:	f7fd fea4 	bl	8001ed8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e184      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419e:	4b36      	ldr	r3, [pc, #216]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d030      	beq.n	8004218 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041be:	4b30      	ldr	r3, [pc, #192]	; (8004280 <HAL_RCC_OscConfig+0x2b4>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fd fe88 	bl	8001ed8 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fd fe84 	bl	8001ed8 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e164      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041de:	4b26      	ldr	r3, [pc, #152]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x200>
 80041ea:	e015      	b.n	8004218 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ec:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_RCC_OscConfig+0x2b4>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f2:	f7fd fe71 	bl	8001ed8 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041fa:	f7fd fe6d 	bl	8001ed8 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e14d      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800420c:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800420e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f0      	bne.n	80041fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80a0 	beq.w	8004366 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004226:	2300      	movs	r3, #0
 8004228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10f      	bne.n	8004256 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	4a0e      	ldr	r2, [pc, #56]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004244:	6413      	str	r3, [r2, #64]	; 0x40
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004252:	2301      	movs	r3, #1
 8004254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_OscConfig+0x2b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d121      	bne.n	80042a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_RCC_OscConfig+0x2b8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a07      	ldr	r2, [pc, #28]	; (8004284 <HAL_RCC_OscConfig+0x2b8>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426e:	f7fd fe33 	bl	8001ed8 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	e011      	b.n	800429a <HAL_RCC_OscConfig+0x2ce>
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800
 800427c:	42470000 	.word	0x42470000
 8004280:	42470e80 	.word	0x42470e80
 8004284:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004288:	f7fd fe26 	bl	8001ed8 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e106      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429a:	4b85      	ldr	r3, [pc, #532]	; (80044b0 <HAL_RCC_OscConfig+0x4e4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d106      	bne.n	80042bc <HAL_RCC_OscConfig+0x2f0>
 80042ae:	4b81      	ldr	r3, [pc, #516]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	4a80      	ldr	r2, [pc, #512]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ba:	e01c      	b.n	80042f6 <HAL_RCC_OscConfig+0x32a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2b05      	cmp	r3, #5
 80042c2:	d10c      	bne.n	80042de <HAL_RCC_OscConfig+0x312>
 80042c4:	4b7b      	ldr	r3, [pc, #492]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	4a7a      	ldr	r2, [pc, #488]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042ca:	f043 0304 	orr.w	r3, r3, #4
 80042ce:	6713      	str	r3, [r2, #112]	; 0x70
 80042d0:	4b78      	ldr	r3, [pc, #480]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	4a77      	ldr	r2, [pc, #476]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6713      	str	r3, [r2, #112]	; 0x70
 80042dc:	e00b      	b.n	80042f6 <HAL_RCC_OscConfig+0x32a>
 80042de:	4b75      	ldr	r3, [pc, #468]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4a74      	ldr	r2, [pc, #464]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ea:	4b72      	ldr	r3, [pc, #456]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	4a71      	ldr	r2, [pc, #452]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80042f0:	f023 0304 	bic.w	r3, r3, #4
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d015      	beq.n	800432a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fe:	f7fd fdeb 	bl	8001ed8 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004304:	e00a      	b.n	800431c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004306:	f7fd fde7 	bl	8001ed8 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f241 3288 	movw	r2, #5000	; 0x1388
 8004314:	4293      	cmp	r3, r2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e0c5      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431c:	4b65      	ldr	r3, [pc, #404]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ee      	beq.n	8004306 <HAL_RCC_OscConfig+0x33a>
 8004328:	e014      	b.n	8004354 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432a:	f7fd fdd5 	bl	8001ed8 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004330:	e00a      	b.n	8004348 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7fd fdd1 	bl	8001ed8 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004340:	4293      	cmp	r3, r2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e0af      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004348:	4b5a      	ldr	r3, [pc, #360]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1ee      	bne.n	8004332 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d105      	bne.n	8004366 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435a:	4b56      	ldr	r3, [pc, #344]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	4a55      	ldr	r2, [pc, #340]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 8004360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004364:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 809b 	beq.w	80044a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004370:	4b50      	ldr	r3, [pc, #320]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b08      	cmp	r3, #8
 800437a:	d05c      	beq.n	8004436 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d141      	bne.n	8004408 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004384:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <HAL_RCC_OscConfig+0x4ec>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438a:	f7fd fda5 	bl	8001ed8 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004392:	f7fd fda1 	bl	8001ed8 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e081      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a4:	4b43      	ldr	r3, [pc, #268]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f0      	bne.n	8004392 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	019b      	lsls	r3, r3, #6
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	3b01      	subs	r3, #1
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	061b      	lsls	r3, r3, #24
 80043d4:	4937      	ldr	r1, [pc, #220]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043da:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <HAL_RCC_OscConfig+0x4ec>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fd fd7a 	bl	8001ed8 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fd fd76 	bl	8001ed8 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e056      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fa:	4b2e      	ldr	r3, [pc, #184]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0x41c>
 8004406:	e04e      	b.n	80044a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004408:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <HAL_RCC_OscConfig+0x4ec>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440e:	f7fd fd63 	bl	8001ed8 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004416:	f7fd fd5f 	bl	8001ed8 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e03f      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004428:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f0      	bne.n	8004416 <HAL_RCC_OscConfig+0x44a>
 8004434:	e037      	b.n	80044a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e032      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004442:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <HAL_RCC_OscConfig+0x4e8>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d028      	beq.n	80044a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d121      	bne.n	80044a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d11a      	bne.n	80044a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004472:	4013      	ands	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004478:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800447a:	4293      	cmp	r3, r2
 800447c:	d111      	bne.n	80044a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	3b01      	subs	r3, #1
 800448c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d001      	beq.n	80044a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40007000 	.word	0x40007000
 80044b4:	40023800 	.word	0x40023800
 80044b8:	42470060 	.word	0x42470060

080044bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0cc      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044d0:	4b68      	ldr	r3, [pc, #416]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d90c      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b65      	ldr	r3, [pc, #404]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b63      	ldr	r3, [pc, #396]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0b8      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004510:	4b59      	ldr	r3, [pc, #356]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a58      	ldr	r2, [pc, #352]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800451a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004528:	4b53      	ldr	r3, [pc, #332]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4a52      	ldr	r2, [pc, #328]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004534:	4b50      	ldr	r3, [pc, #320]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	494d      	ldr	r1, [pc, #308]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d044      	beq.n	80045dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b47      	ldr	r3, [pc, #284]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d119      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e07f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d003      	beq.n	800457a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004576:	2b03      	cmp	r3, #3
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800457a:	4b3f      	ldr	r3, [pc, #252]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e06f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458a:	4b3b      	ldr	r3, [pc, #236]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e067      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800459a:	4b37      	ldr	r3, [pc, #220]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f023 0203 	bic.w	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4934      	ldr	r1, [pc, #208]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ac:	f7fd fc94 	bl	8001ed8 <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b4:	f7fd fc90 	bl	8001ed8 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e04f      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 020c 	and.w	r2, r3, #12
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	429a      	cmp	r2, r3
 80045da:	d1eb      	bne.n	80045b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045dc:	4b25      	ldr	r3, [pc, #148]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d20c      	bcs.n	8004604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ea:	4b22      	ldr	r3, [pc, #136]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	4b20      	ldr	r3, [pc, #128]	; (8004674 <HAL_RCC_ClockConfig+0x1b8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e032      	b.n	800466a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004610:	4b19      	ldr	r3, [pc, #100]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4916      	ldr	r1, [pc, #88]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	490e      	ldr	r1, [pc, #56]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004642:	f000 f821 	bl	8004688 <HAL_RCC_GetSysClockFreq>
 8004646:	4602      	mov	r2, r0
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	490a      	ldr	r1, [pc, #40]	; (800467c <HAL_RCC_ClockConfig+0x1c0>)
 8004654:	5ccb      	ldrb	r3, [r1, r3]
 8004656:	fa22 f303 	lsr.w	r3, r2, r3
 800465a:	4a09      	ldr	r2, [pc, #36]	; (8004680 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_ClockConfig+0x1c8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fd fbf4 	bl	8001e50 <HAL_InitTick>

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40023c00 	.word	0x40023c00
 8004678:	40023800 	.word	0x40023800
 800467c:	08008ca4 	.word	0x08008ca4
 8004680:	20000050 	.word	0x20000050
 8004684:	20000054 	.word	0x20000054

08004688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004688:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	607b      	str	r3, [r7, #4]
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	2300      	movs	r3, #0
 800469a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a0:	4b67      	ldr	r3, [pc, #412]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d00d      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x40>
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	f200 80bd 	bhi.w	800482c <HAL_RCC_GetSysClockFreq+0x1a4>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x34>
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d003      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ba:	e0b7      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046bc:	4b61      	ldr	r3, [pc, #388]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046be:	60bb      	str	r3, [r7, #8]
       break;
 80046c0:	e0b7      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046c2:	4b61      	ldr	r3, [pc, #388]	; (8004848 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80046c4:	60bb      	str	r3, [r7, #8]
      break;
 80046c6:	e0b4      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046c8:	4b5d      	ldr	r3, [pc, #372]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046d2:	4b5b      	ldr	r3, [pc, #364]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d04d      	beq.n	800477a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046de:	4b58      	ldr	r3, [pc, #352]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	099b      	lsrs	r3, r3, #6
 80046e4:	461a      	mov	r2, r3
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046ee:	f04f 0100 	mov.w	r1, #0
 80046f2:	ea02 0800 	and.w	r8, r2, r0
 80046f6:	ea03 0901 	and.w	r9, r3, r1
 80046fa:	4640      	mov	r0, r8
 80046fc:	4649      	mov	r1, r9
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	014b      	lsls	r3, r1, #5
 8004708:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800470c:	0142      	lsls	r2, r0, #5
 800470e:	4610      	mov	r0, r2
 8004710:	4619      	mov	r1, r3
 8004712:	ebb0 0008 	subs.w	r0, r0, r8
 8004716:	eb61 0109 	sbc.w	r1, r1, r9
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	018b      	lsls	r3, r1, #6
 8004724:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004728:	0182      	lsls	r2, r0, #6
 800472a:	1a12      	subs	r2, r2, r0
 800472c:	eb63 0301 	sbc.w	r3, r3, r1
 8004730:	f04f 0000 	mov.w	r0, #0
 8004734:	f04f 0100 	mov.w	r1, #0
 8004738:	00d9      	lsls	r1, r3, #3
 800473a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800473e:	00d0      	lsls	r0, r2, #3
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	eb12 0208 	adds.w	r2, r2, r8
 8004748:	eb43 0309 	adc.w	r3, r3, r9
 800474c:	f04f 0000 	mov.w	r0, #0
 8004750:	f04f 0100 	mov.w	r1, #0
 8004754:	0259      	lsls	r1, r3, #9
 8004756:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800475a:	0250      	lsls	r0, r2, #9
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	461a      	mov	r2, r3
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	f7fc f922 	bl	80009b4 <__aeabi_uldivmod>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4613      	mov	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e04a      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477a:	4b31      	ldr	r3, [pc, #196]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	099b      	lsrs	r3, r3, #6
 8004780:	461a      	mov	r2, r3
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	f240 10ff 	movw	r0, #511	; 0x1ff
 800478a:	f04f 0100 	mov.w	r1, #0
 800478e:	ea02 0400 	and.w	r4, r2, r0
 8004792:	ea03 0501 	and.w	r5, r3, r1
 8004796:	4620      	mov	r0, r4
 8004798:	4629      	mov	r1, r5
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	014b      	lsls	r3, r1, #5
 80047a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047a8:	0142      	lsls	r2, r0, #5
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	1b00      	subs	r0, r0, r4
 80047b0:	eb61 0105 	sbc.w	r1, r1, r5
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	018b      	lsls	r3, r1, #6
 80047be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047c2:	0182      	lsls	r2, r0, #6
 80047c4:	1a12      	subs	r2, r2, r0
 80047c6:	eb63 0301 	sbc.w	r3, r3, r1
 80047ca:	f04f 0000 	mov.w	r0, #0
 80047ce:	f04f 0100 	mov.w	r1, #0
 80047d2:	00d9      	lsls	r1, r3, #3
 80047d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047d8:	00d0      	lsls	r0, r2, #3
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	1912      	adds	r2, r2, r4
 80047e0:	eb45 0303 	adc.w	r3, r5, r3
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f04f 0100 	mov.w	r1, #0
 80047ec:	0299      	lsls	r1, r3, #10
 80047ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047f2:	0290      	lsls	r0, r2, #10
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	461a      	mov	r2, r3
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	f7fc f8d6 	bl	80009b4 <__aeabi_uldivmod>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4613      	mov	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	3301      	adds	r3, #1
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	60bb      	str	r3, [r7, #8]
      break;
 800482a:	e002      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800482e:	60bb      	str	r3, [r7, #8]
      break;
 8004830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004832:	68bb      	ldr	r3, [r7, #8]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800483e:	bf00      	nop
 8004840:	40023800 	.word	0x40023800
 8004844:	00f42400 	.word	0x00f42400
 8004848:	007a1200 	.word	0x007a1200

0800484c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <HAL_RCC_GetHCLKFreq+0x14>)
 8004852:	681b      	ldr	r3, [r3, #0]
}
 8004854:	4618      	mov	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000050 	.word	0x20000050

08004864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e041      	b.n	80048fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fd fa1e 	bl	8001ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f000 fa96 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	d001      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e04e      	b.n	80049ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a23      	ldr	r2, [pc, #140]	; (80049c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d022      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x80>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004946:	d01d      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x80>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1f      	ldr	r2, [pc, #124]	; (80049cc <HAL_TIM_Base_Start_IT+0xc8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d018      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x80>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1e      	ldr	r2, [pc, #120]	; (80049d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d013      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x80>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1c      	ldr	r2, [pc, #112]	; (80049d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00e      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x80>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d009      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x80>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a19      	ldr	r2, [pc, #100]	; (80049dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d004      	beq.n	8004984 <HAL_TIM_Base_Start_IT+0x80>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d111      	bne.n	80049a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b06      	cmp	r3, #6
 8004994:	d010      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0201 	orr.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a6:	e007      	b.n	80049b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40010000 	.word	0x40010000
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800
 80049d4:	40000c00 	.word	0x40000c00
 80049d8:	40010400 	.word	0x40010400
 80049dc:	40014000 	.word	0x40014000
 80049e0:	40001800 	.word	0x40001800

080049e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d122      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d11b      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0202 	mvn.w	r2, #2
 8004a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9b5 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 8004a2c:	e005      	b.n	8004a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f9a7 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f9b8 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d122      	bne.n	8004a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d11b      	bne.n	8004a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0204 	mvn.w	r2, #4
 8004a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f98b 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 8004a80:	e005      	b.n	8004a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f97d 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f98e 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d122      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d11b      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0208 	mvn.w	r2, #8
 8004ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2204      	movs	r2, #4
 8004abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f961 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 8004ad4:	e005      	b.n	8004ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f953 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f964 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d122      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d11b      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0210 	mvn.w	r2, #16
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2208      	movs	r2, #8
 8004b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f937 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f929 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f93a 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d10e      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d107      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0201 	mvn.w	r2, #1
 8004b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fc ff9a 	bl	8001a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b80      	cmp	r3, #128	; 0x80
 8004b74:	d10e      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b80      	cmp	r3, #128	; 0x80
 8004b82:	d107      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fae0 	bl	8005154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	d107      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f8ff 	bl	8004dbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d10e      	bne.n	8004bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d107      	bne.n	8004bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0220 	mvn.w	r2, #32
 8004be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 faaa 	bl	8005140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_TIM_ConfigClockSource+0x1c>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e0b4      	b.n	8004d7a <HAL_TIM_ConfigClockSource+0x186>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c48:	d03e      	beq.n	8004cc8 <HAL_TIM_ConfigClockSource+0xd4>
 8004c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4e:	f200 8087 	bhi.w	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c56:	f000 8086 	beq.w	8004d66 <HAL_TIM_ConfigClockSource+0x172>
 8004c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5e:	d87f      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b70      	cmp	r3, #112	; 0x70
 8004c62:	d01a      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0xa6>
 8004c64:	2b70      	cmp	r3, #112	; 0x70
 8004c66:	d87b      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b60      	cmp	r3, #96	; 0x60
 8004c6a:	d050      	beq.n	8004d0e <HAL_TIM_ConfigClockSource+0x11a>
 8004c6c:	2b60      	cmp	r3, #96	; 0x60
 8004c6e:	d877      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b50      	cmp	r3, #80	; 0x50
 8004c72:	d03c      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0xfa>
 8004c74:	2b50      	cmp	r3, #80	; 0x50
 8004c76:	d873      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b40      	cmp	r3, #64	; 0x40
 8004c7a:	d058      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x13a>
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d86f      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b30      	cmp	r3, #48	; 0x30
 8004c82:	d064      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c84:	2b30      	cmp	r3, #48	; 0x30
 8004c86:	d86b      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d060      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d867      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d05c      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d05a      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	e062      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6899      	ldr	r1, [r3, #8]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f000 f9ad 	bl	8005008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	609a      	str	r2, [r3, #8]
      break;
 8004cc6:	e04f      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6899      	ldr	r1, [r3, #8]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f000 f996 	bl	8005008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cea:	609a      	str	r2, [r3, #8]
      break;
 8004cec:	e03c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6859      	ldr	r1, [r3, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f000 f90a 	bl	8004f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2150      	movs	r1, #80	; 0x50
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 f963 	bl	8004fd2 <TIM_ITRx_SetConfig>
      break;
 8004d0c:	e02c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6859      	ldr	r1, [r3, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f000 f929 	bl	8004f72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2160      	movs	r1, #96	; 0x60
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f953 	bl	8004fd2 <TIM_ITRx_SetConfig>
      break;
 8004d2c:	e01c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6859      	ldr	r1, [r3, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f000 f8ea 	bl	8004f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2140      	movs	r1, #64	; 0x40
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f943 	bl	8004fd2 <TIM_ITRx_SetConfig>
      break;
 8004d4c:	e00c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f000 f93a 	bl	8004fd2 <TIM_ITRx_SetConfig>
      break;
 8004d5e:	e003      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      break;
 8004d64:	e000      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a40      	ldr	r2, [pc, #256]	; (8004ee8 <TIM_Base_SetConfig+0x114>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df2:	d00f      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a3d      	ldr	r2, [pc, #244]	; (8004eec <TIM_Base_SetConfig+0x118>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00b      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a3c      	ldr	r2, [pc, #240]	; (8004ef0 <TIM_Base_SetConfig+0x11c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d007      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a3b      	ldr	r2, [pc, #236]	; (8004ef4 <TIM_Base_SetConfig+0x120>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a3a      	ldr	r2, [pc, #232]	; (8004ef8 <TIM_Base_SetConfig+0x124>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d108      	bne.n	8004e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2f      	ldr	r2, [pc, #188]	; (8004ee8 <TIM_Base_SetConfig+0x114>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d02b      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e34:	d027      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2c      	ldr	r2, [pc, #176]	; (8004eec <TIM_Base_SetConfig+0x118>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d023      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2b      	ldr	r2, [pc, #172]	; (8004ef0 <TIM_Base_SetConfig+0x11c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d01f      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <TIM_Base_SetConfig+0x120>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01b      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a29      	ldr	r2, [pc, #164]	; (8004ef8 <TIM_Base_SetConfig+0x124>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d017      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a28      	ldr	r2, [pc, #160]	; (8004efc <TIM_Base_SetConfig+0x128>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a27      	ldr	r2, [pc, #156]	; (8004f00 <TIM_Base_SetConfig+0x12c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00f      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a26      	ldr	r2, [pc, #152]	; (8004f04 <TIM_Base_SetConfig+0x130>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00b      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a25      	ldr	r2, [pc, #148]	; (8004f08 <TIM_Base_SetConfig+0x134>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d007      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a24      	ldr	r2, [pc, #144]	; (8004f0c <TIM_Base_SetConfig+0x138>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d003      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a23      	ldr	r2, [pc, #140]	; (8004f10 <TIM_Base_SetConfig+0x13c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d108      	bne.n	8004e98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a0a      	ldr	r2, [pc, #40]	; (8004ee8 <TIM_Base_SetConfig+0x114>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <TIM_Base_SetConfig+0xf8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a0c      	ldr	r2, [pc, #48]	; (8004ef8 <TIM_Base_SetConfig+0x124>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d103      	bne.n	8004ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	615a      	str	r2, [r3, #20]
}
 8004eda:	bf00      	nop
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	40000400 	.word	0x40000400
 8004ef0:	40000800 	.word	0x40000800
 8004ef4:	40000c00 	.word	0x40000c00
 8004ef8:	40010400 	.word	0x40010400
 8004efc:	40014000 	.word	0x40014000
 8004f00:	40014400 	.word	0x40014400
 8004f04:	40014800 	.word	0x40014800
 8004f08:	40001800 	.word	0x40001800
 8004f0c:	40001c00 	.word	0x40001c00
 8004f10:	40002000 	.word	0x40002000

08004f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f023 0201 	bic.w	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f023 030a 	bic.w	r3, r3, #10
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	621a      	str	r2, [r3, #32]
}
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b087      	sub	sp, #28
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0210 	bic.w	r2, r3, #16
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	031b      	lsls	r3, r3, #12
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b085      	sub	sp, #20
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f043 0307 	orr.w	r3, r3, #7
 8004ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	609a      	str	r2, [r3, #8]
}
 8004ffc:	bf00      	nop
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	021a      	lsls	r2, r3, #8
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	431a      	orrs	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4313      	orrs	r3, r2
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	609a      	str	r2, [r3, #8]
}
 800503c:	bf00      	nop
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800505c:	2302      	movs	r3, #2
 800505e:	e05a      	b.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a21      	ldr	r2, [pc, #132]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d022      	beq.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ac:	d01d      	beq.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1d      	ldr	r2, [pc, #116]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d018      	beq.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1b      	ldr	r2, [pc, #108]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1a      	ldr	r2, [pc, #104]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00e      	beq.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a18      	ldr	r2, [pc, #96]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d009      	beq.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a17      	ldr	r2, [pc, #92]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d004      	beq.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a15      	ldr	r2, [pc, #84]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d10c      	bne.n	8005104 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40010000 	.word	0x40010000
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	40000c00 	.word	0x40000c00
 8005134:	40010400 	.word	0x40010400
 8005138:	40014000 	.word	0x40014000
 800513c:	40001800 	.word	0x40001800

08005140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005168:	b084      	sub	sp, #16
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	f107 001c 	add.w	r0, r7, #28
 8005176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	2b01      	cmp	r3, #1
 800517e:	d122      	bne.n	80051c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d105      	bne.n	80051ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f001 fb1c 	bl	80067f8 <USB_CoreReset>
 80051c0:	4603      	mov	r3, r0
 80051c2:	73fb      	strb	r3, [r7, #15]
 80051c4:	e01a      	b.n	80051fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f001 fb10 	bl	80067f8 <USB_CoreReset>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38
 80051ee:	e005      	b.n	80051fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d10b      	bne.n	800521a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f043 0206 	orr.w	r2, r3, #6
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f043 0220 	orr.w	r2, r3, #32
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005226:	b004      	add	sp, #16
 8005228:	4770      	bx	lr
	...

0800522c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	2b02      	cmp	r3, #2
 800523e:	d165      	bne.n	800530c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4a41      	ldr	r2, [pc, #260]	; (8005348 <USB_SetTurnaroundTime+0x11c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d906      	bls.n	8005256 <USB_SetTurnaroundTime+0x2a>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4a40      	ldr	r2, [pc, #256]	; (800534c <USB_SetTurnaroundTime+0x120>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d202      	bcs.n	8005256 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005250:	230f      	movs	r3, #15
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	e062      	b.n	800531c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4a3c      	ldr	r2, [pc, #240]	; (800534c <USB_SetTurnaroundTime+0x120>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d306      	bcc.n	800526c <USB_SetTurnaroundTime+0x40>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4a3b      	ldr	r2, [pc, #236]	; (8005350 <USB_SetTurnaroundTime+0x124>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d202      	bcs.n	800526c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005266:	230e      	movs	r3, #14
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e057      	b.n	800531c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4a38      	ldr	r2, [pc, #224]	; (8005350 <USB_SetTurnaroundTime+0x124>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d306      	bcc.n	8005282 <USB_SetTurnaroundTime+0x56>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4a37      	ldr	r2, [pc, #220]	; (8005354 <USB_SetTurnaroundTime+0x128>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d202      	bcs.n	8005282 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800527c:	230d      	movs	r3, #13
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	e04c      	b.n	800531c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4a33      	ldr	r2, [pc, #204]	; (8005354 <USB_SetTurnaroundTime+0x128>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d306      	bcc.n	8005298 <USB_SetTurnaroundTime+0x6c>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	4a32      	ldr	r2, [pc, #200]	; (8005358 <USB_SetTurnaroundTime+0x12c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d802      	bhi.n	8005298 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005292:	230c      	movs	r3, #12
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e041      	b.n	800531c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4a2f      	ldr	r2, [pc, #188]	; (8005358 <USB_SetTurnaroundTime+0x12c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d906      	bls.n	80052ae <USB_SetTurnaroundTime+0x82>
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4a2e      	ldr	r2, [pc, #184]	; (800535c <USB_SetTurnaroundTime+0x130>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d802      	bhi.n	80052ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052a8:	230b      	movs	r3, #11
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e036      	b.n	800531c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4a2a      	ldr	r2, [pc, #168]	; (800535c <USB_SetTurnaroundTime+0x130>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d906      	bls.n	80052c4 <USB_SetTurnaroundTime+0x98>
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4a29      	ldr	r2, [pc, #164]	; (8005360 <USB_SetTurnaroundTime+0x134>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d802      	bhi.n	80052c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80052be:	230a      	movs	r3, #10
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	e02b      	b.n	800531c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4a26      	ldr	r2, [pc, #152]	; (8005360 <USB_SetTurnaroundTime+0x134>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d906      	bls.n	80052da <USB_SetTurnaroundTime+0xae>
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4a25      	ldr	r2, [pc, #148]	; (8005364 <USB_SetTurnaroundTime+0x138>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d202      	bcs.n	80052da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80052d4:	2309      	movs	r3, #9
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	e020      	b.n	800531c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4a21      	ldr	r2, [pc, #132]	; (8005364 <USB_SetTurnaroundTime+0x138>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d306      	bcc.n	80052f0 <USB_SetTurnaroundTime+0xc4>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	4a20      	ldr	r2, [pc, #128]	; (8005368 <USB_SetTurnaroundTime+0x13c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d802      	bhi.n	80052f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80052ea:	2308      	movs	r3, #8
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	e015      	b.n	800531c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <USB_SetTurnaroundTime+0x13c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d906      	bls.n	8005306 <USB_SetTurnaroundTime+0xda>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4a1c      	ldr	r2, [pc, #112]	; (800536c <USB_SetTurnaroundTime+0x140>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d202      	bcs.n	8005306 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005300:	2307      	movs	r3, #7
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	e00a      	b.n	800531c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005306:	2306      	movs	r3, #6
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	e007      	b.n	800531c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d102      	bne.n	8005318 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005312:	2309      	movs	r3, #9
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e001      	b.n	800531c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005318:	2309      	movs	r3, #9
 800531a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	029b      	lsls	r3, r3, #10
 8005330:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005334:	431a      	orrs	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	00d8acbf 	.word	0x00d8acbf
 800534c:	00e4e1c0 	.word	0x00e4e1c0
 8005350:	00f42400 	.word	0x00f42400
 8005354:	01067380 	.word	0x01067380
 8005358:	011a499f 	.word	0x011a499f
 800535c:	01312cff 	.word	0x01312cff
 8005360:	014ca43f 	.word	0x014ca43f
 8005364:	016e3600 	.word	0x016e3600
 8005368:	01a6ab1f 	.word	0x01a6ab1f
 800536c:	01e84800 	.word	0x01e84800

08005370 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f043 0201 	orr.w	r2, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f023 0201 	bic.w	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d115      	bne.n	8005402 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053e2:	2001      	movs	r0, #1
 80053e4:	f7fc fd84 	bl	8001ef0 <HAL_Delay>
      ms++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f001 f972 	bl	80066d8 <USB_GetMode>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d01e      	beq.n	8005438 <USB_SetCurrentMode+0x84>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b31      	cmp	r3, #49	; 0x31
 80053fe:	d9f0      	bls.n	80053e2 <USB_SetCurrentMode+0x2e>
 8005400:	e01a      	b.n	8005438 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005402:	78fb      	ldrb	r3, [r7, #3]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d115      	bne.n	8005434 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005414:	2001      	movs	r0, #1
 8005416:	f7fc fd6b 	bl	8001ef0 <HAL_Delay>
      ms++;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3301      	adds	r3, #1
 800541e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f001 f959 	bl	80066d8 <USB_GetMode>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <USB_SetCurrentMode+0x84>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b31      	cmp	r3, #49	; 0x31
 8005430:	d9f0      	bls.n	8005414 <USB_SetCurrentMode+0x60>
 8005432:	e001      	b.n	8005438 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e005      	b.n	8005444 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b32      	cmp	r3, #50	; 0x32
 800543c:	d101      	bne.n	8005442 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800544c:	b084      	sub	sp, #16
 800544e:	b580      	push	{r7, lr}
 8005450:	b086      	sub	sp, #24
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800545a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	e009      	b.n	8005480 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	3340      	adds	r3, #64	; 0x40
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	2200      	movs	r2, #0
 8005478:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	3301      	adds	r3, #1
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b0e      	cmp	r3, #14
 8005484:	d9f2      	bls.n	800546c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d11c      	bne.n	80054c6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800549a:	f043 0302 	orr.w	r3, r3, #2
 800549e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
 80054c4:	e00b      	b.n	80054de <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054e4:	461a      	mov	r2, r3
 80054e6:	2300      	movs	r3, #0
 80054e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f0:	4619      	mov	r1, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f8:	461a      	mov	r2, r3
 80054fa:	680b      	ldr	r3, [r1, #0]
 80054fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	2b01      	cmp	r3, #1
 8005502:	d10c      	bne.n	800551e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800550a:	2100      	movs	r1, #0
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f945 	bl	800579c <USB_SetDevSpeed>
 8005512:	e008      	b.n	8005526 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005514:	2101      	movs	r1, #1
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f940 	bl	800579c <USB_SetDevSpeed>
 800551c:	e003      	b.n	8005526 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800551e:	2103      	movs	r1, #3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f93b 	bl	800579c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005526:	2110      	movs	r1, #16
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f8f3 	bl	8005714 <USB_FlushTxFifo>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f90f 	bl	800575c <USB_FlushRxFifo>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554e:	461a      	mov	r2, r3
 8005550:	2300      	movs	r3, #0
 8005552:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	461a      	mov	r2, r3
 800555c:	2300      	movs	r3, #0
 800555e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	461a      	mov	r2, r3
 8005568:	2300      	movs	r3, #0
 800556a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800556c:	2300      	movs	r3, #0
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	e043      	b.n	80055fa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005588:	d118      	bne.n	80055bc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	461a      	mov	r2, r3
 800559e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	e013      	b.n	80055ce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	461a      	mov	r2, r3
 80055b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e008      	b.n	80055ce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	461a      	mov	r2, r3
 80055ca:	2300      	movs	r3, #0
 80055cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	461a      	mov	r2, r3
 80055dc:	2300      	movs	r3, #0
 80055de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	461a      	mov	r2, r3
 80055ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	3301      	adds	r3, #1
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d3b7      	bcc.n	8005572 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005602:	2300      	movs	r3, #0
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	e043      	b.n	8005690 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800561a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800561e:	d118      	bne.n	8005652 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	461a      	mov	r2, r3
 8005634:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	e013      	b.n	8005664 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	461a      	mov	r2, r3
 800564a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	e008      	b.n	8005664 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	461a      	mov	r2, r3
 8005660:	2300      	movs	r3, #0
 8005662:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	461a      	mov	r2, r3
 8005672:	2300      	movs	r3, #0
 8005674:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	461a      	mov	r2, r3
 8005684:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005688:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3301      	adds	r3, #1
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	429a      	cmp	r2, r3
 8005696:	d3b7      	bcc.n	8005608 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d105      	bne.n	80056cc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	f043 0210 	orr.w	r2, r3, #16
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <USB_DevInit+0x2c4>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f043 0208 	orr.w	r2, r3, #8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d107      	bne.n	8005700 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056f8:	f043 0304 	orr.w	r3, r3, #4
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005700:	7dfb      	ldrb	r3, [r7, #23]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800570c:	b004      	add	sp, #16
 800570e:	4770      	bx	lr
 8005710:	803c3800 	.word	0x803c3800

08005714 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	019b      	lsls	r3, r3, #6
 8005726:	f043 0220 	orr.w	r2, r3, #32
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3301      	adds	r3, #1
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	4a08      	ldr	r2, [pc, #32]	; (8005758 <USB_FlushTxFifo+0x44>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d901      	bls.n	800573e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e006      	b.n	800574c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b20      	cmp	r3, #32
 8005748:	d0f1      	beq.n	800572e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	00030d40 	.word	0x00030d40

0800575c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2210      	movs	r2, #16
 800576c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3301      	adds	r3, #1
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	4a08      	ldr	r2, [pc, #32]	; (8005798 <USB_FlushRxFifo+0x3c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e006      	b.n	800578c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0310 	and.w	r3, r3, #16
 8005786:	2b10      	cmp	r3, #16
 8005788:	d0f1      	beq.n	800576e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	00030d40 	.word	0x00030d40

0800579c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	78fb      	ldrb	r3, [r7, #3]
 80057b6:	68f9      	ldr	r1, [r7, #12]
 80057b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057bc:	4313      	orrs	r3, r2
 80057be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b087      	sub	sp, #28
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 0306 	and.w	r3, r3, #6
 80057e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80057ee:	2300      	movs	r3, #0
 80057f0:	75fb      	strb	r3, [r7, #23]
 80057f2:	e00a      	b.n	800580a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d002      	beq.n	8005800 <USB_GetDevSpeed+0x32>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b06      	cmp	r3, #6
 80057fe:	d102      	bne.n	8005806 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005800:	2302      	movs	r3, #2
 8005802:	75fb      	strb	r3, [r7, #23]
 8005804:	e001      	b.n	800580a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005806:	230f      	movs	r3, #15
 8005808:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800580a:	7dfb      	ldrb	r3, [r7, #23]
}
 800580c:	4618      	mov	r0, r3
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d13a      	bne.n	80058aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	2101      	movs	r1, #1
 8005846:	fa01 f303 	lsl.w	r3, r1, r3
 800584a:	b29b      	uxth	r3, r3
 800584c:	68f9      	ldr	r1, [r7, #12]
 800584e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005852:	4313      	orrs	r3, r2
 8005854:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d155      	bne.n	8005918 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	78db      	ldrb	r3, [r3, #3]
 8005886:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005888:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	059b      	lsls	r3, r3, #22
 800588e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005890:	4313      	orrs	r3, r2
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	0151      	lsls	r1, r2, #5
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	440a      	add	r2, r1
 800589a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	e036      	b.n	8005918 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	69da      	ldr	r2, [r3, #28]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	2101      	movs	r1, #1
 80058bc:	fa01 f303 	lsl.w	r3, r1, r3
 80058c0:	041b      	lsls	r3, r3, #16
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c8:	4313      	orrs	r3, r2
 80058ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d11a      	bne.n	8005918 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	78db      	ldrb	r3, [r3, #3]
 80058fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058fe:	430b      	orrs	r3, r1
 8005900:	4313      	orrs	r3, r2
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	0151      	lsls	r1, r2, #5
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	440a      	add	r2, r1
 800590a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800590e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005916:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
	...

08005928 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d161      	bne.n	8005a08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800595a:	d11f      	bne.n	800599c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	440a      	add	r2, r1
 8005972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005976:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800597a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800599a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	2101      	movs	r1, #1
 80059ae:	fa01 f303 	lsl.w	r3, r1, r3
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	43db      	mvns	r3, r3
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059bc:	4013      	ands	r3, r2
 80059be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	2101      	movs	r1, #1
 80059d2:	fa01 f303 	lsl.w	r3, r1, r3
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	43db      	mvns	r3, r3
 80059da:	68f9      	ldr	r1, [r7, #12]
 80059dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e0:	4013      	ands	r3, r2
 80059e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	0159      	lsls	r1, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	440b      	add	r3, r1
 80059fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fe:	4619      	mov	r1, r3
 8005a00:	4b35      	ldr	r3, [pc, #212]	; (8005ad8 <USB_DeactivateEndpoint+0x1b0>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]
 8005a06:	e060      	b.n	8005aca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a1e:	d11f      	bne.n	8005a60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	2101      	movs	r1, #1
 8005a72:	fa01 f303 	lsl.w	r3, r1, r3
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	68f9      	ldr	r1, [r7, #12]
 8005a7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a80:	4013      	ands	r3, r2
 8005a82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	2101      	movs	r1, #1
 8005a96:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9a:	041b      	lsls	r3, r3, #16
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	0159      	lsls	r1, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	440b      	add	r3, r1
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <USB_DeactivateEndpoint+0x1b4>)
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	ec337800 	.word	0xec337800
 8005adc:	eff37800 	.word	0xeff37800

08005ae0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08a      	sub	sp, #40	; 0x28
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	785b      	ldrb	r3, [r3, #1]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	f040 815c 	bne.w	8005dba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d132      	bne.n	8005b70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b68:	0cdb      	lsrs	r3, r3, #19
 8005b6a:	04db      	lsls	r3, r3, #19
 8005b6c:	6113      	str	r3, [r2, #16]
 8005b6e:	e074      	b.n	8005c5a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8a:	0cdb      	lsrs	r3, r3, #19
 8005b8c:	04db      	lsls	r3, r3, #19
 8005b8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005baa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6959      	ldr	r1, [r3, #20]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	440b      	add	r3, r1
 8005bcc:	1e59      	subs	r1, r3, #1
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bd6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005bd8:	4b9d      	ldr	r3, [pc, #628]	; (8005e50 <USB_EPStartXfer+0x370>)
 8005bda:	400b      	ands	r3, r1
 8005bdc:	69b9      	ldr	r1, [r7, #24]
 8005bde:	0148      	lsls	r0, r1, #5
 8005be0:	69f9      	ldr	r1, [r7, #28]
 8005be2:	4401      	add	r1, r0
 8005be4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005be8:	4313      	orrs	r3, r2
 8005bea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c02:	69b9      	ldr	r1, [r7, #24]
 8005c04:	0148      	lsls	r0, r1, #5
 8005c06:	69f9      	ldr	r1, [r7, #28]
 8005c08:	4401      	add	r1, r0
 8005c0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	78db      	ldrb	r3, [r3, #3]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d11f      	bne.n	8005c5a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	69fa      	ldr	r2, [r7, #28]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d14b      	bne.n	8005cf8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d009      	beq.n	8005c7c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c74:	461a      	mov	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	78db      	ldrb	r3, [r3, #3]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d128      	bne.n	8005cd6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d110      	bne.n	8005cb6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	e00f      	b.n	8005cd6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	e12f      	b.n	8005f58 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	78db      	ldrb	r3, [r3, #3]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d015      	beq.n	8005d4c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8117 	beq.w	8005f58 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d40:	69f9      	ldr	r1, [r7, #28]
 8005d42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d46:	4313      	orrs	r3, r2
 8005d48:	634b      	str	r3, [r1, #52]	; 0x34
 8005d4a:	e105      	b.n	8005f58 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d110      	bne.n	8005d7e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	e00f      	b.n	8005d9e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	68d9      	ldr	r1, [r3, #12]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	781a      	ldrb	r2, [r3, #0]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	b298      	uxth	r0, r3
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	4603      	mov	r3, r0
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 fa2b 	bl	800620e <USB_WritePacket>
 8005db8:	e0ce      	b.n	8005f58 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd4:	0cdb      	lsrs	r3, r3, #19
 8005dd6:	04db      	lsls	r3, r3, #19
 8005dd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005df8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dfc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d126      	bne.n	8005e54 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e1c:	69b9      	ldr	r1, [r7, #24]
 8005e1e:	0148      	lsls	r0, r1, #5
 8005e20:	69f9      	ldr	r1, [r7, #28]
 8005e22:	4401      	add	r1, r0
 8005e24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e4a:	6113      	str	r3, [r2, #16]
 8005e4c:	e036      	b.n	8005ebc <USB_EPStartXfer+0x3dc>
 8005e4e:	bf00      	nop
 8005e50:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	695a      	ldr	r2, [r3, #20]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	1e5a      	subs	r2, r3, #1
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e68:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	8afb      	ldrh	r3, [r7, #22]
 8005e7a:	04d9      	lsls	r1, r3, #19
 8005e7c:	4b39      	ldr	r3, [pc, #228]	; (8005f64 <USB_EPStartXfer+0x484>)
 8005e7e:	400b      	ands	r3, r1
 8005e80:	69b9      	ldr	r1, [r7, #24]
 8005e82:	0148      	lsls	r0, r1, #5
 8005e84:	69f9      	ldr	r1, [r7, #28]
 8005e86:	4401      	add	r1, r0
 8005e88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	691a      	ldr	r2, [r3, #16]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	8af9      	ldrh	r1, [r7, #22]
 8005ea4:	fb01 f303 	mul.w	r3, r1, r3
 8005ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eac:	69b9      	ldr	r1, [r7, #24]
 8005eae:	0148      	lsls	r0, r1, #5
 8005eb0:	69f9      	ldr	r1, [r7, #28]
 8005eb2:	4401      	add	r1, r0
 8005eb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d10d      	bne.n	8005ede <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	68d9      	ldr	r1, [r3, #12]
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eda:	460a      	mov	r2, r1
 8005edc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	78db      	ldrb	r3, [r3, #3]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d128      	bne.n	8005f38 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d110      	bne.n	8005f18 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	e00f      	b.n	8005f38 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3720      	adds	r7, #32
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	1ff80000 	.word	0x1ff80000

08005f68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	4613      	mov	r3, r2
 8005f74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	f040 80cd 	bne.w	8006124 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d132      	bne.n	8005ff8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	0151      	lsls	r1, r2, #5
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	440a      	add	r2, r1
 8005fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff0:	0cdb      	lsrs	r3, r3, #19
 8005ff2:	04db      	lsls	r3, r3, #19
 8005ff4:	6113      	str	r3, [r2, #16]
 8005ff6:	e04e      	b.n	8006096 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	440a      	add	r2, r1
 800600e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006012:	0cdb      	lsrs	r3, r3, #19
 8006014:	04db      	lsls	r3, r3, #19
 8006016:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006032:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006036:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800603a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	429a      	cmp	r2, r3
 8006046:	d903      	bls.n	8006050 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800606e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607c:	691a      	ldr	r2, [r3, #16]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006086:	6939      	ldr	r1, [r7, #16]
 8006088:	0148      	lsls	r0, r1, #5
 800608a:	6979      	ldr	r1, [r7, #20]
 800608c:	4401      	add	r1, r0
 800608e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006092:	4313      	orrs	r3, r2
 8006094:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006096:	79fb      	ldrb	r3, [r7, #7]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d11e      	bne.n	80060da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b0:	461a      	mov	r2, r3
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	e092      	b.n	8006200 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d07e      	beq.n	8006200 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	2101      	movs	r1, #1
 8006114:	fa01 f303 	lsl.w	r3, r1, r3
 8006118:	6979      	ldr	r1, [r7, #20]
 800611a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800611e:	4313      	orrs	r3, r2
 8006120:	634b      	str	r3, [r1, #52]	; 0x34
 8006122:	e06d      	b.n	8006200 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613e:	0cdb      	lsrs	r3, r3, #19
 8006140:	04db      	lsls	r3, r3, #19
 8006142:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800615e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006162:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006166:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006192:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006196:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ae:	6939      	ldr	r1, [r7, #16]
 80061b0:	0148      	lsls	r0, r1, #5
 80061b2:	6979      	ldr	r1, [r7, #20]
 80061b4:	4401      	add	r1, r0
 80061b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061ba:	4313      	orrs	r3, r2
 80061bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d10d      	bne.n	80061e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d009      	beq.n	80061e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	68d9      	ldr	r1, [r3, #12]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061dc:	460a      	mov	r2, r1
 80061de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800620e:	b480      	push	{r7}
 8006210:	b089      	sub	sp, #36	; 0x24
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	4611      	mov	r1, r2
 800621a:	461a      	mov	r2, r3
 800621c:	460b      	mov	r3, r1
 800621e:	71fb      	strb	r3, [r7, #7]
 8006220:	4613      	mov	r3, r2
 8006222:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800622c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006230:	2b00      	cmp	r3, #0
 8006232:	d123      	bne.n	800627c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006234:	88bb      	ldrh	r3, [r7, #4]
 8006236:	3303      	adds	r3, #3
 8006238:	089b      	lsrs	r3, r3, #2
 800623a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800623c:	2300      	movs	r3, #0
 800623e:	61bb      	str	r3, [r7, #24]
 8006240:	e018      	b.n	8006274 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	031a      	lsls	r2, r3, #12
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	4413      	add	r3, r2
 800624a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800624e:	461a      	mov	r2, r3
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	3301      	adds	r3, #1
 800625a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	3301      	adds	r3, #1
 8006260:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	3301      	adds	r3, #1
 8006266:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	3301      	adds	r3, #1
 800626c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	3301      	adds	r3, #1
 8006272:	61bb      	str	r3, [r7, #24]
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	429a      	cmp	r2, r3
 800627a:	d3e2      	bcc.n	8006242 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3724      	adds	r7, #36	; 0x24
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800628a:	b480      	push	{r7}
 800628c:	b08b      	sub	sp, #44	; 0x2c
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	4613      	mov	r3, r2
 8006296:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062a0:	88fb      	ldrh	r3, [r7, #6]
 80062a2:	089b      	lsrs	r3, r3, #2
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062b0:	2300      	movs	r3, #0
 80062b2:	623b      	str	r3, [r7, #32]
 80062b4:	e014      	b.n	80062e0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	601a      	str	r2, [r3, #0]
    pDest++;
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	3301      	adds	r3, #1
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	3301      	adds	r3, #1
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	3301      	adds	r3, #1
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	3301      	adds	r3, #1
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	3301      	adds	r3, #1
 80062de:	623b      	str	r3, [r7, #32]
 80062e0:	6a3a      	ldr	r2, [r7, #32]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d3e6      	bcc.n	80062b6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062e8:	8bfb      	ldrh	r3, [r7, #30]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d01e      	beq.n	800632c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f8:	461a      	mov	r2, r3
 80062fa:	f107 0310 	add.w	r3, r7, #16
 80062fe:	6812      	ldr	r2, [r2, #0]
 8006300:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	fa22 f303 	lsr.w	r3, r2, r3
 800630e:	b2da      	uxtb	r2, r3
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	701a      	strb	r2, [r3, #0]
      i++;
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	3301      	adds	r3, #1
 8006318:	623b      	str	r3, [r7, #32]
      pDest++;
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	3301      	adds	r3, #1
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006320:	8bfb      	ldrh	r3, [r7, #30]
 8006322:	3b01      	subs	r3, #1
 8006324:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006326:	8bfb      	ldrh	r3, [r7, #30]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1ea      	bne.n	8006302 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800632e:	4618      	mov	r0, r3
 8006330:	372c      	adds	r7, #44	; 0x2c
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d12c      	bne.n	80063b0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	db12      	blt.n	800638e <USB_EPSetStall+0x54>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00f      	beq.n	800638e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	440a      	add	r2, r1
 8006384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006388:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800638c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	0151      	lsls	r1, r2, #5
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	440a      	add	r2, r1
 80063a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	e02b      	b.n	8006408 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	db12      	blt.n	80063e8 <USB_EPSetStall+0xae>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00f      	beq.n	80063e8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063e6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006402:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006406:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d128      	bne.n	8006484 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	440a      	add	r2, r1
 8006448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006450:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	78db      	ldrb	r3, [r3, #3]
 8006456:	2b03      	cmp	r3, #3
 8006458:	d003      	beq.n	8006462 <USB_EPClearStall+0x4c>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	78db      	ldrb	r3, [r3, #3]
 800645e:	2b02      	cmp	r3, #2
 8006460:	d138      	bne.n	80064d4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	440a      	add	r2, r1
 8006478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	e027      	b.n	80064d4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	0151      	lsls	r1, r2, #5
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	440a      	add	r2, r1
 800649a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800649e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	78db      	ldrb	r3, [r3, #3]
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d003      	beq.n	80064b4 <USB_EPClearStall+0x9e>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	78db      	ldrb	r3, [r3, #3]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d10f      	bne.n	80064d4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	0151      	lsls	r1, r2, #5
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	440a      	add	r2, r1
 80064ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	460b      	mov	r3, r1
 80064ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006500:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006504:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006516:	68f9      	ldr	r1, [r7, #12]
 8006518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800651c:	4313      	orrs	r3, r2
 800651e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006548:	f023 0303 	bic.w	r3, r3, #3
 800654c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800655c:	f023 0302 	bic.w	r3, r3, #2
 8006560:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800658a:	f023 0303 	bic.w	r3, r3, #3
 800658e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800659e:	f043 0302 	orr.w	r3, r3, #2
 80065a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	4013      	ands	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065ca:	68fb      	ldr	r3, [r7, #12]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	4013      	ands	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	0c1b      	lsrs	r3, r3, #16
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	4013      	ands	r3, r2
 800662e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	b29b      	uxth	r3, r3
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	4013      	ands	r3, r2
 800666c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800666e:	68bb      	ldr	r3, [r7, #8]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	fa22 f303 	lsr.w	r3, r2, r3
 80066ac:	01db      	lsls	r3, r3, #7
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4013      	ands	r3, r2
 80066c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066ca:	68bb      	ldr	r3, [r7, #8]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	f003 0301 	and.w	r3, r3, #1
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006712:	f023 0307 	bic.w	r3, r3, #7
 8006716:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800672a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
	...

0800673c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	460b      	mov	r3, r1
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	333c      	adds	r3, #60	; 0x3c
 8006752:	3304      	adds	r3, #4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	4a26      	ldr	r2, [pc, #152]	; (80067f4 <USB_EP0_OutStart+0xb8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d90a      	bls.n	8006776 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800676c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006770:	d101      	bne.n	8006776 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	e037      	b.n	80067e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677c:	461a      	mov	r2, r3
 800677e:	2300      	movs	r3, #0
 8006780:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006794:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a4:	f043 0318 	orr.w	r3, r3, #24
 80067a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80067be:	7afb      	ldrb	r3, [r7, #11]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d10f      	bne.n	80067e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ca:	461a      	mov	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	371c      	adds	r7, #28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	4f54300a 	.word	0x4f54300a

080067f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3301      	adds	r3, #1
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	4a13      	ldr	r2, [pc, #76]	; (8006858 <USB_CoreReset+0x60>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d901      	bls.n	8006814 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e01a      	b.n	800684a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	daf3      	bge.n	8006804 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f043 0201 	orr.w	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3301      	adds	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	4a09      	ldr	r2, [pc, #36]	; (8006858 <USB_CoreReset+0x60>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d901      	bls.n	800683c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e006      	b.n	800684a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b01      	cmp	r3, #1
 8006846:	d0f1      	beq.n	800682c <USB_CoreReset+0x34>

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	00030d40 	.word	0x00030d40

0800685c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006868:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800686c:	f002 f976 	bl	8008b5c <USBD_static_malloc>
 8006870:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d105      	bne.n	8006884 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006880:	2302      	movs	r3, #2
 8006882:	e066      	b.n	8006952 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	7c1b      	ldrb	r3, [r3, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d119      	bne.n	80068c8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006898:	2202      	movs	r2, #2
 800689a:	2181      	movs	r1, #129	; 0x81
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f002 f83a 	bl	8008916 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ac:	2202      	movs	r2, #2
 80068ae:	2101      	movs	r1, #1
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f002 f830 	bl	8008916 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2210      	movs	r2, #16
 80068c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80068c6:	e016      	b.n	80068f6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068c8:	2340      	movs	r3, #64	; 0x40
 80068ca:	2202      	movs	r2, #2
 80068cc:	2181      	movs	r1, #129	; 0x81
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f002 f821 	bl	8008916 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068da:	2340      	movs	r3, #64	; 0x40
 80068dc:	2202      	movs	r2, #2
 80068de:	2101      	movs	r1, #1
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f002 f818 	bl	8008916 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2210      	movs	r2, #16
 80068f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068f6:	2308      	movs	r3, #8
 80068f8:	2203      	movs	r2, #3
 80068fa:	2182      	movs	r1, #130	; 0x82
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f002 f80a 	bl	8008916 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	7c1b      	ldrb	r3, [r3, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d109      	bne.n	8006940 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006936:	2101      	movs	r1, #1
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f002 f8db 	bl	8008af4 <USBD_LL_PrepareReceive>
 800693e:	e007      	b.n	8006950 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006946:	2340      	movs	r3, #64	; 0x40
 8006948:	2101      	movs	r1, #1
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f002 f8d2 	bl	8008af4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	460b      	mov	r3, r1
 8006964:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006966:	2181      	movs	r1, #129	; 0x81
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 fffa 	bl	8008962 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006974:	2101      	movs	r1, #1
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f001 fff3 	bl	8008962 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006984:	2182      	movs	r1, #130	; 0x82
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 ffeb 	bl	8008962 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00e      	beq.n	80069c4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069b6:	4618      	mov	r0, r3
 80069b8:	f002 f8de 	bl	8008b78 <USBD_static_free>
    pdev->pClassData = NULL;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e0af      	b.n	8006b58 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d03f      	beq.n	8006a84 <USBD_CDC_Setup+0xb4>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	f040 809f 	bne.w	8006b48 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	88db      	ldrh	r3, [r3, #6]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d02e      	beq.n	8006a70 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	b25b      	sxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	da16      	bge.n	8006a4a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006a28:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	88d2      	ldrh	r2, [r2, #6]
 8006a2e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	88db      	ldrh	r3, [r3, #6]
 8006a34:	2b07      	cmp	r3, #7
 8006a36:	bf28      	it	cs
 8006a38:	2307      	movcs	r3, #7
 8006a3a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	89fa      	ldrh	r2, [r7, #14]
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fb19 	bl	800807a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006a48:	e085      	b.n	8006b56 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	785a      	ldrb	r2, [r3, #1]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	88db      	ldrh	r3, [r3, #6]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006a60:	6939      	ldr	r1, [r7, #16]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	88db      	ldrh	r3, [r3, #6]
 8006a66:	461a      	mov	r2, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 fb32 	bl	80080d2 <USBD_CtlPrepareRx>
      break;
 8006a6e:	e072      	b.n	8006b56 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	7850      	ldrb	r0, [r2, #1]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	4798      	blx	r3
      break;
 8006a82:	e068      	b.n	8006b56 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	2b0b      	cmp	r3, #11
 8006a8a:	d852      	bhi.n	8006b32 <USBD_CDC_Setup+0x162>
 8006a8c:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <USBD_CDC_Setup+0xc4>)
 8006a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006ac5 	.word	0x08006ac5
 8006a98:	08006b41 	.word	0x08006b41
 8006a9c:	08006b33 	.word	0x08006b33
 8006aa0:	08006b33 	.word	0x08006b33
 8006aa4:	08006b33 	.word	0x08006b33
 8006aa8:	08006b33 	.word	0x08006b33
 8006aac:	08006b33 	.word	0x08006b33
 8006ab0:	08006b33 	.word	0x08006b33
 8006ab4:	08006b33 	.word	0x08006b33
 8006ab8:	08006b33 	.word	0x08006b33
 8006abc:	08006aef 	.word	0x08006aef
 8006ac0:	08006b19 	.word	0x08006b19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d107      	bne.n	8006ae0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ad0:	f107 030a 	add.w	r3, r7, #10
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 face 	bl	800807a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ade:	e032      	b.n	8006b46 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f001 fa58 	bl	8007f98 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	75fb      	strb	r3, [r7, #23]
          break;
 8006aec:	e02b      	b.n	8006b46 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d107      	bne.n	8006b0a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006afa:	f107 030d 	add.w	r3, r7, #13
 8006afe:	2201      	movs	r2, #1
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 fab9 	bl	800807a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b08:	e01d      	b.n	8006b46 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f001 fa43 	bl	8007f98 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b12:	2303      	movs	r3, #3
 8006b14:	75fb      	strb	r3, [r7, #23]
          break;
 8006b16:	e016      	b.n	8006b46 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d00f      	beq.n	8006b44 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 fa36 	bl	8007f98 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b30:	e008      	b.n	8006b44 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fa2f 	bl	8007f98 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b3e:	e002      	b.n	8006b46 <USBD_CDC_Setup+0x176>
          break;
 8006b40:	bf00      	nop
 8006b42:	e008      	b.n	8006b56 <USBD_CDC_Setup+0x186>
          break;
 8006b44:	bf00      	nop
      }
      break;
 8006b46:	e006      	b.n	8006b56 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 fa24 	bl	8007f98 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b50:	2303      	movs	r3, #3
 8006b52:	75fb      	strb	r3, [r7, #23]
      break;
 8006b54:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e04f      	b.n	8006c22 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006b8a:	78fa      	ldrb	r2, [r7, #3]
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	440b      	add	r3, r1
 8006b98:	3318      	adds	r3, #24
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d029      	beq.n	8006bf4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ba0:	78fa      	ldrb	r2, [r7, #3]
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	3318      	adds	r3, #24
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	78f9      	ldrb	r1, [r7, #3]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	1a5b      	subs	r3, r3, r1
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4403      	add	r3, r0
 8006bc0:	3344      	adds	r3, #68	; 0x44
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006bc8:	fb03 f301 	mul.w	r3, r3, r1
 8006bcc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d110      	bne.n	8006bf4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006bd2:	78fa      	ldrb	r2, [r7, #3]
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	3318      	adds	r3, #24
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006be6:	78f9      	ldrb	r1, [r7, #3]
 8006be8:	2300      	movs	r3, #0
 8006bea:	2200      	movs	r2, #0
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 ff60 	bl	8008ab2 <USBD_LL_Transmit>
 8006bf2:	e015      	b.n	8006c20 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00b      	beq.n	8006c20 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006c1c:	78fa      	ldrb	r2, [r7, #3]
 8006c1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	460b      	mov	r3, r1
 8006c34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e015      	b.n	8006c78 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 ff70 	bl	8008b36 <USBD_LL_GetRxDataSize>
 8006c56:	4602      	mov	r2, r0
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c72:	4611      	mov	r1, r2
 8006c74:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c8e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e01b      	b.n	8006cd2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d015      	beq.n	8006cd0 <USBD_CDC_EP0_RxReady+0x50>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006caa:	2bff      	cmp	r3, #255	; 0xff
 8006cac:	d010      	beq.n	8006cd0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006cbc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006cc4:	b292      	uxth	r2, r2
 8006cc6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	22ff      	movs	r2, #255	; 0xff
 8006ccc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2243      	movs	r2, #67	; 0x43
 8006ce8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006cea:	4b03      	ldr	r3, [pc, #12]	; (8006cf8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	200000e4 	.word	0x200000e4

08006cfc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2243      	movs	r2, #67	; 0x43
 8006d08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006d0a:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	200000a0 	.word	0x200000a0

08006d1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2243      	movs	r2, #67	; 0x43
 8006d28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006d2a:	4b03      	ldr	r3, [pc, #12]	; (8006d38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	20000128 	.word	0x20000128

08006d3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	220a      	movs	r2, #10
 8006d48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d4a:	4b03      	ldr	r3, [pc, #12]	; (8006d58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	2000005c 	.word	0x2000005c

08006d5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e004      	b.n	8006d7a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b087      	sub	sp, #28
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d98:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e008      	b.n	8006db6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dd2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e004      	b.n	8006de8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e04:	2301      	movs	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e01a      	b.n	8006e4c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d114      	bne.n	8006e4a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e3e:	2181      	movs	r1, #129	; 0x81
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 fe36 	bl	8008ab2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e016      	b.n	8006ea0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	7c1b      	ldrb	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d109      	bne.n	8006e8e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e84:	2101      	movs	r1, #1
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 fe34 	bl	8008af4 <USBD_LL_PrepareReceive>
 8006e8c:	e007      	b.n	8006e9e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e94:	2340      	movs	r3, #64	; 0x40
 8006e96:	2101      	movs	r1, #1
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 fe2b 	bl	8008af4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e01f      	b.n	8006f00 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	79fa      	ldrb	r2, [r7, #7]
 8006ef2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f001 fca7 	bl	8008848 <USBD_LL_Init>
 8006efa:	4603      	mov	r3, r0
 8006efc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e016      	b.n	8006f4e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	f107 020e 	add.w	r2, r7, #14
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
 8006f44:	4602      	mov	r2, r0
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fcbe 	bl	80088e0 <USBD_LL_Start>
 8006f64:	4603      	mov	r3, r0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f90:	2303      	movs	r3, #3
 8006f92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d009      	beq.n	8006fb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	78fa      	ldrb	r2, [r7, #3]
 8006fa8:	4611      	mov	r1, r2
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	4798      	blx	r3
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	4611      	mov	r1, r2
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
  }

  return USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 ff90 	bl	8007f24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007012:	461a      	mov	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007020:	f003 031f 	and.w	r3, r3, #31
 8007024:	2b02      	cmp	r3, #2
 8007026:	d01a      	beq.n	800705e <USBD_LL_SetupStage+0x72>
 8007028:	2b02      	cmp	r3, #2
 800702a:	d822      	bhi.n	8007072 <USBD_LL_SetupStage+0x86>
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <USBD_LL_SetupStage+0x4a>
 8007030:	2b01      	cmp	r3, #1
 8007032:	d00a      	beq.n	800704a <USBD_LL_SetupStage+0x5e>
 8007034:	e01d      	b.n	8007072 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa62 	bl	8007508 <USBD_StdDevReq>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
      break;
 8007048:	e020      	b.n	800708c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fac6 	bl	80075e4 <USBD_StdItfReq>
 8007058:	4603      	mov	r3, r0
 800705a:	73fb      	strb	r3, [r7, #15]
      break;
 800705c:	e016      	b.n	800708c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fb05 	bl	8007676 <USBD_StdEPReq>
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]
      break;
 8007070:	e00c      	b.n	800708c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007078:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800707c:	b2db      	uxtb	r3, r3
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 fc8d 	bl	80089a0 <USBD_LL_StallEP>
 8007086:	4603      	mov	r3, r0
 8007088:	73fb      	strb	r3, [r7, #15]
      break;
 800708a:	bf00      	nop
  }

  return ret;
 800708c:	7bfb      	ldrb	r3, [r7, #15]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b086      	sub	sp, #24
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	460b      	mov	r3, r1
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d138      	bne.n	800711c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80070b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070b8:	2b03      	cmp	r3, #3
 80070ba:	d14a      	bne.n	8007152 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d913      	bls.n	80070f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	1ad2      	subs	r2, r2, r3
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	4293      	cmp	r3, r2
 80070e0:	bf28      	it	cs
 80070e2:	4613      	movcs	r3, r2
 80070e4:	461a      	mov	r2, r3
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f001 f80f 	bl	800810c <USBD_CtlContinueRx>
 80070ee:	e030      	b.n	8007152 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d10b      	bne.n	8007114 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d005      	beq.n	8007114 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f001 f80a 	bl	800812e <USBD_CtlSendStatus>
 800711a:	e01a      	b.n	8007152 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b03      	cmp	r3, #3
 8007126:	d114      	bne.n	8007152 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00e      	beq.n	8007152 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	7afa      	ldrb	r2, [r7, #11]
 800713e:	4611      	mov	r1, r2
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	4798      	blx	r3
 8007144:	4603      	mov	r3, r0
 8007146:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800714e:	7dfb      	ldrb	r3, [r7, #23]
 8007150:	e000      	b.n	8007154 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	460b      	mov	r3, r1
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800716a:	7afb      	ldrb	r3, [r7, #11]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d16b      	bne.n	8007248 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3314      	adds	r3, #20
 8007174:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800717c:	2b02      	cmp	r3, #2
 800717e:	d156      	bne.n	800722e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	429a      	cmp	r2, r3
 800718a:	d914      	bls.n	80071b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	1ad2      	subs	r2, r2, r3
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	461a      	mov	r2, r3
 80071a0:	6879      	ldr	r1, [r7, #4]
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 ff84 	bl	80080b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071a8:	2300      	movs	r3, #0
 80071aa:	2200      	movs	r2, #0
 80071ac:	2100      	movs	r1, #0
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f001 fca0 	bl	8008af4 <USBD_LL_PrepareReceive>
 80071b4:	e03b      	b.n	800722e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d11c      	bne.n	80071fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d316      	bcc.n	80071fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071d8:	429a      	cmp	r2, r3
 80071da:	d20f      	bcs.n	80071fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071dc:	2200      	movs	r2, #0
 80071de:	2100      	movs	r1, #0
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 ff65 	bl	80080b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071ee:	2300      	movs	r3, #0
 80071f0:	2200      	movs	r2, #0
 80071f2:	2100      	movs	r1, #0
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f001 fc7d 	bl	8008af4 <USBD_LL_PrepareReceive>
 80071fa:	e018      	b.n	800722e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b03      	cmp	r3, #3
 8007206:	d10b      	bne.n	8007220 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d005      	beq.n	8007220 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007220:	2180      	movs	r1, #128	; 0x80
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f001 fbbc 	bl	80089a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 ff93 	bl	8008154 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007234:	2b01      	cmp	r3, #1
 8007236:	d122      	bne.n	800727e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff fe98 	bl	8006f6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007246:	e01a      	b.n	800727e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b03      	cmp	r3, #3
 8007252:	d114      	bne.n	800727e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00e      	beq.n	800727e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	7afa      	ldrb	r2, [r7, #11]
 800726a:	4611      	mov	r1, r2
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	4798      	blx	r3
 8007270:	4603      	mov	r3, r0
 8007272:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	e000      	b.n	8007280 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e02f      	b.n	800731c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00f      	beq.n	80072e6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d009      	beq.n	80072e6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6852      	ldr	r2, [r2, #4]
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	4611      	mov	r1, r2
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072e6:	2340      	movs	r3, #64	; 0x40
 80072e8:	2200      	movs	r2, #0
 80072ea:	2100      	movs	r1, #0
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 fb12 	bl	8008916 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2240      	movs	r2, #64	; 0x40
 80072fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007302:	2340      	movs	r3, #64	; 0x40
 8007304:	2200      	movs	r2, #0
 8007306:	2180      	movs	r1, #128	; 0x80
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 fb04 	bl	8008916 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2240      	movs	r2, #64	; 0x40
 8007318:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	78fa      	ldrb	r2, [r7, #3]
 8007334:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007352:	b2da      	uxtb	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2204      	movs	r2, #4
 800735e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b04      	cmp	r3, #4
 8007382:	d106      	bne.n	8007392 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800738a:	b2da      	uxtb	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e012      	b.n	80073dc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d10b      	bne.n	80073da <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d005      	beq.n	80073da <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e014      	b.n	8007428 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b03      	cmp	r3, #3
 8007408:	d10d      	bne.n	8007426 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d007      	beq.n	8007426 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	78fa      	ldrb	r2, [r7, #3]
 8007420:	4611      	mov	r1, r2
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007446:	2303      	movs	r3, #3
 8007448:	e014      	b.n	8007474 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b03      	cmp	r3, #3
 8007454:	d10d      	bne.n	8007472 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	78fa      	ldrb	r2, [r7, #3]
 800746c:	4611      	mov	r1, r2
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6852      	ldr	r2, [r2, #4]
 80074b8:	b2d2      	uxtb	r2, r2
 80074ba:	4611      	mov	r1, r2
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
  }

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b087      	sub	sp, #28
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	3301      	adds	r3, #1
 80074e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80074e8:	8a3b      	ldrh	r3, [r7, #16]
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	b21a      	sxth	r2, r3
 80074ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	b21b      	sxth	r3, r3
 80074f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80074f8:	89fb      	ldrh	r3, [r7, #14]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
	...

08007508 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800751e:	2b40      	cmp	r3, #64	; 0x40
 8007520:	d005      	beq.n	800752e <USBD_StdDevReq+0x26>
 8007522:	2b40      	cmp	r3, #64	; 0x40
 8007524:	d853      	bhi.n	80075ce <USBD_StdDevReq+0xc6>
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00b      	beq.n	8007542 <USBD_StdDevReq+0x3a>
 800752a:	2b20      	cmp	r3, #32
 800752c:	d14f      	bne.n	80075ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]
      break;
 8007540:	e04a      	b.n	80075d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	785b      	ldrb	r3, [r3, #1]
 8007546:	2b09      	cmp	r3, #9
 8007548:	d83b      	bhi.n	80075c2 <USBD_StdDevReq+0xba>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <USBD_StdDevReq+0x48>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	080075a5 	.word	0x080075a5
 8007554:	080075b9 	.word	0x080075b9
 8007558:	080075c3 	.word	0x080075c3
 800755c:	080075af 	.word	0x080075af
 8007560:	080075c3 	.word	0x080075c3
 8007564:	08007583 	.word	0x08007583
 8007568:	08007579 	.word	0x08007579
 800756c:	080075c3 	.word	0x080075c3
 8007570:	0800759b 	.word	0x0800759b
 8007574:	0800758d 	.word	0x0800758d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f9de 	bl	800793c <USBD_GetDescriptor>
          break;
 8007580:	e024      	b.n	80075cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fb43 	bl	8007c10 <USBD_SetAddress>
          break;
 800758a:	e01f      	b.n	80075cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fb82 	bl	8007c98 <USBD_SetConfig>
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]
          break;
 8007598:	e018      	b.n	80075cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fc21 	bl	8007de4 <USBD_GetConfig>
          break;
 80075a2:	e013      	b.n	80075cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fc52 	bl	8007e50 <USBD_GetStatus>
          break;
 80075ac:	e00e      	b.n	80075cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fc81 	bl	8007eb8 <USBD_SetFeature>
          break;
 80075b6:	e009      	b.n	80075cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fc90 	bl	8007ee0 <USBD_ClrFeature>
          break;
 80075c0:	e004      	b.n	80075cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fce7 	bl	8007f98 <USBD_CtlError>
          break;
 80075ca:	bf00      	nop
      }
      break;
 80075cc:	e004      	b.n	80075d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fce1 	bl	8007f98 <USBD_CtlError>
      break;
 80075d6:	bf00      	nop
  }

  return ret;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop

080075e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075fa:	2b40      	cmp	r3, #64	; 0x40
 80075fc:	d005      	beq.n	800760a <USBD_StdItfReq+0x26>
 80075fe:	2b40      	cmp	r3, #64	; 0x40
 8007600:	d82f      	bhi.n	8007662 <USBD_StdItfReq+0x7e>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <USBD_StdItfReq+0x26>
 8007606:	2b20      	cmp	r3, #32
 8007608:	d12b      	bne.n	8007662 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007610:	b2db      	uxtb	r3, r3
 8007612:	3b01      	subs	r3, #1
 8007614:	2b02      	cmp	r3, #2
 8007616:	d81d      	bhi.n	8007654 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	889b      	ldrh	r3, [r3, #4]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b01      	cmp	r3, #1
 8007620:	d813      	bhi.n	800764a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	4798      	blx	r3
 8007630:	4603      	mov	r3, r0
 8007632:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	88db      	ldrh	r3, [r3, #6]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d110      	bne.n	800765e <USBD_StdItfReq+0x7a>
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10d      	bne.n	800765e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fd73 	bl	800812e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007648:	e009      	b.n	800765e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fca3 	bl	8007f98 <USBD_CtlError>
          break;
 8007652:	e004      	b.n	800765e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fc9e 	bl	8007f98 <USBD_CtlError>
          break;
 800765c:	e000      	b.n	8007660 <USBD_StdItfReq+0x7c>
          break;
 800765e:	bf00      	nop
      }
      break;
 8007660:	e004      	b.n	800766c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fc97 	bl	8007f98 <USBD_CtlError>
      break;
 800766a:	bf00      	nop
  }

  return ret;
 800766c:	7bfb      	ldrb	r3, [r7, #15]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	889b      	ldrh	r3, [r3, #4]
 8007688:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007692:	2b40      	cmp	r3, #64	; 0x40
 8007694:	d007      	beq.n	80076a6 <USBD_StdEPReq+0x30>
 8007696:	2b40      	cmp	r3, #64	; 0x40
 8007698:	f200 8145 	bhi.w	8007926 <USBD_StdEPReq+0x2b0>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00c      	beq.n	80076ba <USBD_StdEPReq+0x44>
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	f040 8140 	bne.w	8007926 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4798      	blx	r3
 80076b4:	4603      	mov	r3, r0
 80076b6:	73fb      	strb	r3, [r7, #15]
      break;
 80076b8:	e13a      	b.n	8007930 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	785b      	ldrb	r3, [r3, #1]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d007      	beq.n	80076d2 <USBD_StdEPReq+0x5c>
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	f300 8129 	bgt.w	800791a <USBD_StdEPReq+0x2a4>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d07f      	beq.n	80077cc <USBD_StdEPReq+0x156>
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d03c      	beq.n	800774a <USBD_StdEPReq+0xd4>
 80076d0:	e123      	b.n	800791a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d002      	beq.n	80076e4 <USBD_StdEPReq+0x6e>
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d016      	beq.n	8007710 <USBD_StdEPReq+0x9a>
 80076e2:	e02c      	b.n	800773e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00d      	beq.n	8007706 <USBD_StdEPReq+0x90>
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	2b80      	cmp	r3, #128	; 0x80
 80076ee:	d00a      	beq.n	8007706 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f001 f953 	bl	80089a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076fa:	2180      	movs	r1, #128	; 0x80
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f001 f94f 	bl	80089a0 <USBD_LL_StallEP>
 8007702:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007704:	e020      	b.n	8007748 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fc45 	bl	8007f98 <USBD_CtlError>
              break;
 800770e:	e01b      	b.n	8007748 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	885b      	ldrh	r3, [r3, #2]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10e      	bne.n	8007736 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00b      	beq.n	8007736 <USBD_StdEPReq+0xc0>
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	2b80      	cmp	r3, #128	; 0x80
 8007722:	d008      	beq.n	8007736 <USBD_StdEPReq+0xc0>
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	88db      	ldrh	r3, [r3, #6]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d104      	bne.n	8007736 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 f935 	bl	80089a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fcf9 	bl	800812e <USBD_CtlSendStatus>

              break;
 800773c:	e004      	b.n	8007748 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fc29 	bl	8007f98 <USBD_CtlError>
              break;
 8007746:	bf00      	nop
          }
          break;
 8007748:	e0ec      	b.n	8007924 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d002      	beq.n	800775c <USBD_StdEPReq+0xe6>
 8007756:	2b03      	cmp	r3, #3
 8007758:	d016      	beq.n	8007788 <USBD_StdEPReq+0x112>
 800775a:	e030      	b.n	80077be <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00d      	beq.n	800777e <USBD_StdEPReq+0x108>
 8007762:	7bbb      	ldrb	r3, [r7, #14]
 8007764:	2b80      	cmp	r3, #128	; 0x80
 8007766:	d00a      	beq.n	800777e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 f917 	bl	80089a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007772:	2180      	movs	r1, #128	; 0x80
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f913 	bl	80089a0 <USBD_LL_StallEP>
 800777a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800777c:	e025      	b.n	80077ca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fc09 	bl	8007f98 <USBD_CtlError>
              break;
 8007786:	e020      	b.n	80077ca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	885b      	ldrh	r3, [r3, #2]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d11b      	bne.n	80077c8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007796:	2b00      	cmp	r3, #0
 8007798:	d004      	beq.n	80077a4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 f91d 	bl	80089de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fcc2 	bl	800812e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	4798      	blx	r3
 80077b8:	4603      	mov	r3, r0
 80077ba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80077bc:	e004      	b.n	80077c8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fbe9 	bl	8007f98 <USBD_CtlError>
              break;
 80077c6:	e000      	b.n	80077ca <USBD_StdEPReq+0x154>
              break;
 80077c8:	bf00      	nop
          }
          break;
 80077ca:	e0ab      	b.n	8007924 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d002      	beq.n	80077de <USBD_StdEPReq+0x168>
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d032      	beq.n	8007842 <USBD_StdEPReq+0x1cc>
 80077dc:	e097      	b.n	800790e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d007      	beq.n	80077f4 <USBD_StdEPReq+0x17e>
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	2b80      	cmp	r3, #128	; 0x80
 80077e8:	d004      	beq.n	80077f4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fbd3 	bl	8007f98 <USBD_CtlError>
                break;
 80077f2:	e091      	b.n	8007918 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	da0b      	bge.n	8007814 <USBD_StdEPReq+0x19e>
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	3310      	adds	r3, #16
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	4413      	add	r3, r2
 8007810:	3304      	adds	r3, #4
 8007812:	e00b      	b.n	800782c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800781a:	4613      	mov	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4413      	add	r3, r2
 800782a:	3304      	adds	r3, #4
 800782c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2200      	movs	r2, #0
 8007832:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2202      	movs	r2, #2
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fc1d 	bl	800807a <USBD_CtlSendData>
              break;
 8007840:	e06a      	b.n	8007918 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007842:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007846:	2b00      	cmp	r3, #0
 8007848:	da11      	bge.n	800786e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	f003 020f 	and.w	r2, r3, #15
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	440b      	add	r3, r1
 800785c:	3324      	adds	r3, #36	; 0x24
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d117      	bne.n	8007894 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fb96 	bl	8007f98 <USBD_CtlError>
                  break;
 800786c:	e054      	b.n	8007918 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800786e:	7bbb      	ldrb	r3, [r7, #14]
 8007870:	f003 020f 	and.w	r2, r3, #15
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	4613      	mov	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	440b      	add	r3, r1
 8007880:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d104      	bne.n	8007894 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fb83 	bl	8007f98 <USBD_CtlError>
                  break;
 8007892:	e041      	b.n	8007918 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007898:	2b00      	cmp	r3, #0
 800789a:	da0b      	bge.n	80078b4 <USBD_StdEPReq+0x23e>
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078a2:	4613      	mov	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	3310      	adds	r3, #16
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	4413      	add	r3, r2
 80078b0:	3304      	adds	r3, #4
 80078b2:	e00b      	b.n	80078cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078ba:	4613      	mov	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	4413      	add	r3, r2
 80078ca:	3304      	adds	r3, #4
 80078cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <USBD_StdEPReq+0x264>
 80078d4:	7bbb      	ldrb	r3, [r7, #14]
 80078d6:	2b80      	cmp	r3, #128	; 0x80
 80078d8:	d103      	bne.n	80078e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	e00e      	b.n	8007900 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 f898 	bl	8008a1c <USBD_LL_IsStallEP>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d003      	beq.n	80078fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2201      	movs	r2, #1
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	e002      	b.n	8007900 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2202      	movs	r2, #2
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fbb7 	bl	800807a <USBD_CtlSendData>
              break;
 800790c:	e004      	b.n	8007918 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fb41 	bl	8007f98 <USBD_CtlError>
              break;
 8007916:	bf00      	nop
          }
          break;
 8007918:	e004      	b.n	8007924 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fb3b 	bl	8007f98 <USBD_CtlError>
          break;
 8007922:	bf00      	nop
      }
      break;
 8007924:	e004      	b.n	8007930 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fb35 	bl	8007f98 <USBD_CtlError>
      break;
 800792e:	bf00      	nop
  }

  return ret;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	885b      	ldrh	r3, [r3, #2]
 8007956:	0a1b      	lsrs	r3, r3, #8
 8007958:	b29b      	uxth	r3, r3
 800795a:	3b01      	subs	r3, #1
 800795c:	2b06      	cmp	r3, #6
 800795e:	f200 8128 	bhi.w	8007bb2 <USBD_GetDescriptor+0x276>
 8007962:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <USBD_GetDescriptor+0x2c>)
 8007964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007968:	08007985 	.word	0x08007985
 800796c:	0800799d 	.word	0x0800799d
 8007970:	080079dd 	.word	0x080079dd
 8007974:	08007bb3 	.word	0x08007bb3
 8007978:	08007bb3 	.word	0x08007bb3
 800797c:	08007b53 	.word	0x08007b53
 8007980:	08007b7f 	.word	0x08007b7f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	7c12      	ldrb	r2, [r2, #16]
 8007990:	f107 0108 	add.w	r1, r7, #8
 8007994:	4610      	mov	r0, r2
 8007996:	4798      	blx	r3
 8007998:	60f8      	str	r0, [r7, #12]
      break;
 800799a:	e112      	b.n	8007bc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	7c1b      	ldrb	r3, [r3, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10d      	bne.n	80079c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ac:	f107 0208 	add.w	r2, r7, #8
 80079b0:	4610      	mov	r0, r2
 80079b2:	4798      	blx	r3
 80079b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3301      	adds	r3, #1
 80079ba:	2202      	movs	r2, #2
 80079bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079be:	e100      	b.n	8007bc2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	f107 0208 	add.w	r2, r7, #8
 80079cc:	4610      	mov	r0, r2
 80079ce:	4798      	blx	r3
 80079d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3301      	adds	r3, #1
 80079d6:	2202      	movs	r2, #2
 80079d8:	701a      	strb	r2, [r3, #0]
      break;
 80079da:	e0f2      	b.n	8007bc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	885b      	ldrh	r3, [r3, #2]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b05      	cmp	r3, #5
 80079e4:	f200 80ac 	bhi.w	8007b40 <USBD_GetDescriptor+0x204>
 80079e8:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <USBD_GetDescriptor+0xb4>)
 80079ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ee:	bf00      	nop
 80079f0:	08007a09 	.word	0x08007a09
 80079f4:	08007a3d 	.word	0x08007a3d
 80079f8:	08007a71 	.word	0x08007a71
 80079fc:	08007aa5 	.word	0x08007aa5
 8007a00:	08007ad9 	.word	0x08007ad9
 8007a04:	08007b0d 	.word	0x08007b0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00b      	beq.n	8007a2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	7c12      	ldrb	r2, [r2, #16]
 8007a20:	f107 0108 	add.w	r1, r7, #8
 8007a24:	4610      	mov	r0, r2
 8007a26:	4798      	blx	r3
 8007a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2a:	e091      	b.n	8007b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fab2 	bl	8007f98 <USBD_CtlError>
            err++;
 8007a34:	7afb      	ldrb	r3, [r7, #11]
 8007a36:	3301      	adds	r3, #1
 8007a38:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3a:	e089      	b.n	8007b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00b      	beq.n	8007a60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	7c12      	ldrb	r2, [r2, #16]
 8007a54:	f107 0108 	add.w	r1, r7, #8
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
 8007a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a5e:	e077      	b.n	8007b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fa98 	bl	8007f98 <USBD_CtlError>
            err++;
 8007a68:	7afb      	ldrb	r3, [r7, #11]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a6e:	e06f      	b.n	8007b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00b      	beq.n	8007a94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	7c12      	ldrb	r2, [r2, #16]
 8007a88:	f107 0108 	add.w	r1, r7, #8
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4798      	blx	r3
 8007a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a92:	e05d      	b.n	8007b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fa7e 	bl	8007f98 <USBD_CtlError>
            err++;
 8007a9c:	7afb      	ldrb	r3, [r7, #11]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8007aa2:	e055      	b.n	8007b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	7c12      	ldrb	r2, [r2, #16]
 8007abc:	f107 0108 	add.w	r1, r7, #8
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4798      	blx	r3
 8007ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ac6:	e043      	b.n	8007b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fa64 	bl	8007f98 <USBD_CtlError>
            err++;
 8007ad0:	7afb      	ldrb	r3, [r7, #11]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ad6:	e03b      	b.n	8007b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00b      	beq.n	8007afc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	7c12      	ldrb	r2, [r2, #16]
 8007af0:	f107 0108 	add.w	r1, r7, #8
 8007af4:	4610      	mov	r0, r2
 8007af6:	4798      	blx	r3
 8007af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007afa:	e029      	b.n	8007b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fa4a 	bl	8007f98 <USBD_CtlError>
            err++;
 8007b04:	7afb      	ldrb	r3, [r7, #11]
 8007b06:	3301      	adds	r3, #1
 8007b08:	72fb      	strb	r3, [r7, #11]
          break;
 8007b0a:	e021      	b.n	8007b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00b      	beq.n	8007b30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	7c12      	ldrb	r2, [r2, #16]
 8007b24:	f107 0108 	add.w	r1, r7, #8
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4798      	blx	r3
 8007b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b2e:	e00f      	b.n	8007b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fa30 	bl	8007f98 <USBD_CtlError>
            err++;
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b3e:	e007      	b.n	8007b50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fa28 	bl	8007f98 <USBD_CtlError>
          err++;
 8007b48:	7afb      	ldrb	r3, [r7, #11]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007b4e:	bf00      	nop
      }
      break;
 8007b50:	e037      	b.n	8007bc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	7c1b      	ldrb	r3, [r3, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d109      	bne.n	8007b6e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b62:	f107 0208 	add.w	r2, r7, #8
 8007b66:	4610      	mov	r0, r2
 8007b68:	4798      	blx	r3
 8007b6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b6c:	e029      	b.n	8007bc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fa11 	bl	8007f98 <USBD_CtlError>
        err++;
 8007b76:	7afb      	ldrb	r3, [r7, #11]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b7c:	e021      	b.n	8007bc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	7c1b      	ldrb	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10d      	bne.n	8007ba2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8e:	f107 0208 	add.w	r2, r7, #8
 8007b92:	4610      	mov	r0, r2
 8007b94:	4798      	blx	r3
 8007b96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	2207      	movs	r2, #7
 8007b9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ba0:	e00f      	b.n	8007bc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f9f7 	bl	8007f98 <USBD_CtlError>
        err++;
 8007baa:	7afb      	ldrb	r3, [r7, #11]
 8007bac:	3301      	adds	r3, #1
 8007bae:	72fb      	strb	r3, [r7, #11]
      break;
 8007bb0:	e007      	b.n	8007bc2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f9ef 	bl	8007f98 <USBD_CtlError>
      err++;
 8007bba:	7afb      	ldrb	r3, [r7, #11]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	72fb      	strb	r3, [r7, #11]
      break;
 8007bc0:	bf00      	nop
  }

  if (err != 0U)
 8007bc2:	7afb      	ldrb	r3, [r7, #11]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d11e      	bne.n	8007c06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	88db      	ldrh	r3, [r3, #6]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d016      	beq.n	8007bfe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007bd0:	893b      	ldrh	r3, [r7, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00e      	beq.n	8007bf4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	88da      	ldrh	r2, [r3, #6]
 8007bda:	893b      	ldrh	r3, [r7, #8]
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	bf28      	it	cs
 8007be0:	4613      	movcs	r3, r2
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007be6:	893b      	ldrh	r3, [r7, #8]
 8007be8:	461a      	mov	r2, r3
 8007bea:	68f9      	ldr	r1, [r7, #12]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fa44 	bl	800807a <USBD_CtlSendData>
 8007bf2:	e009      	b.n	8007c08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f9ce 	bl	8007f98 <USBD_CtlError>
 8007bfc:	e004      	b.n	8007c08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fa95 	bl	800812e <USBD_CtlSendStatus>
 8007c04:	e000      	b.n	8007c08 <USBD_GetDescriptor+0x2cc>
    return;
 8007c06:	bf00      	nop
  }
}
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop

08007c10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	889b      	ldrh	r3, [r3, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d131      	bne.n	8007c86 <USBD_SetAddress+0x76>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	88db      	ldrh	r3, [r3, #6]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d12d      	bne.n	8007c86 <USBD_SetAddress+0x76>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	885b      	ldrh	r3, [r3, #2]
 8007c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8007c30:	d829      	bhi.n	8007c86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	885b      	ldrh	r3, [r3, #2]
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d104      	bne.n	8007c54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f9a3 	bl	8007f98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c52:	e01d      	b.n	8007c90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	7bfa      	ldrb	r2, [r7, #15]
 8007c58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 ff07 	bl	8008a74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa61 	bl	800812e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d004      	beq.n	8007c7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2202      	movs	r2, #2
 8007c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c7a:	e009      	b.n	8007c90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c84:	e004      	b.n	8007c90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f985 	bl	8007f98 <USBD_CtlError>
  }
}
 8007c8e:	bf00      	nop
 8007c90:	bf00      	nop
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	885b      	ldrh	r3, [r3, #2]
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	4b4c      	ldr	r3, [pc, #304]	; (8007de0 <USBD_SetConfig+0x148>)
 8007cae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007cb0:	4b4b      	ldr	r3, [pc, #300]	; (8007de0 <USBD_SetConfig+0x148>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d905      	bls.n	8007cc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f96c 	bl	8007f98 <USBD_CtlError>
    return USBD_FAIL;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e088      	b.n	8007dd6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d002      	beq.n	8007cd6 <USBD_SetConfig+0x3e>
 8007cd0:	2b03      	cmp	r3, #3
 8007cd2:	d025      	beq.n	8007d20 <USBD_SetConfig+0x88>
 8007cd4:	e071      	b.n	8007dba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007cd6:	4b42      	ldr	r3, [pc, #264]	; (8007de0 <USBD_SetConfig+0x148>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d01c      	beq.n	8007d18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007cde:	4b40      	ldr	r3, [pc, #256]	; (8007de0 <USBD_SetConfig+0x148>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ce8:	4b3d      	ldr	r3, [pc, #244]	; (8007de0 <USBD_SetConfig+0x148>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff f948 	bl	8006f84 <USBD_SetClassConfig>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d004      	beq.n	8007d08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f949 	bl	8007f98 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d06:	e065      	b.n	8007dd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fa10 	bl	800812e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2203      	movs	r2, #3
 8007d12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d16:	e05d      	b.n	8007dd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fa08 	bl	800812e <USBD_CtlSendStatus>
      break;
 8007d1e:	e059      	b.n	8007dd4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d20:	4b2f      	ldr	r3, [pc, #188]	; (8007de0 <USBD_SetConfig+0x148>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d112      	bne.n	8007d4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d30:	4b2b      	ldr	r3, [pc, #172]	; (8007de0 <USBD_SetConfig+0x148>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d3a:	4b29      	ldr	r3, [pc, #164]	; (8007de0 <USBD_SetConfig+0x148>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff f93b 	bl	8006fbc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f9f1 	bl	800812e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d4c:	e042      	b.n	8007dd4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007d4e:	4b24      	ldr	r3, [pc, #144]	; (8007de0 <USBD_SetConfig+0x148>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d02a      	beq.n	8007db2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff f929 	bl	8006fbc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d6a:	4b1d      	ldr	r3, [pc, #116]	; (8007de0 <USBD_SetConfig+0x148>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d74:	4b1a      	ldr	r3, [pc, #104]	; (8007de0 <USBD_SetConfig+0x148>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff f902 	bl	8006f84 <USBD_SetClassConfig>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00f      	beq.n	8007daa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f903 	bl	8007f98 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff f90e 	bl	8006fbc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007da8:	e014      	b.n	8007dd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f9bf 	bl	800812e <USBD_CtlSendStatus>
      break;
 8007db0:	e010      	b.n	8007dd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f9bb 	bl	800812e <USBD_CtlSendStatus>
      break;
 8007db8:	e00c      	b.n	8007dd4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f8eb 	bl	8007f98 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007dc2:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <USBD_SetConfig+0x148>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7ff f8f7 	bl	8006fbc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd2:	bf00      	nop
  }

  return ret;
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	200001f8 	.word	0x200001f8

08007de4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	88db      	ldrh	r3, [r3, #6]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d004      	beq.n	8007e00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f8cd 	bl	8007f98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dfe:	e023      	b.n	8007e48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	dc02      	bgt.n	8007e12 <USBD_GetConfig+0x2e>
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	dc03      	bgt.n	8007e18 <USBD_GetConfig+0x34>
 8007e10:	e015      	b.n	8007e3e <USBD_GetConfig+0x5a>
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d00b      	beq.n	8007e2e <USBD_GetConfig+0x4a>
 8007e16:	e012      	b.n	8007e3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3308      	adds	r3, #8
 8007e22:	2201      	movs	r2, #1
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f927 	bl	800807a <USBD_CtlSendData>
        break;
 8007e2c:	e00c      	b.n	8007e48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3304      	adds	r3, #4
 8007e32:	2201      	movs	r2, #1
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f91f 	bl	800807a <USBD_CtlSendData>
        break;
 8007e3c:	e004      	b.n	8007e48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f8a9 	bl	8007f98 <USBD_CtlError>
        break;
 8007e46:	bf00      	nop
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d81e      	bhi.n	8007ea6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	88db      	ldrh	r3, [r3, #6]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d004      	beq.n	8007e7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f890 	bl	8007f98 <USBD_CtlError>
        break;
 8007e78:	e01a      	b.n	8007eb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d005      	beq.n	8007e96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f043 0202 	orr.w	r2, r3, #2
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	330c      	adds	r3, #12
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f8eb 	bl	800807a <USBD_CtlSendData>
      break;
 8007ea4:	e004      	b.n	8007eb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f875 	bl	8007f98 <USBD_CtlError>
      break;
 8007eae:	bf00      	nop
  }
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	885b      	ldrh	r3, [r3, #2]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d106      	bne.n	8007ed8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f92b 	bl	800812e <USBD_CtlSendStatus>
  }
}
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d80b      	bhi.n	8007f10 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	885b      	ldrh	r3, [r3, #2]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d10c      	bne.n	8007f1a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f910 	bl	800812e <USBD_CtlSendStatus>
      }
      break;
 8007f0e:	e004      	b.n	8007f1a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f840 	bl	8007f98 <USBD_CtlError>
      break;
 8007f18:	e000      	b.n	8007f1c <USBD_ClrFeature+0x3c>
      break;
 8007f1a:	bf00      	nop
  }
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	781a      	ldrb	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	781a      	ldrb	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f7ff fabb 	bl	80074ca <SWAPBYTE>
 8007f54:	4603      	mov	r3, r0
 8007f56:	461a      	mov	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3301      	adds	r3, #1
 8007f66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f7ff faae 	bl	80074ca <SWAPBYTE>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	461a      	mov	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff faa1 	bl	80074ca <SWAPBYTE>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	80da      	strh	r2, [r3, #6]
}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fa2:	2180      	movs	r1, #128	; 0x80
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fcfb 	bl	80089a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007faa:	2100      	movs	r1, #0
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fcf7 	bl	80089a0 <USBD_LL_StallEP>
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b086      	sub	sp, #24
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d036      	beq.n	800803e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007fd4:	6938      	ldr	r0, [r7, #16]
 8007fd6:	f000 f836 	bl	8008046 <USBD_GetLen>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	3301      	adds	r3, #1
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	4413      	add	r3, r2
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	7812      	ldrb	r2, [r2, #0]
 8007ff2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	4413      	add	r3, r2
 8008000:	2203      	movs	r2, #3
 8008002:	701a      	strb	r2, [r3, #0]
  idx++;
 8008004:	7dfb      	ldrb	r3, [r7, #23]
 8008006:	3301      	adds	r3, #1
 8008008:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800800a:	e013      	b.n	8008034 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	4413      	add	r3, r2
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	7812      	ldrb	r2, [r2, #0]
 8008016:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	3301      	adds	r3, #1
 800801c:	613b      	str	r3, [r7, #16]
    idx++;
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	3301      	adds	r3, #1
 8008022:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008024:	7dfb      	ldrb	r3, [r7, #23]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	4413      	add	r3, r2
 800802a:	2200      	movs	r2, #0
 800802c:	701a      	strb	r2, [r3, #0]
    idx++;
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	3301      	adds	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e7      	bne.n	800800c <USBD_GetString+0x52>
 800803c:	e000      	b.n	8008040 <USBD_GetString+0x86>
    return;
 800803e:	bf00      	nop
  }
}
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008046:	b480      	push	{r7}
 8008048:	b085      	sub	sp, #20
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008056:	e005      	b.n	8008064 <USBD_GetLen+0x1e>
  {
    len++;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	3301      	adds	r3, #1
 800805c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	3301      	adds	r3, #1
 8008062:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1f5      	bne.n	8008058 <USBD_GetLen+0x12>
  }

  return len;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2202      	movs	r2, #2
 800808a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	2100      	movs	r1, #0
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 fd06 	bl	8008ab2 <USBD_LL_Transmit>

  return USBD_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	2100      	movs	r1, #0
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 fcf5 	bl	8008ab2 <USBD_LL_Transmit>

  return USBD_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2203      	movs	r2, #3
 80080e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	2100      	movs	r1, #0
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 fcf9 	bl	8008af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	2100      	movs	r1, #0
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fce8 	bl	8008af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2204      	movs	r2, #4
 800813a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800813e:	2300      	movs	r3, #0
 8008140:	2200      	movs	r2, #0
 8008142:	2100      	movs	r1, #0
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fcb4 	bl	8008ab2 <USBD_LL_Transmit>

  return USBD_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2205      	movs	r2, #5
 8008160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008164:	2300      	movs	r3, #0
 8008166:	2200      	movs	r2, #0
 8008168:	2100      	movs	r1, #0
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fcc2 	bl	8008af4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008180:	2200      	movs	r2, #0
 8008182:	4912      	ldr	r1, [pc, #72]	; (80081cc <MX_USB_DEVICE_Init+0x50>)
 8008184:	4812      	ldr	r0, [pc, #72]	; (80081d0 <MX_USB_DEVICE_Init+0x54>)
 8008186:	f7fe fe8f 	bl	8006ea8 <USBD_Init>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008190:	f7f9 fcae 	bl	8001af0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008194:	490f      	ldr	r1, [pc, #60]	; (80081d4 <MX_USB_DEVICE_Init+0x58>)
 8008196:	480e      	ldr	r0, [pc, #56]	; (80081d0 <MX_USB_DEVICE_Init+0x54>)
 8008198:	f7fe feb6 	bl	8006f08 <USBD_RegisterClass>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081a2:	f7f9 fca5 	bl	8001af0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081a6:	490c      	ldr	r1, [pc, #48]	; (80081d8 <MX_USB_DEVICE_Init+0x5c>)
 80081a8:	4809      	ldr	r0, [pc, #36]	; (80081d0 <MX_USB_DEVICE_Init+0x54>)
 80081aa:	f7fe fdd7 	bl	8006d5c <USBD_CDC_RegisterInterface>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081b4:	f7f9 fc9c 	bl	8001af0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081b8:	4805      	ldr	r0, [pc, #20]	; (80081d0 <MX_USB_DEVICE_Init+0x54>)
 80081ba:	f7fe fecc 	bl	8006f56 <USBD_Start>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081c4:	f7f9 fc94 	bl	8001af0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081c8:	bf00      	nop
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20000180 	.word	0x20000180
 80081d0:	20000618 	.word	0x20000618
 80081d4:	20000068 	.word	0x20000068
 80081d8:	2000016c 	.word	0x2000016c

080081dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081e0:	2200      	movs	r2, #0
 80081e2:	4905      	ldr	r1, [pc, #20]	; (80081f8 <CDC_Init_FS+0x1c>)
 80081e4:	4805      	ldr	r0, [pc, #20]	; (80081fc <CDC_Init_FS+0x20>)
 80081e6:	f7fe fdce 	bl	8006d86 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081ea:	4905      	ldr	r1, [pc, #20]	; (8008200 <CDC_Init_FS+0x24>)
 80081ec:	4803      	ldr	r0, [pc, #12]	; (80081fc <CDC_Init_FS+0x20>)
 80081ee:	f7fe fde8 	bl	8006dc2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	200010e8 	.word	0x200010e8
 80081fc:	20000618 	.word	0x20000618
 8008200:	200008e8 	.word	0x200008e8

08008204 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008208:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800820a:	4618      	mov	r0, r3
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	6039      	str	r1, [r7, #0]
 800821e:	71fb      	strb	r3, [r7, #7]
 8008220:	4613      	mov	r3, r2
 8008222:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	2b23      	cmp	r3, #35	; 0x23
 8008228:	d84a      	bhi.n	80082c0 <CDC_Control_FS+0xac>
 800822a:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <CDC_Control_FS+0x1c>)
 800822c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008230:	080082c1 	.word	0x080082c1
 8008234:	080082c1 	.word	0x080082c1
 8008238:	080082c1 	.word	0x080082c1
 800823c:	080082c1 	.word	0x080082c1
 8008240:	080082c1 	.word	0x080082c1
 8008244:	080082c1 	.word	0x080082c1
 8008248:	080082c1 	.word	0x080082c1
 800824c:	080082c1 	.word	0x080082c1
 8008250:	080082c1 	.word	0x080082c1
 8008254:	080082c1 	.word	0x080082c1
 8008258:	080082c1 	.word	0x080082c1
 800825c:	080082c1 	.word	0x080082c1
 8008260:	080082c1 	.word	0x080082c1
 8008264:	080082c1 	.word	0x080082c1
 8008268:	080082c1 	.word	0x080082c1
 800826c:	080082c1 	.word	0x080082c1
 8008270:	080082c1 	.word	0x080082c1
 8008274:	080082c1 	.word	0x080082c1
 8008278:	080082c1 	.word	0x080082c1
 800827c:	080082c1 	.word	0x080082c1
 8008280:	080082c1 	.word	0x080082c1
 8008284:	080082c1 	.word	0x080082c1
 8008288:	080082c1 	.word	0x080082c1
 800828c:	080082c1 	.word	0x080082c1
 8008290:	080082c1 	.word	0x080082c1
 8008294:	080082c1 	.word	0x080082c1
 8008298:	080082c1 	.word	0x080082c1
 800829c:	080082c1 	.word	0x080082c1
 80082a0:	080082c1 	.word	0x080082c1
 80082a4:	080082c1 	.word	0x080082c1
 80082a8:	080082c1 	.word	0x080082c1
 80082ac:	080082c1 	.word	0x080082c1
 80082b0:	080082c1 	.word	0x080082c1
 80082b4:	080082c1 	.word	0x080082c1
 80082b8:	080082c1 	.word	0x080082c1
 80082bc:	080082c1 	.word	0x080082c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80082c0:	bf00      	nop
  }

  return (USBD_OK);
 80082c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	4810      	ldr	r0, [pc, #64]	; (8008320 <CDC_Receive_FS+0x50>)
 80082de:	f7fe fd70 	bl	8006dc2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082e2:	480f      	ldr	r0, [pc, #60]	; (8008320 <CDC_Receive_FS+0x50>)
 80082e4:	f7fe fdb6 	bl	8006e54 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	73fb      	strb	r3, [r7, #15]
  memset(Rx_Buf, '\0', 128);
 80082ee:	2280      	movs	r2, #128	; 0x80
 80082f0:	2100      	movs	r1, #0
 80082f2:	480c      	ldr	r0, [pc, #48]	; (8008324 <CDC_Receive_FS+0x54>)
 80082f4:	f000 fca8 	bl	8008c48 <memset>
  memcpy(Rx_Buf, Buf, len);
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	461a      	mov	r2, r3
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	4809      	ldr	r0, [pc, #36]	; (8008324 <CDC_Receive_FS+0x54>)
 8008300:	f000 fc94 	bl	8008c2c <memcpy>
  memset(Buf, '\0', len);
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	461a      	mov	r2, r3
 8008308:	2100      	movs	r1, #0
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fc9c 	bl	8008c48 <memset>
  FLAG_New_Data_Received = 1;
 8008310:	4b05      	ldr	r3, [pc, #20]	; (8008328 <CDC_Receive_FS+0x58>)
 8008312:	2201      	movs	r2, #1
 8008314:	601a      	str	r2, [r3, #0]
  return (USBD_OK);
 8008316:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	20000618 	.word	0x20000618
 8008324:	200005e8 	.word	0x200005e8
 8008328:	200001f0 	.word	0x200001f0

0800832c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800833c:	4b0d      	ldr	r3, [pc, #52]	; (8008374 <CDC_Transmit_FS+0x48>)
 800833e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008342:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800834e:	2301      	movs	r3, #1
 8008350:	e00b      	b.n	800836a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008352:	887b      	ldrh	r3, [r7, #2]
 8008354:	461a      	mov	r2, r3
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	4806      	ldr	r0, [pc, #24]	; (8008374 <CDC_Transmit_FS+0x48>)
 800835a:	f7fe fd14 	bl	8006d86 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800835e:	4805      	ldr	r0, [pc, #20]	; (8008374 <CDC_Transmit_FS+0x48>)
 8008360:	f7fe fd48 	bl	8006df4 <USBD_CDC_TransmitPacket>
 8008364:	4603      	mov	r3, r0
 8008366:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20000618 	.word	0x20000618

08008378 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	4613      	mov	r3, r2
 8008384:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800838a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800838e:	4618      	mov	r0, r3
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
	...

0800839c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	6039      	str	r1, [r7, #0]
 80083a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2212      	movs	r2, #18
 80083ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083ae:	4b03      	ldr	r3, [pc, #12]	; (80083bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	2000019c 	.word	0x2000019c

080083c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	6039      	str	r1, [r7, #0]
 80083ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2204      	movs	r2, #4
 80083d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083d2:	4b03      	ldr	r3, [pc, #12]	; (80083e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	200001b0 	.word	0x200001b0

080083e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	6039      	str	r1, [r7, #0]
 80083ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083f0:	79fb      	ldrb	r3, [r7, #7]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d105      	bne.n	8008402 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	4907      	ldr	r1, [pc, #28]	; (8008418 <USBD_FS_ProductStrDescriptor+0x34>)
 80083fa:	4808      	ldr	r0, [pc, #32]	; (800841c <USBD_FS_ProductStrDescriptor+0x38>)
 80083fc:	f7ff fddd 	bl	8007fba <USBD_GetString>
 8008400:	e004      	b.n	800840c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	4904      	ldr	r1, [pc, #16]	; (8008418 <USBD_FS_ProductStrDescriptor+0x34>)
 8008406:	4805      	ldr	r0, [pc, #20]	; (800841c <USBD_FS_ProductStrDescriptor+0x38>)
 8008408:	f7ff fdd7 	bl	8007fba <USBD_GetString>
  }
  return USBD_StrDesc;
 800840c:	4b02      	ldr	r3, [pc, #8]	; (8008418 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	200018e8 	.word	0x200018e8
 800841c:	08008c70 	.word	0x08008c70

08008420 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	6039      	str	r1, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	4904      	ldr	r1, [pc, #16]	; (8008440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008430:	4804      	ldr	r0, [pc, #16]	; (8008444 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008432:	f7ff fdc2 	bl	8007fba <USBD_GetString>
  return USBD_StrDesc;
 8008436:	4b02      	ldr	r3, [pc, #8]	; (8008440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	200018e8 	.word	0x200018e8
 8008444:	08008c7c 	.word	0x08008c7c

08008448 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	4603      	mov	r3, r0
 8008450:	6039      	str	r1, [r7, #0]
 8008452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	221a      	movs	r2, #26
 8008458:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800845a:	f000 f843 	bl	80084e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800845e:	4b02      	ldr	r3, [pc, #8]	; (8008468 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	200001b4 	.word	0x200001b4

0800846c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	6039      	str	r1, [r7, #0]
 8008476:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008478:	79fb      	ldrb	r3, [r7, #7]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d105      	bne.n	800848a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	4907      	ldr	r1, [pc, #28]	; (80084a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008482:	4808      	ldr	r0, [pc, #32]	; (80084a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008484:	f7ff fd99 	bl	8007fba <USBD_GetString>
 8008488:	e004      	b.n	8008494 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	4904      	ldr	r1, [pc, #16]	; (80084a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800848e:	4805      	ldr	r0, [pc, #20]	; (80084a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008490:	f7ff fd93 	bl	8007fba <USBD_GetString>
  }
  return USBD_StrDesc;
 8008494:	4b02      	ldr	r3, [pc, #8]	; (80084a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	200018e8 	.word	0x200018e8
 80084a4:	08008c88 	.word	0x08008c88

080084a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	6039      	str	r1, [r7, #0]
 80084b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084b4:	79fb      	ldrb	r3, [r7, #7]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d105      	bne.n	80084c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	4907      	ldr	r1, [pc, #28]	; (80084dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084be:	4808      	ldr	r0, [pc, #32]	; (80084e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084c0:	f7ff fd7b 	bl	8007fba <USBD_GetString>
 80084c4:	e004      	b.n	80084d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	4904      	ldr	r1, [pc, #16]	; (80084dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084ca:	4805      	ldr	r0, [pc, #20]	; (80084e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084cc:	f7ff fd75 	bl	8007fba <USBD_GetString>
  }
  return USBD_StrDesc;
 80084d0:	4b02      	ldr	r3, [pc, #8]	; (80084dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	200018e8 	.word	0x200018e8
 80084e0:	08008c94 	.word	0x08008c94

080084e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084ea:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <Get_SerialNum+0x44>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084f0:	4b0e      	ldr	r3, [pc, #56]	; (800852c <Get_SerialNum+0x48>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084f6:	4b0e      	ldr	r3, [pc, #56]	; (8008530 <Get_SerialNum+0x4c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4413      	add	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d009      	beq.n	800851e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800850a:	2208      	movs	r2, #8
 800850c:	4909      	ldr	r1, [pc, #36]	; (8008534 <Get_SerialNum+0x50>)
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 f814 	bl	800853c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008514:	2204      	movs	r2, #4
 8008516:	4908      	ldr	r1, [pc, #32]	; (8008538 <Get_SerialNum+0x54>)
 8008518:	68b8      	ldr	r0, [r7, #8]
 800851a:	f000 f80f 	bl	800853c <IntToUnicode>
  }
}
 800851e:	bf00      	nop
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	1fff7a10 	.word	0x1fff7a10
 800852c:	1fff7a14 	.word	0x1fff7a14
 8008530:	1fff7a18 	.word	0x1fff7a18
 8008534:	200001b6 	.word	0x200001b6
 8008538:	200001c6 	.word	0x200001c6

0800853c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	4613      	mov	r3, r2
 8008548:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800854e:	2300      	movs	r3, #0
 8008550:	75fb      	strb	r3, [r7, #23]
 8008552:	e027      	b.n	80085a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	0f1b      	lsrs	r3, r3, #28
 8008558:	2b09      	cmp	r3, #9
 800855a:	d80b      	bhi.n	8008574 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	0f1b      	lsrs	r3, r3, #28
 8008560:	b2da      	uxtb	r2, r3
 8008562:	7dfb      	ldrb	r3, [r7, #23]
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	4619      	mov	r1, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	440b      	add	r3, r1
 800856c:	3230      	adds	r2, #48	; 0x30
 800856e:	b2d2      	uxtb	r2, r2
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	e00a      	b.n	800858a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	0f1b      	lsrs	r3, r3, #28
 8008578:	b2da      	uxtb	r2, r3
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	4619      	mov	r1, r3
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	440b      	add	r3, r1
 8008584:	3237      	adds	r2, #55	; 0x37
 8008586:	b2d2      	uxtb	r2, r2
 8008588:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	011b      	lsls	r3, r3, #4
 800858e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008590:	7dfb      	ldrb	r3, [r7, #23]
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	3301      	adds	r3, #1
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	4413      	add	r3, r2
 800859a:	2200      	movs	r2, #0
 800859c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800859e:	7dfb      	ldrb	r3, [r7, #23]
 80085a0:	3301      	adds	r3, #1
 80085a2:	75fb      	strb	r3, [r7, #23]
 80085a4:	7dfa      	ldrb	r2, [r7, #23]
 80085a6:	79fb      	ldrb	r3, [r7, #7]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d3d3      	bcc.n	8008554 <IntToUnicode+0x18>
  }
}
 80085ac:	bf00      	nop
 80085ae:	bf00      	nop
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
	...

080085bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08a      	sub	sp, #40	; 0x28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085c4:	f107 0314 	add.w	r3, r7, #20
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]
 80085cc:	605a      	str	r2, [r3, #4]
 80085ce:	609a      	str	r2, [r3, #8]
 80085d0:	60da      	str	r2, [r3, #12]
 80085d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085dc:	d13a      	bne.n	8008654 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085de:	2300      	movs	r3, #0
 80085e0:	613b      	str	r3, [r7, #16]
 80085e2:	4b1e      	ldr	r3, [pc, #120]	; (800865c <HAL_PCD_MspInit+0xa0>)
 80085e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e6:	4a1d      	ldr	r2, [pc, #116]	; (800865c <HAL_PCD_MspInit+0xa0>)
 80085e8:	f043 0301 	orr.w	r3, r3, #1
 80085ec:	6313      	str	r3, [r2, #48]	; 0x30
 80085ee:	4b1b      	ldr	r3, [pc, #108]	; (800865c <HAL_PCD_MspInit+0xa0>)
 80085f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	613b      	str	r3, [r7, #16]
 80085f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80085fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80085fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008600:	2302      	movs	r3, #2
 8008602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008604:	2300      	movs	r3, #0
 8008606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008608:	2303      	movs	r3, #3
 800860a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800860c:	230a      	movs	r3, #10
 800860e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008610:	f107 0314 	add.w	r3, r7, #20
 8008614:	4619      	mov	r1, r3
 8008616:	4812      	ldr	r0, [pc, #72]	; (8008660 <HAL_PCD_MspInit+0xa4>)
 8008618:	f7fa f9a0 	bl	800295c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800861c:	4b0f      	ldr	r3, [pc, #60]	; (800865c <HAL_PCD_MspInit+0xa0>)
 800861e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008620:	4a0e      	ldr	r2, [pc, #56]	; (800865c <HAL_PCD_MspInit+0xa0>)
 8008622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008626:	6353      	str	r3, [r2, #52]	; 0x34
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	4b0b      	ldr	r3, [pc, #44]	; (800865c <HAL_PCD_MspInit+0xa0>)
 800862e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008630:	4a0a      	ldr	r2, [pc, #40]	; (800865c <HAL_PCD_MspInit+0xa0>)
 8008632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008636:	6453      	str	r3, [r2, #68]	; 0x44
 8008638:	4b08      	ldr	r3, [pc, #32]	; (800865c <HAL_PCD_MspInit+0xa0>)
 800863a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008644:	2200      	movs	r2, #0
 8008646:	2100      	movs	r1, #0
 8008648:	2043      	movs	r0, #67	; 0x43
 800864a:	f7fa f950 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800864e:	2043      	movs	r0, #67	; 0x43
 8008650:	f7fa f969 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008654:	bf00      	nop
 8008656:	3728      	adds	r7, #40	; 0x28
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	40023800 	.word	0x40023800
 8008660:	40020000 	.word	0x40020000

08008664 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008678:	4619      	mov	r1, r3
 800867a:	4610      	mov	r0, r2
 800867c:	f7fe fcb6 	bl	8006fec <USBD_LL_SetupStage>
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	4613      	mov	r3, r2
 80086a0:	00db      	lsls	r3, r3, #3
 80086a2:	1a9b      	subs	r3, r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	440b      	add	r3, r1
 80086a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	4619      	mov	r1, r3
 80086b2:	f7fe fcf0 	bl	8007096 <USBD_LL_DataOutStage>
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	460b      	mov	r3, r1
 80086c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80086d0:	78fa      	ldrb	r2, [r7, #3]
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	4613      	mov	r3, r2
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	1a9b      	subs	r3, r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	440b      	add	r3, r1
 80086de:	3348      	adds	r3, #72	; 0x48
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	78fb      	ldrb	r3, [r7, #3]
 80086e4:	4619      	mov	r1, r3
 80086e6:	f7fe fd39 	bl	800715c <USBD_LL_DataInStage>
}
 80086ea:	bf00      	nop
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe fe4d 	bl	80073a0 <USBD_LL_SOF>
}
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008716:	2301      	movs	r3, #1
 8008718:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d102      	bne.n	8008728 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
 8008726:	e008      	b.n	800873a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	2b02      	cmp	r3, #2
 800872e:	d102      	bne.n	8008736 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008730:	2301      	movs	r3, #1
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	e001      	b.n	800873a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008736:	f7f9 f9db 	bl	8001af0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008740:	7bfa      	ldrb	r2, [r7, #15]
 8008742:	4611      	mov	r1, r2
 8008744:	4618      	mov	r0, r3
 8008746:	f7fe fded 	bl	8007324 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008750:	4618      	mov	r0, r3
 8008752:	f7fe fd99 	bl	8007288 <USBD_LL_Reset>
}
 8008756:	bf00      	nop
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fde8 	bl	8007344 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6812      	ldr	r2, [r2, #0]
 8008782:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a1b      	ldr	r3, [r3, #32]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008794:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <HAL_PCD_SuspendCallback+0x48>)
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	4a03      	ldr	r2, [pc, #12]	; (80087a8 <HAL_PCD_SuspendCallback+0x48>)
 800879a:	f043 0306 	orr.w	r3, r3, #6
 800879e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	e000ed00 	.word	0xe000ed00

080087ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fe fdd8 	bl	8007370 <USBD_LL_Resume>
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087da:	78fa      	ldrb	r2, [r7, #3]
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe fe26 	bl	8007430 <USBD_LL_IsoOUTIncomplete>
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087fe:	78fa      	ldrb	r2, [r7, #3]
 8008800:	4611      	mov	r1, r2
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe fdee 	bl	80073e4 <USBD_LL_IsoINIncomplete>
}
 8008808:	bf00      	nop
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe fe2c 	bl	800747c <USBD_LL_DevConnected>
}
 8008824:	bf00      	nop
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe fe29 	bl	8007492 <USBD_LL_DevDisconnected>
}
 8008840:	bf00      	nop
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d13c      	bne.n	80088d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008858:	4a20      	ldr	r2, [pc, #128]	; (80088dc <USBD_LL_Init+0x94>)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a1e      	ldr	r2, [pc, #120]	; (80088dc <USBD_LL_Init+0x94>)
 8008864:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008868:	4b1c      	ldr	r3, [pc, #112]	; (80088dc <USBD_LL_Init+0x94>)
 800886a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800886e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008870:	4b1a      	ldr	r3, [pc, #104]	; (80088dc <USBD_LL_Init+0x94>)
 8008872:	2204      	movs	r2, #4
 8008874:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008876:	4b19      	ldr	r3, [pc, #100]	; (80088dc <USBD_LL_Init+0x94>)
 8008878:	2202      	movs	r2, #2
 800887a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800887c:	4b17      	ldr	r3, [pc, #92]	; (80088dc <USBD_LL_Init+0x94>)
 800887e:	2200      	movs	r2, #0
 8008880:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008882:	4b16      	ldr	r3, [pc, #88]	; (80088dc <USBD_LL_Init+0x94>)
 8008884:	2202      	movs	r2, #2
 8008886:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008888:	4b14      	ldr	r3, [pc, #80]	; (80088dc <USBD_LL_Init+0x94>)
 800888a:	2200      	movs	r2, #0
 800888c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800888e:	4b13      	ldr	r3, [pc, #76]	; (80088dc <USBD_LL_Init+0x94>)
 8008890:	2200      	movs	r2, #0
 8008892:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008894:	4b11      	ldr	r3, [pc, #68]	; (80088dc <USBD_LL_Init+0x94>)
 8008896:	2200      	movs	r2, #0
 8008898:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800889a:	4b10      	ldr	r3, [pc, #64]	; (80088dc <USBD_LL_Init+0x94>)
 800889c:	2200      	movs	r2, #0
 800889e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80088a0:	4b0e      	ldr	r3, [pc, #56]	; (80088dc <USBD_LL_Init+0x94>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80088a6:	480d      	ldr	r0, [pc, #52]	; (80088dc <USBD_LL_Init+0x94>)
 80088a8:	f7fa fa0d 	bl	8002cc6 <HAL_PCD_Init>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80088b2:	f7f9 f91d 	bl	8001af0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80088b6:	2180      	movs	r1, #128	; 0x80
 80088b8:	4808      	ldr	r0, [pc, #32]	; (80088dc <USBD_LL_Init+0x94>)
 80088ba:	f7fb fb6a 	bl	8003f92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80088be:	2240      	movs	r2, #64	; 0x40
 80088c0:	2100      	movs	r1, #0
 80088c2:	4806      	ldr	r0, [pc, #24]	; (80088dc <USBD_LL_Init+0x94>)
 80088c4:	f7fb fb1e 	bl	8003f04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80088c8:	2280      	movs	r2, #128	; 0x80
 80088ca:	2101      	movs	r1, #1
 80088cc:	4803      	ldr	r0, [pc, #12]	; (80088dc <USBD_LL_Init+0x94>)
 80088ce:	f7fb fb19 	bl	8003f04 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	20001ae8 	.word	0x20001ae8

080088e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fa fb02 	bl	8002f00 <HAL_PCD_Start>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 f942 	bl	8008b8c <USBD_Get_USB_Status>
 8008908:	4603      	mov	r3, r0
 800890a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800890c:	7bbb      	ldrb	r3, [r7, #14]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	4608      	mov	r0, r1
 8008920:	4611      	mov	r1, r2
 8008922:	461a      	mov	r2, r3
 8008924:	4603      	mov	r3, r0
 8008926:	70fb      	strb	r3, [r7, #3]
 8008928:	460b      	mov	r3, r1
 800892a:	70bb      	strb	r3, [r7, #2]
 800892c:	4613      	mov	r3, r2
 800892e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800893e:	78bb      	ldrb	r3, [r7, #2]
 8008940:	883a      	ldrh	r2, [r7, #0]
 8008942:	78f9      	ldrb	r1, [r7, #3]
 8008944:	f7fa fee6 	bl	8003714 <HAL_PCD_EP_Open>
 8008948:	4603      	mov	r3, r0
 800894a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	4618      	mov	r0, r3
 8008950:	f000 f91c 	bl	8008b8c <USBD_Get_USB_Status>
 8008954:	4603      	mov	r3, r0
 8008956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008958:	7bbb      	ldrb	r3, [r7, #14]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800897c:	78fa      	ldrb	r2, [r7, #3]
 800897e:	4611      	mov	r1, r2
 8008980:	4618      	mov	r0, r3
 8008982:	f7fa ff2f 	bl	80037e4 <HAL_PCD_EP_Close>
 8008986:	4603      	mov	r3, r0
 8008988:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	4618      	mov	r0, r3
 800898e:	f000 f8fd 	bl	8008b8c <USBD_Get_USB_Status>
 8008992:	4603      	mov	r3, r0
 8008994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008996:	7bbb      	ldrb	r3, [r7, #14]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	4611      	mov	r1, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fb f807 	bl	80039d2 <HAL_PCD_EP_SetStall>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 f8de 	bl	8008b8c <USBD_Get_USB_Status>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089f8:	78fa      	ldrb	r2, [r7, #3]
 80089fa:	4611      	mov	r1, r2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fb f84c 	bl	8003a9a <HAL_PCD_EP_ClrStall>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f8bf 	bl	8008b8c <USBD_Get_USB_Status>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	da0b      	bge.n	8008a50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a38:	78fb      	ldrb	r3, [r7, #3]
 8008a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a3e:	68f9      	ldr	r1, [r7, #12]
 8008a40:	4613      	mov	r3, r2
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	1a9b      	subs	r3, r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	440b      	add	r3, r1
 8008a4a:	333e      	adds	r3, #62	; 0x3e
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	e00b      	b.n	8008a68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a50:	78fb      	ldrb	r3, [r7, #3]
 8008a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a56:	68f9      	ldr	r1, [r7, #12]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	00db      	lsls	r3, r3, #3
 8008a5c:	1a9b      	subs	r3, r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	440b      	add	r3, r1
 8008a62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a8e:	78fa      	ldrb	r2, [r7, #3]
 8008a90:	4611      	mov	r1, r2
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fa fe19 	bl	80036ca <HAL_PCD_SetAddress>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 f874 	bl	8008b8c <USBD_Get_USB_Status>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b086      	sub	sp, #24
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ad0:	7af9      	ldrb	r1, [r7, #11]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	f7fa ff32 	bl	800393e <HAL_PCD_EP_Transmit>
 8008ada:	4603      	mov	r3, r0
 8008adc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 f853 	bl	8008b8c <USBD_Get_USB_Status>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008aea:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	460b      	mov	r3, r1
 8008b02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b12:	7af9      	ldrb	r1, [r7, #11]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	f7fa feae 	bl	8003878 <HAL_PCD_EP_Receive>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 f832 	bl	8008b8c <USBD_Get_USB_Status>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b48:	78fa      	ldrb	r2, [r7, #3]
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fa fede 	bl	800390e <HAL_PCD_EP_GetRxCount>
 8008b52:	4603      	mov	r3, r0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b64:	4b03      	ldr	r3, [pc, #12]	; (8008b74 <USBD_static_malloc+0x18>)
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	200001fc 	.word	0x200001fc

08008b78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]

}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	d817      	bhi.n	8008bd0 <USBD_Get_USB_Status+0x44>
 8008ba0:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <USBD_Get_USB_Status+0x1c>)
 8008ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba6:	bf00      	nop
 8008ba8:	08008bb9 	.word	0x08008bb9
 8008bac:	08008bbf 	.word	0x08008bbf
 8008bb0:	08008bc5 	.word	0x08008bc5
 8008bb4:	08008bcb 	.word	0x08008bcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]
    break;
 8008bbc:	e00b      	b.n	8008bd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc2:	e008      	b.n	8008bd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bc8:	e005      	b.n	8008bd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	73fb      	strb	r3, [r7, #15]
    break;
 8008bce:	e002      	b.n	8008bd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd4:	bf00      	nop
  }
  return usb_status;
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <__libc_init_array>:
 8008be4:	b570      	push	{r4, r5, r6, lr}
 8008be6:	4d0d      	ldr	r5, [pc, #52]	; (8008c1c <__libc_init_array+0x38>)
 8008be8:	4c0d      	ldr	r4, [pc, #52]	; (8008c20 <__libc_init_array+0x3c>)
 8008bea:	1b64      	subs	r4, r4, r5
 8008bec:	10a4      	asrs	r4, r4, #2
 8008bee:	2600      	movs	r6, #0
 8008bf0:	42a6      	cmp	r6, r4
 8008bf2:	d109      	bne.n	8008c08 <__libc_init_array+0x24>
 8008bf4:	4d0b      	ldr	r5, [pc, #44]	; (8008c24 <__libc_init_array+0x40>)
 8008bf6:	4c0c      	ldr	r4, [pc, #48]	; (8008c28 <__libc_init_array+0x44>)
 8008bf8:	f000 f82e 	bl	8008c58 <_init>
 8008bfc:	1b64      	subs	r4, r4, r5
 8008bfe:	10a4      	asrs	r4, r4, #2
 8008c00:	2600      	movs	r6, #0
 8008c02:	42a6      	cmp	r6, r4
 8008c04:	d105      	bne.n	8008c12 <__libc_init_array+0x2e>
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c0c:	4798      	blx	r3
 8008c0e:	3601      	adds	r6, #1
 8008c10:	e7ee      	b.n	8008bf0 <__libc_init_array+0xc>
 8008c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c16:	4798      	blx	r3
 8008c18:	3601      	adds	r6, #1
 8008c1a:	e7f2      	b.n	8008c02 <__libc_init_array+0x1e>
 8008c1c:	08008cbc 	.word	0x08008cbc
 8008c20:	08008cbc 	.word	0x08008cbc
 8008c24:	08008cbc 	.word	0x08008cbc
 8008c28:	08008cc0 	.word	0x08008cc0

08008c2c <memcpy>:
 8008c2c:	440a      	add	r2, r1
 8008c2e:	4291      	cmp	r1, r2
 8008c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c34:	d100      	bne.n	8008c38 <memcpy+0xc>
 8008c36:	4770      	bx	lr
 8008c38:	b510      	push	{r4, lr}
 8008c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c42:	4291      	cmp	r1, r2
 8008c44:	d1f9      	bne.n	8008c3a <memcpy+0xe>
 8008c46:	bd10      	pop	{r4, pc}

08008c48 <memset>:
 8008c48:	4402      	add	r2, r0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d100      	bne.n	8008c52 <memset+0xa>
 8008c50:	4770      	bx	lr
 8008c52:	f803 1b01 	strb.w	r1, [r3], #1
 8008c56:	e7f9      	b.n	8008c4c <memset+0x4>

08008c58 <_init>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr

08008c64 <_fini>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	bf00      	nop
 8008c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6a:	bc08      	pop	{r3}
 8008c6c:	469e      	mov	lr, r3
 8008c6e:	4770      	bx	lr
