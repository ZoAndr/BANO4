
USB_ADC_GPIO_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007690  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007818  08007818  00017818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007884  08007884  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08007884  08007884  00017884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800788c  0800788c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08007894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020184  2**0
                  CONTENTS
 10 .bss          00001cc0  20000184  20000184  00020184  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e44  20001e44  00020184  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001961f  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035c4  00000000  00000000  000397d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  0003cd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001008  00000000  00000000  0003df08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250f0  00000000  00000000  0003ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000156d3  00000000  00000000  00064000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8e5d  00000000  00000000  000796d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00152530  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048e0  00000000  00000000  00152584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000184 	.word	0x20000184
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007800 	.word	0x08007800

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000188 	.word	0x20000188
 80001c4:	08007800 	.word	0x08007800

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fc0f 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f84b 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f9f9 	bl	80008d4 <MX_GPIO_Init>
  MX_ADC2_Init();
 80004e2:	f000 f905 	bl	80006f0 <MX_ADC2_Init>
  MX_ADC3_Init();
 80004e6:	f000 f955 	bl	8000794 <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 80004ea:	f006 fc1f 	bl	8006d2c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80004ee:	f000 f8ad 	bl	800064c <MX_ADC1_Init>
  MX_TIM2_Init();
 80004f2:	f000 f9a1 	bl	8000838 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004f6:	481b      	ldr	r0, [pc, #108]	; (8000564 <main+0x94>)
 80004f8:	f002 ffdc 	bl	80034b4 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_13, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4819      	ldr	r0, [pc, #100]	; (8000568 <main+0x98>)
 8000504:	f001 f99e 	bl	8001844 <HAL_GPIO_WritePin>

  uint8_t State;
  State = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int k;
	  for(k = 0; k < 1000000; k++){
 800050c:	2300      	movs	r3, #0
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	e008      	b.n	8000524 <main+0x54>
		  k ++;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	603b      	str	r3, [r7, #0]
		  k --;
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	3b01      	subs	r3, #1
 800051c:	603b      	str	r3, [r7, #0]
	  for(k = 0; k < 1000000; k++){
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	4a11      	ldr	r2, [pc, #68]	; (800056c <main+0x9c>)
 8000528:	4293      	cmp	r3, r2
 800052a:	ddf2      	ble.n	8000512 <main+0x42>
	  }
	  State = State ? 0: 1;
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b00      	cmp	r3, #0
 8000530:	bf0c      	ite	eq
 8000532:	2301      	moveq	r3, #1
 8000534:	2300      	movne	r3, #0
 8000536:	b2db      	uxtb	r3, r3
 8000538:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin (GPIOD, GPIO_PIN_13, State);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	461a      	mov	r2, r3
 800053e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000542:	4809      	ldr	r0, [pc, #36]	; (8000568 <main+0x98>)
 8000544:	f001 f97e 	bl	8001844 <HAL_GPIO_WritePin>

	  CDC_Transmit_FS((uint8_t *)USB_Tx, strlen(USB_Tx));
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <main+0xa0>)
 800054a:	681c      	ldr	r4, [r3, #0]
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <main+0xa0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff fe39 	bl	80001c8 <strlen>
 8000556:	4603      	mov	r3, r0
 8000558:	b29b      	uxth	r3, r3
 800055a:	4619      	mov	r1, r3
 800055c:	4620      	mov	r0, r4
 800055e:	f006 fcb9 	bl	8006ed4 <CDC_Transmit_FS>
  {
 8000562:	e7d3      	b.n	800050c <main+0x3c>
 8000564:	20000520 	.word	0x20000520
 8000568:	40020c00 	.word	0x40020c00
 800056c:	000f423f 	.word	0x000f423f
 8000570:	20000000 	.word	0x20000000

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f007 f934 	bl	80077f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a28      	ldr	r2, [pc, #160]	; (8000644 <SystemClock_Config+0xd0>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <SystemClock_Config+0xd0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <SystemClock_Config+0xd4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a22      	ldr	r2, [pc, #136]	; (8000648 <SystemClock_Config+0xd4>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <SystemClock_Config+0xd4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005d0:	2303      	movs	r3, #3
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005da:	2301      	movs	r3, #1
 80005dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005de:	2310      	movs	r3, #16
 80005e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005f0:	2348      	movs	r3, #72	; 0x48
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005f8:	2303      	movs	r3, #3
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fabb 	bl	8002b7c <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800060c:	f000 f9e6 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fd1e 	bl	800306c <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000636:	f000 f9d1 	bl	80009dc <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	; 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <MX_ADC1_Init+0x9c>)
 8000662:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_ADC1_Init+0x98>)
 800068c:	4a17      	ldr	r2, [pc, #92]	; (80006ec <MX_ADC1_Init+0xa0>)
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_ADC1_Init+0x98>)
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_ADC1_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_ADC1_Init+0x98>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006aa:	480e      	ldr	r0, [pc, #56]	; (80006e4 <MX_ADC1_Init+0x98>)
 80006ac:	f000 fbba 	bl	8000e24 <HAL_ADC_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006b6:	f000 f991 	bl	80009dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4619      	mov	r1, r3
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <MX_ADC1_Init+0x98>)
 80006cc:	f000 fbee 	bl	8000eac <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006d6:	f000 f981 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000410 	.word	0x20000410
 80006e8:	40012000 	.word	0x40012000
 80006ec:	0f000001 	.word	0x0f000001

080006f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MX_ADC2_Init+0x98>)
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <MX_ADC2_Init+0x9c>)
 8000706:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_ADC2_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_ADC2_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_ADC2_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_ADC2_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_ADC2_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_ADC2_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_ADC2_Init+0x98>)
 8000730:	4a17      	ldr	r2, [pc, #92]	; (8000790 <MX_ADC2_Init+0xa0>)
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_ADC2_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_ADC2_Init+0x98>)
 800073c:	2201      	movs	r2, #1
 800073e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_ADC2_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_ADC2_Init+0x98>)
 800074a:	2201      	movs	r2, #1
 800074c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074e:	480e      	ldr	r0, [pc, #56]	; (8000788 <MX_ADC2_Init+0x98>)
 8000750:	f000 fb68 	bl	8000e24 <HAL_ADC_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800075a:	f000 f93f 	bl	80009dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075e:	2306      	movs	r3, #6
 8000760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000762:	2301      	movs	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <MX_ADC2_Init+0x98>)
 8000770:	f000 fb9c 	bl	8000eac <HAL_ADC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800077a:	f000 f92f 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200003c8 	.word	0x200003c8
 800078c:	40012100 	.word	0x40012100
 8000790:	0f000001 	.word	0x0f000001

08000794 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_ADC3_Init+0x98>)
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <MX_ADC3_Init+0x9c>)
 80007aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_ADC3_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_ADC3_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_ADC3_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_ADC3_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_ADC3_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_ADC3_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_ADC3_Init+0x98>)
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <MX_ADC3_Init+0xa0>)
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_ADC3_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_ADC3_Init+0x98>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_ADC3_Init+0x98>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_ADC3_Init+0x98>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <MX_ADC3_Init+0x98>)
 80007f4:	f000 fb16 	bl	8000e24 <HAL_ADC_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80007fe:	f000 f8ed 	bl	80009dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000802:	230b      	movs	r3, #11
 8000804:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_ADC3_Init+0x98>)
 8000814:	f000 fb4a 	bl	8000eac <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800081e:	f000 f8dd 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000458 	.word	0x20000458
 8000830:	40012200 	.word	0x40012200
 8000834:	0f000001 	.word	0x0f000001

08000838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_TIM2_Init+0x98>)
 8000856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800085a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_TIM2_Init+0x98>)
 800085e:	f240 623f 	movw	r2, #1599	; 0x63f
 8000862:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_TIM2_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_TIM2_Init+0x98>)
 800086c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000870:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_TIM2_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_TIM2_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800087e:	4814      	ldr	r0, [pc, #80]	; (80008d0 <MX_TIM2_Init+0x98>)
 8000880:	f002 fdc8 	bl	8003414 <HAL_TIM_Base_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800088a:	f000 f8a7 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000892:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	4619      	mov	r1, r3
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <MX_TIM2_Init+0x98>)
 800089c:	f002 ff82 	bl	80037a4 <HAL_TIM_ConfigClockSource>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008a6:	f000 f899 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <MX_TIM2_Init+0x98>)
 80008b8:	f003 f99e 	bl	8003bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008c2:	f000 f88b 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000520 	.word	0x20000520

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b27      	ldr	r3, [pc, #156]	; (800098c <MX_GPIO_Init+0xb8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a26      	ldr	r2, [pc, #152]	; (800098c <MX_GPIO_Init+0xb8>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b24      	ldr	r3, [pc, #144]	; (800098c <MX_GPIO_Init+0xb8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_GPIO_Init+0xb8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a1f      	ldr	r2, [pc, #124]	; (800098c <MX_GPIO_Init+0xb8>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_GPIO_Init+0xb8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_GPIO_Init+0xb8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <MX_GPIO_Init+0xb8>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_GPIO_Init+0xb8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_GPIO_Init+0xb8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a11      	ldr	r2, [pc, #68]	; (800098c <MX_GPIO_Init+0xb8>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_GPIO_Init+0xb8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <MX_GPIO_Init+0xbc>)
 8000962:	f000 ff6f 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000966:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_GPIO_Init+0xbc>)
 8000980:	f000 fdc4 	bl	800150c <HAL_GPIO_Init>

}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40020c00 	.word	0x40020c00

08000994 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009a4:	d108      	bne.n	80009b8 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
  	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_12, Timer2_Count);;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	461a      	mov	r2, r3
 80009ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b2:	4809      	ldr	r0, [pc, #36]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80009b4:	f000 ff46 	bl	8001844 <HAL_GPIO_WritePin>
  }
  Timer2_Count = Timer2_Count ? 0: 1;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf0c      	ite	eq
 80009c0:	2301      	moveq	r3, #1
 80009c2:	2300      	movne	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b02      	ldr	r3, [pc, #8]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80009ca:	601a      	str	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200001a0 	.word	0x200001a0
 80009d8:	40020c00 	.word	0x40020c00

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08e      	sub	sp, #56	; 0x38
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a52      	ldr	r2, [pc, #328]	; (8000ba0 <HAL_ADC_MspInit+0x168>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d128      	bne.n	8000aac <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
 8000a5e:	4b51      	ldr	r3, [pc, #324]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a50      	ldr	r2, [pc, #320]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b4e      	ldr	r3, [pc, #312]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a72:	623b      	str	r3, [r7, #32]
 8000a74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
 8000a7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a49      	ldr	r2, [pc, #292]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b47      	ldr	r3, [pc, #284]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a92:	2307      	movs	r3, #7
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	2303      	movs	r3, #3
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4840      	ldr	r0, [pc, #256]	; (8000ba8 <HAL_ADC_MspInit+0x170>)
 8000aa6:	f000 fd31 	bl	800150c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000aaa:	e074      	b.n	8000b96 <HAL_ADC_MspInit+0x15e>
  else if(hadc->Instance==ADC2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a3e      	ldr	r2, [pc, #248]	; (8000bac <HAL_ADC_MspInit+0x174>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d142      	bne.n	8000b3c <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	4b3a      	ldr	r3, [pc, #232]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a39      	ldr	r2, [pc, #228]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000ac0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a32      	ldr	r2, [pc, #200]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a2b      	ldr	r2, [pc, #172]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b0a:	23c0      	movs	r3, #192	; 0xc0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4822      	ldr	r0, [pc, #136]	; (8000ba8 <HAL_ADC_MspInit+0x170>)
 8000b1e:	f000 fcf5 	bl	800150c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b22:	2310      	movs	r3, #16
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b26:	2303      	movs	r3, #3
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	481e      	ldr	r0, [pc, #120]	; (8000bb0 <HAL_ADC_MspInit+0x178>)
 8000b36:	f000 fce9 	bl	800150c <HAL_GPIO_Init>
}
 8000b3a:	e02c      	b.n	8000b96 <HAL_ADC_MspInit+0x15e>
  else if(hadc->Instance==ADC3)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <HAL_ADC_MspInit+0x17c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d127      	bne.n	8000b96 <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a15      	ldr	r2, [pc, #84]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000b50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_ADC_MspInit+0x16c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b82:	2303      	movs	r3, #3
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <HAL_ADC_MspInit+0x178>)
 8000b92:	f000 fcbb 	bl	800150c <HAL_GPIO_Init>
}
 8000b96:	bf00      	nop
 8000b98:	3738      	adds	r7, #56	; 0x38
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40012000 	.word	0x40012000
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40012100 	.word	0x40012100
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40012200 	.word	0x40012200

08000bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc8:	d115      	bne.n	8000bf6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_TIM_Base_MspInit+0x48>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <HAL_TIM_Base_MspInit+0x48>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_TIM_Base_MspInit+0x48>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	201c      	movs	r0, #28
 8000bec:	f000 fc57 	bl	800149e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf0:	201c      	movs	r0, #28
 8000bf2:	f000 fc70 	bl	80014d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f8a4 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <TIM2_IRQHandler+0x10>)
 8000c5e:	f002 fc99 	bl	8003594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000520 	.word	0x20000520

08000c6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <OTG_FS_IRQHandler+0x10>)
 8000c72:	f000 ff50 	bl	8001b16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20001a3c 	.word	0x20001a3c

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffd7 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f006 fd5b 	bl	800778c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fbfb 	bl	80004d0 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000ce8:	08007894 	.word	0x08007894
  ldr r2, =_sbss
 8000cec:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000cf0:	20001e44 	.word	0x20001e44

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 fbb1 	bl	8001488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	200f      	movs	r0, #15
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fe5c 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fbc9 	bl	80014f2 <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 fb91 	bl	800149e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000004 	.word	0x20000004
 8000d94:	2000000c 	.word	0x2000000c
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	20000568 	.word	0x20000568

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000568 	.word	0x20000568

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000000c 	.word	0x2000000c

08000e24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e033      	b.n	8000ea2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fdf8 	bl	8000a38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d118      	bne.n	8000e94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e6a:	f023 0302 	bic.w	r3, r3, #2
 8000e6e:	f043 0202 	orr.w	r2, r3, #2
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f93a 	bl	80010f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f023 0303 	bic.w	r3, r3, #3
 8000e8a:	f043 0201 	orr.w	r2, r3, #1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	641a      	str	r2, [r3, #64]	; 0x40
 8000e92:	e001      	b.n	8000e98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d101      	bne.n	8000ec8 <HAL_ADC_ConfigChannel+0x1c>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e105      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x228>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b09      	cmp	r3, #9
 8000ed6:	d925      	bls.n	8000f24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68d9      	ldr	r1, [r3, #12]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	3b1e      	subs	r3, #30
 8000eee:	2207      	movs	r2, #7
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	400a      	ands	r2, r1
 8000efc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68d9      	ldr	r1, [r3, #12]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	4603      	mov	r3, r0
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4403      	add	r3, r0
 8000f16:	3b1e      	subs	r3, #30
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	e022      	b.n	8000f6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6919      	ldr	r1, [r3, #16]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	2207      	movs	r2, #7
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	400a      	ands	r2, r1
 8000f46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6919      	ldr	r1, [r3, #16]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4403      	add	r3, r0
 8000f60:	409a      	lsls	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d824      	bhi.n	8000fbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	3b05      	subs	r3, #5
 8000f84:	221f      	movs	r2, #31
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	400a      	ands	r2, r1
 8000f92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	3b05      	subs	r3, #5
 8000fae:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
 8000fba:	e04c      	b.n	8001056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b0c      	cmp	r3, #12
 8000fc2:	d824      	bhi.n	800100e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	3b23      	subs	r3, #35	; 0x23
 8000fd6:	221f      	movs	r2, #31
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43da      	mvns	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	400a      	ands	r2, r1
 8000fe4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	3b23      	subs	r3, #35	; 0x23
 8001000:	fa00 f203 	lsl.w	r2, r0, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
 800100c:	e023      	b.n	8001056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	3b41      	subs	r3, #65	; 0x41
 8001020:	221f      	movs	r2, #31
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	400a      	ands	r2, r1
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	b29b      	uxth	r3, r3
 800103c:	4618      	mov	r0, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	3b41      	subs	r3, #65	; 0x41
 800104a:	fa00 f203 	lsl.w	r2, r0, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_ADC_ConfigChannel+0x234>)
 8001058:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <HAL_ADC_ConfigChannel+0x238>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d109      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x1cc>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b12      	cmp	r3, #18
 800106a:	d105      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_ADC_ConfigChannel+0x238>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d123      	bne.n	80010ca <HAL_ADC_ConfigChannel+0x21e>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b10      	cmp	r3, #16
 8001088:	d003      	beq.n	8001092 <HAL_ADC_ConfigChannel+0x1e6>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b11      	cmp	r3, #17
 8001090:	d11b      	bne.n	80010ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	d111      	bne.n	80010ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <HAL_ADC_ConfigChannel+0x23c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <HAL_ADC_ConfigChannel+0x240>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	0c9a      	lsrs	r2, r3, #18
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010bc:	e002      	b.n	80010c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f9      	bne.n	80010be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40012300 	.word	0x40012300
 80010e4:	40012000 	.word	0x40012000
 80010e8:	20000004 	.word	0x20000004
 80010ec:	431bde83 	.word	0x431bde83

080010f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f8:	4b79      	ldr	r3, [pc, #484]	; (80012e0 <ADC_Init+0x1f0>)
 80010fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	431a      	orrs	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6859      	ldr	r1, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	021a      	lsls	r2, r3, #8
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6859      	ldr	r1, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800116a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6899      	ldr	r1, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	4a58      	ldr	r2, [pc, #352]	; (80012e4 <ADC_Init+0x1f4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d022      	beq.n	80011ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001196:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6899      	ldr	r1, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6899      	ldr	r1, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	e00f      	b.n	80011ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0202 	bic.w	r2, r2, #2
 80011fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6899      	ldr	r1, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7e1b      	ldrb	r3, [r3, #24]
 8001208:	005a      	lsls	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d01b      	beq.n	8001254 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800122a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800123a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6859      	ldr	r1, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	3b01      	subs	r3, #1
 8001248:	035a      	lsls	r2, r3, #13
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	e007      	b.n	8001264 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001262:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	3b01      	subs	r3, #1
 8001280:	051a      	lsls	r2, r3, #20
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6899      	ldr	r1, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012a6:	025a      	lsls	r2, r3, #9
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6899      	ldr	r1, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	029a      	lsls	r2, r3, #10
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	609a      	str	r2, [r3, #8]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40012300 	.word	0x40012300
 80012e4:	0f000001 	.word	0x0f000001

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <__NVIC_EnableIRQ+0x38>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001454:	d301      	bcc.n	800145a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001456:	2301      	movs	r3, #1
 8001458:	e00f      	b.n	800147a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <SysTick_Config+0x40>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001462:	210f      	movs	r1, #15
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f7ff ff8e 	bl	8001388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SysTick_Config+0x40>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <SysTick_Config+0x40>)
 8001474:	2207      	movs	r2, #7
 8001476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	e000e010 	.word	0xe000e010

08001488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff29 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b0:	f7ff ff3e 	bl	8001330 <__NVIC_GetPriorityGrouping>
 80014b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	68b9      	ldr	r1, [r7, #8]
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7ff ff8e 	bl	80013dc <NVIC_EncodePriority>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff5d 	bl	8001388 <__NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff31 	bl	800134c <__NVIC_EnableIRQ>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffa2 	bl	8001444 <SysTick_Config>
 8001500:	4603      	mov	r3, r0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	e16b      	b.n	8001800 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001528:	2201      	movs	r2, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 815a 	bne.w	80017fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b01      	cmp	r3, #1
 8001550:	d005      	beq.n	800155e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155a:	2b02      	cmp	r3, #2
 800155c:	d130      	bne.n	80015c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	2203      	movs	r2, #3
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001594:	2201      	movs	r2, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	f003 0201 	and.w	r2, r3, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d017      	beq.n	80015fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d123      	bne.n	8001650 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	08da      	lsrs	r2, r3, #3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3208      	adds	r2, #8
 8001610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	08da      	lsrs	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3208      	adds	r2, #8
 800164a:	69b9      	ldr	r1, [r7, #24]
 800164c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0203 	and.w	r2, r3, #3
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80b4 	beq.w	80017fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b60      	ldr	r3, [pc, #384]	; (8001818 <HAL_GPIO_Init+0x30c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a5f      	ldr	r2, [pc, #380]	; (8001818 <HAL_GPIO_Init+0x30c>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b5d      	ldr	r3, [pc, #372]	; (8001818 <HAL_GPIO_Init+0x30c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ae:	4a5b      	ldr	r2, [pc, #364]	; (800181c <HAL_GPIO_Init+0x310>)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a52      	ldr	r2, [pc, #328]	; (8001820 <HAL_GPIO_Init+0x314>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d02b      	beq.n	8001732 <HAL_GPIO_Init+0x226>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a51      	ldr	r2, [pc, #324]	; (8001824 <HAL_GPIO_Init+0x318>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d025      	beq.n	800172e <HAL_GPIO_Init+0x222>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a50      	ldr	r2, [pc, #320]	; (8001828 <HAL_GPIO_Init+0x31c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d01f      	beq.n	800172a <HAL_GPIO_Init+0x21e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4f      	ldr	r2, [pc, #316]	; (800182c <HAL_GPIO_Init+0x320>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d019      	beq.n	8001726 <HAL_GPIO_Init+0x21a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4e      	ldr	r2, [pc, #312]	; (8001830 <HAL_GPIO_Init+0x324>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d013      	beq.n	8001722 <HAL_GPIO_Init+0x216>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4d      	ldr	r2, [pc, #308]	; (8001834 <HAL_GPIO_Init+0x328>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d00d      	beq.n	800171e <HAL_GPIO_Init+0x212>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4c      	ldr	r2, [pc, #304]	; (8001838 <HAL_GPIO_Init+0x32c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d007      	beq.n	800171a <HAL_GPIO_Init+0x20e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4b      	ldr	r2, [pc, #300]	; (800183c <HAL_GPIO_Init+0x330>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_GPIO_Init+0x20a>
 8001712:	2307      	movs	r3, #7
 8001714:	e00e      	b.n	8001734 <HAL_GPIO_Init+0x228>
 8001716:	2308      	movs	r3, #8
 8001718:	e00c      	b.n	8001734 <HAL_GPIO_Init+0x228>
 800171a:	2306      	movs	r3, #6
 800171c:	e00a      	b.n	8001734 <HAL_GPIO_Init+0x228>
 800171e:	2305      	movs	r3, #5
 8001720:	e008      	b.n	8001734 <HAL_GPIO_Init+0x228>
 8001722:	2304      	movs	r3, #4
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x228>
 8001726:	2303      	movs	r3, #3
 8001728:	e004      	b.n	8001734 <HAL_GPIO_Init+0x228>
 800172a:	2302      	movs	r3, #2
 800172c:	e002      	b.n	8001734 <HAL_GPIO_Init+0x228>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <HAL_GPIO_Init+0x228>
 8001732:	2300      	movs	r3, #0
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	f002 0203 	and.w	r2, r2, #3
 800173a:	0092      	lsls	r2, r2, #2
 800173c:	4093      	lsls	r3, r2
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001744:	4935      	ldr	r1, [pc, #212]	; (800181c <HAL_GPIO_Init+0x310>)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_GPIO_Init+0x334>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001776:	4a32      	ldr	r2, [pc, #200]	; (8001840 <HAL_GPIO_Init+0x334>)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800177c:	4b30      	ldr	r3, [pc, #192]	; (8001840 <HAL_GPIO_Init+0x334>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a0:	4a27      	ldr	r2, [pc, #156]	; (8001840 <HAL_GPIO_Init+0x334>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <HAL_GPIO_Init+0x334>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ca:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_GPIO_Init+0x334>)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_GPIO_Init+0x334>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f4:	4a12      	ldr	r2, [pc, #72]	; (8001840 <HAL_GPIO_Init+0x334>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3301      	adds	r3, #1
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	2b0f      	cmp	r3, #15
 8001804:	f67f ae90 	bls.w	8001528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3724      	adds	r7, #36	; 0x24
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	40013800 	.word	0x40013800
 8001820:	40020000 	.word	0x40020000
 8001824:	40020400 	.word	0x40020400
 8001828:	40020800 	.word	0x40020800
 800182c:	40020c00 	.word	0x40020c00
 8001830:	40021000 	.word	0x40021000
 8001834:	40021400 	.word	0x40021400
 8001838:	40021800 	.word	0x40021800
 800183c:	40021c00 	.word	0x40021c00
 8001840:	40013c00 	.word	0x40013c00

08001844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
 8001850:	4613      	mov	r3, r2
 8001852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001860:	e003      	b.n	800186a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	041a      	lsls	r2, r3, #16
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	619a      	str	r2, [r3, #24]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001876:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001878:	b08f      	sub	sp, #60	; 0x3c
 800187a:	af0a      	add	r7, sp, #40	; 0x28
 800187c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e10f      	b.n	8001aa8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f005 fc5e 	bl	8007164 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2203      	movs	r2, #3
 80018ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fb3b 	bl	8003f42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	687e      	ldr	r6, [r7, #4]
 80018d4:	466d      	mov	r5, sp
 80018d6:	f106 0410 	add.w	r4, r6, #16
 80018da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80018ea:	1d33      	adds	r3, r6, #4
 80018ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ee:	6838      	ldr	r0, [r7, #0]
 80018f0:	f002 fa12 	bl	8003d18 <USB_CoreInit>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2202      	movs	r2, #2
 80018fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0d0      	b.n	8001aa8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f002 fb29 	bl	8003f64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001912:	2300      	movs	r3, #0
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	e04a      	b.n	80019ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	333d      	adds	r3, #61	; 0x3d
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	1a9b      	subs	r3, r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	333c      	adds	r3, #60	; 0x3c
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	b298      	uxth	r0, r3
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	3342      	adds	r3, #66	; 0x42
 8001954:	4602      	mov	r2, r0
 8001956:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	333f      	adds	r3, #63	; 0x3f
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	3344      	adds	r3, #68	; 0x44
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	3348      	adds	r3, #72	; 0x48
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	3350      	adds	r3, #80	; 0x50
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	3301      	adds	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	7bfa      	ldrb	r2, [r7, #15]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3af      	bcc.n	8001918 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e044      	b.n	8001a48 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	1a9b      	subs	r3, r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a00:	7bfa      	ldrb	r2, [r7, #15]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	3301      	adds	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d3b5      	bcc.n	80019be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	687e      	ldr	r6, [r7, #4]
 8001a5a:	466d      	mov	r5, sp
 8001a5c:	f106 0410 	add.w	r4, r6, #16
 8001a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a70:	1d33      	adds	r3, r6, #4
 8001a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a74:	6838      	ldr	r0, [r7, #0]
 8001a76:	f002 fac1 	bl	8003ffc <USB_DevInit>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e00d      	b.n	8001aa8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 fb3d 	bl	8005120 <USB_DevDisconnect>

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ab0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_PCD_Start+0x1c>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e020      	b.n	8001b0e <HAL_PCD_Start+0x5e>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d109      	bne.n	8001af0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d005      	beq.n	8001af0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f002 fa13 	bl	8003f20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 faed 	bl	80050de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b16:	b590      	push	{r4, r7, lr}
 8001b18:	b08d      	sub	sp, #52	; 0x34
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 fbab 	bl	8005288 <USB_GetMode>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 839d 	bne.w	8002274 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 fb0f 	bl	8005162 <USB_ReadInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8393 	beq.w	8002272 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f003 fb06 	bl	8005162 <USB_ReadInterrupts>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d107      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f002 0202 	and.w	r2, r2, #2
 8001b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 faf4 	bl	8005162 <USB_ReadInterrupts>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b10      	cmp	r3, #16
 8001b82:	d161      	bne.n	8001c48 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699a      	ldr	r2, [r3, #24]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0210 	bic.w	r2, r2, #16
 8001b92:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f003 020f 	and.w	r2, r3, #15
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	0c5b      	lsrs	r3, r3, #17
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d124      	bne.n	8001c0a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d035      	beq.n	8001c38 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	6a38      	ldr	r0, [r7, #32]
 8001be0:	f003 f92b 	bl	8004e3a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bf0:	441a      	add	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	699a      	ldr	r2, [r3, #24]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c02:	441a      	add	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	619a      	str	r2, [r3, #24]
 8001c08:	e016      	b.n	8001c38 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	0c5b      	lsrs	r3, r3, #17
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d110      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6a38      	ldr	r0, [r7, #32]
 8001c22:	f003 f90a 	bl	8004e3a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	699a      	ldr	r2, [r3, #24]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c32:	441a      	add	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0210 	orr.w	r2, r2, #16
 8001c46:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fa88 	bl	8005162 <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c5c:	d16e      	bne.n	8001d3c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 fa8e 	bl	8005188 <USB_ReadDevAllOutEpInterrupt>
 8001c6c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c6e:	e062      	b.n	8001d36 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d057      	beq.n	8001d2a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fab3 	bl	80051f0 <USB_ReadDevOutEPInterrupt>
 8001c8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00c      	beq.n	8001cb0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	015a      	lsls	r2, r3, #5
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ca8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 fdb0 	bl	8002810 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00c      	beq.n	8001cd4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2308      	movs	r3, #8
 8001cca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 feaa 	bl	8002a28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cea:	461a      	mov	r2, r3
 8001cec:	2310      	movs	r3, #16
 8001cee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d06:	461a      	mov	r2, r3
 8001d08:	2320      	movs	r3, #32
 8001d0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d22:	461a      	mov	r2, r3
 8001d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d28:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	085b      	lsrs	r3, r3, #1
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d199      	bne.n	8001c70 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 fa0e 	bl	8005162 <USB_ReadInterrupts>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d50:	f040 80c0 	bne.w	8001ed4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fa2f 	bl	80051bc <USB_ReadDevAllInEpInterrupt>
 8001d5e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d64:	e0b2      	b.n	8001ecc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80a7 	beq.w	8001ec0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 fa55 	bl	800522c <USB_ReadDevInEPInterrupt>
 8001d82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d057      	beq.n	8001e3e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	2201      	movs	r2, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69f9      	ldr	r1, [r7, #28]
 8001daa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dae:	4013      	ands	r3, r2
 8001db0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d132      	bne.n	8001e32 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	3348      	adds	r3, #72	; 0x48
 8001ddc:	6819      	ldr	r1, [r3, #0]
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4403      	add	r3, r0
 8001dec:	3344      	adds	r3, #68	; 0x44
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4419      	add	r1, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df6:	4613      	mov	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4403      	add	r3, r0
 8001e00:	3348      	adds	r3, #72	; 0x48
 8001e02:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d113      	bne.n	8001e32 <HAL_PCD_IRQHandler+0x31c>
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	440b      	add	r3, r1
 8001e18:	3350      	adds	r3, #80	; 0x50
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d108      	bne.n	8001e32 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	f003 fa5d 	bl	80052ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	4619      	mov	r1, r3
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f005 fa14 	bl	8007266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e54:	461a      	mov	r2, r3
 8001e56:	2308      	movs	r3, #8
 8001e58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e70:	461a      	mov	r2, r3
 8001e72:	2310      	movs	r3, #16
 8001e74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2340      	movs	r3, #64	; 0x40
 8001e90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2302      	movs	r3, #2
 8001eac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fc1b 	bl	80026f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	085b      	lsrs	r3, r3, #1
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f47f af49 	bne.w	8001d66 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 f942 	bl	8005162 <USB_ReadInterrupts>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ee8:	d122      	bne.n	8001f30 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d108      	bne.n	8001f1a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f10:	2100      	movs	r1, #0
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fe26 	bl	8002b64 <HAL_PCDEx_LPM_Callback>
 8001f18:	e002      	b.n	8001f20 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f005 fa1a 	bl	8007354 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 f914 	bl	8005162 <USB_ReadInterrupts>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f44:	d112      	bne.n	8001f6c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d102      	bne.n	8001f5c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f005 f9d6 	bl	8007308 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f6a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 f8f6 	bl	8005162 <USB_ReadInterrupts>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f80:	f040 80c7 	bne.w	8002112 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2110      	movs	r1, #16
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f002 f990 	bl	80042c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa8:	e056      	b.n	8002058 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fbc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fce:	0151      	lsls	r1, r2, #5
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	440a      	add	r2, r1
 8001fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001fd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fdc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fee:	0151      	lsls	r1, r2, #5
 8001ff0:	69fa      	ldr	r2, [r7, #28]
 8001ff2:	440a      	add	r2, r1
 8001ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ff8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ffc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200a:	461a      	mov	r2, r3
 800200c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002010:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002022:	0151      	lsls	r1, r2, #5
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	440a      	add	r2, r1
 8002028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800202c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002030:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	4413      	add	r3, r2
 800203a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002042:	0151      	lsls	r1, r2, #5
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	440a      	add	r2, r1
 8002048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800204c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002050:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002054:	3301      	adds	r3, #1
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800205e:	429a      	cmp	r2, r3
 8002060:	d3a3      	bcc.n	8001faa <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002070:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002074:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800208e:	f043 030b 	orr.w	r3, r3, #11
 8002092:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020a4:	f043 030b 	orr.w	r3, r3, #11
 80020a8:	6453      	str	r3, [r2, #68]	; 0x44
 80020aa:	e015      	b.n	80020d8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020be:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d2:	f043 030b 	orr.w	r3, r3, #11
 80020d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80020ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020fc:	461a      	mov	r2, r3
 80020fe:	f003 f8f5 	bl	80052ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f003 f823 	bl	8005162 <USB_ReadInterrupts>
 800211c:	4603      	mov	r3, r0
 800211e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002126:	d124      	bne.n	8002172 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f003 f8b9 	bl	80052a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f002 f921 	bl	800437e <USB_GetDevSpeed>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681c      	ldr	r4, [r3, #0]
 8002148:	f001 f958 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 800214c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002152:	b2db      	uxtb	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	4620      	mov	r0, r4
 8002158:	f001 fe40 	bl	8003ddc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f005 f8aa 	bl	80072b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002170:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f002 fff3 	bl	8005162 <USB_ReadInterrupts>
 800217c:	4603      	mov	r3, r0
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b08      	cmp	r3, #8
 8002184:	d10a      	bne.n	800219c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f005 f887 	bl	800729a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f002 0208 	and.w	r2, r2, #8
 800219a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 ffde 	bl	8005162 <USB_ReadInterrupts>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021b0:	d10f      	bne.n	80021d2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4619      	mov	r1, r3
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f005 f8e9 	bl	8007394 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f002 ffc3 	bl	8005162 <USB_ReadInterrupts>
 80021dc:	4603      	mov	r3, r0
 80021de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021e6:	d10f      	bne.n	8002208 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4619      	mov	r1, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f005 f8bc 	bl	8007370 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f002 ffa8 	bl	8005162 <USB_ReadInterrupts>
 8002212:	4603      	mov	r3, r0
 8002214:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221c:	d10a      	bne.n	8002234 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f005 f8ca 	bl	80073b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f002 ff92 	bl	8005162 <USB_ReadInterrupts>
 800223e:	4603      	mov	r3, r0
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b04      	cmp	r3, #4
 8002246:	d115      	bne.n	8002274 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f005 f8ba 	bl	80073d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6859      	ldr	r1, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	430a      	orrs	r2, r1
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	e000      	b.n	8002274 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002272:	bf00      	nop
    }
  }
}
 8002274:	3734      	adds	r7, #52	; 0x34
 8002276:	46bd      	mov	sp, r7
 8002278:	bd90      	pop	{r4, r7, pc}

0800227a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_PCD_SetAddress+0x1a>
 8002290:	2302      	movs	r3, #2
 8002292:	e013      	b.n	80022bc <HAL_PCD_SetAddress+0x42>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 fef0 	bl	8005092 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	4608      	mov	r0, r1
 80022ce:	4611      	mov	r1, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	4603      	mov	r3, r0
 80022d4:	70fb      	strb	r3, [r7, #3]
 80022d6:	460b      	mov	r3, r1
 80022d8:	803b      	strh	r3, [r7, #0]
 80022da:	4613      	mov	r3, r2
 80022dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	da0f      	bge.n	800230a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	f003 020f 	and.w	r2, r3, #15
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	3338      	adds	r3, #56	; 0x38
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	3304      	adds	r3, #4
 8002300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	705a      	strb	r2, [r3, #1]
 8002308:	e00f      	b.n	800232a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	f003 020f 	and.w	r2, r3, #15
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	3304      	adds	r3, #4
 8002322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	b2da      	uxtb	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002336:	883a      	ldrh	r2, [r7, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	78ba      	ldrb	r2, [r7, #2]
 8002340:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002354:	78bb      	ldrb	r3, [r7, #2]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d102      	bne.n	8002360 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_PCD_EP_Open+0xaa>
 800236a:	2302      	movs	r3, #2
 800236c:	e00e      	b.n	800238c <HAL_PCD_EP_Open+0xc8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68f9      	ldr	r1, [r7, #12]
 800237c:	4618      	mov	r0, r3
 800237e:	f002 f823 	bl	80043c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800238a:	7afb      	ldrb	r3, [r7, #11]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	da0f      	bge.n	80023c8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	f003 020f 	and.w	r2, r3, #15
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	3338      	adds	r3, #56	; 0x38
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	3304      	adds	r3, #4
 80023be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	705a      	strb	r2, [r3, #1]
 80023c6:	e00f      	b.n	80023e8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f003 020f 	and.w	r2, r3, #15
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	3304      	adds	r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_PCD_EP_Close+0x6e>
 80023fe:	2302      	movs	r3, #2
 8002400:	e00e      	b.n	8002420 <HAL_PCD_EP_Close+0x8c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68f9      	ldr	r1, [r7, #12]
 8002410:	4618      	mov	r0, r3
 8002412:	f002 f861 	bl	80044d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	460b      	mov	r3, r1
 8002436:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002438:	7afb      	ldrb	r3, [r7, #11]
 800243a:	f003 020f 	and.w	r2, r3, #15
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4413      	add	r3, r2
 800244e:	3304      	adds	r3, #4
 8002450:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2200      	movs	r2, #0
 8002468:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800246a:	7afb      	ldrb	r3, [r7, #11]
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	b2da      	uxtb	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d102      	bne.n	8002484 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002484:	7afb      	ldrb	r3, [r7, #11]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	6979      	ldr	r1, [r7, #20]
 800249c:	f002 fb3c 	bl	8004b18 <USB_EP0StartXfer>
 80024a0:	e008      	b.n	80024b4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	6979      	ldr	r1, [r7, #20]
 80024b0:	f002 f8ee 	bl	8004690 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80024e0:	681b      	ldr	r3, [r3, #0]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	460b      	mov	r3, r1
 80024fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024fe:	7afb      	ldrb	r3, [r7, #11]
 8002500:	f003 020f 	and.w	r2, r3, #15
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	3338      	adds	r3, #56	; 0x38
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4413      	add	r3, r2
 8002512:	3304      	adds	r3, #4
 8002514:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2201      	movs	r2, #1
 800252c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800252e:	7afb      	ldrb	r3, [r7, #11]
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	b2da      	uxtb	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d102      	bne.n	8002548 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002548:	7afb      	ldrb	r3, [r7, #11]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	6979      	ldr	r1, [r7, #20]
 8002560:	f002 fada 	bl	8004b18 <USB_EP0StartXfer>
 8002564:	e008      	b.n	8002578 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	6979      	ldr	r1, [r7, #20]
 8002574:	f002 f88c 	bl	8004690 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	f003 020f 	and.w	r2, r3, #15
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	d901      	bls.n	80025a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e050      	b.n	8002642 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	da0f      	bge.n	80025c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	f003 020f 	and.w	r2, r3, #15
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	3338      	adds	r3, #56	; 0x38
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	3304      	adds	r3, #4
 80025be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	705a      	strb	r2, [r3, #1]
 80025c6:	e00d      	b.n	80025e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	3304      	adds	r3, #4
 80025dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_PCD_EP_SetStall+0x82>
 8002600:	2302      	movs	r3, #2
 8002602:	e01e      	b.n	8002642 <HAL_PCD_EP_SetStall+0xc0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68f9      	ldr	r1, [r7, #12]
 8002612:	4618      	mov	r0, r3
 8002614:	f002 fc69 	bl	8004eea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10a      	bne.n	8002638 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	b2d9      	uxtb	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002632:	461a      	mov	r2, r3
 8002634:	f002 fe5a 	bl	80052ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	f003 020f 	and.w	r2, r3, #15
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	429a      	cmp	r2, r3
 8002662:	d901      	bls.n	8002668 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e042      	b.n	80026ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800266c:	2b00      	cmp	r3, #0
 800266e:	da0f      	bge.n	8002690 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	f003 020f 	and.w	r2, r3, #15
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	3338      	adds	r3, #56	; 0x38
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	3304      	adds	r3, #4
 8002686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	705a      	strb	r2, [r3, #1]
 800268e:	e00f      	b.n	80026b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	f003 020f 	and.w	r2, r3, #15
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	3304      	adds	r3, #4
 80026a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_PCD_EP_ClrStall+0x86>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e00e      	b.n	80026ee <HAL_PCD_EP_ClrStall+0xa4>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68f9      	ldr	r1, [r7, #12]
 80026de:	4618      	mov	r0, r3
 80026e0:	f002 fc71 	bl	8004fc6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b08a      	sub	sp, #40	; 0x28
 80026fa:	af02      	add	r7, sp, #8
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	3338      	adds	r3, #56	; 0x38
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	3304      	adds	r3, #4
 800271c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	429a      	cmp	r2, r3
 8002728:	d901      	bls.n	800272e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e06c      	b.n	8002808 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	429a      	cmp	r2, r3
 8002742:	d902      	bls.n	800274a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3303      	adds	r3, #3
 800274e:	089b      	lsrs	r3, r3, #2
 8002750:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002752:	e02b      	b.n	80027ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	429a      	cmp	r2, r3
 8002768:	d902      	bls.n	8002770 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	3303      	adds	r3, #3
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	68d9      	ldr	r1, [r3, #12]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002788:	b2db      	uxtb	r3, r3
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	4603      	mov	r3, r0
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f002 fb15 	bl	8004dbe <USB_WritePacket>

    ep->xfer_buff  += len;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	441a      	add	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	441a      	add	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d809      	bhi.n	80027d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d203      	bcs.n	80027d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1be      	bne.n	8002754 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d811      	bhi.n	8002806 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	2201      	movs	r2, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	6939      	ldr	r1, [r7, #16]
 80027fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002802:	4013      	ands	r3, r2
 8002804:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	333c      	adds	r3, #60	; 0x3c
 8002828:	3304      	adds	r3, #4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b01      	cmp	r3, #1
 8002844:	f040 80a0 	bne.w	8002988 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d015      	beq.n	800287e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4a72      	ldr	r2, [pc, #456]	; (8002a20 <PCD_EP_OutXfrComplete_int+0x210>)
 8002856:	4293      	cmp	r3, r2
 8002858:	f240 80dd 	bls.w	8002a16 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80d7 	beq.w	8002a16 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002874:	461a      	mov	r2, r3
 8002876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800287a:	6093      	str	r3, [r2, #8]
 800287c:	e0cb      	b.n	8002a16 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002894:	461a      	mov	r2, r3
 8002896:	2320      	movs	r3, #32
 8002898:	6093      	str	r3, [r2, #8]
 800289a:	e0bc      	b.n	8002a16 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 80b7 	bne.w	8002a16 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a5d      	ldr	r2, [pc, #372]	; (8002a20 <PCD_EP_OutXfrComplete_int+0x210>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d90f      	bls.n	80028d0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c6:	461a      	mov	r2, r3
 80028c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028cc:	6093      	str	r3, [r2, #8]
 80028ce:	e0a2      	b.n	8002a16 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028e2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	0159      	lsls	r1, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	440b      	add	r3, r1
 80028ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80028f6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4403      	add	r3, r0
 8002906:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800290a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4403      	add	r3, r0
 800292e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4419      	add	r1, r3
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4403      	add	r3, r0
 8002944:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002948:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d114      	bne.n	800297a <PCD_EP_OutXfrComplete_int+0x16a>
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d108      	bne.n	800297a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002972:	461a      	mov	r2, r3
 8002974:	2101      	movs	r1, #1
 8002976:	f002 fcb9 	bl	80052ec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	4619      	mov	r1, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f004 fc55 	bl	8007230 <HAL_PCD_DataOutStageCallback>
 8002986:	e046      	b.n	8002a16 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a26      	ldr	r2, [pc, #152]	; (8002a24 <PCD_EP_OutXfrComplete_int+0x214>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d124      	bne.n	80029da <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a6:	461a      	mov	r2, r3
 80029a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ac:	6093      	str	r3, [r2, #8]
 80029ae:	e032      	b.n	8002a16 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c6:	461a      	mov	r2, r3
 80029c8:	2320      	movs	r3, #32
 80029ca:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4619      	mov	r1, r3
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f004 fc2c 	bl	8007230 <HAL_PCD_DataOutStageCallback>
 80029d8:	e01d      	b.n	8002a16 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d114      	bne.n	8002a0a <PCD_EP_OutXfrComplete_int+0x1fa>
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d108      	bne.n	8002a0a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a02:	461a      	mov	r2, r3
 8002a04:	2100      	movs	r1, #0
 8002a06:	f002 fc71 	bl	80052ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f004 fc0d 	bl	8007230 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	4f54300a 	.word	0x4f54300a
 8002a24:	4f54310a 	.word	0x4f54310a

08002a28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	333c      	adds	r3, #60	; 0x3c
 8002a40:	3304      	adds	r3, #4
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d90e      	bls.n	8002a7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d009      	beq.n	8002a7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a74:	461a      	mov	r2, r3
 8002a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f004 fbc5 	bl	800720c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d90c      	bls.n	8002aa4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d108      	bne.n	8002aa4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	f002 fc24 	bl	80052ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	4f54300a 	.word	0x4f54300a

08002ab4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	70fb      	strb	r3, [r7, #3]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d107      	bne.n	8002ae2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ad2:	883b      	ldrh	r3, [r7, #0]
 8002ad4:	0419      	lsls	r1, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28
 8002ae0:	e028      	b.n	8002b34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	0c1b      	lsrs	r3, r3, #16
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	4413      	add	r3, r2
 8002aee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	73fb      	strb	r3, [r7, #15]
 8002af4:	e00d      	b.n	8002b12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	3340      	adds	r3, #64	; 0x40
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	0c1b      	lsrs	r3, r3, #16
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	4413      	add	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d3ec      	bcc.n	8002af6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b1c:	883b      	ldrh	r3, [r7, #0]
 8002b1e:	0418      	lsls	r0, r3, #16
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	4302      	orrs	r2, r0
 8002b2c:	3340      	adds	r3, #64	; 0x40
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e264      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d075      	beq.n	8002c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b9a:	4ba3      	ldr	r3, [pc, #652]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d00c      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba6:	4ba0      	ldr	r3, [pc, #640]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d112      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb2:	4b9d      	ldr	r3, [pc, #628]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bbe:	d10b      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc0:	4b99      	ldr	r3, [pc, #612]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d05b      	beq.n	8002c84 <HAL_RCC_OscConfig+0x108>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d157      	bne.n	8002c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e23f      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be0:	d106      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x74>
 8002be2:	4b91      	ldr	r3, [pc, #580]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a90      	ldr	r2, [pc, #576]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e01d      	b.n	8002c2c <HAL_RCC_OscConfig+0xb0>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x98>
 8002bfa:	4b8b      	ldr	r3, [pc, #556]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a8a      	ldr	r2, [pc, #552]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b88      	ldr	r3, [pc, #544]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a87      	ldr	r2, [pc, #540]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0xb0>
 8002c14:	4b84      	ldr	r3, [pc, #528]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a83      	ldr	r2, [pc, #524]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	4b81      	ldr	r3, [pc, #516]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a80      	ldr	r2, [pc, #512]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d013      	beq.n	8002c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe f8c6 	bl	8000dc4 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7fe f8c2 	bl	8000dc4 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e204      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	4b76      	ldr	r3, [pc, #472]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0xc0>
 8002c5a:	e014      	b.n	8002c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7fe f8b2 	bl	8000dc4 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c64:	f7fe f8ae 	bl	8000dc4 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	; 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e1f0      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c76:	4b6c      	ldr	r3, [pc, #432]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0xe8>
 8002c82:	e000      	b.n	8002c86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d063      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c92:	4b65      	ldr	r3, [pc, #404]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9e:	4b62      	ldr	r3, [pc, #392]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d11c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002caa:	4b5f      	ldr	r3, [pc, #380]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d116      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb6:	4b5c      	ldr	r3, [pc, #368]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_RCC_OscConfig+0x152>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e1c4      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cce:	4b56      	ldr	r3, [pc, #344]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4952      	ldr	r1, [pc, #328]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	e03a      	b.n	8002d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cec:	4b4f      	ldr	r3, [pc, #316]	; (8002e2c <HAL_RCC_OscConfig+0x2b0>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f867 	bl	8000dc4 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfa:	f7fe f863 	bl	8000dc4 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e1a5      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0c:	4b46      	ldr	r3, [pc, #280]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4940      	ldr	r1, [pc, #256]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]
 8002d2c:	e015      	b.n	8002d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2e:	4b3f      	ldr	r3, [pc, #252]	; (8002e2c <HAL_RCC_OscConfig+0x2b0>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe f846 	bl	8000dc4 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3c:	f7fe f842 	bl	8000dc4 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e184      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4e:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d030      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d016      	beq.n	8002d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d6e:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <HAL_RCC_OscConfig+0x2b4>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe f826 	bl	8000dc4 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7c:	f7fe f822 	bl	8000dc4 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e164      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x200>
 8002d9a:	e015      	b.n	8002dc8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9c:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_RCC_OscConfig+0x2b4>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da2:	f7fe f80f 	bl	8000dc4 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002daa:	f7fe f80b 	bl	8000dc4 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e14d      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f0      	bne.n	8002daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80a0 	beq.w	8002f16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dda:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10f      	bne.n	8002e06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40
 8002df6:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e02:	2301      	movs	r3, #1
 8002e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e06:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_RCC_OscConfig+0x2b8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d121      	bne.n	8002e56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_RCC_OscConfig+0x2b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a07      	ldr	r2, [pc, #28]	; (8002e34 <HAL_RCC_OscConfig+0x2b8>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1e:	f7fd ffd1 	bl	8000dc4 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	e011      	b.n	8002e4a <HAL_RCC_OscConfig+0x2ce>
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	42470000 	.word	0x42470000
 8002e30:	42470e80 	.word	0x42470e80
 8002e34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e38:	f7fd ffc4 	bl	8000dc4 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e106      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4a:	4b85      	ldr	r3, [pc, #532]	; (8003060 <HAL_RCC_OscConfig+0x4e4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d106      	bne.n	8002e6c <HAL_RCC_OscConfig+0x2f0>
 8002e5e:	4b81      	ldr	r3, [pc, #516]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	4a80      	ldr	r2, [pc, #512]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6a:	e01c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x32a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCC_OscConfig+0x312>
 8002e74:	4b7b      	ldr	r3, [pc, #492]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	4a7a      	ldr	r2, [pc, #488]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002e7a:	f043 0304 	orr.w	r3, r3, #4
 8002e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e80:	4b78      	ldr	r3, [pc, #480]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	4a77      	ldr	r2, [pc, #476]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8c:	e00b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x32a>
 8002e8e:	4b75      	ldr	r3, [pc, #468]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e92:	4a74      	ldr	r2, [pc, #464]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9a:	4b72      	ldr	r3, [pc, #456]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	4a71      	ldr	r2, [pc, #452]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d015      	beq.n	8002eda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eae:	f7fd ff89 	bl	8000dc4 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fd ff85 	bl	8000dc4 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0c5      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	4b65      	ldr	r3, [pc, #404]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ee      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x33a>
 8002ed8:	e014      	b.n	8002f04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7fd ff73 	bl	8000dc4 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fd ff6f 	bl	8000dc4 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e0af      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	4b5a      	ldr	r3, [pc, #360]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ee      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0a:	4b56      	ldr	r3, [pc, #344]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	4a55      	ldr	r2, [pc, #340]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 809b 	beq.w	8003056 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f20:	4b50      	ldr	r3, [pc, #320]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d05c      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d141      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b4c      	ldr	r3, [pc, #304]	; (8003068 <HAL_RCC_OscConfig+0x4ec>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fd ff43 	bl	8000dc4 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fd ff3f 	bl	8000dc4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e081      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f54:	4b43      	ldr	r3, [pc, #268]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	019b      	lsls	r3, r3, #6
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	085b      	lsrs	r3, r3, #1
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	041b      	lsls	r3, r3, #16
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	061b      	lsls	r3, r3, #24
 8002f84:	4937      	ldr	r1, [pc, #220]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8a:	4b37      	ldr	r3, [pc, #220]	; (8003068 <HAL_RCC_OscConfig+0x4ec>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fd ff18 	bl	8000dc4 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fd ff14 	bl	8000dc4 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e056      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002faa:	4b2e      	ldr	r3, [pc, #184]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x41c>
 8002fb6:	e04e      	b.n	8003056 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_OscConfig+0x4ec>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7fd ff01 	bl	8000dc4 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7fd fefd 	bl	8000dc4 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e03f      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd8:	4b22      	ldr	r3, [pc, #136]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x44a>
 8002fe4:	e037      	b.n	8003056 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e032      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <HAL_RCC_OscConfig+0x4e8>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d028      	beq.n	8003052 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d121      	bne.n	8003052 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d11a      	bne.n	8003052 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003022:	4013      	ands	r3, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003028:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800302a:	4293      	cmp	r3, r2
 800302c:	d111      	bne.n	8003052 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	3b01      	subs	r3, #1
 800303c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d107      	bne.n	8003052 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d001      	beq.n	8003056 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40007000 	.word	0x40007000
 8003064:	40023800 	.word	0x40023800
 8003068:	42470060 	.word	0x42470060

0800306c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0cc      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003080:	4b68      	ldr	r3, [pc, #416]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d90c      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b65      	ldr	r3, [pc, #404]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b63      	ldr	r3, [pc, #396]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0b8      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c0:	4b59      	ldr	r3, [pc, #356]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d8:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a52      	ldr	r2, [pc, #328]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e4:	4b50      	ldr	r3, [pc, #320]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	494d      	ldr	r1, [pc, #308]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d044      	beq.n	800318c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d119      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e07f      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d003      	beq.n	800312a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003126:	2b03      	cmp	r3, #3
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312a:	4b3f      	ldr	r3, [pc, #252]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e06f      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313a:	4b3b      	ldr	r3, [pc, #236]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e067      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314a:	4b37      	ldr	r3, [pc, #220]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f023 0203 	bic.w	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4934      	ldr	r1, [pc, #208]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	4313      	orrs	r3, r2
 800315a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800315c:	f7fd fe32 	bl	8000dc4 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	e00a      	b.n	800317a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003164:	f7fd fe2e 	bl	8000dc4 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e04f      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 020c 	and.w	r2, r3, #12
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	429a      	cmp	r2, r3
 800318a:	d1eb      	bne.n	8003164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d20c      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b22      	ldr	r3, [pc, #136]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e032      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4916      	ldr	r1, [pc, #88]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	490e      	ldr	r1, [pc, #56]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031f2:	f000 f821 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80031f6:	4602      	mov	r2, r0
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	490a      	ldr	r1, [pc, #40]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	5ccb      	ldrb	r3, [r1, r3]
 8003206:	fa22 f303 	lsr.w	r3, r2, r3
 800320a:	4a09      	ldr	r2, [pc, #36]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd fd92 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023c00 	.word	0x40023c00
 8003228:	40023800 	.word	0x40023800
 800322c:	08007874 	.word	0x08007874
 8003230:	20000004 	.word	0x20000004
 8003234:	20000008 	.word	0x20000008

08003238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	2300      	movs	r3, #0
 800324a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003250:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b08      	cmp	r3, #8
 800325a:	d00d      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x40>
 800325c:	2b08      	cmp	r3, #8
 800325e:	f200 80bd 	bhi.w	80033dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x34>
 8003266:	2b04      	cmp	r3, #4
 8003268:	d003      	beq.n	8003272 <HAL_RCC_GetSysClockFreq+0x3a>
 800326a:	e0b7      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800326e:	60bb      	str	r3, [r7, #8]
       break;
 8003270:	e0b7      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003272:	4b61      	ldr	r3, [pc, #388]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003274:	60bb      	str	r3, [r7, #8]
      break;
 8003276:	e0b4      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003278:	4b5d      	ldr	r3, [pc, #372]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003280:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003282:	4b5b      	ldr	r3, [pc, #364]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d04d      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328e:	4b58      	ldr	r3, [pc, #352]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	099b      	lsrs	r3, r3, #6
 8003294:	461a      	mov	r2, r3
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800329e:	f04f 0100 	mov.w	r1, #0
 80032a2:	ea02 0800 	and.w	r8, r2, r0
 80032a6:	ea03 0901 	and.w	r9, r3, r1
 80032aa:	4640      	mov	r0, r8
 80032ac:	4649      	mov	r1, r9
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	014b      	lsls	r3, r1, #5
 80032b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032bc:	0142      	lsls	r2, r0, #5
 80032be:	4610      	mov	r0, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	ebb0 0008 	subs.w	r0, r0, r8
 80032c6:	eb61 0109 	sbc.w	r1, r1, r9
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	018b      	lsls	r3, r1, #6
 80032d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032d8:	0182      	lsls	r2, r0, #6
 80032da:	1a12      	subs	r2, r2, r0
 80032dc:	eb63 0301 	sbc.w	r3, r3, r1
 80032e0:	f04f 0000 	mov.w	r0, #0
 80032e4:	f04f 0100 	mov.w	r1, #0
 80032e8:	00d9      	lsls	r1, r3, #3
 80032ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ee:	00d0      	lsls	r0, r2, #3
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	eb12 0208 	adds.w	r2, r2, r8
 80032f8:	eb43 0309 	adc.w	r3, r3, r9
 80032fc:	f04f 0000 	mov.w	r0, #0
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	0259      	lsls	r1, r3, #9
 8003306:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800330a:	0250      	lsls	r0, r2, #9
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	461a      	mov	r2, r3
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	f7fc ff5c 	bl	80001d8 <__aeabi_uldivmod>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4613      	mov	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e04a      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332a:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	099b      	lsrs	r3, r3, #6
 8003330:	461a      	mov	r2, r3
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	f240 10ff 	movw	r0, #511	; 0x1ff
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	ea02 0400 	and.w	r4, r2, r0
 8003342:	ea03 0501 	and.w	r5, r3, r1
 8003346:	4620      	mov	r0, r4
 8003348:	4629      	mov	r1, r5
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	014b      	lsls	r3, r1, #5
 8003354:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003358:	0142      	lsls	r2, r0, #5
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	1b00      	subs	r0, r0, r4
 8003360:	eb61 0105 	sbc.w	r1, r1, r5
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	018b      	lsls	r3, r1, #6
 800336e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003372:	0182      	lsls	r2, r0, #6
 8003374:	1a12      	subs	r2, r2, r0
 8003376:	eb63 0301 	sbc.w	r3, r3, r1
 800337a:	f04f 0000 	mov.w	r0, #0
 800337e:	f04f 0100 	mov.w	r1, #0
 8003382:	00d9      	lsls	r1, r3, #3
 8003384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003388:	00d0      	lsls	r0, r2, #3
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	1912      	adds	r2, r2, r4
 8003390:	eb45 0303 	adc.w	r3, r5, r3
 8003394:	f04f 0000 	mov.w	r0, #0
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	0299      	lsls	r1, r3, #10
 800339e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033a2:	0290      	lsls	r0, r2, #10
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	f7fc ff10 	bl	80001d8 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	3301      	adds	r3, #1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	60bb      	str	r3, [r7, #8]
      break;
 80033da:	e002      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033de:	60bb      	str	r3, [r7, #8]
      break;
 80033e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033e2:	68bb      	ldr	r3, [r7, #8]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	00f42400 	.word	0x00f42400
 80033f8:	007a1200 	.word	0x007a1200

080033fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_RCC_GetHCLKFreq+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000004 	.word	0x20000004

08003414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e041      	b.n	80034aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd fbbc 	bl	8000bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f000 fa96 	bl	8003984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d001      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e04e      	b.n	800356a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a23      	ldr	r2, [pc, #140]	; (8003578 <HAL_TIM_Base_Start_IT+0xc4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d022      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f6:	d01d      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1f      	ldr	r2, [pc, #124]	; (800357c <HAL_TIM_Base_Start_IT+0xc8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d018      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_TIM_Base_Start_IT+0xcc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <HAL_TIM_Base_Start_IT+0xd0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00e      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <HAL_TIM_Base_Start_IT+0xd4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a19      	ldr	r2, [pc, #100]	; (800358c <HAL_TIM_Base_Start_IT+0xd8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_TIM_Base_Start_IT+0xdc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d111      	bne.n	8003558 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b06      	cmp	r3, #6
 8003544:	d010      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003556:	e007      	b.n	8003568 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40010000 	.word	0x40010000
 800357c:	40000400 	.word	0x40000400
 8003580:	40000800 	.word	0x40000800
 8003584:	40000c00 	.word	0x40000c00
 8003588:	40010400 	.word	0x40010400
 800358c:	40014000 	.word	0x40014000
 8003590:	40001800 	.word	0x40001800

08003594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d122      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d11b      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0202 	mvn.w	r2, #2
 80035c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f9b5 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f9a7 	bl	8003932 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f9b8 	bl	800395a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d122      	bne.n	8003644 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b04      	cmp	r3, #4
 800360a:	d11b      	bne.n	8003644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0204 	mvn.w	r2, #4
 8003614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2202      	movs	r2, #2
 800361a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f98b 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f97d 	bl	8003932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f98e 	bl	800395a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b08      	cmp	r3, #8
 8003650:	d122      	bne.n	8003698 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b08      	cmp	r3, #8
 800365e:	d11b      	bne.n	8003698 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0208 	mvn.w	r2, #8
 8003668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2204      	movs	r2, #4
 800366e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f961 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 8003684:	e005      	b.n	8003692 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f953 	bl	8003932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f964 	bl	800395a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d122      	bne.n	80036ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b10      	cmp	r3, #16
 80036b2:	d11b      	bne.n	80036ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0210 	mvn.w	r2, #16
 80036bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2208      	movs	r2, #8
 80036c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f937 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 80036d8:	e005      	b.n	80036e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f929 	bl	8003932 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f93a 	bl	800395a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10e      	bne.n	8003718 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d107      	bne.n	8003718 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0201 	mvn.w	r2, #1
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd f93e 	bl	8000994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b80      	cmp	r3, #128	; 0x80
 8003724:	d10e      	bne.n	8003744 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d107      	bne.n	8003744 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800373c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fae0 	bl	8003d04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d10e      	bne.n	8003770 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	d107      	bne.n	8003770 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8ff 	bl	800396e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b20      	cmp	r3, #32
 800377c:	d10e      	bne.n	800379c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b20      	cmp	r3, #32
 800378a:	d107      	bne.n	800379c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0220 	mvn.w	r2, #32
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 faaa 	bl	8003cf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_TIM_ConfigClockSource+0x1c>
 80037bc:	2302      	movs	r3, #2
 80037be:	e0b4      	b.n	800392a <HAL_TIM_ConfigClockSource+0x186>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f8:	d03e      	beq.n	8003878 <HAL_TIM_ConfigClockSource+0xd4>
 80037fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fe:	f200 8087 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	f000 8086 	beq.w	8003916 <HAL_TIM_ConfigClockSource+0x172>
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380e:	d87f      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003810:	2b70      	cmp	r3, #112	; 0x70
 8003812:	d01a      	beq.n	800384a <HAL_TIM_ConfigClockSource+0xa6>
 8003814:	2b70      	cmp	r3, #112	; 0x70
 8003816:	d87b      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003818:	2b60      	cmp	r3, #96	; 0x60
 800381a:	d050      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x11a>
 800381c:	2b60      	cmp	r3, #96	; 0x60
 800381e:	d877      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b50      	cmp	r3, #80	; 0x50
 8003822:	d03c      	beq.n	800389e <HAL_TIM_ConfigClockSource+0xfa>
 8003824:	2b50      	cmp	r3, #80	; 0x50
 8003826:	d873      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d058      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x13a>
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d86f      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b30      	cmp	r3, #48	; 0x30
 8003832:	d064      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x15a>
 8003834:	2b30      	cmp	r3, #48	; 0x30
 8003836:	d86b      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b20      	cmp	r3, #32
 800383a:	d060      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x15a>
 800383c:	2b20      	cmp	r3, #32
 800383e:	d867      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d05c      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x15a>
 8003844:	2b10      	cmp	r3, #16
 8003846:	d05a      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x15a>
 8003848:	e062      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6899      	ldr	r1, [r3, #8]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f000 f9ad 	bl	8003bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800386c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	609a      	str	r2, [r3, #8]
      break;
 8003876:	e04f      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6899      	ldr	r1, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f000 f996 	bl	8003bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389a:	609a      	str	r2, [r3, #8]
      break;
 800389c:	e03c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f000 f90a 	bl	8003ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2150      	movs	r1, #80	; 0x50
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f963 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 80038bc:	e02c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f000 f929 	bl	8003b22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2160      	movs	r1, #96	; 0x60
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f953 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 80038dc:	e01c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f000 f8ea 	bl	8003ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2140      	movs	r1, #64	; 0x40
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f943 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 80038fc:	e00c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4619      	mov	r1, r3
 8003908:	4610      	mov	r0, r2
 800390a:	f000 f93a 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 800390e:	e003      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
      break;
 8003914:	e000      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a40      	ldr	r2, [pc, #256]	; (8003a98 <TIM_Base_SetConfig+0x114>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d013      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a2:	d00f      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a3d      	ldr	r2, [pc, #244]	; (8003a9c <TIM_Base_SetConfig+0x118>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00b      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a3c      	ldr	r2, [pc, #240]	; (8003aa0 <TIM_Base_SetConfig+0x11c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d007      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a3b      	ldr	r2, [pc, #236]	; (8003aa4 <TIM_Base_SetConfig+0x120>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a3a      	ldr	r2, [pc, #232]	; (8003aa8 <TIM_Base_SetConfig+0x124>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d108      	bne.n	80039d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a2f      	ldr	r2, [pc, #188]	; (8003a98 <TIM_Base_SetConfig+0x114>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d02b      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d027      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a2c      	ldr	r2, [pc, #176]	; (8003a9c <TIM_Base_SetConfig+0x118>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d023      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2b      	ldr	r2, [pc, #172]	; (8003aa0 <TIM_Base_SetConfig+0x11c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01f      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2a      	ldr	r2, [pc, #168]	; (8003aa4 <TIM_Base_SetConfig+0x120>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01b      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <TIM_Base_SetConfig+0x124>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d017      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a28      	ldr	r2, [pc, #160]	; (8003aac <TIM_Base_SetConfig+0x128>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a27      	ldr	r2, [pc, #156]	; (8003ab0 <TIM_Base_SetConfig+0x12c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00f      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a26      	ldr	r2, [pc, #152]	; (8003ab4 <TIM_Base_SetConfig+0x130>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00b      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a25      	ldr	r2, [pc, #148]	; (8003ab8 <TIM_Base_SetConfig+0x134>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a24      	ldr	r2, [pc, #144]	; (8003abc <TIM_Base_SetConfig+0x138>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d003      	beq.n	8003a36 <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a23      	ldr	r2, [pc, #140]	; (8003ac0 <TIM_Base_SetConfig+0x13c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d108      	bne.n	8003a48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <TIM_Base_SetConfig+0x114>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_Base_SetConfig+0xf8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <TIM_Base_SetConfig+0x124>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d103      	bne.n	8003a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	615a      	str	r2, [r3, #20]
}
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800
 8003aa4:	40000c00 	.word	0x40000c00
 8003aa8:	40010400 	.word	0x40010400
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40014400 	.word	0x40014400
 8003ab4:	40014800 	.word	0x40014800
 8003ab8:	40001800 	.word	0x40001800
 8003abc:	40001c00 	.word	0x40001c00
 8003ac0:	40002000 	.word	0x40002000

08003ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f023 0201 	bic.w	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f023 030a 	bic.w	r3, r3, #10
 8003b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b087      	sub	sp, #28
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f023 0210 	bic.w	r2, r3, #16
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	031b      	lsls	r3, r3, #12
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f043 0307 	orr.w	r3, r3, #7
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	021a      	lsls	r2, r3, #8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	609a      	str	r2, [r3, #8]
}
 8003bec:	bf00      	nop
 8003bee:	371c      	adds	r7, #28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e05a      	b.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a21      	ldr	r2, [pc, #132]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d022      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5c:	d01d      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d018      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1b      	ldr	r2, [pc, #108]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1a      	ldr	r2, [pc, #104]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a15      	ldr	r2, [pc, #84]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10c      	bne.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800
 8003ce0:	40000c00 	.word	0x40000c00
 8003ce4:	40010400 	.word	0x40010400
 8003ce8:	40014000 	.word	0x40014000
 8003cec:	40001800 	.word	0x40001800

08003cf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d18:	b084      	sub	sp, #16
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	f107 001c 	add.w	r0, r7, #28
 8003d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d122      	bne.n	8003d76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d105      	bne.n	8003d6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f001 fb1c 	bl	80053a8 <USB_CoreReset>
 8003d70:	4603      	mov	r3, r0
 8003d72:	73fb      	strb	r3, [r7, #15]
 8003d74:	e01a      	b.n	8003dac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f001 fb10 	bl	80053a8 <USB_CoreReset>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
 8003d9e:	e005      	b.n	8003dac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d10b      	bne.n	8003dca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f043 0206 	orr.w	r2, r3, #6
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f043 0220 	orr.w	r2, r3, #32
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dd6:	b004      	add	sp, #16
 8003dd8:	4770      	bx	lr
	...

08003ddc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	4613      	mov	r3, r2
 8003de8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d165      	bne.n	8003ebc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4a41      	ldr	r2, [pc, #260]	; (8003ef8 <USB_SetTurnaroundTime+0x11c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d906      	bls.n	8003e06 <USB_SetTurnaroundTime+0x2a>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4a40      	ldr	r2, [pc, #256]	; (8003efc <USB_SetTurnaroundTime+0x120>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d202      	bcs.n	8003e06 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e00:	230f      	movs	r3, #15
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	e062      	b.n	8003ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	4a3c      	ldr	r2, [pc, #240]	; (8003efc <USB_SetTurnaroundTime+0x120>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d306      	bcc.n	8003e1c <USB_SetTurnaroundTime+0x40>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4a3b      	ldr	r2, [pc, #236]	; (8003f00 <USB_SetTurnaroundTime+0x124>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d202      	bcs.n	8003e1c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e16:	230e      	movs	r3, #14
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	e057      	b.n	8003ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4a38      	ldr	r2, [pc, #224]	; (8003f00 <USB_SetTurnaroundTime+0x124>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d306      	bcc.n	8003e32 <USB_SetTurnaroundTime+0x56>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4a37      	ldr	r2, [pc, #220]	; (8003f04 <USB_SetTurnaroundTime+0x128>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d202      	bcs.n	8003e32 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e2c:	230d      	movs	r3, #13
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	e04c      	b.n	8003ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4a33      	ldr	r2, [pc, #204]	; (8003f04 <USB_SetTurnaroundTime+0x128>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d306      	bcc.n	8003e48 <USB_SetTurnaroundTime+0x6c>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4a32      	ldr	r2, [pc, #200]	; (8003f08 <USB_SetTurnaroundTime+0x12c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d802      	bhi.n	8003e48 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e42:	230c      	movs	r3, #12
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	e041      	b.n	8003ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4a2f      	ldr	r2, [pc, #188]	; (8003f08 <USB_SetTurnaroundTime+0x12c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d906      	bls.n	8003e5e <USB_SetTurnaroundTime+0x82>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4a2e      	ldr	r2, [pc, #184]	; (8003f0c <USB_SetTurnaroundTime+0x130>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d802      	bhi.n	8003e5e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e58:	230b      	movs	r3, #11
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	e036      	b.n	8003ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	4a2a      	ldr	r2, [pc, #168]	; (8003f0c <USB_SetTurnaroundTime+0x130>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d906      	bls.n	8003e74 <USB_SetTurnaroundTime+0x98>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4a29      	ldr	r2, [pc, #164]	; (8003f10 <USB_SetTurnaroundTime+0x134>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d802      	bhi.n	8003e74 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e6e:	230a      	movs	r3, #10
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	e02b      	b.n	8003ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <USB_SetTurnaroundTime+0x134>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d906      	bls.n	8003e8a <USB_SetTurnaroundTime+0xae>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4a25      	ldr	r2, [pc, #148]	; (8003f14 <USB_SetTurnaroundTime+0x138>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d202      	bcs.n	8003e8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003e84:	2309      	movs	r3, #9
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	e020      	b.n	8003ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4a21      	ldr	r2, [pc, #132]	; (8003f14 <USB_SetTurnaroundTime+0x138>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d306      	bcc.n	8003ea0 <USB_SetTurnaroundTime+0xc4>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4a20      	ldr	r2, [pc, #128]	; (8003f18 <USB_SetTurnaroundTime+0x13c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d802      	bhi.n	8003ea0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	e015      	b.n	8003ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <USB_SetTurnaroundTime+0x13c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d906      	bls.n	8003eb6 <USB_SetTurnaroundTime+0xda>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <USB_SetTurnaroundTime+0x140>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d202      	bcs.n	8003eb6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003eb0:	2307      	movs	r3, #7
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e00a      	b.n	8003ecc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003eb6:	2306      	movs	r3, #6
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	e007      	b.n	8003ecc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003ec2:	2309      	movs	r3, #9
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	e001      	b.n	8003ecc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ec8:	2309      	movs	r3, #9
 8003eca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	029b      	lsls	r3, r3, #10
 8003ee0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	00d8acbf 	.word	0x00d8acbf
 8003efc:	00e4e1c0 	.word	0x00e4e1c0
 8003f00:	00f42400 	.word	0x00f42400
 8003f04:	01067380 	.word	0x01067380
 8003f08:	011a499f 	.word	0x011a499f
 8003f0c:	01312cff 	.word	0x01312cff
 8003f10:	014ca43f 	.word	0x014ca43f
 8003f14:	016e3600 	.word	0x016e3600
 8003f18:	01a6ab1f 	.word	0x01a6ab1f
 8003f1c:	01e84800 	.word	0x01e84800

08003f20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f043 0201 	orr.w	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f023 0201 	bic.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d115      	bne.n	8003fb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f92:	2001      	movs	r0, #1
 8003f94:	f7fc ff22 	bl	8000ddc <HAL_Delay>
      ms++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f001 f972 	bl	8005288 <USB_GetMode>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d01e      	beq.n	8003fe8 <USB_SetCurrentMode+0x84>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b31      	cmp	r3, #49	; 0x31
 8003fae:	d9f0      	bls.n	8003f92 <USB_SetCurrentMode+0x2e>
 8003fb0:	e01a      	b.n	8003fe8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d115      	bne.n	8003fe4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	f7fc ff09 	bl	8000ddc <HAL_Delay>
      ms++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f001 f959 	bl	8005288 <USB_GetMode>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <USB_SetCurrentMode+0x84>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b31      	cmp	r3, #49	; 0x31
 8003fe0:	d9f0      	bls.n	8003fc4 <USB_SetCurrentMode+0x60>
 8003fe2:	e001      	b.n	8003fe8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e005      	b.n	8003ff4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b32      	cmp	r3, #50	; 0x32
 8003fec:	d101      	bne.n	8003ff2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800400a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	e009      	b.n	8004030 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	3340      	adds	r3, #64	; 0x40
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	2200      	movs	r2, #0
 8004028:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	3301      	adds	r3, #1
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b0e      	cmp	r3, #14
 8004034:	d9f2      	bls.n	800401c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d11c      	bne.n	8004076 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800404a:	f043 0302 	orr.w	r3, r3, #2
 800404e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	639a      	str	r2, [r3, #56]	; 0x38
 8004074:	e00b      	b.n	800408e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004094:	461a      	mov	r2, r3
 8004096:	2300      	movs	r3, #0
 8004098:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a0:	4619      	mov	r1, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a8:	461a      	mov	r2, r3
 80040aa:	680b      	ldr	r3, [r1, #0]
 80040ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d10c      	bne.n	80040ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d104      	bne.n	80040c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040ba:	2100      	movs	r1, #0
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f945 	bl	800434c <USB_SetDevSpeed>
 80040c2:	e008      	b.n	80040d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040c4:	2101      	movs	r1, #1
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f940 	bl	800434c <USB_SetDevSpeed>
 80040cc:	e003      	b.n	80040d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040ce:	2103      	movs	r1, #3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f93b 	bl	800434c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040d6:	2110      	movs	r1, #16
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f8f3 	bl	80042c4 <USB_FlushTxFifo>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f90f 	bl	800430c <USB_FlushRxFifo>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fe:	461a      	mov	r2, r3
 8004100:	2300      	movs	r3, #0
 8004102:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410a:	461a      	mov	r2, r3
 800410c:	2300      	movs	r3, #0
 800410e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004116:	461a      	mov	r2, r3
 8004118:	2300      	movs	r3, #0
 800411a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	e043      	b.n	80041aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004134:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004138:	d118      	bne.n	800416c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414c:	461a      	mov	r2, r3
 800414e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	e013      	b.n	800417e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004162:	461a      	mov	r2, r3
 8004164:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e008      	b.n	800417e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004178:	461a      	mov	r2, r3
 800417a:	2300      	movs	r3, #0
 800417c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418a:	461a      	mov	r2, r3
 800418c:	2300      	movs	r3, #0
 800418e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419c:	461a      	mov	r2, r3
 800419e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	3301      	adds	r3, #1
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d3b7      	bcc.n	8004122 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	e043      	b.n	8004240 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041ce:	d118      	bne.n	8004202 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10a      	bne.n	80041ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e2:	461a      	mov	r2, r3
 80041e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e013      	b.n	8004214 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	461a      	mov	r2, r3
 80041fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	e008      	b.n	8004214 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420e:	461a      	mov	r2, r3
 8004210:	2300      	movs	r3, #0
 8004212:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004220:	461a      	mov	r2, r3
 8004222:	2300      	movs	r3, #0
 8004224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	461a      	mov	r2, r3
 8004234:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004238:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	3301      	adds	r3, #1
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	429a      	cmp	r2, r3
 8004246:	d3b7      	bcc.n	80041b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800425a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004268:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	2b00      	cmp	r3, #0
 800426e:	d105      	bne.n	800427c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	f043 0210 	orr.w	r2, r3, #16
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699a      	ldr	r2, [r3, #24]
 8004280:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <USB_DevInit+0x2c4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f043 0208 	orr.w	r2, r3, #8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800429a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042bc:	b004      	add	sp, #16
 80042be:	4770      	bx	lr
 80042c0:	803c3800 	.word	0x803c3800

080042c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3301      	adds	r3, #1
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	4a08      	ldr	r2, [pc, #32]	; (8004308 <USB_FlushTxFifo+0x44>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e006      	b.n	80042fc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d0f1      	beq.n	80042de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	00030d40 	.word	0x00030d40

0800430c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2210      	movs	r2, #16
 800431c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3301      	adds	r3, #1
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	4a08      	ldr	r2, [pc, #32]	; (8004348 <USB_FlushRxFifo+0x3c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e006      	b.n	800433c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b10      	cmp	r3, #16
 8004338:	d0f1      	beq.n	800431e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	00030d40 	.word	0x00030d40

0800434c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	68f9      	ldr	r1, [r7, #12]
 8004368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800437e:	b480      	push	{r7}
 8004380:	b087      	sub	sp, #28
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0306 	and.w	r3, r3, #6
 8004396:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800439e:	2300      	movs	r3, #0
 80043a0:	75fb      	strb	r3, [r7, #23]
 80043a2:	e00a      	b.n	80043ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d002      	beq.n	80043b0 <USB_GetDevSpeed+0x32>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b06      	cmp	r3, #6
 80043ae:	d102      	bne.n	80043b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043b0:	2302      	movs	r3, #2
 80043b2:	75fb      	strb	r3, [r7, #23]
 80043b4:	e001      	b.n	80043ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043b6:	230f      	movs	r3, #15
 80043b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d13a      	bne.n	800445a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ea:	69da      	ldr	r2, [r3, #28]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	2101      	movs	r1, #1
 80043f6:	fa01 f303 	lsl.w	r3, r1, r3
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	68f9      	ldr	r1, [r7, #12]
 80043fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004402:	4313      	orrs	r3, r2
 8004404:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d155      	bne.n	80044c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	78db      	ldrb	r3, [r3, #3]
 8004436:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004438:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	059b      	lsls	r3, r3, #22
 800443e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004440:	4313      	orrs	r3, r2
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	0151      	lsls	r1, r2, #5
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	440a      	add	r2, r1
 800444a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800444e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	e036      	b.n	80044c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	2101      	movs	r1, #1
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	68f9      	ldr	r1, [r7, #12]
 8004474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004478:	4313      	orrs	r3, r2
 800447a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d11a      	bne.n	80044c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	78db      	ldrb	r3, [r3, #3]
 80044ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044ae:	430b      	orrs	r3, r1
 80044b0:	4313      	orrs	r3, r2
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	0151      	lsls	r1, r2, #5
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	440a      	add	r2, r1
 80044ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	785b      	ldrb	r3, [r3, #1]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d161      	bne.n	80045b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800450a:	d11f      	bne.n	800454c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	0151      	lsls	r1, r2, #5
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	440a      	add	r2, r1
 8004522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004526:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800452a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	440a      	add	r2, r1
 8004542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004546:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800454a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	2101      	movs	r1, #1
 800455e:	fa01 f303 	lsl.w	r3, r1, r3
 8004562:	b29b      	uxth	r3, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800456c:	4013      	ands	r3, r2
 800456e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	2101      	movs	r1, #1
 8004582:	fa01 f303 	lsl.w	r3, r1, r3
 8004586:	b29b      	uxth	r3, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	68f9      	ldr	r1, [r7, #12]
 800458c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004590:	4013      	ands	r3, r2
 8004592:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	0159      	lsls	r1, r3, #5
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	440b      	add	r3, r1
 80045aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ae:	4619      	mov	r1, r3
 80045b0:	4b35      	ldr	r3, [pc, #212]	; (8004688 <USB_DeactivateEndpoint+0x1b0>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]
 80045b6:	e060      	b.n	800467a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ce:	d11f      	bne.n	8004610 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	0151      	lsls	r1, r2, #5
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	440a      	add	r2, r1
 80045e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	0151      	lsls	r1, r2, #5
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	440a      	add	r2, r1
 8004606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800460a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800460e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	2101      	movs	r1, #1
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	43db      	mvns	r3, r3
 800462a:	68f9      	ldr	r1, [r7, #12]
 800462c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004630:	4013      	ands	r3, r2
 8004632:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	2101      	movs	r1, #1
 8004646:	fa01 f303 	lsl.w	r3, r1, r3
 800464a:	041b      	lsls	r3, r3, #16
 800464c:	43db      	mvns	r3, r3
 800464e:	68f9      	ldr	r1, [r7, #12]
 8004650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004654:	4013      	ands	r3, r2
 8004656:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	0159      	lsls	r1, r3, #5
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	440b      	add	r3, r1
 800466e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004672:	4619      	mov	r1, r3
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <USB_DeactivateEndpoint+0x1b4>)
 8004676:	4013      	ands	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	ec337800 	.word	0xec337800
 800468c:	eff37800 	.word	0xeff37800

08004690 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	4613      	mov	r3, r2
 800469c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	f040 815c 	bne.w	800496a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d132      	bne.n	8004720 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	0151      	lsls	r1, r2, #5
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	440a      	add	r2, r1
 80046d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	0151      	lsls	r1, r2, #5
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	440a      	add	r2, r1
 80046f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	0151      	lsls	r1, r2, #5
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	440a      	add	r2, r1
 8004714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004718:	0cdb      	lsrs	r3, r3, #19
 800471a:	04db      	lsls	r3, r3, #19
 800471c:	6113      	str	r3, [r2, #16]
 800471e:	e074      	b.n	800480a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473a:	0cdb      	lsrs	r3, r3, #19
 800473c:	04db      	lsls	r3, r3, #19
 800473e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	0151      	lsls	r1, r2, #5
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	440a      	add	r2, r1
 8004756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800475e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004762:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004770:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	6959      	ldr	r1, [r3, #20]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	440b      	add	r3, r1
 800477c:	1e59      	subs	r1, r3, #1
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	fbb1 f3f3 	udiv	r3, r1, r3
 8004786:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004788:	4b9d      	ldr	r3, [pc, #628]	; (8004a00 <USB_EPStartXfer+0x370>)
 800478a:	400b      	ands	r3, r1
 800478c:	69b9      	ldr	r1, [r7, #24]
 800478e:	0148      	lsls	r0, r1, #5
 8004790:	69f9      	ldr	r1, [r7, #28]
 8004792:	4401      	add	r1, r0
 8004794:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004798:	4313      	orrs	r3, r2
 800479a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b2:	69b9      	ldr	r1, [r7, #24]
 80047b4:	0148      	lsls	r0, r1, #5
 80047b6:	69f9      	ldr	r1, [r7, #28]
 80047b8:	4401      	add	r1, r0
 80047ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047be:	4313      	orrs	r3, r2
 80047c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	78db      	ldrb	r3, [r3, #3]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d11f      	bne.n	800480a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	0151      	lsls	r1, r2, #5
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	440a      	add	r2, r1
 80047e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80047e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	0151      	lsls	r1, r2, #5
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	440a      	add	r2, r1
 8004800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004808:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d14b      	bne.n	80048a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d009      	beq.n	800482c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	461a      	mov	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	78db      	ldrb	r3, [r3, #3]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d128      	bne.n	8004886 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d110      	bne.n	8004866 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	0151      	lsls	r1, r2, #5
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	440a      	add	r2, r1
 800485a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	e00f      	b.n	8004886 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	0151      	lsls	r1, r2, #5
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	440a      	add	r2, r1
 800487c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004884:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	e12f      	b.n	8004b08 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	78db      	ldrb	r3, [r3, #3]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d015      	beq.n	80048fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8117 	beq.w	8004b08 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	2101      	movs	r1, #1
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	69f9      	ldr	r1, [r7, #28]
 80048f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048f6:	4313      	orrs	r3, r2
 80048f8:	634b      	str	r3, [r1, #52]	; 0x34
 80048fa:	e105      	b.n	8004b08 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d110      	bne.n	800492e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	0151      	lsls	r1, r2, #5
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	440a      	add	r2, r1
 8004922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	e00f      	b.n	800494e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	0151      	lsls	r1, r2, #5
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	440a      	add	r2, r1
 8004944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	68d9      	ldr	r1, [r3, #12]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	781a      	ldrb	r2, [r3, #0]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	b298      	uxth	r0, r3
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	4603      	mov	r3, r0
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fa2b 	bl	8004dbe <USB_WritePacket>
 8004968:	e0ce      	b.n	8004b08 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	0151      	lsls	r1, r2, #5
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	440a      	add	r2, r1
 8004980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004984:	0cdb      	lsrs	r3, r3, #19
 8004986:	04db      	lsls	r3, r3, #19
 8004988:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	0151      	lsls	r1, r2, #5
 800499c:	69fa      	ldr	r2, [r7, #28]
 800499e:	440a      	add	r2, r1
 80049a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d126      	bne.n	8004a04 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049cc:	69b9      	ldr	r1, [r7, #24]
 80049ce:	0148      	lsls	r0, r1, #5
 80049d0:	69f9      	ldr	r1, [r7, #28]
 80049d2:	4401      	add	r1, r0
 80049d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049d8:	4313      	orrs	r3, r2
 80049da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049fa:	6113      	str	r3, [r2, #16]
 80049fc:	e036      	b.n	8004a6c <USB_EPStartXfer+0x3dc>
 80049fe:	bf00      	nop
 8004a00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	695a      	ldr	r2, [r3, #20]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	1e5a      	subs	r2, r3, #1
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	8afb      	ldrh	r3, [r7, #22]
 8004a2a:	04d9      	lsls	r1, r3, #19
 8004a2c:	4b39      	ldr	r3, [pc, #228]	; (8004b14 <USB_EPStartXfer+0x484>)
 8004a2e:	400b      	ands	r3, r1
 8004a30:	69b9      	ldr	r1, [r7, #24]
 8004a32:	0148      	lsls	r0, r1, #5
 8004a34:	69f9      	ldr	r1, [r7, #28]
 8004a36:	4401      	add	r1, r0
 8004a38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	8af9      	ldrh	r1, [r7, #22]
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5c:	69b9      	ldr	r1, [r7, #24]
 8004a5e:	0148      	lsls	r0, r1, #5
 8004a60:	69f9      	ldr	r1, [r7, #28]
 8004a62:	4401      	add	r1, r0
 8004a64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d10d      	bne.n	8004a8e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	68d9      	ldr	r1, [r3, #12]
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8a:	460a      	mov	r2, r1
 8004a8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	78db      	ldrb	r3, [r3, #3]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d128      	bne.n	8004ae8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d110      	bne.n	8004ac8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	0151      	lsls	r1, r2, #5
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	440a      	add	r2, r1
 8004abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e00f      	b.n	8004ae8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	0151      	lsls	r1, r2, #5
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	440a      	add	r2, r1
 8004ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	0151      	lsls	r1, r2, #5
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	440a      	add	r2, r1
 8004afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	1ff80000 	.word	0x1ff80000

08004b18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	4613      	mov	r3, r2
 8004b24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	f040 80cd 	bne.w	8004cd4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d132      	bne.n	8004ba8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	0151      	lsls	r1, r2, #5
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	440a      	add	r2, r1
 8004b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	0151      	lsls	r1, r2, #5
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	440a      	add	r2, r1
 8004b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	0151      	lsls	r1, r2, #5
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	440a      	add	r2, r1
 8004b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba0:	0cdb      	lsrs	r3, r3, #19
 8004ba2:	04db      	lsls	r3, r3, #19
 8004ba4:	6113      	str	r3, [r2, #16]
 8004ba6:	e04e      	b.n	8004c46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc2:	0cdb      	lsrs	r3, r3, #19
 8004bc4:	04db      	lsls	r3, r3, #19
 8004bc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	0151      	lsls	r1, r2, #5
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	440a      	add	r2, r1
 8004bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004be6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	695a      	ldr	r2, [r3, #20]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d903      	bls.n	8004c00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	0151      	lsls	r1, r2, #5
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	440a      	add	r2, r1
 8004c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c36:	6939      	ldr	r1, [r7, #16]
 8004c38:	0148      	lsls	r0, r1, #5
 8004c3a:	6979      	ldr	r1, [r7, #20]
 8004c3c:	4401      	add	r1, r0
 8004c3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c42:	4313      	orrs	r3, r2
 8004c44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d11e      	bne.n	8004c8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d009      	beq.n	8004c68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c60:	461a      	mov	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	0151      	lsls	r1, r2, #5
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	e092      	b.n	8004db0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ca8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d07e      	beq.n	8004db0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	6979      	ldr	r1, [r7, #20]
 8004cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	634b      	str	r3, [r1, #52]	; 0x34
 8004cd2:	e06d      	b.n	8004db0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cee:	0cdb      	lsrs	r3, r3, #19
 8004cf0:	04db      	lsls	r3, r3, #19
 8004cf2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	0151      	lsls	r1, r2, #5
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	440a      	add	r2, r1
 8004d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d16:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	0151      	lsls	r1, r2, #5
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d5e:	6939      	ldr	r1, [r7, #16]
 8004d60:	0148      	lsls	r0, r1, #5
 8004d62:	6979      	ldr	r1, [r7, #20]
 8004d64:	4401      	add	r1, r0
 8004d66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d10d      	bne.n	8004d90 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d009      	beq.n	8004d90 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	68d9      	ldr	r1, [r3, #12]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8c:	460a      	mov	r2, r1
 8004d8e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	0151      	lsls	r1, r2, #5
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	440a      	add	r2, r1
 8004da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004daa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b089      	sub	sp, #36	; 0x24
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	4611      	mov	r1, r2
 8004dca:	461a      	mov	r2, r3
 8004dcc:	460b      	mov	r3, r1
 8004dce:	71fb      	strb	r3, [r7, #7]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ddc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d123      	bne.n	8004e2c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004de4:	88bb      	ldrh	r3, [r7, #4]
 8004de6:	3303      	adds	r3, #3
 8004de8:	089b      	lsrs	r3, r3, #2
 8004dea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004dec:	2300      	movs	r3, #0
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e018      	b.n	8004e24 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	031a      	lsls	r2, r3, #12
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dfe:	461a      	mov	r2, r3
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	3301      	adds	r3, #1
 8004e16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	3301      	adds	r3, #1
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d3e2      	bcc.n	8004df2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3724      	adds	r7, #36	; 0x24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b08b      	sub	sp, #44	; 0x2c
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	4613      	mov	r3, r2
 8004e46:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e60:	2300      	movs	r3, #0
 8004e62:	623b      	str	r3, [r7, #32]
 8004e64:	e014      	b.n	8004e90 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	3301      	adds	r3, #1
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	3301      	adds	r3, #1
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	3301      	adds	r3, #1
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	623b      	str	r3, [r7, #32]
 8004e90:	6a3a      	ldr	r2, [r7, #32]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d3e6      	bcc.n	8004e66 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e98:	8bfb      	ldrh	r3, [r7, #30]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01e      	beq.n	8004edc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	f107 0310 	add.w	r3, r7, #16
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	701a      	strb	r2, [r3, #0]
      i++;
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	623b      	str	r3, [r7, #32]
      pDest++;
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	3301      	adds	r3, #1
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004ed0:	8bfb      	ldrh	r3, [r7, #30]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ed6:	8bfb      	ldrh	r3, [r7, #30]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1ea      	bne.n	8004eb2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	372c      	adds	r7, #44	; 0x2c
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	785b      	ldrb	r3, [r3, #1]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d12c      	bne.n	8004f60 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	db12      	blt.n	8004f3e <USB_EPSetStall+0x54>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00f      	beq.n	8004f3e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f3c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	e02b      	b.n	8004fb8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	db12      	blt.n	8004f98 <USB_EPSetStall+0xae>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00f      	beq.n	8004f98 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f96:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	785b      	ldrb	r3, [r3, #1]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d128      	bne.n	8005034 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005000:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	78db      	ldrb	r3, [r3, #3]
 8005006:	2b03      	cmp	r3, #3
 8005008:	d003      	beq.n	8005012 <USB_EPClearStall+0x4c>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	78db      	ldrb	r3, [r3, #3]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d138      	bne.n	8005084 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	e027      	b.n	8005084 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	0151      	lsls	r1, r2, #5
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	440a      	add	r2, r1
 800504a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800504e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005052:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	78db      	ldrb	r3, [r3, #3]
 8005058:	2b03      	cmp	r3, #3
 800505a:	d003      	beq.n	8005064 <USB_EPClearStall+0x9e>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	78db      	ldrb	r3, [r3, #3]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d10f      	bne.n	8005084 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	440a      	add	r2, r1
 800507a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800507e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005082:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	460b      	mov	r3, r1
 800509c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80050c6:	68f9      	ldr	r1, [r7, #12]
 80050c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050cc:	4313      	orrs	r3, r2
 80050ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80050f8:	f023 0303 	bic.w	r3, r3, #3
 80050fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800510c:	f023 0302 	bic.w	r3, r3, #2
 8005110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800514e:	f043 0302 	orr.w	r3, r3, #2
 8005152:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4013      	ands	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800517a:	68fb      	ldr	r3, [r7, #12]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	4013      	ands	r3, r2
 80051aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	0c1b      	lsrs	r3, r3, #16
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	4013      	ands	r3, r2
 80051de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	b29b      	uxth	r3, r3
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	4013      	ands	r3, r2
 800521c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800521e:	68bb      	ldr	r3, [r7, #8]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
 800525c:	01db      	lsls	r3, r3, #7
 800525e:	b2db      	uxtb	r3, r3
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4013      	ands	r3, r2
 8005278:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800527a:	68bb      	ldr	r3, [r7, #8]
}
 800527c:	4618      	mov	r0, r3
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	f003 0301 	and.w	r3, r3, #1
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80052c2:	f023 0307 	bic.w	r3, r3, #7
 80052c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	460b      	mov	r3, r1
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	333c      	adds	r3, #60	; 0x3c
 8005302:	3304      	adds	r3, #4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4a26      	ldr	r2, [pc, #152]	; (80053a4 <USB_EP0_OutStart+0xb8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d90a      	bls.n	8005326 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800531c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005320:	d101      	bne.n	8005326 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	e037      	b.n	8005396 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532c:	461a      	mov	r2, r3
 800532e:	2300      	movs	r3, #0
 8005330:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005344:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005354:	f043 0318 	orr.w	r3, r3, #24
 8005358:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005368:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800536c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800536e:	7afb      	ldrb	r3, [r7, #11]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d10f      	bne.n	8005394 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537a:	461a      	mov	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800538e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005392:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	4f54300a 	.word	0x4f54300a

080053a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3301      	adds	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	4a13      	ldr	r2, [pc, #76]	; (8005408 <USB_CoreReset+0x60>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d901      	bls.n	80053c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e01a      	b.n	80053fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	daf3      	bge.n	80053b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f043 0201 	orr.w	r2, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3301      	adds	r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	4a09      	ldr	r2, [pc, #36]	; (8005408 <USB_CoreReset+0x60>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d901      	bls.n	80053ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e006      	b.n	80053fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d0f1      	beq.n	80053dc <USB_CoreReset+0x34>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	00030d40 	.word	0x00030d40

0800540c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005418:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800541c:	f002 f972 	bl	8007704 <USBD_static_malloc>
 8005420:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d105      	bne.n	8005434 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005430:	2302      	movs	r3, #2
 8005432:	e066      	b.n	8005502 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	7c1b      	ldrb	r3, [r3, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d119      	bne.n	8005478 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005448:	2202      	movs	r2, #2
 800544a:	2181      	movs	r1, #129	; 0x81
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f002 f836 	bl	80074be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800545c:	2202      	movs	r2, #2
 800545e:	2101      	movs	r1, #1
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f002 f82c 	bl	80074be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2210      	movs	r2, #16
 8005472:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005476:	e016      	b.n	80054a6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005478:	2340      	movs	r3, #64	; 0x40
 800547a:	2202      	movs	r2, #2
 800547c:	2181      	movs	r1, #129	; 0x81
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f002 f81d 	bl	80074be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800548a:	2340      	movs	r3, #64	; 0x40
 800548c:	2202      	movs	r2, #2
 800548e:	2101      	movs	r1, #1
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f002 f814 	bl	80074be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2210      	movs	r2, #16
 80054a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80054a6:	2308      	movs	r3, #8
 80054a8:	2203      	movs	r2, #3
 80054aa:	2182      	movs	r1, #130	; 0x82
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f002 f806 	bl	80074be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	7c1b      	ldrb	r3, [r3, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d109      	bne.n	80054f0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054e6:	2101      	movs	r1, #1
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f002 f8d7 	bl	800769c <USBD_LL_PrepareReceive>
 80054ee:	e007      	b.n	8005500 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054f6:	2340      	movs	r3, #64	; 0x40
 80054f8:	2101      	movs	r1, #1
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f002 f8ce 	bl	800769c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005516:	2181      	movs	r1, #129	; 0x81
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f001 fff6 	bl	800750a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005524:	2101      	movs	r1, #1
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f001 ffef 	bl	800750a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005534:	2182      	movs	r1, #130	; 0x82
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f001 ffe7 	bl	800750a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00e      	beq.n	8005574 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005566:	4618      	mov	r0, r3
 8005568:	f002 f8da 	bl	8007720 <USBD_static_free>
    pdev->pClassData = NULL;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005590:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e0af      	b.n	8005708 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d03f      	beq.n	8005634 <USBD_CDC_Setup+0xb4>
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	f040 809f 	bne.w	80056f8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	88db      	ldrh	r3, [r3, #6]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d02e      	beq.n	8005620 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	b25b      	sxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	da16      	bge.n	80055fa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80055d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	88d2      	ldrh	r2, [r2, #6]
 80055de:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	88db      	ldrh	r3, [r3, #6]
 80055e4:	2b07      	cmp	r3, #7
 80055e6:	bf28      	it	cs
 80055e8:	2307      	movcs	r3, #7
 80055ea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	89fa      	ldrh	r2, [r7, #14]
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f001 fb19 	bl	8006c2a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80055f8:	e085      	b.n	8005706 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	785a      	ldrb	r2, [r3, #1]
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	88db      	ldrh	r3, [r3, #6]
 8005608:	b2da      	uxtb	r2, r3
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005610:	6939      	ldr	r1, [r7, #16]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	88db      	ldrh	r3, [r3, #6]
 8005616:	461a      	mov	r2, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f001 fb32 	bl	8006c82 <USBD_CtlPrepareRx>
      break;
 800561e:	e072      	b.n	8005706 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	7850      	ldrb	r0, [r2, #1]
 800562c:	2200      	movs	r2, #0
 800562e:	6839      	ldr	r1, [r7, #0]
 8005630:	4798      	blx	r3
      break;
 8005632:	e068      	b.n	8005706 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	2b0b      	cmp	r3, #11
 800563a:	d852      	bhi.n	80056e2 <USBD_CDC_Setup+0x162>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <USBD_CDC_Setup+0xc4>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005675 	.word	0x08005675
 8005648:	080056f1 	.word	0x080056f1
 800564c:	080056e3 	.word	0x080056e3
 8005650:	080056e3 	.word	0x080056e3
 8005654:	080056e3 	.word	0x080056e3
 8005658:	080056e3 	.word	0x080056e3
 800565c:	080056e3 	.word	0x080056e3
 8005660:	080056e3 	.word	0x080056e3
 8005664:	080056e3 	.word	0x080056e3
 8005668:	080056e3 	.word	0x080056e3
 800566c:	0800569f 	.word	0x0800569f
 8005670:	080056c9 	.word	0x080056c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b03      	cmp	r3, #3
 800567e:	d107      	bne.n	8005690 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005680:	f107 030a 	add.w	r3, r7, #10
 8005684:	2202      	movs	r2, #2
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f001 face 	bl	8006c2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800568e:	e032      	b.n	80056f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f001 fa58 	bl	8006b48 <USBD_CtlError>
            ret = USBD_FAIL;
 8005698:	2303      	movs	r3, #3
 800569a:	75fb      	strb	r3, [r7, #23]
          break;
 800569c:	e02b      	b.n	80056f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d107      	bne.n	80056ba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80056aa:	f107 030d 	add.w	r3, r7, #13
 80056ae:	2201      	movs	r2, #1
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 fab9 	bl	8006c2a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056b8:	e01d      	b.n	80056f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f001 fa43 	bl	8006b48 <USBD_CtlError>
            ret = USBD_FAIL;
 80056c2:	2303      	movs	r3, #3
 80056c4:	75fb      	strb	r3, [r7, #23]
          break;
 80056c6:	e016      	b.n	80056f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d00f      	beq.n	80056f4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80056d4:	6839      	ldr	r1, [r7, #0]
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f001 fa36 	bl	8006b48 <USBD_CtlError>
            ret = USBD_FAIL;
 80056dc:	2303      	movs	r3, #3
 80056de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80056e0:	e008      	b.n	80056f4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056e2:	6839      	ldr	r1, [r7, #0]
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f001 fa2f 	bl	8006b48 <USBD_CtlError>
          ret = USBD_FAIL;
 80056ea:	2303      	movs	r3, #3
 80056ec:	75fb      	strb	r3, [r7, #23]
          break;
 80056ee:	e002      	b.n	80056f6 <USBD_CDC_Setup+0x176>
          break;
 80056f0:	bf00      	nop
 80056f2:	e008      	b.n	8005706 <USBD_CDC_Setup+0x186>
          break;
 80056f4:	bf00      	nop
      }
      break;
 80056f6:	e006      	b.n	8005706 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f001 fa24 	bl	8006b48 <USBD_CtlError>
      ret = USBD_FAIL;
 8005700:	2303      	movs	r3, #3
 8005702:	75fb      	strb	r3, [r7, #23]
      break;
 8005704:	bf00      	nop
  }

  return (uint8_t)ret;
 8005706:	7dfb      	ldrb	r3, [r7, #23]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005722:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800572e:	2303      	movs	r3, #3
 8005730:	e04f      	b.n	80057d2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005738:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800573a:	78fa      	ldrb	r2, [r7, #3]
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	3318      	adds	r3, #24
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d029      	beq.n	80057a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005750:	78fa      	ldrb	r2, [r7, #3]
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	3318      	adds	r3, #24
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	78f9      	ldrb	r1, [r7, #3]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	460b      	mov	r3, r1
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	1a5b      	subs	r3, r3, r1
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4403      	add	r3, r0
 8005770:	3344      	adds	r3, #68	; 0x44
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	fbb2 f1f3 	udiv	r1, r2, r3
 8005778:	fb03 f301 	mul.w	r3, r3, r1
 800577c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800577e:	2b00      	cmp	r3, #0
 8005780:	d110      	bne.n	80057a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005782:	78fa      	ldrb	r2, [r7, #3]
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	3318      	adds	r3, #24
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005796:	78f9      	ldrb	r1, [r7, #3]
 8005798:	2300      	movs	r3, #0
 800579a:	2200      	movs	r2, #0
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 ff5c 	bl	800765a <USBD_LL_Transmit>
 80057a2:	e015      	b.n	80057d0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00b      	beq.n	80057d0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80057cc:	78fa      	ldrb	r2, [r7, #3]
 80057ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e015      	b.n	8005828 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 ff6c 	bl	80076de <USBD_LL_GetRxDataSize>
 8005806:	4602      	mov	r2, r0
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005822:	4611      	mov	r1, r2
 8005824:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800583e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005846:	2303      	movs	r3, #3
 8005848:	e01b      	b.n	8005882 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d015      	beq.n	8005880 <USBD_CDC_EP0_RxReady+0x50>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800585a:	2bff      	cmp	r3, #255	; 0xff
 800585c:	d010      	beq.n	8005880 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800586c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005874:	b292      	uxth	r2, r2
 8005876:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	22ff      	movs	r2, #255	; 0xff
 800587c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2243      	movs	r2, #67	; 0x43
 8005898:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800589a:	4b03      	ldr	r3, [pc, #12]	; (80058a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	20000098 	.word	0x20000098

080058ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2243      	movs	r2, #67	; 0x43
 80058b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80058ba:	4b03      	ldr	r3, [pc, #12]	; (80058c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	20000054 	.word	0x20000054

080058cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2243      	movs	r2, #67	; 0x43
 80058d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80058da:	4b03      	ldr	r3, [pc, #12]	; (80058e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	200000dc 	.word	0x200000dc

080058ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	220a      	movs	r2, #10
 80058f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80058fa:	4b03      	ldr	r3, [pc, #12]	; (8005908 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	20000010 	.word	0x20000010

0800590c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800591c:	2303      	movs	r3, #3
 800591e:	e004      	b.n	800592a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005936:	b480      	push	{r7}
 8005938:	b087      	sub	sp, #28
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005948:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005950:	2303      	movs	r3, #3
 8005952:	e008      	b.n	8005966 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005982:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800598a:	2303      	movs	r3, #3
 800598c:	e004      	b.n	8005998 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80059b4:	2301      	movs	r3, #1
 80059b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e01a      	b.n	80059fc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d114      	bne.n	80059fa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80059ee:	2181      	movs	r1, #129	; 0x81
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f001 fe32 	bl	800765a <USBD_LL_Transmit>

    ret = USBD_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e016      	b.n	8005a50 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	7c1b      	ldrb	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a34:	2101      	movs	r1, #1
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f001 fe30 	bl	800769c <USBD_LL_PrepareReceive>
 8005a3c:	e007      	b.n	8005a4e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a44:	2340      	movs	r3, #64	; 0x40
 8005a46:	2101      	movs	r1, #1
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 fe27 	bl	800769c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	4613      	mov	r3, r2
 8005a64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e01f      	b.n	8005ab0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	79fa      	ldrb	r2, [r7, #7]
 8005aa2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f001 fca3 	bl	80073f0 <USBD_LL_Init>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e016      	b.n	8005afe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00b      	beq.n	8005afc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	f107 020e 	add.w	r2, r7, #14
 8005af0:	4610      	mov	r0, r2
 8005af2:	4798      	blx	r3
 8005af4:	4602      	mov	r2, r0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f001 fcba 	bl	8007488 <USBD_LL_Start>
 8005b14:	4603      	mov	r3, r0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005b40:	2303      	movs	r3, #3
 8005b42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	4611      	mov	r1, r2
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	4798      	blx	r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	78fa      	ldrb	r2, [r7, #3]
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	4798      	blx	r3
  }

  return USBD_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 ff90 	bl	8006ad4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d01a      	beq.n	8005c0e <USBD_LL_SetupStage+0x72>
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d822      	bhi.n	8005c22 <USBD_LL_SetupStage+0x86>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <USBD_LL_SetupStage+0x4a>
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d00a      	beq.n	8005bfa <USBD_LL_SetupStage+0x5e>
 8005be4:	e01d      	b.n	8005c22 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fa62 	bl	80060b8 <USBD_StdDevReq>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf8:	e020      	b.n	8005c3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c00:	4619      	mov	r1, r3
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fac6 	bl	8006194 <USBD_StdItfReq>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c0c:	e016      	b.n	8005c3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fb05 	bl	8006226 <USBD_StdEPReq>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c20:	e00c      	b.n	8005c3c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f001 fc89 	bl	8007548 <USBD_LL_StallEP>
 8005c36:	4603      	mov	r3, r0
 8005c38:	73fb      	strb	r3, [r7, #15]
      break;
 8005c3a:	bf00      	nop
  }

  return ret;
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b086      	sub	sp, #24
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005c54:	7afb      	ldrb	r3, [r7, #11]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d138      	bne.n	8005ccc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d14a      	bne.n	8005d02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d913      	bls.n	8005ca0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	1ad2      	subs	r2, r2, r3
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	bf28      	it	cs
 8005c92:	4613      	movcs	r3, r2
 8005c94:	461a      	mov	r2, r3
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f001 f80f 	bl	8006cbc <USBD_CtlContinueRx>
 8005c9e:	e030      	b.n	8005d02 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d10b      	bne.n	8005cc4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f001 f80a 	bl	8006cde <USBD_CtlSendStatus>
 8005cca:	e01a      	b.n	8005d02 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d114      	bne.n	8005d02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00e      	beq.n	8005d02 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	7afa      	ldrb	r2, [r7, #11]
 8005cee:	4611      	mov	r1, r2
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	4798      	blx	r3
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
 8005d00:	e000      	b.n	8005d04 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	460b      	mov	r3, r1
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d1a:	7afb      	ldrb	r3, [r7, #11]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d16b      	bne.n	8005df8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3314      	adds	r3, #20
 8005d24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d156      	bne.n	8005dde <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d914      	bls.n	8005d66 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	1ad2      	subs	r2, r2, r3
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 ff84 	bl	8006c60 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f001 fc9c 	bl	800769c <USBD_LL_PrepareReceive>
 8005d64:	e03b      	b.n	8005dde <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d11c      	bne.n	8005dac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d316      	bcc.n	8005dac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d20f      	bcs.n	8005dac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2100      	movs	r1, #0
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 ff65 	bl	8006c60 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d9e:	2300      	movs	r3, #0
 8005da0:	2200      	movs	r2, #0
 8005da2:	2100      	movs	r1, #0
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f001 fc79 	bl	800769c <USBD_LL_PrepareReceive>
 8005daa:	e018      	b.n	8005dde <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d10b      	bne.n	8005dd0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005dd0:	2180      	movs	r1, #128	; 0x80
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f001 fbb8 	bl	8007548 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 ff93 	bl	8006d04 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d122      	bne.n	8005e2e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff fe98 	bl	8005b1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005df6:	e01a      	b.n	8005e2e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d114      	bne.n	8005e2e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00e      	beq.n	8005e2e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	7afa      	ldrb	r2, [r7, #11]
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	4798      	blx	r3
 8005e20:	4603      	mov	r3, r0
 8005e22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	e000      	b.n	8005e30 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e02f      	b.n	8005ecc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00f      	beq.n	8005e96 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6852      	ldr	r2, [r2, #4]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	4611      	mov	r1, r2
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e96:	2340      	movs	r3, #64	; 0x40
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f001 fb0e 	bl	80074be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2240      	movs	r2, #64	; 0x40
 8005eae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005eb2:	2340      	movs	r3, #64	; 0x40
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2180      	movs	r1, #128	; 0x80
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 fb00 	bl	80074be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2240      	movs	r2, #64	; 0x40
 8005ec8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d106      	bne.n	8005f42 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e012      	b.n	8005f8c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d10b      	bne.n	8005f8a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e014      	b.n	8005fd8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d10d      	bne.n	8005fd6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	78fa      	ldrb	r2, [r7, #3]
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e014      	b.n	8006024 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b03      	cmp	r3, #3
 8006004:	d10d      	bne.n	8006022 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	78fa      	ldrb	r2, [r7, #3]
 800601c:	4611      	mov	r1, r2
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006058:	2b00      	cmp	r3, #0
 800605a:	d009      	beq.n	8006070 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6852      	ldr	r2, [r2, #4]
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	4611      	mov	r1, r2
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	4798      	blx	r3
  }

  return USBD_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800607a:	b480      	push	{r7}
 800607c:	b087      	sub	sp, #28
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	3301      	adds	r3, #1
 8006090:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006098:	8a3b      	ldrh	r3, [r7, #16]
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	b21a      	sxth	r2, r3
 800609e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	b21b      	sxth	r3, r3
 80060a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80060a8:	89fb      	ldrh	r3, [r7, #14]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d005      	beq.n	80060de <USBD_StdDevReq+0x26>
 80060d2:	2b40      	cmp	r3, #64	; 0x40
 80060d4:	d853      	bhi.n	800617e <USBD_StdDevReq+0xc6>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00b      	beq.n	80060f2 <USBD_StdDevReq+0x3a>
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d14f      	bne.n	800617e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4798      	blx	r3
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]
      break;
 80060f0:	e04a      	b.n	8006188 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	2b09      	cmp	r3, #9
 80060f8:	d83b      	bhi.n	8006172 <USBD_StdDevReq+0xba>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <USBD_StdDevReq+0x48>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006155 	.word	0x08006155
 8006104:	08006169 	.word	0x08006169
 8006108:	08006173 	.word	0x08006173
 800610c:	0800615f 	.word	0x0800615f
 8006110:	08006173 	.word	0x08006173
 8006114:	08006133 	.word	0x08006133
 8006118:	08006129 	.word	0x08006129
 800611c:	08006173 	.word	0x08006173
 8006120:	0800614b 	.word	0x0800614b
 8006124:	0800613d 	.word	0x0800613d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f9de 	bl	80064ec <USBD_GetDescriptor>
          break;
 8006130:	e024      	b.n	800617c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fb43 	bl	80067c0 <USBD_SetAddress>
          break;
 800613a:	e01f      	b.n	800617c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fb82 	bl	8006848 <USBD_SetConfig>
 8006144:	4603      	mov	r3, r0
 8006146:	73fb      	strb	r3, [r7, #15]
          break;
 8006148:	e018      	b.n	800617c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fc21 	bl	8006994 <USBD_GetConfig>
          break;
 8006152:	e013      	b.n	800617c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fc52 	bl	8006a00 <USBD_GetStatus>
          break;
 800615c:	e00e      	b.n	800617c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fc81 	bl	8006a68 <USBD_SetFeature>
          break;
 8006166:	e009      	b.n	800617c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fc90 	bl	8006a90 <USBD_ClrFeature>
          break;
 8006170:	e004      	b.n	800617c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fce7 	bl	8006b48 <USBD_CtlError>
          break;
 800617a:	bf00      	nop
      }
      break;
 800617c:	e004      	b.n	8006188 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800617e:	6839      	ldr	r1, [r7, #0]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fce1 	bl	8006b48 <USBD_CtlError>
      break;
 8006186:	bf00      	nop
  }

  return ret;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop

08006194 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061aa:	2b40      	cmp	r3, #64	; 0x40
 80061ac:	d005      	beq.n	80061ba <USBD_StdItfReq+0x26>
 80061ae:	2b40      	cmp	r3, #64	; 0x40
 80061b0:	d82f      	bhi.n	8006212 <USBD_StdItfReq+0x7e>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <USBD_StdItfReq+0x26>
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d12b      	bne.n	8006212 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d81d      	bhi.n	8006204 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	889b      	ldrh	r3, [r3, #4]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d813      	bhi.n	80061fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	4798      	blx	r3
 80061e0:	4603      	mov	r3, r0
 80061e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	88db      	ldrh	r3, [r3, #6]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d110      	bne.n	800620e <USBD_StdItfReq+0x7a>
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10d      	bne.n	800620e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fd73 	bl	8006cde <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061f8:	e009      	b.n	800620e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fca3 	bl	8006b48 <USBD_CtlError>
          break;
 8006202:	e004      	b.n	800620e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fc9e 	bl	8006b48 <USBD_CtlError>
          break;
 800620c:	e000      	b.n	8006210 <USBD_StdItfReq+0x7c>
          break;
 800620e:	bf00      	nop
      }
      break;
 8006210:	e004      	b.n	800621c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fc97 	bl	8006b48 <USBD_CtlError>
      break;
 800621a:	bf00      	nop
  }

  return ret;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	889b      	ldrh	r3, [r3, #4]
 8006238:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	d007      	beq.n	8006256 <USBD_StdEPReq+0x30>
 8006246:	2b40      	cmp	r3, #64	; 0x40
 8006248:	f200 8145 	bhi.w	80064d6 <USBD_StdEPReq+0x2b0>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00c      	beq.n	800626a <USBD_StdEPReq+0x44>
 8006250:	2b20      	cmp	r3, #32
 8006252:	f040 8140 	bne.w	80064d6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4798      	blx	r3
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]
      break;
 8006268:	e13a      	b.n	80064e0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	785b      	ldrb	r3, [r3, #1]
 800626e:	2b03      	cmp	r3, #3
 8006270:	d007      	beq.n	8006282 <USBD_StdEPReq+0x5c>
 8006272:	2b03      	cmp	r3, #3
 8006274:	f300 8129 	bgt.w	80064ca <USBD_StdEPReq+0x2a4>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d07f      	beq.n	800637c <USBD_StdEPReq+0x156>
 800627c:	2b01      	cmp	r3, #1
 800627e:	d03c      	beq.n	80062fa <USBD_StdEPReq+0xd4>
 8006280:	e123      	b.n	80064ca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d002      	beq.n	8006294 <USBD_StdEPReq+0x6e>
 800628e:	2b03      	cmp	r3, #3
 8006290:	d016      	beq.n	80062c0 <USBD_StdEPReq+0x9a>
 8006292:	e02c      	b.n	80062ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00d      	beq.n	80062b6 <USBD_StdEPReq+0x90>
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	2b80      	cmp	r3, #128	; 0x80
 800629e:	d00a      	beq.n	80062b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062a0:	7bbb      	ldrb	r3, [r7, #14]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 f94f 	bl	8007548 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062aa:	2180      	movs	r1, #128	; 0x80
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 f94b 	bl	8007548 <USBD_LL_StallEP>
 80062b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062b4:	e020      	b.n	80062f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fc45 	bl	8006b48 <USBD_CtlError>
              break;
 80062be:	e01b      	b.n	80062f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	885b      	ldrh	r3, [r3, #2]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10e      	bne.n	80062e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062c8:	7bbb      	ldrb	r3, [r7, #14]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00b      	beq.n	80062e6 <USBD_StdEPReq+0xc0>
 80062ce:	7bbb      	ldrb	r3, [r7, #14]
 80062d0:	2b80      	cmp	r3, #128	; 0x80
 80062d2:	d008      	beq.n	80062e6 <USBD_StdEPReq+0xc0>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	88db      	ldrh	r3, [r3, #6]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d104      	bne.n	80062e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 f931 	bl	8007548 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fcf9 	bl	8006cde <USBD_CtlSendStatus>

              break;
 80062ec:	e004      	b.n	80062f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fc29 	bl	8006b48 <USBD_CtlError>
              break;
 80062f6:	bf00      	nop
          }
          break;
 80062f8:	e0ec      	b.n	80064d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d002      	beq.n	800630c <USBD_StdEPReq+0xe6>
 8006306:	2b03      	cmp	r3, #3
 8006308:	d016      	beq.n	8006338 <USBD_StdEPReq+0x112>
 800630a:	e030      	b.n	800636e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00d      	beq.n	800632e <USBD_StdEPReq+0x108>
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	2b80      	cmp	r3, #128	; 0x80
 8006316:	d00a      	beq.n	800632e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 f913 	bl	8007548 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006322:	2180      	movs	r1, #128	; 0x80
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 f90f 	bl	8007548 <USBD_LL_StallEP>
 800632a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800632c:	e025      	b.n	800637a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fc09 	bl	8006b48 <USBD_CtlError>
              break;
 8006336:	e020      	b.n	800637a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	885b      	ldrh	r3, [r3, #2]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d11b      	bne.n	8006378 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006340:	7bbb      	ldrb	r3, [r7, #14]
 8006342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800634a:	7bbb      	ldrb	r3, [r7, #14]
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 f919 	bl	8007586 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fcc2 	bl	8006cde <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	6839      	ldr	r1, [r7, #0]
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	4798      	blx	r3
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800636c:	e004      	b.n	8006378 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fbe9 	bl	8006b48 <USBD_CtlError>
              break;
 8006376:	e000      	b.n	800637a <USBD_StdEPReq+0x154>
              break;
 8006378:	bf00      	nop
          }
          break;
 800637a:	e0ab      	b.n	80064d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d002      	beq.n	800638e <USBD_StdEPReq+0x168>
 8006388:	2b03      	cmp	r3, #3
 800638a:	d032      	beq.n	80063f2 <USBD_StdEPReq+0x1cc>
 800638c:	e097      	b.n	80064be <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800638e:	7bbb      	ldrb	r3, [r7, #14]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <USBD_StdEPReq+0x17e>
 8006394:	7bbb      	ldrb	r3, [r7, #14]
 8006396:	2b80      	cmp	r3, #128	; 0x80
 8006398:	d004      	beq.n	80063a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800639a:	6839      	ldr	r1, [r7, #0]
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fbd3 	bl	8006b48 <USBD_CtlError>
                break;
 80063a2:	e091      	b.n	80064c8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da0b      	bge.n	80063c4 <USBD_StdEPReq+0x19e>
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063b2:	4613      	mov	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	3310      	adds	r3, #16
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	4413      	add	r3, r2
 80063c0:	3304      	adds	r3, #4
 80063c2:	e00b      	b.n	80063dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	4413      	add	r3, r2
 80063da:	3304      	adds	r3, #4
 80063dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2202      	movs	r2, #2
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fc1d 	bl	8006c2a <USBD_CtlSendData>
              break;
 80063f0:	e06a      	b.n	80064c8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80063f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da11      	bge.n	800641e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80063fa:	7bbb      	ldrb	r3, [r7, #14]
 80063fc:	f003 020f 	and.w	r2, r3, #15
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	440b      	add	r3, r1
 800640c:	3324      	adds	r3, #36	; 0x24
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d117      	bne.n	8006444 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fb96 	bl	8006b48 <USBD_CtlError>
                  break;
 800641c:	e054      	b.n	80064c8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	f003 020f 	and.w	r2, r3, #15
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	440b      	add	r3, r1
 8006430:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d104      	bne.n	8006444 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fb83 	bl	8006b48 <USBD_CtlError>
                  break;
 8006442:	e041      	b.n	80064c8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006448:	2b00      	cmp	r3, #0
 800644a:	da0b      	bge.n	8006464 <USBD_StdEPReq+0x23e>
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	3310      	adds	r3, #16
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	4413      	add	r3, r2
 8006460:	3304      	adds	r3, #4
 8006462:	e00b      	b.n	800647c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	4413      	add	r3, r2
 800647a:	3304      	adds	r3, #4
 800647c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <USBD_StdEPReq+0x264>
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	2b80      	cmp	r3, #128	; 0x80
 8006488:	d103      	bne.n	8006492 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	e00e      	b.n	80064b0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f001 f894 	bl	80075c4 <USBD_LL_IsStallEP>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2201      	movs	r2, #1
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	e002      	b.n	80064b0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2202      	movs	r2, #2
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fbb7 	bl	8006c2a <USBD_CtlSendData>
              break;
 80064bc:	e004      	b.n	80064c8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fb41 	bl	8006b48 <USBD_CtlError>
              break;
 80064c6:	bf00      	nop
          }
          break;
 80064c8:	e004      	b.n	80064d4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fb3b 	bl	8006b48 <USBD_CtlError>
          break;
 80064d2:	bf00      	nop
      }
      break;
 80064d4:	e004      	b.n	80064e0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fb35 	bl	8006b48 <USBD_CtlError>
      break;
 80064de:	bf00      	nop
  }

  return ret;
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	885b      	ldrh	r3, [r3, #2]
 8006506:	0a1b      	lsrs	r3, r3, #8
 8006508:	b29b      	uxth	r3, r3
 800650a:	3b01      	subs	r3, #1
 800650c:	2b06      	cmp	r3, #6
 800650e:	f200 8128 	bhi.w	8006762 <USBD_GetDescriptor+0x276>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <USBD_GetDescriptor+0x2c>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006535 	.word	0x08006535
 800651c:	0800654d 	.word	0x0800654d
 8006520:	0800658d 	.word	0x0800658d
 8006524:	08006763 	.word	0x08006763
 8006528:	08006763 	.word	0x08006763
 800652c:	08006703 	.word	0x08006703
 8006530:	0800672f 	.word	0x0800672f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	7c12      	ldrb	r2, [r2, #16]
 8006540:	f107 0108 	add.w	r1, r7, #8
 8006544:	4610      	mov	r0, r2
 8006546:	4798      	blx	r3
 8006548:	60f8      	str	r0, [r7, #12]
      break;
 800654a:	e112      	b.n	8006772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	7c1b      	ldrb	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10d      	bne.n	8006570 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655c:	f107 0208 	add.w	r2, r7, #8
 8006560:	4610      	mov	r0, r2
 8006562:	4798      	blx	r3
 8006564:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3301      	adds	r3, #1
 800656a:	2202      	movs	r2, #2
 800656c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800656e:	e100      	b.n	8006772 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	f107 0208 	add.w	r2, r7, #8
 800657c:	4610      	mov	r0, r2
 800657e:	4798      	blx	r3
 8006580:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3301      	adds	r3, #1
 8006586:	2202      	movs	r2, #2
 8006588:	701a      	strb	r2, [r3, #0]
      break;
 800658a:	e0f2      	b.n	8006772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	885b      	ldrh	r3, [r3, #2]
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b05      	cmp	r3, #5
 8006594:	f200 80ac 	bhi.w	80066f0 <USBD_GetDescriptor+0x204>
 8006598:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <USBD_GetDescriptor+0xb4>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065b9 	.word	0x080065b9
 80065a4:	080065ed 	.word	0x080065ed
 80065a8:	08006621 	.word	0x08006621
 80065ac:	08006655 	.word	0x08006655
 80065b0:	08006689 	.word	0x08006689
 80065b4:	080066bd 	.word	0x080066bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	7c12      	ldrb	r2, [r2, #16]
 80065d0:	f107 0108 	add.w	r1, r7, #8
 80065d4:	4610      	mov	r0, r2
 80065d6:	4798      	blx	r3
 80065d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065da:	e091      	b.n	8006700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fab2 	bl	8006b48 <USBD_CtlError>
            err++;
 80065e4:	7afb      	ldrb	r3, [r7, #11]
 80065e6:	3301      	adds	r3, #1
 80065e8:	72fb      	strb	r3, [r7, #11]
          break;
 80065ea:	e089      	b.n	8006700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00b      	beq.n	8006610 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	7c12      	ldrb	r2, [r2, #16]
 8006604:	f107 0108 	add.w	r1, r7, #8
 8006608:	4610      	mov	r0, r2
 800660a:	4798      	blx	r3
 800660c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800660e:	e077      	b.n	8006700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa98 	bl	8006b48 <USBD_CtlError>
            err++;
 8006618:	7afb      	ldrb	r3, [r7, #11]
 800661a:	3301      	adds	r3, #1
 800661c:	72fb      	strb	r3, [r7, #11]
          break;
 800661e:	e06f      	b.n	8006700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00b      	beq.n	8006644 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	7c12      	ldrb	r2, [r2, #16]
 8006638:	f107 0108 	add.w	r1, r7, #8
 800663c:	4610      	mov	r0, r2
 800663e:	4798      	blx	r3
 8006640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006642:	e05d      	b.n	8006700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa7e 	bl	8006b48 <USBD_CtlError>
            err++;
 800664c:	7afb      	ldrb	r3, [r7, #11]
 800664e:	3301      	adds	r3, #1
 8006650:	72fb      	strb	r3, [r7, #11]
          break;
 8006652:	e055      	b.n	8006700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	7c12      	ldrb	r2, [r2, #16]
 800666c:	f107 0108 	add.w	r1, r7, #8
 8006670:	4610      	mov	r0, r2
 8006672:	4798      	blx	r3
 8006674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006676:	e043      	b.n	8006700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fa64 	bl	8006b48 <USBD_CtlError>
            err++;
 8006680:	7afb      	ldrb	r3, [r7, #11]
 8006682:	3301      	adds	r3, #1
 8006684:	72fb      	strb	r3, [r7, #11]
          break;
 8006686:	e03b      	b.n	8006700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	7c12      	ldrb	r2, [r2, #16]
 80066a0:	f107 0108 	add.w	r1, r7, #8
 80066a4:	4610      	mov	r0, r2
 80066a6:	4798      	blx	r3
 80066a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066aa:	e029      	b.n	8006700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fa4a 	bl	8006b48 <USBD_CtlError>
            err++;
 80066b4:	7afb      	ldrb	r3, [r7, #11]
 80066b6:	3301      	adds	r3, #1
 80066b8:	72fb      	strb	r3, [r7, #11]
          break;
 80066ba:	e021      	b.n	8006700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	7c12      	ldrb	r2, [r2, #16]
 80066d4:	f107 0108 	add.w	r1, r7, #8
 80066d8:	4610      	mov	r0, r2
 80066da:	4798      	blx	r3
 80066dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066de:	e00f      	b.n	8006700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fa30 	bl	8006b48 <USBD_CtlError>
            err++;
 80066e8:	7afb      	ldrb	r3, [r7, #11]
 80066ea:	3301      	adds	r3, #1
 80066ec:	72fb      	strb	r3, [r7, #11]
          break;
 80066ee:	e007      	b.n	8006700 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fa28 	bl	8006b48 <USBD_CtlError>
          err++;
 80066f8:	7afb      	ldrb	r3, [r7, #11]
 80066fa:	3301      	adds	r3, #1
 80066fc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80066fe:	bf00      	nop
      }
      break;
 8006700:	e037      	b.n	8006772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	7c1b      	ldrb	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006712:	f107 0208 	add.w	r2, r7, #8
 8006716:	4610      	mov	r0, r2
 8006718:	4798      	blx	r3
 800671a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800671c:	e029      	b.n	8006772 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fa11 	bl	8006b48 <USBD_CtlError>
        err++;
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	3301      	adds	r3, #1
 800672a:	72fb      	strb	r3, [r7, #11]
      break;
 800672c:	e021      	b.n	8006772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	7c1b      	ldrb	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10d      	bne.n	8006752 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673e:	f107 0208 	add.w	r2, r7, #8
 8006742:	4610      	mov	r0, r2
 8006744:	4798      	blx	r3
 8006746:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3301      	adds	r3, #1
 800674c:	2207      	movs	r2, #7
 800674e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006750:	e00f      	b.n	8006772 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f9f7 	bl	8006b48 <USBD_CtlError>
        err++;
 800675a:	7afb      	ldrb	r3, [r7, #11]
 800675c:	3301      	adds	r3, #1
 800675e:	72fb      	strb	r3, [r7, #11]
      break;
 8006760:	e007      	b.n	8006772 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f9ef 	bl	8006b48 <USBD_CtlError>
      err++;
 800676a:	7afb      	ldrb	r3, [r7, #11]
 800676c:	3301      	adds	r3, #1
 800676e:	72fb      	strb	r3, [r7, #11]
      break;
 8006770:	bf00      	nop
  }

  if (err != 0U)
 8006772:	7afb      	ldrb	r3, [r7, #11]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d11e      	bne.n	80067b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	88db      	ldrh	r3, [r3, #6]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d016      	beq.n	80067ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006780:	893b      	ldrh	r3, [r7, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00e      	beq.n	80067a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	88da      	ldrh	r2, [r3, #6]
 800678a:	893b      	ldrh	r3, [r7, #8]
 800678c:	4293      	cmp	r3, r2
 800678e:	bf28      	it	cs
 8006790:	4613      	movcs	r3, r2
 8006792:	b29b      	uxth	r3, r3
 8006794:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006796:	893b      	ldrh	r3, [r7, #8]
 8006798:	461a      	mov	r2, r3
 800679a:	68f9      	ldr	r1, [r7, #12]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fa44 	bl	8006c2a <USBD_CtlSendData>
 80067a2:	e009      	b.n	80067b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f9ce 	bl	8006b48 <USBD_CtlError>
 80067ac:	e004      	b.n	80067b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa95 	bl	8006cde <USBD_CtlSendStatus>
 80067b4:	e000      	b.n	80067b8 <USBD_GetDescriptor+0x2cc>
    return;
 80067b6:	bf00      	nop
  }
}
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop

080067c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	889b      	ldrh	r3, [r3, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d131      	bne.n	8006836 <USBD_SetAddress+0x76>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	88db      	ldrh	r3, [r3, #6]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d12d      	bne.n	8006836 <USBD_SetAddress+0x76>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	885b      	ldrh	r3, [r3, #2]
 80067de:	2b7f      	cmp	r3, #127	; 0x7f
 80067e0:	d829      	bhi.n	8006836 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	885b      	ldrh	r3, [r3, #2]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d104      	bne.n	8006804 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f9a3 	bl	8006b48 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006802:	e01d      	b.n	8006840 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	7bfa      	ldrb	r2, [r7, #15]
 8006808:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 ff03 	bl	800761c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fa61 	bl	8006cde <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d004      	beq.n	800682c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2202      	movs	r2, #2
 8006826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800682a:	e009      	b.n	8006840 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006834:	e004      	b.n	8006840 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f985 	bl	8006b48 <USBD_CtlError>
  }
}
 800683e:	bf00      	nop
 8006840:	bf00      	nop
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	885b      	ldrh	r3, [r3, #2]
 800685a:	b2da      	uxtb	r2, r3
 800685c:	4b4c      	ldr	r3, [pc, #304]	; (8006990 <USBD_SetConfig+0x148>)
 800685e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006860:	4b4b      	ldr	r3, [pc, #300]	; (8006990 <USBD_SetConfig+0x148>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d905      	bls.n	8006874 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f96c 	bl	8006b48 <USBD_CtlError>
    return USBD_FAIL;
 8006870:	2303      	movs	r3, #3
 8006872:	e088      	b.n	8006986 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b02      	cmp	r3, #2
 800687e:	d002      	beq.n	8006886 <USBD_SetConfig+0x3e>
 8006880:	2b03      	cmp	r3, #3
 8006882:	d025      	beq.n	80068d0 <USBD_SetConfig+0x88>
 8006884:	e071      	b.n	800696a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006886:	4b42      	ldr	r3, [pc, #264]	; (8006990 <USBD_SetConfig+0x148>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d01c      	beq.n	80068c8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800688e:	4b40      	ldr	r3, [pc, #256]	; (8006990 <USBD_SetConfig+0x148>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006898:	4b3d      	ldr	r3, [pc, #244]	; (8006990 <USBD_SetConfig+0x148>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7ff f948 	bl	8005b34 <USBD_SetClassConfig>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f949 	bl	8006b48 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068b6:	e065      	b.n	8006984 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fa10 	bl	8006cde <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2203      	movs	r2, #3
 80068c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80068c6:	e05d      	b.n	8006984 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fa08 	bl	8006cde <USBD_CtlSendStatus>
      break;
 80068ce:	e059      	b.n	8006984 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80068d0:	4b2f      	ldr	r3, [pc, #188]	; (8006990 <USBD_SetConfig+0x148>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d112      	bne.n	80068fe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80068e0:	4b2b      	ldr	r3, [pc, #172]	; (8006990 <USBD_SetConfig+0x148>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068ea:	4b29      	ldr	r3, [pc, #164]	; (8006990 <USBD_SetConfig+0x148>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff f93b 	bl	8005b6c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f9f1 	bl	8006cde <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068fc:	e042      	b.n	8006984 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80068fe:	4b24      	ldr	r3, [pc, #144]	; (8006990 <USBD_SetConfig+0x148>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	429a      	cmp	r2, r3
 800690a:	d02a      	beq.n	8006962 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff f929 	bl	8005b6c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800691a:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <USBD_SetConfig+0x148>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006924:	4b1a      	ldr	r3, [pc, #104]	; (8006990 <USBD_SetConfig+0x148>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff f902 	bl	8005b34 <USBD_SetClassConfig>
 8006930:	4603      	mov	r3, r0
 8006932:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00f      	beq.n	800695a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f903 	bl	8006b48 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff f90e 	bl	8005b6c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006958:	e014      	b.n	8006984 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f9bf 	bl	8006cde <USBD_CtlSendStatus>
      break;
 8006960:	e010      	b.n	8006984 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f9bb 	bl	8006cde <USBD_CtlSendStatus>
      break;
 8006968:	e00c      	b.n	8006984 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f8eb 	bl	8006b48 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006972:	4b07      	ldr	r3, [pc, #28]	; (8006990 <USBD_SetConfig+0x148>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff f8f7 	bl	8005b6c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800697e:	2303      	movs	r3, #3
 8006980:	73fb      	strb	r3, [r7, #15]
      break;
 8006982:	bf00      	nop
  }

  return ret;
 8006984:	7bfb      	ldrb	r3, [r7, #15]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	200001a4 	.word	0x200001a4

08006994 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	88db      	ldrh	r3, [r3, #6]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d004      	beq.n	80069b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f8cd 	bl	8006b48 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80069ae:	e023      	b.n	80069f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	dc02      	bgt.n	80069c2 <USBD_GetConfig+0x2e>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dc03      	bgt.n	80069c8 <USBD_GetConfig+0x34>
 80069c0:	e015      	b.n	80069ee <USBD_GetConfig+0x5a>
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d00b      	beq.n	80069de <USBD_GetConfig+0x4a>
 80069c6:	e012      	b.n	80069ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3308      	adds	r3, #8
 80069d2:	2201      	movs	r2, #1
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f927 	bl	8006c2a <USBD_CtlSendData>
        break;
 80069dc:	e00c      	b.n	80069f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3304      	adds	r3, #4
 80069e2:	2201      	movs	r2, #1
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f91f 	bl	8006c2a <USBD_CtlSendData>
        break;
 80069ec:	e004      	b.n	80069f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f8a9 	bl	8006b48 <USBD_CtlError>
        break;
 80069f6:	bf00      	nop
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d81e      	bhi.n	8006a56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	88db      	ldrh	r3, [r3, #6]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d004      	beq.n	8006a2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f890 	bl	8006b48 <USBD_CtlError>
        break;
 8006a28:	e01a      	b.n	8006a60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f043 0202 	orr.w	r2, r3, #2
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	330c      	adds	r3, #12
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f8eb 	bl	8006c2a <USBD_CtlSendData>
      break;
 8006a54:	e004      	b.n	8006a60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f875 	bl	8006b48 <USBD_CtlError>
      break;
 8006a5e:	bf00      	nop
  }
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	885b      	ldrh	r3, [r3, #2]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d106      	bne.n	8006a88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f92b 	bl	8006cde <USBD_CtlSendStatus>
  }
}
 8006a88:	bf00      	nop
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d80b      	bhi.n	8006ac0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	885b      	ldrh	r3, [r3, #2]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d10c      	bne.n	8006aca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f910 	bl	8006cde <USBD_CtlSendStatus>
      }
      break;
 8006abe:	e004      	b.n	8006aca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f840 	bl	8006b48 <USBD_CtlError>
      break;
 8006ac8:	e000      	b.n	8006acc <USBD_ClrFeature+0x3c>
      break;
 8006aca:	bf00      	nop
  }
}
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	781a      	ldrb	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3301      	adds	r3, #1
 8006aee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	781a      	ldrb	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3301      	adds	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff fabb 	bl	800607a <SWAPBYTE>
 8006b04:	4603      	mov	r3, r0
 8006b06:	461a      	mov	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3301      	adds	r3, #1
 8006b16:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7ff faae 	bl	800607a <SWAPBYTE>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	461a      	mov	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f7ff faa1 	bl	800607a <SWAPBYTE>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	80da      	strh	r2, [r3, #6]
}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b52:	2180      	movs	r1, #128	; 0x80
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fcf7 	bl	8007548 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fcf3 	bl	8007548 <USBD_LL_StallEP>
}
 8006b62:	bf00      	nop
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b086      	sub	sp, #24
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b76:	2300      	movs	r3, #0
 8006b78:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d036      	beq.n	8006bee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006b84:	6938      	ldr	r0, [r7, #16]
 8006b86:	f000 f836 	bl	8006bf6 <USBD_GetLen>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	7812      	ldrb	r2, [r2, #0]
 8006ba2:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	4413      	add	r3, r2
 8006bb0:	2203      	movs	r2, #3
 8006bb2:	701a      	strb	r2, [r3, #0]
  idx++;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006bba:	e013      	b.n	8006be4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	7812      	ldrb	r2, [r2, #0]
 8006bc6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	613b      	str	r3, [r7, #16]
    idx++;
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	4413      	add	r3, r2
 8006bda:	2200      	movs	r2, #0
 8006bdc:	701a      	strb	r2, [r3, #0]
    idx++;
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
 8006be0:	3301      	adds	r3, #1
 8006be2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e7      	bne.n	8006bbc <USBD_GetString+0x52>
 8006bec:	e000      	b.n	8006bf0 <USBD_GetString+0x86>
    return;
 8006bee:	bf00      	nop
  }
}
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b085      	sub	sp, #20
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c06:	e005      	b.n	8006c14 <USBD_GetLen+0x1e>
  {
    len++;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	3301      	adds	r3, #1
 8006c12:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f5      	bne.n	8006c08 <USBD_GetLen+0x12>
  }

  return len;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	2100      	movs	r1, #0
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fd02 	bl	800765a <USBD_LL_Transmit>

  return USBD_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	2100      	movs	r1, #0
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 fcf1 	bl	800765a <USBD_LL_Transmit>

  return USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2203      	movs	r2, #3
 8006c92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	2100      	movs	r1, #0
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 fcf5 	bl	800769c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	2100      	movs	r1, #0
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fce4 	bl	800769c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2204      	movs	r2, #4
 8006cea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fcb0 	bl	800765a <USBD_LL_Transmit>

  return USBD_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2205      	movs	r2, #5
 8006d10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d14:	2300      	movs	r3, #0
 8006d16:	2200      	movs	r2, #0
 8006d18:	2100      	movs	r1, #0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fcbe 	bl	800769c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d30:	2200      	movs	r2, #0
 8006d32:	4912      	ldr	r1, [pc, #72]	; (8006d7c <MX_USB_DEVICE_Init+0x50>)
 8006d34:	4812      	ldr	r0, [pc, #72]	; (8006d80 <MX_USB_DEVICE_Init+0x54>)
 8006d36:	f7fe fe8f 	bl	8005a58 <USBD_Init>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d40:	f7f9 fe4c 	bl	80009dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d44:	490f      	ldr	r1, [pc, #60]	; (8006d84 <MX_USB_DEVICE_Init+0x58>)
 8006d46:	480e      	ldr	r0, [pc, #56]	; (8006d80 <MX_USB_DEVICE_Init+0x54>)
 8006d48:	f7fe feb6 	bl	8005ab8 <USBD_RegisterClass>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d52:	f7f9 fe43 	bl	80009dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d56:	490c      	ldr	r1, [pc, #48]	; (8006d88 <MX_USB_DEVICE_Init+0x5c>)
 8006d58:	4809      	ldr	r0, [pc, #36]	; (8006d80 <MX_USB_DEVICE_Init+0x54>)
 8006d5a:	f7fe fdd7 	bl	800590c <USBD_CDC_RegisterInterface>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d64:	f7f9 fe3a 	bl	80009dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d68:	4805      	ldr	r0, [pc, #20]	; (8006d80 <MX_USB_DEVICE_Init+0x54>)
 8006d6a:	f7fe fecc 	bl	8005b06 <USBD_Start>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d74:	f7f9 fe32 	bl	80009dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d78:	bf00      	nop
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000134 	.word	0x20000134
 8006d80:	2000056c 	.word	0x2000056c
 8006d84:	2000001c 	.word	0x2000001c
 8006d88:	20000120 	.word	0x20000120

08006d8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006d90:	2200      	movs	r2, #0
 8006d92:	4905      	ldr	r1, [pc, #20]	; (8006da8 <CDC_Init_FS+0x1c>)
 8006d94:	4805      	ldr	r0, [pc, #20]	; (8006dac <CDC_Init_FS+0x20>)
 8006d96:	f7fe fdce 	bl	8005936 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006d9a:	4905      	ldr	r1, [pc, #20]	; (8006db0 <CDC_Init_FS+0x24>)
 8006d9c:	4803      	ldr	r0, [pc, #12]	; (8006dac <CDC_Init_FS+0x20>)
 8006d9e:	f7fe fde8 	bl	8005972 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006da2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	2000103c 	.word	0x2000103c
 8006dac:	2000056c 	.word	0x2000056c
 8006db0:	2000083c 	.word	0x2000083c

08006db4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006db8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	6039      	str	r1, [r7, #0]
 8006dce:	71fb      	strb	r3, [r7, #7]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	2b23      	cmp	r3, #35	; 0x23
 8006dd8:	d84a      	bhi.n	8006e70 <CDC_Control_FS+0xac>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <CDC_Control_FS+0x1c>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006e71 	.word	0x08006e71
 8006de4:	08006e71 	.word	0x08006e71
 8006de8:	08006e71 	.word	0x08006e71
 8006dec:	08006e71 	.word	0x08006e71
 8006df0:	08006e71 	.word	0x08006e71
 8006df4:	08006e71 	.word	0x08006e71
 8006df8:	08006e71 	.word	0x08006e71
 8006dfc:	08006e71 	.word	0x08006e71
 8006e00:	08006e71 	.word	0x08006e71
 8006e04:	08006e71 	.word	0x08006e71
 8006e08:	08006e71 	.word	0x08006e71
 8006e0c:	08006e71 	.word	0x08006e71
 8006e10:	08006e71 	.word	0x08006e71
 8006e14:	08006e71 	.word	0x08006e71
 8006e18:	08006e71 	.word	0x08006e71
 8006e1c:	08006e71 	.word	0x08006e71
 8006e20:	08006e71 	.word	0x08006e71
 8006e24:	08006e71 	.word	0x08006e71
 8006e28:	08006e71 	.word	0x08006e71
 8006e2c:	08006e71 	.word	0x08006e71
 8006e30:	08006e71 	.word	0x08006e71
 8006e34:	08006e71 	.word	0x08006e71
 8006e38:	08006e71 	.word	0x08006e71
 8006e3c:	08006e71 	.word	0x08006e71
 8006e40:	08006e71 	.word	0x08006e71
 8006e44:	08006e71 	.word	0x08006e71
 8006e48:	08006e71 	.word	0x08006e71
 8006e4c:	08006e71 	.word	0x08006e71
 8006e50:	08006e71 	.word	0x08006e71
 8006e54:	08006e71 	.word	0x08006e71
 8006e58:	08006e71 	.word	0x08006e71
 8006e5c:	08006e71 	.word	0x08006e71
 8006e60:	08006e71 	.word	0x08006e71
 8006e64:	08006e71 	.word	0x08006e71
 8006e68:	08006e71 	.word	0x08006e71
 8006e6c:	08006e71 	.word	0x08006e71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006e70:	bf00      	nop
  }

  return (USBD_OK);
 8006e72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	480f      	ldr	r0, [pc, #60]	; (8006ecc <CDC_Receive_FS+0x4c>)
 8006e8e:	f7fe fd70 	bl	8005972 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e92:	480e      	ldr	r0, [pc, #56]	; (8006ecc <CDC_Receive_FS+0x4c>)
 8006e94:	f7fe fdb6 	bl	8005a04 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	73fb      	strb	r3, [r7, #15]
  memset(USB_Rx_Buf, '\0', 128);
 8006e9e:	2280      	movs	r2, #128	; 0x80
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	480b      	ldr	r0, [pc, #44]	; (8006ed0 <CDC_Receive_FS+0x50>)
 8006ea4:	f000 fca4 	bl	80077f0 <memset>
  memcpy(USB_Rx_Buf, Buf, len);
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	4808      	ldr	r0, [pc, #32]	; (8006ed0 <CDC_Receive_FS+0x50>)
 8006eb0:	f000 fc90 	bl	80077d4 <memcpy>
  memset(Buf, '\0', len);
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	2100      	movs	r1, #0
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fc98 	bl	80077f0 <memset>
  return (USBD_OK);
 8006ec0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	2000056c 	.word	0x2000056c
 8006ed0:	200004a0 	.word	0x200004a0

08006ed4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006ee4:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <CDC_Transmit_FS+0x48>)
 8006ee6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e00b      	b.n	8006f12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006efa:	887b      	ldrh	r3, [r7, #2]
 8006efc:	461a      	mov	r2, r3
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4806      	ldr	r0, [pc, #24]	; (8006f1c <CDC_Transmit_FS+0x48>)
 8006f02:	f7fe fd18 	bl	8005936 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f06:	4805      	ldr	r0, [pc, #20]	; (8006f1c <CDC_Transmit_FS+0x48>)
 8006f08:	f7fe fd4c 	bl	80059a4 <USBD_CDC_TransmitPacket>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	2000056c 	.word	0x2000056c

08006f20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	6039      	str	r1, [r7, #0]
 8006f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2212      	movs	r2, #18
 8006f54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f56:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	20000150 	.word	0x20000150

08006f68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2204      	movs	r2, #4
 8006f78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f7a:	4b03      	ldr	r3, [pc, #12]	; (8006f88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	20000164 	.word	0x20000164

08006f8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	6039      	str	r1, [r7, #0]
 8006f96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f98:	79fb      	ldrb	r3, [r7, #7]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d105      	bne.n	8006faa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	4907      	ldr	r1, [pc, #28]	; (8006fc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fa2:	4808      	ldr	r0, [pc, #32]	; (8006fc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fa4:	f7ff fde1 	bl	8006b6a <USBD_GetString>
 8006fa8:	e004      	b.n	8006fb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	4904      	ldr	r1, [pc, #16]	; (8006fc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fae:	4805      	ldr	r0, [pc, #20]	; (8006fc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fb0:	f7ff fddb 	bl	8006b6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fb4:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	2000183c 	.word	0x2000183c
 8006fc4:	08007840 	.word	0x08007840

08006fc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	6039      	str	r1, [r7, #0]
 8006fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	4904      	ldr	r1, [pc, #16]	; (8006fe8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006fd8:	4804      	ldr	r0, [pc, #16]	; (8006fec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fda:	f7ff fdc6 	bl	8006b6a <USBD_GetString>
  return USBD_StrDesc;
 8006fde:	4b02      	ldr	r3, [pc, #8]	; (8006fe8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	2000183c 	.word	0x2000183c
 8006fec:	0800784c 	.word	0x0800784c

08006ff0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	6039      	str	r1, [r7, #0]
 8006ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	221a      	movs	r2, #26
 8007000:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007002:	f000 f843 	bl	800708c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007006:	4b02      	ldr	r3, [pc, #8]	; (8007010 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20000168 	.word	0x20000168

08007014 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	6039      	str	r1, [r7, #0]
 800701e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007020:	79fb      	ldrb	r3, [r7, #7]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d105      	bne.n	8007032 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	4907      	ldr	r1, [pc, #28]	; (8007048 <USBD_FS_ConfigStrDescriptor+0x34>)
 800702a:	4808      	ldr	r0, [pc, #32]	; (800704c <USBD_FS_ConfigStrDescriptor+0x38>)
 800702c:	f7ff fd9d 	bl	8006b6a <USBD_GetString>
 8007030:	e004      	b.n	800703c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	4904      	ldr	r1, [pc, #16]	; (8007048 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007036:	4805      	ldr	r0, [pc, #20]	; (800704c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007038:	f7ff fd97 	bl	8006b6a <USBD_GetString>
  }
  return USBD_StrDesc;
 800703c:	4b02      	ldr	r3, [pc, #8]	; (8007048 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	2000183c 	.word	0x2000183c
 800704c:	08007858 	.word	0x08007858

08007050 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	4603      	mov	r3, r0
 8007058:	6039      	str	r1, [r7, #0]
 800705a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800705c:	79fb      	ldrb	r3, [r7, #7]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d105      	bne.n	800706e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	4907      	ldr	r1, [pc, #28]	; (8007084 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007066:	4808      	ldr	r0, [pc, #32]	; (8007088 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007068:	f7ff fd7f 	bl	8006b6a <USBD_GetString>
 800706c:	e004      	b.n	8007078 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	4904      	ldr	r1, [pc, #16]	; (8007084 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007072:	4805      	ldr	r0, [pc, #20]	; (8007088 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007074:	f7ff fd79 	bl	8006b6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007078:	4b02      	ldr	r3, [pc, #8]	; (8007084 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	2000183c 	.word	0x2000183c
 8007088:	08007864 	.word	0x08007864

0800708c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007092:	4b0f      	ldr	r3, [pc, #60]	; (80070d0 <Get_SerialNum+0x44>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007098:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <Get_SerialNum+0x48>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800709e:	4b0e      	ldr	r3, [pc, #56]	; (80070d8 <Get_SerialNum+0x4c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4413      	add	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070b2:	2208      	movs	r2, #8
 80070b4:	4909      	ldr	r1, [pc, #36]	; (80070dc <Get_SerialNum+0x50>)
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 f814 	bl	80070e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070bc:	2204      	movs	r2, #4
 80070be:	4908      	ldr	r1, [pc, #32]	; (80070e0 <Get_SerialNum+0x54>)
 80070c0:	68b8      	ldr	r0, [r7, #8]
 80070c2:	f000 f80f 	bl	80070e4 <IntToUnicode>
  }
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	1fff7a10 	.word	0x1fff7a10
 80070d4:	1fff7a14 	.word	0x1fff7a14
 80070d8:	1fff7a18 	.word	0x1fff7a18
 80070dc:	2000016a 	.word	0x2000016a
 80070e0:	2000017a 	.word	0x2000017a

080070e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	4613      	mov	r3, r2
 80070f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	75fb      	strb	r3, [r7, #23]
 80070fa:	e027      	b.n	800714c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	0f1b      	lsrs	r3, r3, #28
 8007100:	2b09      	cmp	r3, #9
 8007102:	d80b      	bhi.n	800711c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	0f1b      	lsrs	r3, r3, #28
 8007108:	b2da      	uxtb	r2, r3
 800710a:	7dfb      	ldrb	r3, [r7, #23]
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	4619      	mov	r1, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	440b      	add	r3, r1
 8007114:	3230      	adds	r2, #48	; 0x30
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	e00a      	b.n	8007132 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	0f1b      	lsrs	r3, r3, #28
 8007120:	b2da      	uxtb	r2, r3
 8007122:	7dfb      	ldrb	r3, [r7, #23]
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	4619      	mov	r1, r3
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	440b      	add	r3, r1
 800712c:	3237      	adds	r2, #55	; 0x37
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007138:	7dfb      	ldrb	r3, [r7, #23]
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	3301      	adds	r3, #1
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4413      	add	r3, r2
 8007142:	2200      	movs	r2, #0
 8007144:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	3301      	adds	r3, #1
 800714a:	75fb      	strb	r3, [r7, #23]
 800714c:	7dfa      	ldrb	r2, [r7, #23]
 800714e:	79fb      	ldrb	r3, [r7, #7]
 8007150:	429a      	cmp	r2, r3
 8007152:	d3d3      	bcc.n	80070fc <IntToUnicode+0x18>
  }
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
	...

08007164 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08a      	sub	sp, #40	; 0x28
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800716c:	f107 0314 	add.w	r3, r7, #20
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	605a      	str	r2, [r3, #4]
 8007176:	609a      	str	r2, [r3, #8]
 8007178:	60da      	str	r2, [r3, #12]
 800717a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007184:	d13a      	bne.n	80071fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007186:	2300      	movs	r3, #0
 8007188:	613b      	str	r3, [r7, #16]
 800718a:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <HAL_PCD_MspInit+0xa0>)
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	4a1d      	ldr	r2, [pc, #116]	; (8007204 <HAL_PCD_MspInit+0xa0>)
 8007190:	f043 0301 	orr.w	r3, r3, #1
 8007194:	6313      	str	r3, [r2, #48]	; 0x30
 8007196:	4b1b      	ldr	r3, [pc, #108]	; (8007204 <HAL_PCD_MspInit+0xa0>)
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	613b      	str	r3, [r7, #16]
 80071a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80071a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80071a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a8:	2302      	movs	r3, #2
 80071aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ac:	2300      	movs	r3, #0
 80071ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071b0:	2303      	movs	r3, #3
 80071b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071b4:	230a      	movs	r3, #10
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071b8:	f107 0314 	add.w	r3, r7, #20
 80071bc:	4619      	mov	r1, r3
 80071be:	4812      	ldr	r0, [pc, #72]	; (8007208 <HAL_PCD_MspInit+0xa4>)
 80071c0:	f7fa f9a4 	bl	800150c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80071c4:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <HAL_PCD_MspInit+0xa0>)
 80071c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c8:	4a0e      	ldr	r2, [pc, #56]	; (8007204 <HAL_PCD_MspInit+0xa0>)
 80071ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ce:	6353      	str	r3, [r2, #52]	; 0x34
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <HAL_PCD_MspInit+0xa0>)
 80071d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d8:	4a0a      	ldr	r2, [pc, #40]	; (8007204 <HAL_PCD_MspInit+0xa0>)
 80071da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071de:	6453      	str	r3, [r2, #68]	; 0x44
 80071e0:	4b08      	ldr	r3, [pc, #32]	; (8007204 <HAL_PCD_MspInit+0xa0>)
 80071e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071ec:	2200      	movs	r2, #0
 80071ee:	2100      	movs	r1, #0
 80071f0:	2043      	movs	r0, #67	; 0x43
 80071f2:	f7fa f954 	bl	800149e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80071f6:	2043      	movs	r0, #67	; 0x43
 80071f8:	f7fa f96d 	bl	80014d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80071fc:	bf00      	nop
 80071fe:	3728      	adds	r7, #40	; 0x28
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	40023800 	.word	0x40023800
 8007208:	40020000 	.word	0x40020000

0800720c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007220:	4619      	mov	r1, r3
 8007222:	4610      	mov	r0, r2
 8007224:	f7fe fcba 	bl	8005b9c <USBD_LL_SetupStage>
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007242:	78fa      	ldrb	r2, [r7, #3]
 8007244:	6879      	ldr	r1, [r7, #4]
 8007246:	4613      	mov	r3, r2
 8007248:	00db      	lsls	r3, r3, #3
 800724a:	1a9b      	subs	r3, r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	440b      	add	r3, r1
 8007250:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	4619      	mov	r1, r3
 800725a:	f7fe fcf4 	bl	8005c46 <USBD_LL_DataOutStage>
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	460b      	mov	r3, r1
 8007270:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007278:	78fa      	ldrb	r2, [r7, #3]
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4613      	mov	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	1a9b      	subs	r3, r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	3348      	adds	r3, #72	; 0x48
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	4619      	mov	r1, r3
 800728e:	f7fe fd3d 	bl	8005d0c <USBD_LL_DataInStage>
}
 8007292:	bf00      	nop
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe fe51 	bl	8005f50 <USBD_LL_SOF>
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072be:	2301      	movs	r3, #1
 80072c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d102      	bne.n	80072d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
 80072ce:	e008      	b.n	80072e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d102      	bne.n	80072de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80072d8:	2301      	movs	r3, #1
 80072da:	73fb      	strb	r3, [r7, #15]
 80072dc:	e001      	b.n	80072e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80072de:	f7f9 fb7d 	bl	80009dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072e8:	7bfa      	ldrb	r2, [r7, #15]
 80072ea:	4611      	mov	r1, r2
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe fdf1 	bl	8005ed4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe fd9d 	bl	8005e38 <USBD_LL_Reset>
}
 80072fe:	bf00      	nop
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe fdec 	bl	8005ef4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800732e:	f043 0301 	orr.w	r3, r3, #1
 8007332:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800733c:	4b04      	ldr	r3, [pc, #16]	; (8007350 <HAL_PCD_SuspendCallback+0x48>)
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	4a03      	ldr	r2, [pc, #12]	; (8007350 <HAL_PCD_SuspendCallback+0x48>)
 8007342:	f043 0306 	orr.w	r3, r3, #6
 8007346:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	e000ed00 	.word	0xe000ed00

08007354 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe fddc 	bl	8005f20 <USBD_LL_Resume>
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007382:	78fa      	ldrb	r2, [r7, #3]
 8007384:	4611      	mov	r1, r2
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fe2a 	bl	8005fe0 <USBD_LL_IsoOUTIncomplete>
}
 800738c:	bf00      	nop
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073a6:	78fa      	ldrb	r2, [r7, #3]
 80073a8:	4611      	mov	r1, r2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fe fdf2 	bl	8005f94 <USBD_LL_IsoINIncomplete>
}
 80073b0:	bf00      	nop
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe fe30 	bl	800602c <USBD_LL_DevConnected>
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fe2d 	bl	8006042 <USBD_LL_DevDisconnected>
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d13c      	bne.n	800747a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007400:	4a20      	ldr	r2, [pc, #128]	; (8007484 <USBD_LL_Init+0x94>)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a1e      	ldr	r2, [pc, #120]	; (8007484 <USBD_LL_Init+0x94>)
 800740c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007410:	4b1c      	ldr	r3, [pc, #112]	; (8007484 <USBD_LL_Init+0x94>)
 8007412:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007416:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007418:	4b1a      	ldr	r3, [pc, #104]	; (8007484 <USBD_LL_Init+0x94>)
 800741a:	2204      	movs	r2, #4
 800741c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800741e:	4b19      	ldr	r3, [pc, #100]	; (8007484 <USBD_LL_Init+0x94>)
 8007420:	2202      	movs	r2, #2
 8007422:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007424:	4b17      	ldr	r3, [pc, #92]	; (8007484 <USBD_LL_Init+0x94>)
 8007426:	2200      	movs	r2, #0
 8007428:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800742a:	4b16      	ldr	r3, [pc, #88]	; (8007484 <USBD_LL_Init+0x94>)
 800742c:	2202      	movs	r2, #2
 800742e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007430:	4b14      	ldr	r3, [pc, #80]	; (8007484 <USBD_LL_Init+0x94>)
 8007432:	2200      	movs	r2, #0
 8007434:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007436:	4b13      	ldr	r3, [pc, #76]	; (8007484 <USBD_LL_Init+0x94>)
 8007438:	2200      	movs	r2, #0
 800743a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800743c:	4b11      	ldr	r3, [pc, #68]	; (8007484 <USBD_LL_Init+0x94>)
 800743e:	2200      	movs	r2, #0
 8007440:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007442:	4b10      	ldr	r3, [pc, #64]	; (8007484 <USBD_LL_Init+0x94>)
 8007444:	2200      	movs	r2, #0
 8007446:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007448:	4b0e      	ldr	r3, [pc, #56]	; (8007484 <USBD_LL_Init+0x94>)
 800744a:	2200      	movs	r2, #0
 800744c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800744e:	480d      	ldr	r0, [pc, #52]	; (8007484 <USBD_LL_Init+0x94>)
 8007450:	f7fa fa11 	bl	8001876 <HAL_PCD_Init>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800745a:	f7f9 fabf 	bl	80009dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800745e:	2180      	movs	r1, #128	; 0x80
 8007460:	4808      	ldr	r0, [pc, #32]	; (8007484 <USBD_LL_Init+0x94>)
 8007462:	f7fb fb6e 	bl	8002b42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007466:	2240      	movs	r2, #64	; 0x40
 8007468:	2100      	movs	r1, #0
 800746a:	4806      	ldr	r0, [pc, #24]	; (8007484 <USBD_LL_Init+0x94>)
 800746c:	f7fb fb22 	bl	8002ab4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007470:	2280      	movs	r2, #128	; 0x80
 8007472:	2101      	movs	r1, #1
 8007474:	4803      	ldr	r0, [pc, #12]	; (8007484 <USBD_LL_Init+0x94>)
 8007476:	f7fb fb1d 	bl	8002ab4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20001a3c 	.word	0x20001a3c

08007488 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fa fb06 	bl	8001ab0 <HAL_PCD_Start>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 f942 	bl	8007734 <USBD_Get_USB_Status>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	4608      	mov	r0, r1
 80074c8:	4611      	mov	r1, r2
 80074ca:	461a      	mov	r2, r3
 80074cc:	4603      	mov	r3, r0
 80074ce:	70fb      	strb	r3, [r7, #3]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70bb      	strb	r3, [r7, #2]
 80074d4:	4613      	mov	r3, r2
 80074d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80074e6:	78bb      	ldrb	r3, [r7, #2]
 80074e8:	883a      	ldrh	r2, [r7, #0]
 80074ea:	78f9      	ldrb	r1, [r7, #3]
 80074ec:	f7fa feea 	bl	80022c4 <HAL_PCD_EP_Open>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 f91c 	bl	8007734 <USBD_Get_USB_Status>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007500:	7bbb      	ldrb	r3, [r7, #14]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	4611      	mov	r1, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f7fa ff33 	bl	8002394 <HAL_PCD_EP_Close>
 800752e:	4603      	mov	r3, r0
 8007530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	4618      	mov	r0, r3
 8007536:	f000 f8fd 	bl	8007734 <USBD_Get_USB_Status>
 800753a:	4603      	mov	r3, r0
 800753c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800753e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f7fb f80b 	bl	8002582 <HAL_PCD_EP_SetStall>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	4618      	mov	r0, r3
 8007574:	f000 f8de 	bl	8007734 <USBD_Get_USB_Status>
 8007578:	4603      	mov	r3, r0
 800757a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800757c:	7bbb      	ldrb	r3, [r7, #14]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	460b      	mov	r3, r1
 8007590:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075a0:	78fa      	ldrb	r2, [r7, #3]
 80075a2:	4611      	mov	r1, r2
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fb f850 	bl	800264a <HAL_PCD_EP_ClrStall>
 80075aa:	4603      	mov	r3, r0
 80075ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 f8bf 	bl	8007734 <USBD_Get_USB_Status>
 80075b6:	4603      	mov	r3, r0
 80075b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80075d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	da0b      	bge.n	80075f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075e6:	68f9      	ldr	r1, [r7, #12]
 80075e8:	4613      	mov	r3, r2
 80075ea:	00db      	lsls	r3, r3, #3
 80075ec:	1a9b      	subs	r3, r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	333e      	adds	r3, #62	; 0x3e
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	e00b      	b.n	8007610 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075fe:	68f9      	ldr	r1, [r7, #12]
 8007600:	4613      	mov	r3, r2
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800760e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007636:	78fa      	ldrb	r2, [r7, #3]
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f7fa fe1d 	bl	800227a <HAL_PCD_SetAddress>
 8007640:	4603      	mov	r3, r0
 8007642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	4618      	mov	r0, r3
 8007648:	f000 f874 	bl	8007734 <USBD_Get_USB_Status>
 800764c:	4603      	mov	r3, r0
 800764e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007650:	7bbb      	ldrb	r3, [r7, #14]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b086      	sub	sp, #24
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]
 8007666:	460b      	mov	r3, r1
 8007668:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007678:	7af9      	ldrb	r1, [r7, #11]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	f7fa ff36 	bl	80024ee <HAL_PCD_EP_Transmit>
 8007682:	4603      	mov	r3, r0
 8007684:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	4618      	mov	r0, r3
 800768a:	f000 f853 	bl	8007734 <USBD_Get_USB_Status>
 800768e:	4603      	mov	r3, r0
 8007690:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007692:	7dbb      	ldrb	r3, [r7, #22]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	603b      	str	r3, [r7, #0]
 80076a8:	460b      	mov	r3, r1
 80076aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076ba:	7af9      	ldrb	r1, [r7, #11]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	f7fa feb2 	bl	8002428 <HAL_PCD_EP_Receive>
 80076c4:	4603      	mov	r3, r0
 80076c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 f832 	bl	8007734 <USBD_Get_USB_Status>
 80076d0:	4603      	mov	r3, r0
 80076d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	4611      	mov	r1, r2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fa fee2 	bl	80024be <HAL_PCD_EP_GetRxCount>
 80076fa:	4603      	mov	r3, r0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800770c:	4b03      	ldr	r3, [pc, #12]	; (800771c <USBD_static_malloc+0x18>)
}
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	200001a8 	.word	0x200001a8

08007720 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]

}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007742:	79fb      	ldrb	r3, [r7, #7]
 8007744:	2b03      	cmp	r3, #3
 8007746:	d817      	bhi.n	8007778 <USBD_Get_USB_Status+0x44>
 8007748:	a201      	add	r2, pc, #4	; (adr r2, 8007750 <USBD_Get_USB_Status+0x1c>)
 800774a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774e:	bf00      	nop
 8007750:	08007761 	.word	0x08007761
 8007754:	08007767 	.word	0x08007767
 8007758:	0800776d 	.word	0x0800776d
 800775c:	08007773 	.word	0x08007773
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
    break;
 8007764:	e00b      	b.n	800777e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007766:	2303      	movs	r3, #3
 8007768:	73fb      	strb	r3, [r7, #15]
    break;
 800776a:	e008      	b.n	800777e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800776c:	2301      	movs	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
    break;
 8007770:	e005      	b.n	800777e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007772:	2303      	movs	r3, #3
 8007774:	73fb      	strb	r3, [r7, #15]
    break;
 8007776:	e002      	b.n	800777e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007778:	2303      	movs	r3, #3
 800777a:	73fb      	strb	r3, [r7, #15]
    break;
 800777c:	bf00      	nop
  }
  return usb_status;
 800777e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <__libc_init_array>:
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	4d0d      	ldr	r5, [pc, #52]	; (80077c4 <__libc_init_array+0x38>)
 8007790:	4c0d      	ldr	r4, [pc, #52]	; (80077c8 <__libc_init_array+0x3c>)
 8007792:	1b64      	subs	r4, r4, r5
 8007794:	10a4      	asrs	r4, r4, #2
 8007796:	2600      	movs	r6, #0
 8007798:	42a6      	cmp	r6, r4
 800779a:	d109      	bne.n	80077b0 <__libc_init_array+0x24>
 800779c:	4d0b      	ldr	r5, [pc, #44]	; (80077cc <__libc_init_array+0x40>)
 800779e:	4c0c      	ldr	r4, [pc, #48]	; (80077d0 <__libc_init_array+0x44>)
 80077a0:	f000 f82e 	bl	8007800 <_init>
 80077a4:	1b64      	subs	r4, r4, r5
 80077a6:	10a4      	asrs	r4, r4, #2
 80077a8:	2600      	movs	r6, #0
 80077aa:	42a6      	cmp	r6, r4
 80077ac:	d105      	bne.n	80077ba <__libc_init_array+0x2e>
 80077ae:	bd70      	pop	{r4, r5, r6, pc}
 80077b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077b4:	4798      	blx	r3
 80077b6:	3601      	adds	r6, #1
 80077b8:	e7ee      	b.n	8007798 <__libc_init_array+0xc>
 80077ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80077be:	4798      	blx	r3
 80077c0:	3601      	adds	r6, #1
 80077c2:	e7f2      	b.n	80077aa <__libc_init_array+0x1e>
 80077c4:	0800788c 	.word	0x0800788c
 80077c8:	0800788c 	.word	0x0800788c
 80077cc:	0800788c 	.word	0x0800788c
 80077d0:	08007890 	.word	0x08007890

080077d4 <memcpy>:
 80077d4:	440a      	add	r2, r1
 80077d6:	4291      	cmp	r1, r2
 80077d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80077dc:	d100      	bne.n	80077e0 <memcpy+0xc>
 80077de:	4770      	bx	lr
 80077e0:	b510      	push	{r4, lr}
 80077e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077ea:	4291      	cmp	r1, r2
 80077ec:	d1f9      	bne.n	80077e2 <memcpy+0xe>
 80077ee:	bd10      	pop	{r4, pc}

080077f0 <memset>:
 80077f0:	4402      	add	r2, r0
 80077f2:	4603      	mov	r3, r0
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d100      	bne.n	80077fa <memset+0xa>
 80077f8:	4770      	bx	lr
 80077fa:	f803 1b01 	strb.w	r1, [r3], #1
 80077fe:	e7f9      	b.n	80077f4 <memset+0x4>

08007800 <_init>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	bf00      	nop
 8007804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007806:	bc08      	pop	{r3}
 8007808:	469e      	mov	lr, r3
 800780a:	4770      	bx	lr

0800780c <_fini>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	bf00      	nop
 8007810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007812:	bc08      	pop	{r3}
 8007814:	469e      	mov	lr, r3
 8007816:	4770      	bx	lr
