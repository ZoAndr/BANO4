
BANO_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b730  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800b7f0  0800b7f0  0000c7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bca8  0800bca8  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bca8  0800bca8  0000cca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcb0  0800bcb0  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcb0  0800bcb0  0000ccb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcb4  0800bcb4  0000ccb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bcb8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001d4  0800be8c  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  0800be8c  0000d544  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013def  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf7  00000000  00000000  00020feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00023be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e31  00000000  00000000  00024e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ff1  00000000  00000000  00025c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156ac  00000000  00000000  0003ec3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f98c  00000000  00000000  000542e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3c72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000551c  00000000  00000000  000f3cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f91d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d4 	.word	0x200001d4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b7d4 	.word	0x0800b7d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001d8 	.word	0x200001d8
 8000100:	0800b7d4 	.word	0x0800b7d4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fe23 	bl	8002084 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fd63 	bl	8001f14 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fe15 	bl	8002084 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fe0b 	bl	8002084 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd8d 	bl	8001f9c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd83 	bl	8001f9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	@ (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	@ (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f002 fe2e 	bl	8003164 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f002 fe29 	bl	8003164 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	d434      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051a:	469b      	mov	fp, r3
 800051c:	4653      	mov	r3, sl
 800051e:	465a      	mov	r2, fp
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83b      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e079      	b.n	800062a <__udivmoddi4+0x146>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e076      	b.n	8000630 <__udivmoddi4+0x14c>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e029      	b.n	80005b0 <__udivmoddi4+0xcc>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	469b      	mov	fp, r3
 8000588:	2320      	movs	r3, #32
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	4652      	mov	r2, sl
 800058e:	40da      	lsrs	r2, r3
 8000590:	4641      	mov	r1, r8
 8000592:	0013      	movs	r3, r2
 8000594:	464a      	mov	r2, r9
 8000596:	408a      	lsls	r2, r1
 8000598:	0017      	movs	r7, r2
 800059a:	4642      	mov	r2, r8
 800059c:	431f      	orrs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d9c3      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4643      	mov	r3, r8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0d8      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b6:	07fb      	lsls	r3, r7, #31
 80005b8:	0872      	lsrs	r2, r6, #1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4646      	mov	r6, r8
 80005be:	087b      	lsrs	r3, r7, #1
 80005c0:	e00e      	b.n	80005e0 <__udivmoddi4+0xfc>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d101      	bne.n	80005ca <__udivmoddi4+0xe6>
 80005c6:	42a2      	cmp	r2, r4
 80005c8:	d80c      	bhi.n	80005e4 <__udivmoddi4+0x100>
 80005ca:	1aa4      	subs	r4, r4, r2
 80005cc:	419d      	sbcs	r5, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	1924      	adds	r4, r4, r4
 80005d2:	416d      	adcs	r5, r5
 80005d4:	2100      	movs	r1, #0
 80005d6:	3e01      	subs	r6, #1
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	414d      	adcs	r5, r1
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d006      	beq.n	80005ee <__udivmoddi4+0x10a>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d9ee      	bls.n	80005c2 <__udivmoddi4+0xde>
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d1f8      	bne.n	80005e0 <__udivmoddi4+0xfc>
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	465b      	mov	r3, fp
 80005f4:	1900      	adds	r0, r0, r4
 80005f6:	4169      	adcs	r1, r5
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db24      	blt.n	8000646 <__udivmoddi4+0x162>
 80005fc:	002b      	movs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	4644      	mov	r4, r8
 8000602:	40d3      	lsrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	db2a      	blt.n	8000668 <__udivmoddi4+0x184>
 8000612:	0026      	movs	r6, r4
 8000614:	409e      	lsls	r6, r3
 8000616:	0033      	movs	r3, r6
 8000618:	0026      	movs	r6, r4
 800061a:	4647      	mov	r7, r8
 800061c:	40be      	lsls	r6, r7
 800061e:	0032      	movs	r2, r6
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	4199      	sbcs	r1, r3
 8000624:	9000      	str	r0, [sp, #0]
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	e79e      	b.n	8000568 <__udivmoddi4+0x84>
 800062a:	42a3      	cmp	r3, r4
 800062c:	d8bc      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 800062e:	e782      	b.n	8000536 <__udivmoddi4+0x52>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	2100      	movs	r1, #0
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	9100      	str	r1, [sp, #0]
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2201      	movs	r2, #1
 8000640:	40da      	lsrs	r2, r3
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	e785      	b.n	8000552 <__udivmoddi4+0x6e>
 8000646:	4642      	mov	r2, r8
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	002a      	movs	r2, r5
 800064e:	4646      	mov	r6, r8
 8000650:	409a      	lsls	r2, r3
 8000652:	0023      	movs	r3, r4
 8000654:	40f3      	lsrs	r3, r6
 8000656:	4644      	mov	r4, r8
 8000658:	4313      	orrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	dad4      	bge.n	8000612 <__udivmoddi4+0x12e>
 8000668:	4642      	mov	r2, r8
 800066a:	002f      	movs	r7, r5
 800066c:	2320      	movs	r3, #32
 800066e:	0026      	movs	r6, r4
 8000670:	4097      	lsls	r7, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	40de      	lsrs	r6, r3
 8000676:	003b      	movs	r3, r7
 8000678:	4333      	orrs	r3, r6
 800067a:	e7cd      	b.n	8000618 <__udivmoddi4+0x134>

0800067c <__aeabi_fadd>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	46ce      	mov	lr, r9
 8000680:	4647      	mov	r7, r8
 8000682:	0243      	lsls	r3, r0, #9
 8000684:	0a5a      	lsrs	r2, r3, #9
 8000686:	024e      	lsls	r6, r1, #9
 8000688:	0045      	lsls	r5, r0, #1
 800068a:	0fc4      	lsrs	r4, r0, #31
 800068c:	0048      	lsls	r0, r1, #1
 800068e:	4691      	mov	r9, r2
 8000690:	0e2d      	lsrs	r5, r5, #24
 8000692:	0a72      	lsrs	r2, r6, #9
 8000694:	0e00      	lsrs	r0, r0, #24
 8000696:	4694      	mov	ip, r2
 8000698:	b580      	push	{r7, lr}
 800069a:	099b      	lsrs	r3, r3, #6
 800069c:	0fc9      	lsrs	r1, r1, #31
 800069e:	09b6      	lsrs	r6, r6, #6
 80006a0:	1a2a      	subs	r2, r5, r0
 80006a2:	428c      	cmp	r4, r1
 80006a4:	d021      	beq.n	80006ea <__aeabi_fadd+0x6e>
 80006a6:	2a00      	cmp	r2, #0
 80006a8:	dd0d      	ble.n	80006c6 <__aeabi_fadd+0x4a>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	d12d      	bne.n	800070a <__aeabi_fadd+0x8e>
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d100      	bne.n	80006b4 <__aeabi_fadd+0x38>
 80006b2:	e08d      	b.n	80007d0 <__aeabi_fadd+0x154>
 80006b4:	1e51      	subs	r1, r2, #1
 80006b6:	2a01      	cmp	r2, #1
 80006b8:	d100      	bne.n	80006bc <__aeabi_fadd+0x40>
 80006ba:	e11d      	b.n	80008f8 <__aeabi_fadd+0x27c>
 80006bc:	2aff      	cmp	r2, #255	@ 0xff
 80006be:	d100      	bne.n	80006c2 <__aeabi_fadd+0x46>
 80006c0:	e0ab      	b.n	800081a <__aeabi_fadd+0x19e>
 80006c2:	000a      	movs	r2, r1
 80006c4:	e027      	b.n	8000716 <__aeabi_fadd+0x9a>
 80006c6:	2a00      	cmp	r2, #0
 80006c8:	d04d      	beq.n	8000766 <__aeabi_fadd+0xea>
 80006ca:	1b42      	subs	r2, r0, r5
 80006cc:	2d00      	cmp	r5, #0
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fadd+0x56>
 80006d0:	e0cc      	b.n	800086c <__aeabi_fadd+0x1f0>
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d100      	bne.n	80006d8 <__aeabi_fadd+0x5c>
 80006d6:	e079      	b.n	80007cc <__aeabi_fadd+0x150>
 80006d8:	1e54      	subs	r4, r2, #1
 80006da:	2a01      	cmp	r2, #1
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fadd+0x64>
 80006de:	e128      	b.n	8000932 <__aeabi_fadd+0x2b6>
 80006e0:	2aff      	cmp	r2, #255	@ 0xff
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fadd+0x6a>
 80006e4:	e097      	b.n	8000816 <__aeabi_fadd+0x19a>
 80006e6:	0022      	movs	r2, r4
 80006e8:	e0c5      	b.n	8000876 <__aeabi_fadd+0x1fa>
 80006ea:	2a00      	cmp	r2, #0
 80006ec:	dc00      	bgt.n	80006f0 <__aeabi_fadd+0x74>
 80006ee:	e096      	b.n	800081e <__aeabi_fadd+0x1a2>
 80006f0:	2800      	cmp	r0, #0
 80006f2:	d04f      	beq.n	8000794 <__aeabi_fadd+0x118>
 80006f4:	2dff      	cmp	r5, #255	@ 0xff
 80006f6:	d100      	bne.n	80006fa <__aeabi_fadd+0x7e>
 80006f8:	e08f      	b.n	800081a <__aeabi_fadd+0x19e>
 80006fa:	2180      	movs	r1, #128	@ 0x80
 80006fc:	04c9      	lsls	r1, r1, #19
 80006fe:	430e      	orrs	r6, r1
 8000700:	2a1b      	cmp	r2, #27
 8000702:	dd51      	ble.n	80007a8 <__aeabi_fadd+0x12c>
 8000704:	002a      	movs	r2, r5
 8000706:	3301      	adds	r3, #1
 8000708:	e018      	b.n	800073c <__aeabi_fadd+0xc0>
 800070a:	2dff      	cmp	r5, #255	@ 0xff
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x94>
 800070e:	e084      	b.n	800081a <__aeabi_fadd+0x19e>
 8000710:	2180      	movs	r1, #128	@ 0x80
 8000712:	04c9      	lsls	r1, r1, #19
 8000714:	430e      	orrs	r6, r1
 8000716:	2101      	movs	r1, #1
 8000718:	2a1b      	cmp	r2, #27
 800071a:	dc08      	bgt.n	800072e <__aeabi_fadd+0xb2>
 800071c:	0031      	movs	r1, r6
 800071e:	2020      	movs	r0, #32
 8000720:	40d1      	lsrs	r1, r2
 8000722:	1a82      	subs	r2, r0, r2
 8000724:	4096      	lsls	r6, r2
 8000726:	0032      	movs	r2, r6
 8000728:	1e50      	subs	r0, r2, #1
 800072a:	4182      	sbcs	r2, r0
 800072c:	4311      	orrs	r1, r2
 800072e:	1a5b      	subs	r3, r3, r1
 8000730:	015a      	lsls	r2, r3, #5
 8000732:	d459      	bmi.n	80007e8 <__aeabi_fadd+0x16c>
 8000734:	2107      	movs	r1, #7
 8000736:	002a      	movs	r2, r5
 8000738:	4019      	ands	r1, r3
 800073a:	d049      	beq.n	80007d0 <__aeabi_fadd+0x154>
 800073c:	210f      	movs	r1, #15
 800073e:	4019      	ands	r1, r3
 8000740:	2904      	cmp	r1, #4
 8000742:	d000      	beq.n	8000746 <__aeabi_fadd+0xca>
 8000744:	3304      	adds	r3, #4
 8000746:	0159      	lsls	r1, r3, #5
 8000748:	d542      	bpl.n	80007d0 <__aeabi_fadd+0x154>
 800074a:	1c50      	adds	r0, r2, #1
 800074c:	2afe      	cmp	r2, #254	@ 0xfe
 800074e:	d03a      	beq.n	80007c6 <__aeabi_fadd+0x14a>
 8000750:	019b      	lsls	r3, r3, #6
 8000752:	b2c0      	uxtb	r0, r0
 8000754:	0a5b      	lsrs	r3, r3, #9
 8000756:	05c0      	lsls	r0, r0, #23
 8000758:	4318      	orrs	r0, r3
 800075a:	07e4      	lsls	r4, r4, #31
 800075c:	4320      	orrs	r0, r4
 800075e:	bcc0      	pop	{r6, r7}
 8000760:	46b9      	mov	r9, r7
 8000762:	46b0      	mov	r8, r6
 8000764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000766:	20fe      	movs	r0, #254	@ 0xfe
 8000768:	4680      	mov	r8, r0
 800076a:	1c6f      	adds	r7, r5, #1
 800076c:	0038      	movs	r0, r7
 800076e:	4647      	mov	r7, r8
 8000770:	4207      	tst	r7, r0
 8000772:	d000      	beq.n	8000776 <__aeabi_fadd+0xfa>
 8000774:	e08e      	b.n	8000894 <__aeabi_fadd+0x218>
 8000776:	2d00      	cmp	r5, #0
 8000778:	d000      	beq.n	800077c <__aeabi_fadd+0x100>
 800077a:	e0b4      	b.n	80008e6 <__aeabi_fadd+0x26a>
 800077c:	2b00      	cmp	r3, #0
 800077e:	d100      	bne.n	8000782 <__aeabi_fadd+0x106>
 8000780:	e0db      	b.n	800093a <__aeabi_fadd+0x2be>
 8000782:	2e00      	cmp	r6, #0
 8000784:	d06c      	beq.n	8000860 <__aeabi_fadd+0x1e4>
 8000786:	1b98      	subs	r0, r3, r6
 8000788:	0145      	lsls	r5, r0, #5
 800078a:	d400      	bmi.n	800078e <__aeabi_fadd+0x112>
 800078c:	e0f7      	b.n	800097e <__aeabi_fadd+0x302>
 800078e:	000c      	movs	r4, r1
 8000790:	1af3      	subs	r3, r6, r3
 8000792:	e03d      	b.n	8000810 <__aeabi_fadd+0x194>
 8000794:	2e00      	cmp	r6, #0
 8000796:	d01b      	beq.n	80007d0 <__aeabi_fadd+0x154>
 8000798:	1e51      	subs	r1, r2, #1
 800079a:	2a01      	cmp	r2, #1
 800079c:	d100      	bne.n	80007a0 <__aeabi_fadd+0x124>
 800079e:	e082      	b.n	80008a6 <__aeabi_fadd+0x22a>
 80007a0:	2aff      	cmp	r2, #255	@ 0xff
 80007a2:	d03a      	beq.n	800081a <__aeabi_fadd+0x19e>
 80007a4:	000a      	movs	r2, r1
 80007a6:	e7ab      	b.n	8000700 <__aeabi_fadd+0x84>
 80007a8:	0031      	movs	r1, r6
 80007aa:	2020      	movs	r0, #32
 80007ac:	40d1      	lsrs	r1, r2
 80007ae:	1a82      	subs	r2, r0, r2
 80007b0:	4096      	lsls	r6, r2
 80007b2:	0032      	movs	r2, r6
 80007b4:	1e50      	subs	r0, r2, #1
 80007b6:	4182      	sbcs	r2, r0
 80007b8:	430a      	orrs	r2, r1
 80007ba:	189b      	adds	r3, r3, r2
 80007bc:	015a      	lsls	r2, r3, #5
 80007be:	d5b9      	bpl.n	8000734 <__aeabi_fadd+0xb8>
 80007c0:	1c6a      	adds	r2, r5, #1
 80007c2:	2dfe      	cmp	r5, #254	@ 0xfe
 80007c4:	d175      	bne.n	80008b2 <__aeabi_fadd+0x236>
 80007c6:	20ff      	movs	r0, #255	@ 0xff
 80007c8:	2300      	movs	r3, #0
 80007ca:	e7c4      	b.n	8000756 <__aeabi_fadd+0xda>
 80007cc:	000c      	movs	r4, r1
 80007ce:	0033      	movs	r3, r6
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	2aff      	cmp	r2, #255	@ 0xff
 80007d4:	d146      	bne.n	8000864 <__aeabi_fadd+0x1e8>
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d0f5      	beq.n	80007c6 <__aeabi_fadd+0x14a>
 80007da:	2280      	movs	r2, #128	@ 0x80
 80007dc:	03d2      	lsls	r2, r2, #15
 80007de:	4313      	orrs	r3, r2
 80007e0:	025b      	lsls	r3, r3, #9
 80007e2:	20ff      	movs	r0, #255	@ 0xff
 80007e4:	0a5b      	lsrs	r3, r3, #9
 80007e6:	e7b6      	b.n	8000756 <__aeabi_fadd+0xda>
 80007e8:	019f      	lsls	r7, r3, #6
 80007ea:	09bf      	lsrs	r7, r7, #6
 80007ec:	0038      	movs	r0, r7
 80007ee:	f002 fc9b 	bl	8003128 <__clzsi2>
 80007f2:	3805      	subs	r0, #5
 80007f4:	4087      	lsls	r7, r0
 80007f6:	4285      	cmp	r5, r0
 80007f8:	dc24      	bgt.n	8000844 <__aeabi_fadd+0x1c8>
 80007fa:	003b      	movs	r3, r7
 80007fc:	2120      	movs	r1, #32
 80007fe:	1b42      	subs	r2, r0, r5
 8000800:	3201      	adds	r2, #1
 8000802:	40d3      	lsrs	r3, r2
 8000804:	1a8a      	subs	r2, r1, r2
 8000806:	4097      	lsls	r7, r2
 8000808:	1e7a      	subs	r2, r7, #1
 800080a:	4197      	sbcs	r7, r2
 800080c:	2200      	movs	r2, #0
 800080e:	433b      	orrs	r3, r7
 8000810:	0759      	lsls	r1, r3, #29
 8000812:	d193      	bne.n	800073c <__aeabi_fadd+0xc0>
 8000814:	e797      	b.n	8000746 <__aeabi_fadd+0xca>
 8000816:	000c      	movs	r4, r1
 8000818:	0033      	movs	r3, r6
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	e7db      	b.n	80007d6 <__aeabi_fadd+0x15a>
 800081e:	2a00      	cmp	r2, #0
 8000820:	d014      	beq.n	800084c <__aeabi_fadd+0x1d0>
 8000822:	1b42      	subs	r2, r0, r5
 8000824:	2d00      	cmp	r5, #0
 8000826:	d14b      	bne.n	80008c0 <__aeabi_fadd+0x244>
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0d0      	beq.n	80007ce <__aeabi_fadd+0x152>
 800082c:	1e51      	subs	r1, r2, #1
 800082e:	2a01      	cmp	r2, #1
 8000830:	d100      	bne.n	8000834 <__aeabi_fadd+0x1b8>
 8000832:	e09e      	b.n	8000972 <__aeabi_fadd+0x2f6>
 8000834:	2aff      	cmp	r2, #255	@ 0xff
 8000836:	d0ef      	beq.n	8000818 <__aeabi_fadd+0x19c>
 8000838:	000a      	movs	r2, r1
 800083a:	2a1b      	cmp	r2, #27
 800083c:	dd5f      	ble.n	80008fe <__aeabi_fadd+0x282>
 800083e:	0002      	movs	r2, r0
 8000840:	1c73      	adds	r3, r6, #1
 8000842:	e77b      	b.n	800073c <__aeabi_fadd+0xc0>
 8000844:	4b50      	ldr	r3, [pc, #320]	@ (8000988 <__aeabi_fadd+0x30c>)
 8000846:	1a2a      	subs	r2, r5, r0
 8000848:	403b      	ands	r3, r7
 800084a:	e7e1      	b.n	8000810 <__aeabi_fadd+0x194>
 800084c:	21fe      	movs	r1, #254	@ 0xfe
 800084e:	1c6a      	adds	r2, r5, #1
 8000850:	4211      	tst	r1, r2
 8000852:	d13b      	bne.n	80008cc <__aeabi_fadd+0x250>
 8000854:	2d00      	cmp	r5, #0
 8000856:	d15d      	bne.n	8000914 <__aeabi_fadd+0x298>
 8000858:	2b00      	cmp	r3, #0
 800085a:	d07f      	beq.n	800095c <__aeabi_fadd+0x2e0>
 800085c:	2e00      	cmp	r6, #0
 800085e:	d17f      	bne.n	8000960 <__aeabi_fadd+0x2e4>
 8000860:	2200      	movs	r2, #0
 8000862:	08db      	lsrs	r3, r3, #3
 8000864:	025b      	lsls	r3, r3, #9
 8000866:	0a5b      	lsrs	r3, r3, #9
 8000868:	b2d0      	uxtb	r0, r2
 800086a:	e774      	b.n	8000756 <__aeabi_fadd+0xda>
 800086c:	28ff      	cmp	r0, #255	@ 0xff
 800086e:	d0d2      	beq.n	8000816 <__aeabi_fadd+0x19a>
 8000870:	2480      	movs	r4, #128	@ 0x80
 8000872:	04e4      	lsls	r4, r4, #19
 8000874:	4323      	orrs	r3, r4
 8000876:	2401      	movs	r4, #1
 8000878:	2a1b      	cmp	r2, #27
 800087a:	dc07      	bgt.n	800088c <__aeabi_fadd+0x210>
 800087c:	001c      	movs	r4, r3
 800087e:	2520      	movs	r5, #32
 8000880:	40d4      	lsrs	r4, r2
 8000882:	1aaa      	subs	r2, r5, r2
 8000884:	4093      	lsls	r3, r2
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	4193      	sbcs	r3, r2
 800088a:	431c      	orrs	r4, r3
 800088c:	1b33      	subs	r3, r6, r4
 800088e:	0005      	movs	r5, r0
 8000890:	000c      	movs	r4, r1
 8000892:	e74d      	b.n	8000730 <__aeabi_fadd+0xb4>
 8000894:	1b9f      	subs	r7, r3, r6
 8000896:	017a      	lsls	r2, r7, #5
 8000898:	d422      	bmi.n	80008e0 <__aeabi_fadd+0x264>
 800089a:	2f00      	cmp	r7, #0
 800089c:	d1a6      	bne.n	80007ec <__aeabi_fadd+0x170>
 800089e:	2400      	movs	r4, #0
 80008a0:	2000      	movs	r0, #0
 80008a2:	2300      	movs	r3, #0
 80008a4:	e757      	b.n	8000756 <__aeabi_fadd+0xda>
 80008a6:	199b      	adds	r3, r3, r6
 80008a8:	2501      	movs	r5, #1
 80008aa:	3201      	adds	r2, #1
 80008ac:	0159      	lsls	r1, r3, #5
 80008ae:	d400      	bmi.n	80008b2 <__aeabi_fadd+0x236>
 80008b0:	e740      	b.n	8000734 <__aeabi_fadd+0xb8>
 80008b2:	2101      	movs	r1, #1
 80008b4:	4835      	ldr	r0, [pc, #212]	@ (800098c <__aeabi_fadd+0x310>)
 80008b6:	4019      	ands	r1, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	4003      	ands	r3, r0
 80008bc:	430b      	orrs	r3, r1
 80008be:	e7a7      	b.n	8000810 <__aeabi_fadd+0x194>
 80008c0:	28ff      	cmp	r0, #255	@ 0xff
 80008c2:	d0a9      	beq.n	8000818 <__aeabi_fadd+0x19c>
 80008c4:	2180      	movs	r1, #128	@ 0x80
 80008c6:	04c9      	lsls	r1, r1, #19
 80008c8:	430b      	orrs	r3, r1
 80008ca:	e7b6      	b.n	800083a <__aeabi_fadd+0x1be>
 80008cc:	2aff      	cmp	r2, #255	@ 0xff
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fadd+0x256>
 80008d0:	e779      	b.n	80007c6 <__aeabi_fadd+0x14a>
 80008d2:	199b      	adds	r3, r3, r6
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	0759      	lsls	r1, r3, #29
 80008d8:	d000      	beq.n	80008dc <__aeabi_fadd+0x260>
 80008da:	e72f      	b.n	800073c <__aeabi_fadd+0xc0>
 80008dc:	08db      	lsrs	r3, r3, #3
 80008de:	e7c1      	b.n	8000864 <__aeabi_fadd+0x1e8>
 80008e0:	000c      	movs	r4, r1
 80008e2:	1af7      	subs	r7, r6, r3
 80008e4:	e782      	b.n	80007ec <__aeabi_fadd+0x170>
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d12c      	bne.n	8000944 <__aeabi_fadd+0x2c8>
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d193      	bne.n	8000816 <__aeabi_fadd+0x19a>
 80008ee:	2380      	movs	r3, #128	@ 0x80
 80008f0:	2400      	movs	r4, #0
 80008f2:	20ff      	movs	r0, #255	@ 0xff
 80008f4:	03db      	lsls	r3, r3, #15
 80008f6:	e72e      	b.n	8000756 <__aeabi_fadd+0xda>
 80008f8:	2501      	movs	r5, #1
 80008fa:	1b9b      	subs	r3, r3, r6
 80008fc:	e718      	b.n	8000730 <__aeabi_fadd+0xb4>
 80008fe:	0019      	movs	r1, r3
 8000900:	2520      	movs	r5, #32
 8000902:	40d1      	lsrs	r1, r2
 8000904:	1aaa      	subs	r2, r5, r2
 8000906:	4093      	lsls	r3, r2
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	4193      	sbcs	r3, r2
 800090c:	430b      	orrs	r3, r1
 800090e:	0005      	movs	r5, r0
 8000910:	199b      	adds	r3, r3, r6
 8000912:	e753      	b.n	80007bc <__aeabi_fadd+0x140>
 8000914:	2b00      	cmp	r3, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x29e>
 8000918:	e77e      	b.n	8000818 <__aeabi_fadd+0x19c>
 800091a:	2e00      	cmp	r6, #0
 800091c:	d100      	bne.n	8000920 <__aeabi_fadd+0x2a4>
 800091e:	e77c      	b.n	800081a <__aeabi_fadd+0x19e>
 8000920:	2280      	movs	r2, #128	@ 0x80
 8000922:	03d2      	lsls	r2, r2, #15
 8000924:	4591      	cmp	r9, r2
 8000926:	d302      	bcc.n	800092e <__aeabi_fadd+0x2b2>
 8000928:	4594      	cmp	ip, r2
 800092a:	d200      	bcs.n	800092e <__aeabi_fadd+0x2b2>
 800092c:	0033      	movs	r3, r6
 800092e:	08db      	lsrs	r3, r3, #3
 8000930:	e753      	b.n	80007da <__aeabi_fadd+0x15e>
 8000932:	000c      	movs	r4, r1
 8000934:	1af3      	subs	r3, r6, r3
 8000936:	3501      	adds	r5, #1
 8000938:	e6fa      	b.n	8000730 <__aeabi_fadd+0xb4>
 800093a:	2e00      	cmp	r6, #0
 800093c:	d0af      	beq.n	800089e <__aeabi_fadd+0x222>
 800093e:	000c      	movs	r4, r1
 8000940:	0033      	movs	r3, r6
 8000942:	e78d      	b.n	8000860 <__aeabi_fadd+0x1e4>
 8000944:	2e00      	cmp	r6, #0
 8000946:	d100      	bne.n	800094a <__aeabi_fadd+0x2ce>
 8000948:	e767      	b.n	800081a <__aeabi_fadd+0x19e>
 800094a:	2280      	movs	r2, #128	@ 0x80
 800094c:	03d2      	lsls	r2, r2, #15
 800094e:	4591      	cmp	r9, r2
 8000950:	d3ed      	bcc.n	800092e <__aeabi_fadd+0x2b2>
 8000952:	4594      	cmp	ip, r2
 8000954:	d2eb      	bcs.n	800092e <__aeabi_fadd+0x2b2>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	e7e8      	b.n	800092e <__aeabi_fadd+0x2b2>
 800095c:	0033      	movs	r3, r6
 800095e:	e77f      	b.n	8000860 <__aeabi_fadd+0x1e4>
 8000960:	199b      	adds	r3, r3, r6
 8000962:	2200      	movs	r2, #0
 8000964:	0159      	lsls	r1, r3, #5
 8000966:	d5b9      	bpl.n	80008dc <__aeabi_fadd+0x260>
 8000968:	4a07      	ldr	r2, [pc, #28]	@ (8000988 <__aeabi_fadd+0x30c>)
 800096a:	4013      	ands	r3, r2
 800096c:	08db      	lsrs	r3, r3, #3
 800096e:	2201      	movs	r2, #1
 8000970:	e778      	b.n	8000864 <__aeabi_fadd+0x1e8>
 8000972:	199b      	adds	r3, r3, r6
 8000974:	3201      	adds	r2, #1
 8000976:	3501      	adds	r5, #1
 8000978:	0159      	lsls	r1, r3, #5
 800097a:	d49a      	bmi.n	80008b2 <__aeabi_fadd+0x236>
 800097c:	e6da      	b.n	8000734 <__aeabi_fadd+0xb8>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d08d      	beq.n	800089e <__aeabi_fadd+0x222>
 8000982:	08db      	lsrs	r3, r3, #3
 8000984:	e76e      	b.n	8000864 <__aeabi_fadd+0x1e8>
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	fbffffff 	.word	0xfbffffff
 800098c:	7dffffff 	.word	0x7dffffff

08000990 <__aeabi_fdiv>:
 8000990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000992:	464f      	mov	r7, r9
 8000994:	4646      	mov	r6, r8
 8000996:	46d6      	mov	lr, sl
 8000998:	0244      	lsls	r4, r0, #9
 800099a:	b5c0      	push	{r6, r7, lr}
 800099c:	0047      	lsls	r7, r0, #1
 800099e:	1c0e      	adds	r6, r1, #0
 80009a0:	0a64      	lsrs	r4, r4, #9
 80009a2:	0e3f      	lsrs	r7, r7, #24
 80009a4:	0fc5      	lsrs	r5, r0, #31
 80009a6:	2f00      	cmp	r7, #0
 80009a8:	d03c      	beq.n	8000a24 <__aeabi_fdiv+0x94>
 80009aa:	2fff      	cmp	r7, #255	@ 0xff
 80009ac:	d042      	beq.n	8000a34 <__aeabi_fdiv+0xa4>
 80009ae:	2300      	movs	r3, #0
 80009b0:	2280      	movs	r2, #128	@ 0x80
 80009b2:	4699      	mov	r9, r3
 80009b4:	469a      	mov	sl, r3
 80009b6:	00e4      	lsls	r4, r4, #3
 80009b8:	04d2      	lsls	r2, r2, #19
 80009ba:	4314      	orrs	r4, r2
 80009bc:	3f7f      	subs	r7, #127	@ 0x7f
 80009be:	0273      	lsls	r3, r6, #9
 80009c0:	0a5b      	lsrs	r3, r3, #9
 80009c2:	4698      	mov	r8, r3
 80009c4:	0073      	lsls	r3, r6, #1
 80009c6:	0e1b      	lsrs	r3, r3, #24
 80009c8:	0ff6      	lsrs	r6, r6, #31
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d01b      	beq.n	8000a06 <__aeabi_fdiv+0x76>
 80009ce:	2bff      	cmp	r3, #255	@ 0xff
 80009d0:	d013      	beq.n	80009fa <__aeabi_fdiv+0x6a>
 80009d2:	4642      	mov	r2, r8
 80009d4:	2180      	movs	r1, #128	@ 0x80
 80009d6:	00d2      	lsls	r2, r2, #3
 80009d8:	04c9      	lsls	r1, r1, #19
 80009da:	4311      	orrs	r1, r2
 80009dc:	4688      	mov	r8, r1
 80009de:	2000      	movs	r0, #0
 80009e0:	3b7f      	subs	r3, #127	@ 0x7f
 80009e2:	0029      	movs	r1, r5
 80009e4:	1aff      	subs	r7, r7, r3
 80009e6:	464b      	mov	r3, r9
 80009e8:	4071      	eors	r1, r6
 80009ea:	b2c9      	uxtb	r1, r1
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d900      	bls.n	80009f2 <__aeabi_fdiv+0x62>
 80009f0:	e0b5      	b.n	8000b5e <__aeabi_fdiv+0x1ce>
 80009f2:	4a74      	ldr	r2, [pc, #464]	@ (8000bc4 <__aeabi_fdiv+0x234>)
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	58d3      	ldr	r3, [r2, r3]
 80009f8:	469f      	mov	pc, r3
 80009fa:	4643      	mov	r3, r8
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d13f      	bne.n	8000a80 <__aeabi_fdiv+0xf0>
 8000a00:	3fff      	subs	r7, #255	@ 0xff
 8000a02:	3302      	adds	r3, #2
 8000a04:	e003      	b.n	8000a0e <__aeabi_fdiv+0x7e>
 8000a06:	4643      	mov	r3, r8
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d12d      	bne.n	8000a68 <__aeabi_fdiv+0xd8>
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	0029      	movs	r1, r5
 8000a10:	464a      	mov	r2, r9
 8000a12:	4071      	eors	r1, r6
 8000a14:	b2c9      	uxtb	r1, r1
 8000a16:	431a      	orrs	r2, r3
 8000a18:	2a0e      	cmp	r2, #14
 8000a1a:	d838      	bhi.n	8000a8e <__aeabi_fdiv+0xfe>
 8000a1c:	486a      	ldr	r0, [pc, #424]	@ (8000bc8 <__aeabi_fdiv+0x238>)
 8000a1e:	0092      	lsls	r2, r2, #2
 8000a20:	5882      	ldr	r2, [r0, r2]
 8000a22:	4697      	mov	pc, r2
 8000a24:	2c00      	cmp	r4, #0
 8000a26:	d113      	bne.n	8000a50 <__aeabi_fdiv+0xc0>
 8000a28:	2304      	movs	r3, #4
 8000a2a:	4699      	mov	r9, r3
 8000a2c:	3b03      	subs	r3, #3
 8000a2e:	2700      	movs	r7, #0
 8000a30:	469a      	mov	sl, r3
 8000a32:	e7c4      	b.n	80009be <__aeabi_fdiv+0x2e>
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d105      	bne.n	8000a44 <__aeabi_fdiv+0xb4>
 8000a38:	2308      	movs	r3, #8
 8000a3a:	4699      	mov	r9, r3
 8000a3c:	3b06      	subs	r3, #6
 8000a3e:	27ff      	movs	r7, #255	@ 0xff
 8000a40:	469a      	mov	sl, r3
 8000a42:	e7bc      	b.n	80009be <__aeabi_fdiv+0x2e>
 8000a44:	230c      	movs	r3, #12
 8000a46:	4699      	mov	r9, r3
 8000a48:	3b09      	subs	r3, #9
 8000a4a:	27ff      	movs	r7, #255	@ 0xff
 8000a4c:	469a      	mov	sl, r3
 8000a4e:	e7b6      	b.n	80009be <__aeabi_fdiv+0x2e>
 8000a50:	0020      	movs	r0, r4
 8000a52:	f002 fb69 	bl	8003128 <__clzsi2>
 8000a56:	2776      	movs	r7, #118	@ 0x76
 8000a58:	1f43      	subs	r3, r0, #5
 8000a5a:	409c      	lsls	r4, r3
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	427f      	negs	r7, r7
 8000a60:	4699      	mov	r9, r3
 8000a62:	469a      	mov	sl, r3
 8000a64:	1a3f      	subs	r7, r7, r0
 8000a66:	e7aa      	b.n	80009be <__aeabi_fdiv+0x2e>
 8000a68:	4640      	mov	r0, r8
 8000a6a:	f002 fb5d 	bl	8003128 <__clzsi2>
 8000a6e:	4642      	mov	r2, r8
 8000a70:	1f43      	subs	r3, r0, #5
 8000a72:	409a      	lsls	r2, r3
 8000a74:	2376      	movs	r3, #118	@ 0x76
 8000a76:	425b      	negs	r3, r3
 8000a78:	1a1b      	subs	r3, r3, r0
 8000a7a:	4690      	mov	r8, r2
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	e7b0      	b.n	80009e2 <__aeabi_fdiv+0x52>
 8000a80:	2303      	movs	r3, #3
 8000a82:	464a      	mov	r2, r9
 8000a84:	431a      	orrs	r2, r3
 8000a86:	4691      	mov	r9, r2
 8000a88:	2003      	movs	r0, #3
 8000a8a:	33fc      	adds	r3, #252	@ 0xfc
 8000a8c:	e7a9      	b.n	80009e2 <__aeabi_fdiv+0x52>
 8000a8e:	000d      	movs	r5, r1
 8000a90:	20ff      	movs	r0, #255	@ 0xff
 8000a92:	2200      	movs	r2, #0
 8000a94:	05c0      	lsls	r0, r0, #23
 8000a96:	07ed      	lsls	r5, r5, #31
 8000a98:	4310      	orrs	r0, r2
 8000a9a:	4328      	orrs	r0, r5
 8000a9c:	bce0      	pop	{r5, r6, r7}
 8000a9e:	46ba      	mov	sl, r7
 8000aa0:	46b1      	mov	r9, r6
 8000aa2:	46a8      	mov	r8, r5
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	000d      	movs	r5, r1
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	2200      	movs	r2, #0
 8000aac:	e7f2      	b.n	8000a94 <__aeabi_fdiv+0x104>
 8000aae:	4653      	mov	r3, sl
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d0ed      	beq.n	8000a90 <__aeabi_fdiv+0x100>
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d033      	beq.n	8000b20 <__aeabi_fdiv+0x190>
 8000ab8:	46a0      	mov	r8, r4
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d105      	bne.n	8000aca <__aeabi_fdiv+0x13a>
 8000abe:	2000      	movs	r0, #0
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	e7e7      	b.n	8000a94 <__aeabi_fdiv+0x104>
 8000ac4:	0035      	movs	r5, r6
 8000ac6:	2803      	cmp	r0, #3
 8000ac8:	d07a      	beq.n	8000bc0 <__aeabi_fdiv+0x230>
 8000aca:	003b      	movs	r3, r7
 8000acc:	337f      	adds	r3, #127	@ 0x7f
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dd2d      	ble.n	8000b2e <__aeabi_fdiv+0x19e>
 8000ad2:	4642      	mov	r2, r8
 8000ad4:	0752      	lsls	r2, r2, #29
 8000ad6:	d007      	beq.n	8000ae8 <__aeabi_fdiv+0x158>
 8000ad8:	220f      	movs	r2, #15
 8000ada:	4641      	mov	r1, r8
 8000adc:	400a      	ands	r2, r1
 8000ade:	2a04      	cmp	r2, #4
 8000ae0:	d002      	beq.n	8000ae8 <__aeabi_fdiv+0x158>
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	4694      	mov	ip, r2
 8000ae6:	44e0      	add	r8, ip
 8000ae8:	4642      	mov	r2, r8
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	d505      	bpl.n	8000afa <__aeabi_fdiv+0x16a>
 8000aee:	4642      	mov	r2, r8
 8000af0:	4b36      	ldr	r3, [pc, #216]	@ (8000bcc <__aeabi_fdiv+0x23c>)
 8000af2:	401a      	ands	r2, r3
 8000af4:	003b      	movs	r3, r7
 8000af6:	4690      	mov	r8, r2
 8000af8:	3380      	adds	r3, #128	@ 0x80
 8000afa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000afc:	dcc8      	bgt.n	8000a90 <__aeabi_fdiv+0x100>
 8000afe:	4642      	mov	r2, r8
 8000b00:	0192      	lsls	r2, r2, #6
 8000b02:	0a52      	lsrs	r2, r2, #9
 8000b04:	b2d8      	uxtb	r0, r3
 8000b06:	e7c5      	b.n	8000a94 <__aeabi_fdiv+0x104>
 8000b08:	2280      	movs	r2, #128	@ 0x80
 8000b0a:	2500      	movs	r5, #0
 8000b0c:	20ff      	movs	r0, #255	@ 0xff
 8000b0e:	03d2      	lsls	r2, r2, #15
 8000b10:	e7c0      	b.n	8000a94 <__aeabi_fdiv+0x104>
 8000b12:	2280      	movs	r2, #128	@ 0x80
 8000b14:	03d2      	lsls	r2, r2, #15
 8000b16:	4214      	tst	r4, r2
 8000b18:	d002      	beq.n	8000b20 <__aeabi_fdiv+0x190>
 8000b1a:	4643      	mov	r3, r8
 8000b1c:	4213      	tst	r3, r2
 8000b1e:	d049      	beq.n	8000bb4 <__aeabi_fdiv+0x224>
 8000b20:	2280      	movs	r2, #128	@ 0x80
 8000b22:	03d2      	lsls	r2, r2, #15
 8000b24:	4322      	orrs	r2, r4
 8000b26:	0252      	lsls	r2, r2, #9
 8000b28:	20ff      	movs	r0, #255	@ 0xff
 8000b2a:	0a52      	lsrs	r2, r2, #9
 8000b2c:	e7b2      	b.n	8000a94 <__aeabi_fdiv+0x104>
 8000b2e:	2201      	movs	r2, #1
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	2b1b      	cmp	r3, #27
 8000b34:	dcc3      	bgt.n	8000abe <__aeabi_fdiv+0x12e>
 8000b36:	4642      	mov	r2, r8
 8000b38:	40da      	lsrs	r2, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	379e      	adds	r7, #158	@ 0x9e
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	1e59      	subs	r1, r3, #1
 8000b42:	418b      	sbcs	r3, r1
 8000b44:	431a      	orrs	r2, r3
 8000b46:	0753      	lsls	r3, r2, #29
 8000b48:	d004      	beq.n	8000b54 <__aeabi_fdiv+0x1c4>
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d000      	beq.n	8000b54 <__aeabi_fdiv+0x1c4>
 8000b52:	3204      	adds	r2, #4
 8000b54:	0153      	lsls	r3, r2, #5
 8000b56:	d529      	bpl.n	8000bac <__aeabi_fdiv+0x21c>
 8000b58:	2001      	movs	r0, #1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	e79a      	b.n	8000a94 <__aeabi_fdiv+0x104>
 8000b5e:	4642      	mov	r2, r8
 8000b60:	0163      	lsls	r3, r4, #5
 8000b62:	0155      	lsls	r5, r2, #5
 8000b64:	42ab      	cmp	r3, r5
 8000b66:	d215      	bcs.n	8000b94 <__aeabi_fdiv+0x204>
 8000b68:	201b      	movs	r0, #27
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	3f01      	subs	r7, #1
 8000b6e:	2601      	movs	r6, #1
 8000b70:	001c      	movs	r4, r3
 8000b72:	0052      	lsls	r2, r2, #1
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	db01      	blt.n	8000b7e <__aeabi_fdiv+0x1ee>
 8000b7a:	429d      	cmp	r5, r3
 8000b7c:	d801      	bhi.n	8000b82 <__aeabi_fdiv+0x1f2>
 8000b7e:	1b5b      	subs	r3, r3, r5
 8000b80:	4332      	orrs	r2, r6
 8000b82:	3801      	subs	r0, #1
 8000b84:	2800      	cmp	r0, #0
 8000b86:	d1f3      	bne.n	8000b70 <__aeabi_fdiv+0x1e0>
 8000b88:	1e58      	subs	r0, r3, #1
 8000b8a:	4183      	sbcs	r3, r0
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	4698      	mov	r8, r3
 8000b90:	000d      	movs	r5, r1
 8000b92:	e79a      	b.n	8000aca <__aeabi_fdiv+0x13a>
 8000b94:	201a      	movs	r0, #26
 8000b96:	2201      	movs	r2, #1
 8000b98:	1b5b      	subs	r3, r3, r5
 8000b9a:	e7e8      	b.n	8000b6e <__aeabi_fdiv+0x1de>
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	425a      	negs	r2, r3
 8000ba0:	4153      	adcs	r3, r2
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	0035      	movs	r5, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	b2d8      	uxtb	r0, r3
 8000baa:	e773      	b.n	8000a94 <__aeabi_fdiv+0x104>
 8000bac:	0192      	lsls	r2, r2, #6
 8000bae:	2000      	movs	r0, #0
 8000bb0:	0a52      	lsrs	r2, r2, #9
 8000bb2:	e76f      	b.n	8000a94 <__aeabi_fdiv+0x104>
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	0252      	lsls	r2, r2, #9
 8000bb8:	0035      	movs	r5, r6
 8000bba:	20ff      	movs	r0, #255	@ 0xff
 8000bbc:	0a52      	lsrs	r2, r2, #9
 8000bbe:	e769      	b.n	8000a94 <__aeabi_fdiv+0x104>
 8000bc0:	4644      	mov	r4, r8
 8000bc2:	e7ad      	b.n	8000b20 <__aeabi_fdiv+0x190>
 8000bc4:	0800b7f4 	.word	0x0800b7f4
 8000bc8:	0800b834 	.word	0x0800b834
 8000bcc:	f7ffffff 	.word	0xf7ffffff

08000bd0 <__aeabi_fmul>:
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd2:	464f      	mov	r7, r9
 8000bd4:	4646      	mov	r6, r8
 8000bd6:	46d6      	mov	lr, sl
 8000bd8:	0243      	lsls	r3, r0, #9
 8000bda:	0a5b      	lsrs	r3, r3, #9
 8000bdc:	0045      	lsls	r5, r0, #1
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	4699      	mov	r9, r3
 8000be2:	1c0f      	adds	r7, r1, #0
 8000be4:	0e2d      	lsrs	r5, r5, #24
 8000be6:	0fc6      	lsrs	r6, r0, #31
 8000be8:	2d00      	cmp	r5, #0
 8000bea:	d100      	bne.n	8000bee <__aeabi_fmul+0x1e>
 8000bec:	e088      	b.n	8000d00 <__aeabi_fmul+0x130>
 8000bee:	2dff      	cmp	r5, #255	@ 0xff
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fmul+0x24>
 8000bf2:	e08d      	b.n	8000d10 <__aeabi_fmul+0x140>
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	04d2      	lsls	r2, r2, #19
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	4691      	mov	r9, r2
 8000c00:	4698      	mov	r8, r3
 8000c02:	469a      	mov	sl, r3
 8000c04:	3d7f      	subs	r5, #127	@ 0x7f
 8000c06:	027c      	lsls	r4, r7, #9
 8000c08:	007b      	lsls	r3, r7, #1
 8000c0a:	0a64      	lsrs	r4, r4, #9
 8000c0c:	0e1b      	lsrs	r3, r3, #24
 8000c0e:	0fff      	lsrs	r7, r7, #31
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d068      	beq.n	8000ce6 <__aeabi_fmul+0x116>
 8000c14:	2bff      	cmp	r3, #255	@ 0xff
 8000c16:	d021      	beq.n	8000c5c <__aeabi_fmul+0x8c>
 8000c18:	2280      	movs	r2, #128	@ 0x80
 8000c1a:	00e4      	lsls	r4, r4, #3
 8000c1c:	04d2      	lsls	r2, r2, #19
 8000c1e:	4314      	orrs	r4, r2
 8000c20:	4642      	mov	r2, r8
 8000c22:	3b7f      	subs	r3, #127	@ 0x7f
 8000c24:	195b      	adds	r3, r3, r5
 8000c26:	2100      	movs	r1, #0
 8000c28:	1c5d      	adds	r5, r3, #1
 8000c2a:	2a0a      	cmp	r2, #10
 8000c2c:	dc2e      	bgt.n	8000c8c <__aeabi_fmul+0xbc>
 8000c2e:	407e      	eors	r6, r7
 8000c30:	4642      	mov	r2, r8
 8000c32:	2a02      	cmp	r2, #2
 8000c34:	dc23      	bgt.n	8000c7e <__aeabi_fmul+0xae>
 8000c36:	3a01      	subs	r2, #1
 8000c38:	2a01      	cmp	r2, #1
 8000c3a:	d900      	bls.n	8000c3e <__aeabi_fmul+0x6e>
 8000c3c:	e0bd      	b.n	8000dba <__aeabi_fmul+0x1ea>
 8000c3e:	2902      	cmp	r1, #2
 8000c40:	d06e      	beq.n	8000d20 <__aeabi_fmul+0x150>
 8000c42:	2901      	cmp	r1, #1
 8000c44:	d12c      	bne.n	8000ca0 <__aeabi_fmul+0xd0>
 8000c46:	2000      	movs	r0, #0
 8000c48:	2200      	movs	r2, #0
 8000c4a:	05c0      	lsls	r0, r0, #23
 8000c4c:	07f6      	lsls	r6, r6, #31
 8000c4e:	4310      	orrs	r0, r2
 8000c50:	4330      	orrs	r0, r6
 8000c52:	bce0      	pop	{r5, r6, r7}
 8000c54:	46ba      	mov	sl, r7
 8000c56:	46b1      	mov	r9, r6
 8000c58:	46a8      	mov	r8, r5
 8000c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5c:	002b      	movs	r3, r5
 8000c5e:	33ff      	adds	r3, #255	@ 0xff
 8000c60:	2c00      	cmp	r4, #0
 8000c62:	d065      	beq.n	8000d30 <__aeabi_fmul+0x160>
 8000c64:	2203      	movs	r2, #3
 8000c66:	4641      	mov	r1, r8
 8000c68:	4311      	orrs	r1, r2
 8000c6a:	0032      	movs	r2, r6
 8000c6c:	3501      	adds	r5, #1
 8000c6e:	4688      	mov	r8, r1
 8000c70:	407a      	eors	r2, r7
 8000c72:	35ff      	adds	r5, #255	@ 0xff
 8000c74:	290a      	cmp	r1, #10
 8000c76:	dd00      	ble.n	8000c7a <__aeabi_fmul+0xaa>
 8000c78:	e0d8      	b.n	8000e2c <__aeabi_fmul+0x25c>
 8000c7a:	0016      	movs	r6, r2
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	4640      	mov	r0, r8
 8000c80:	2201      	movs	r2, #1
 8000c82:	4082      	lsls	r2, r0
 8000c84:	20a6      	movs	r0, #166	@ 0xa6
 8000c86:	00c0      	lsls	r0, r0, #3
 8000c88:	4202      	tst	r2, r0
 8000c8a:	d020      	beq.n	8000cce <__aeabi_fmul+0xfe>
 8000c8c:	4653      	mov	r3, sl
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d046      	beq.n	8000d20 <__aeabi_fmul+0x150>
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d100      	bne.n	8000c98 <__aeabi_fmul+0xc8>
 8000c96:	e0bb      	b.n	8000e10 <__aeabi_fmul+0x240>
 8000c98:	4651      	mov	r1, sl
 8000c9a:	464c      	mov	r4, r9
 8000c9c:	2901      	cmp	r1, #1
 8000c9e:	d0d2      	beq.n	8000c46 <__aeabi_fmul+0x76>
 8000ca0:	002b      	movs	r3, r5
 8000ca2:	337f      	adds	r3, #127	@ 0x7f
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	dd70      	ble.n	8000d8a <__aeabi_fmul+0x1ba>
 8000ca8:	0762      	lsls	r2, r4, #29
 8000caa:	d004      	beq.n	8000cb6 <__aeabi_fmul+0xe6>
 8000cac:	220f      	movs	r2, #15
 8000cae:	4022      	ands	r2, r4
 8000cb0:	2a04      	cmp	r2, #4
 8000cb2:	d000      	beq.n	8000cb6 <__aeabi_fmul+0xe6>
 8000cb4:	3404      	adds	r4, #4
 8000cb6:	0122      	lsls	r2, r4, #4
 8000cb8:	d503      	bpl.n	8000cc2 <__aeabi_fmul+0xf2>
 8000cba:	4b63      	ldr	r3, [pc, #396]	@ (8000e48 <__aeabi_fmul+0x278>)
 8000cbc:	401c      	ands	r4, r3
 8000cbe:	002b      	movs	r3, r5
 8000cc0:	3380      	adds	r3, #128	@ 0x80
 8000cc2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cc4:	dc2c      	bgt.n	8000d20 <__aeabi_fmul+0x150>
 8000cc6:	01a2      	lsls	r2, r4, #6
 8000cc8:	0a52      	lsrs	r2, r2, #9
 8000cca:	b2d8      	uxtb	r0, r3
 8000ccc:	e7bd      	b.n	8000c4a <__aeabi_fmul+0x7a>
 8000cce:	2090      	movs	r0, #144	@ 0x90
 8000cd0:	0080      	lsls	r0, r0, #2
 8000cd2:	4202      	tst	r2, r0
 8000cd4:	d127      	bne.n	8000d26 <__aeabi_fmul+0x156>
 8000cd6:	38b9      	subs	r0, #185	@ 0xb9
 8000cd8:	38ff      	subs	r0, #255	@ 0xff
 8000cda:	4210      	tst	r0, r2
 8000cdc:	d06d      	beq.n	8000dba <__aeabi_fmul+0x1ea>
 8000cde:	003e      	movs	r6, r7
 8000ce0:	46a1      	mov	r9, r4
 8000ce2:	468a      	mov	sl, r1
 8000ce4:	e7d2      	b.n	8000c8c <__aeabi_fmul+0xbc>
 8000ce6:	2c00      	cmp	r4, #0
 8000ce8:	d141      	bne.n	8000d6e <__aeabi_fmul+0x19e>
 8000cea:	2301      	movs	r3, #1
 8000cec:	4642      	mov	r2, r8
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	4690      	mov	r8, r2
 8000cf2:	002b      	movs	r3, r5
 8000cf4:	4642      	mov	r2, r8
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	1c5d      	adds	r5, r3, #1
 8000cfa:	2a0a      	cmp	r2, #10
 8000cfc:	dd97      	ble.n	8000c2e <__aeabi_fmul+0x5e>
 8000cfe:	e7c5      	b.n	8000c8c <__aeabi_fmul+0xbc>
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d126      	bne.n	8000d52 <__aeabi_fmul+0x182>
 8000d04:	2304      	movs	r3, #4
 8000d06:	4698      	mov	r8, r3
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	2500      	movs	r5, #0
 8000d0c:	469a      	mov	sl, r3
 8000d0e:	e77a      	b.n	8000c06 <__aeabi_fmul+0x36>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d118      	bne.n	8000d46 <__aeabi_fmul+0x176>
 8000d14:	2308      	movs	r3, #8
 8000d16:	4698      	mov	r8, r3
 8000d18:	3b06      	subs	r3, #6
 8000d1a:	25ff      	movs	r5, #255	@ 0xff
 8000d1c:	469a      	mov	sl, r3
 8000d1e:	e772      	b.n	8000c06 <__aeabi_fmul+0x36>
 8000d20:	20ff      	movs	r0, #255	@ 0xff
 8000d22:	2200      	movs	r2, #0
 8000d24:	e791      	b.n	8000c4a <__aeabi_fmul+0x7a>
 8000d26:	2280      	movs	r2, #128	@ 0x80
 8000d28:	2600      	movs	r6, #0
 8000d2a:	20ff      	movs	r0, #255	@ 0xff
 8000d2c:	03d2      	lsls	r2, r2, #15
 8000d2e:	e78c      	b.n	8000c4a <__aeabi_fmul+0x7a>
 8000d30:	4641      	mov	r1, r8
 8000d32:	2202      	movs	r2, #2
 8000d34:	3501      	adds	r5, #1
 8000d36:	4311      	orrs	r1, r2
 8000d38:	4688      	mov	r8, r1
 8000d3a:	35ff      	adds	r5, #255	@ 0xff
 8000d3c:	290a      	cmp	r1, #10
 8000d3e:	dca5      	bgt.n	8000c8c <__aeabi_fmul+0xbc>
 8000d40:	2102      	movs	r1, #2
 8000d42:	407e      	eors	r6, r7
 8000d44:	e774      	b.n	8000c30 <__aeabi_fmul+0x60>
 8000d46:	230c      	movs	r3, #12
 8000d48:	4698      	mov	r8, r3
 8000d4a:	3b09      	subs	r3, #9
 8000d4c:	25ff      	movs	r5, #255	@ 0xff
 8000d4e:	469a      	mov	sl, r3
 8000d50:	e759      	b.n	8000c06 <__aeabi_fmul+0x36>
 8000d52:	0018      	movs	r0, r3
 8000d54:	f002 f9e8 	bl	8003128 <__clzsi2>
 8000d58:	464a      	mov	r2, r9
 8000d5a:	1f43      	subs	r3, r0, #5
 8000d5c:	2576      	movs	r5, #118	@ 0x76
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	2300      	movs	r3, #0
 8000d62:	426d      	negs	r5, r5
 8000d64:	4691      	mov	r9, r2
 8000d66:	4698      	mov	r8, r3
 8000d68:	469a      	mov	sl, r3
 8000d6a:	1a2d      	subs	r5, r5, r0
 8000d6c:	e74b      	b.n	8000c06 <__aeabi_fmul+0x36>
 8000d6e:	0020      	movs	r0, r4
 8000d70:	f002 f9da 	bl	8003128 <__clzsi2>
 8000d74:	4642      	mov	r2, r8
 8000d76:	1f43      	subs	r3, r0, #5
 8000d78:	409c      	lsls	r4, r3
 8000d7a:	1a2b      	subs	r3, r5, r0
 8000d7c:	3b76      	subs	r3, #118	@ 0x76
 8000d7e:	2100      	movs	r1, #0
 8000d80:	1c5d      	adds	r5, r3, #1
 8000d82:	2a0a      	cmp	r2, #10
 8000d84:	dc00      	bgt.n	8000d88 <__aeabi_fmul+0x1b8>
 8000d86:	e752      	b.n	8000c2e <__aeabi_fmul+0x5e>
 8000d88:	e780      	b.n	8000c8c <__aeabi_fmul+0xbc>
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b1b      	cmp	r3, #27
 8000d90:	dd00      	ble.n	8000d94 <__aeabi_fmul+0x1c4>
 8000d92:	e758      	b.n	8000c46 <__aeabi_fmul+0x76>
 8000d94:	359e      	adds	r5, #158	@ 0x9e
 8000d96:	0022      	movs	r2, r4
 8000d98:	40ac      	lsls	r4, r5
 8000d9a:	40da      	lsrs	r2, r3
 8000d9c:	1e63      	subs	r3, r4, #1
 8000d9e:	419c      	sbcs	r4, r3
 8000da0:	4322      	orrs	r2, r4
 8000da2:	0753      	lsls	r3, r2, #29
 8000da4:	d004      	beq.n	8000db0 <__aeabi_fmul+0x1e0>
 8000da6:	230f      	movs	r3, #15
 8000da8:	4013      	ands	r3, r2
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d000      	beq.n	8000db0 <__aeabi_fmul+0x1e0>
 8000dae:	3204      	adds	r2, #4
 8000db0:	0153      	lsls	r3, r2, #5
 8000db2:	d537      	bpl.n	8000e24 <__aeabi_fmul+0x254>
 8000db4:	2001      	movs	r0, #1
 8000db6:	2200      	movs	r2, #0
 8000db8:	e747      	b.n	8000c4a <__aeabi_fmul+0x7a>
 8000dba:	0c21      	lsrs	r1, r4, #16
 8000dbc:	464a      	mov	r2, r9
 8000dbe:	0424      	lsls	r4, r4, #16
 8000dc0:	0c24      	lsrs	r4, r4, #16
 8000dc2:	0027      	movs	r7, r4
 8000dc4:	0c10      	lsrs	r0, r2, #16
 8000dc6:	0412      	lsls	r2, r2, #16
 8000dc8:	0c12      	lsrs	r2, r2, #16
 8000dca:	4344      	muls	r4, r0
 8000dcc:	4357      	muls	r7, r2
 8000dce:	4348      	muls	r0, r1
 8000dd0:	4351      	muls	r1, r2
 8000dd2:	0c3a      	lsrs	r2, r7, #16
 8000dd4:	1909      	adds	r1, r1, r4
 8000dd6:	1852      	adds	r2, r2, r1
 8000dd8:	4294      	cmp	r4, r2
 8000dda:	d903      	bls.n	8000de4 <__aeabi_fmul+0x214>
 8000ddc:	2180      	movs	r1, #128	@ 0x80
 8000dde:	0249      	lsls	r1, r1, #9
 8000de0:	468c      	mov	ip, r1
 8000de2:	4460      	add	r0, ip
 8000de4:	043f      	lsls	r7, r7, #16
 8000de6:	0411      	lsls	r1, r2, #16
 8000de8:	0c3f      	lsrs	r7, r7, #16
 8000dea:	19c9      	adds	r1, r1, r7
 8000dec:	018c      	lsls	r4, r1, #6
 8000dee:	1e67      	subs	r7, r4, #1
 8000df0:	41bc      	sbcs	r4, r7
 8000df2:	0c12      	lsrs	r2, r2, #16
 8000df4:	0e89      	lsrs	r1, r1, #26
 8000df6:	1812      	adds	r2, r2, r0
 8000df8:	430c      	orrs	r4, r1
 8000dfa:	0192      	lsls	r2, r2, #6
 8000dfc:	4314      	orrs	r4, r2
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	d50e      	bpl.n	8000e20 <__aeabi_fmul+0x250>
 8000e02:	2301      	movs	r3, #1
 8000e04:	0862      	lsrs	r2, r4, #1
 8000e06:	401c      	ands	r4, r3
 8000e08:	4314      	orrs	r4, r2
 8000e0a:	e749      	b.n	8000ca0 <__aeabi_fmul+0xd0>
 8000e0c:	003e      	movs	r6, r7
 8000e0e:	46a1      	mov	r9, r4
 8000e10:	2280      	movs	r2, #128	@ 0x80
 8000e12:	464b      	mov	r3, r9
 8000e14:	03d2      	lsls	r2, r2, #15
 8000e16:	431a      	orrs	r2, r3
 8000e18:	0252      	lsls	r2, r2, #9
 8000e1a:	20ff      	movs	r0, #255	@ 0xff
 8000e1c:	0a52      	lsrs	r2, r2, #9
 8000e1e:	e714      	b.n	8000c4a <__aeabi_fmul+0x7a>
 8000e20:	001d      	movs	r5, r3
 8000e22:	e73d      	b.n	8000ca0 <__aeabi_fmul+0xd0>
 8000e24:	0192      	lsls	r2, r2, #6
 8000e26:	2000      	movs	r0, #0
 8000e28:	0a52      	lsrs	r2, r2, #9
 8000e2a:	e70e      	b.n	8000c4a <__aeabi_fmul+0x7a>
 8000e2c:	290f      	cmp	r1, #15
 8000e2e:	d1ed      	bne.n	8000e0c <__aeabi_fmul+0x23c>
 8000e30:	2280      	movs	r2, #128	@ 0x80
 8000e32:	464b      	mov	r3, r9
 8000e34:	03d2      	lsls	r2, r2, #15
 8000e36:	4213      	tst	r3, r2
 8000e38:	d0ea      	beq.n	8000e10 <__aeabi_fmul+0x240>
 8000e3a:	4214      	tst	r4, r2
 8000e3c:	d1e8      	bne.n	8000e10 <__aeabi_fmul+0x240>
 8000e3e:	003e      	movs	r6, r7
 8000e40:	20ff      	movs	r0, #255	@ 0xff
 8000e42:	4322      	orrs	r2, r4
 8000e44:	e701      	b.n	8000c4a <__aeabi_fmul+0x7a>
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	f7ffffff 	.word	0xf7ffffff

08000e4c <__aeabi_fsub>:
 8000e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4e:	4647      	mov	r7, r8
 8000e50:	46ce      	mov	lr, r9
 8000e52:	024e      	lsls	r6, r1, #9
 8000e54:	0243      	lsls	r3, r0, #9
 8000e56:	0045      	lsls	r5, r0, #1
 8000e58:	0a72      	lsrs	r2, r6, #9
 8000e5a:	0fc4      	lsrs	r4, r0, #31
 8000e5c:	0048      	lsls	r0, r1, #1
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	4694      	mov	ip, r2
 8000e62:	0a5f      	lsrs	r7, r3, #9
 8000e64:	0e2d      	lsrs	r5, r5, #24
 8000e66:	099b      	lsrs	r3, r3, #6
 8000e68:	0e00      	lsrs	r0, r0, #24
 8000e6a:	0fc9      	lsrs	r1, r1, #31
 8000e6c:	09b6      	lsrs	r6, r6, #6
 8000e6e:	28ff      	cmp	r0, #255	@ 0xff
 8000e70:	d024      	beq.n	8000ebc <__aeabi_fsub+0x70>
 8000e72:	2201      	movs	r2, #1
 8000e74:	4051      	eors	r1, r2
 8000e76:	1a2a      	subs	r2, r5, r0
 8000e78:	428c      	cmp	r4, r1
 8000e7a:	d00f      	beq.n	8000e9c <__aeabi_fsub+0x50>
 8000e7c:	2a00      	cmp	r2, #0
 8000e7e:	dc00      	bgt.n	8000e82 <__aeabi_fsub+0x36>
 8000e80:	e16a      	b.n	8001158 <__aeabi_fsub+0x30c>
 8000e82:	2800      	cmp	r0, #0
 8000e84:	d135      	bne.n	8000ef2 <__aeabi_fsub+0xa6>
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_fsub+0x40>
 8000e8a:	e0a2      	b.n	8000fd2 <__aeabi_fsub+0x186>
 8000e8c:	1e51      	subs	r1, r2, #1
 8000e8e:	2a01      	cmp	r2, #1
 8000e90:	d100      	bne.n	8000e94 <__aeabi_fsub+0x48>
 8000e92:	e124      	b.n	80010de <__aeabi_fsub+0x292>
 8000e94:	2aff      	cmp	r2, #255	@ 0xff
 8000e96:	d021      	beq.n	8000edc <__aeabi_fsub+0x90>
 8000e98:	000a      	movs	r2, r1
 8000e9a:	e02f      	b.n	8000efc <__aeabi_fsub+0xb0>
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	dc00      	bgt.n	8000ea2 <__aeabi_fsub+0x56>
 8000ea0:	e167      	b.n	8001172 <__aeabi_fsub+0x326>
 8000ea2:	2800      	cmp	r0, #0
 8000ea4:	d05e      	beq.n	8000f64 <__aeabi_fsub+0x118>
 8000ea6:	2dff      	cmp	r5, #255	@ 0xff
 8000ea8:	d018      	beq.n	8000edc <__aeabi_fsub+0x90>
 8000eaa:	2180      	movs	r1, #128	@ 0x80
 8000eac:	04c9      	lsls	r1, r1, #19
 8000eae:	430e      	orrs	r6, r1
 8000eb0:	2a1b      	cmp	r2, #27
 8000eb2:	dc00      	bgt.n	8000eb6 <__aeabi_fsub+0x6a>
 8000eb4:	e076      	b.n	8000fa4 <__aeabi_fsub+0x158>
 8000eb6:	002a      	movs	r2, r5
 8000eb8:	3301      	adds	r3, #1
 8000eba:	e032      	b.n	8000f22 <__aeabi_fsub+0xd6>
 8000ebc:	002a      	movs	r2, r5
 8000ebe:	3aff      	subs	r2, #255	@ 0xff
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	d042      	beq.n	8000f4c <__aeabi_fsub+0x100>
 8000ec6:	428c      	cmp	r4, r1
 8000ec8:	d055      	beq.n	8000f76 <__aeabi_fsub+0x12a>
 8000eca:	464a      	mov	r2, r9
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_fsub+0x86>
 8000ed0:	e09c      	b.n	800100c <__aeabi_fsub+0x1c0>
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_fsub+0x8c>
 8000ed6:	e077      	b.n	8000fc8 <__aeabi_fsub+0x17c>
 8000ed8:	000c      	movs	r4, r1
 8000eda:	0033      	movs	r3, r6
 8000edc:	08db      	lsrs	r3, r3, #3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_fsub+0x98>
 8000ee2:	e06e      	b.n	8000fc2 <__aeabi_fsub+0x176>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	03d2      	lsls	r2, r2, #15
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	025b      	lsls	r3, r3, #9
 8000eec:	20ff      	movs	r0, #255	@ 0xff
 8000eee:	0a5b      	lsrs	r3, r3, #9
 8000ef0:	e024      	b.n	8000f3c <__aeabi_fsub+0xf0>
 8000ef2:	2dff      	cmp	r5, #255	@ 0xff
 8000ef4:	d0f2      	beq.n	8000edc <__aeabi_fsub+0x90>
 8000ef6:	2180      	movs	r1, #128	@ 0x80
 8000ef8:	04c9      	lsls	r1, r1, #19
 8000efa:	430e      	orrs	r6, r1
 8000efc:	2101      	movs	r1, #1
 8000efe:	2a1b      	cmp	r2, #27
 8000f00:	dc08      	bgt.n	8000f14 <__aeabi_fsub+0xc8>
 8000f02:	0031      	movs	r1, r6
 8000f04:	2020      	movs	r0, #32
 8000f06:	40d1      	lsrs	r1, r2
 8000f08:	1a82      	subs	r2, r0, r2
 8000f0a:	4096      	lsls	r6, r2
 8000f0c:	0032      	movs	r2, r6
 8000f0e:	1e50      	subs	r0, r2, #1
 8000f10:	4182      	sbcs	r2, r0
 8000f12:	4311      	orrs	r1, r2
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	015a      	lsls	r2, r3, #5
 8000f18:	d460      	bmi.n	8000fdc <__aeabi_fsub+0x190>
 8000f1a:	2107      	movs	r1, #7
 8000f1c:	002a      	movs	r2, r5
 8000f1e:	4019      	ands	r1, r3
 8000f20:	d057      	beq.n	8000fd2 <__aeabi_fsub+0x186>
 8000f22:	210f      	movs	r1, #15
 8000f24:	4019      	ands	r1, r3
 8000f26:	2904      	cmp	r1, #4
 8000f28:	d000      	beq.n	8000f2c <__aeabi_fsub+0xe0>
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	0159      	lsls	r1, r3, #5
 8000f2e:	d550      	bpl.n	8000fd2 <__aeabi_fsub+0x186>
 8000f30:	1c50      	adds	r0, r2, #1
 8000f32:	2afe      	cmp	r2, #254	@ 0xfe
 8000f34:	d045      	beq.n	8000fc2 <__aeabi_fsub+0x176>
 8000f36:	019b      	lsls	r3, r3, #6
 8000f38:	b2c0      	uxtb	r0, r0
 8000f3a:	0a5b      	lsrs	r3, r3, #9
 8000f3c:	05c0      	lsls	r0, r0, #23
 8000f3e:	4318      	orrs	r0, r3
 8000f40:	07e4      	lsls	r4, r4, #31
 8000f42:	4320      	orrs	r0, r4
 8000f44:	bcc0      	pop	{r6, r7}
 8000f46:	46b9      	mov	r9, r7
 8000f48:	46b0      	mov	r8, r6
 8000f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4051      	eors	r1, r2
 8000f50:	428c      	cmp	r4, r1
 8000f52:	d1ba      	bne.n	8000eca <__aeabi_fsub+0x7e>
 8000f54:	464a      	mov	r2, r9
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	d010      	beq.n	8000f7c <__aeabi_fsub+0x130>
 8000f5a:	2d00      	cmp	r5, #0
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_fsub+0x114>
 8000f5e:	e098      	b.n	8001092 <__aeabi_fsub+0x246>
 8000f60:	2300      	movs	r3, #0
 8000f62:	e7bb      	b.n	8000edc <__aeabi_fsub+0x90>
 8000f64:	2e00      	cmp	r6, #0
 8000f66:	d034      	beq.n	8000fd2 <__aeabi_fsub+0x186>
 8000f68:	1e51      	subs	r1, r2, #1
 8000f6a:	2a01      	cmp	r2, #1
 8000f6c:	d06e      	beq.n	800104c <__aeabi_fsub+0x200>
 8000f6e:	2aff      	cmp	r2, #255	@ 0xff
 8000f70:	d0b4      	beq.n	8000edc <__aeabi_fsub+0x90>
 8000f72:	000a      	movs	r2, r1
 8000f74:	e79c      	b.n	8000eb0 <__aeabi_fsub+0x64>
 8000f76:	2a00      	cmp	r2, #0
 8000f78:	d000      	beq.n	8000f7c <__aeabi_fsub+0x130>
 8000f7a:	e088      	b.n	800108e <__aeabi_fsub+0x242>
 8000f7c:	20fe      	movs	r0, #254	@ 0xfe
 8000f7e:	1c6a      	adds	r2, r5, #1
 8000f80:	4210      	tst	r0, r2
 8000f82:	d000      	beq.n	8000f86 <__aeabi_fsub+0x13a>
 8000f84:	e092      	b.n	80010ac <__aeabi_fsub+0x260>
 8000f86:	2d00      	cmp	r5, #0
 8000f88:	d000      	beq.n	8000f8c <__aeabi_fsub+0x140>
 8000f8a:	e0a4      	b.n	80010d6 <__aeabi_fsub+0x28a>
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fsub+0x146>
 8000f90:	e0cb      	b.n	800112a <__aeabi_fsub+0x2de>
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d000      	beq.n	8000f98 <__aeabi_fsub+0x14c>
 8000f96:	e0ca      	b.n	800112e <__aeabi_fsub+0x2e2>
 8000f98:	2200      	movs	r2, #0
 8000f9a:	08db      	lsrs	r3, r3, #3
 8000f9c:	025b      	lsls	r3, r3, #9
 8000f9e:	0a5b      	lsrs	r3, r3, #9
 8000fa0:	b2d0      	uxtb	r0, r2
 8000fa2:	e7cb      	b.n	8000f3c <__aeabi_fsub+0xf0>
 8000fa4:	0031      	movs	r1, r6
 8000fa6:	2020      	movs	r0, #32
 8000fa8:	40d1      	lsrs	r1, r2
 8000faa:	1a82      	subs	r2, r0, r2
 8000fac:	4096      	lsls	r6, r2
 8000fae:	0032      	movs	r2, r6
 8000fb0:	1e50      	subs	r0, r2, #1
 8000fb2:	4182      	sbcs	r2, r0
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	189b      	adds	r3, r3, r2
 8000fb8:	015a      	lsls	r2, r3, #5
 8000fba:	d5ae      	bpl.n	8000f1a <__aeabi_fsub+0xce>
 8000fbc:	1c6a      	adds	r2, r5, #1
 8000fbe:	2dfe      	cmp	r5, #254	@ 0xfe
 8000fc0:	d14a      	bne.n	8001058 <__aeabi_fsub+0x20c>
 8000fc2:	20ff      	movs	r0, #255	@ 0xff
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e7b9      	b.n	8000f3c <__aeabi_fsub+0xf0>
 8000fc8:	22ff      	movs	r2, #255	@ 0xff
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d14b      	bne.n	8001066 <__aeabi_fsub+0x21a>
 8000fce:	000c      	movs	r4, r1
 8000fd0:	0033      	movs	r3, r6
 8000fd2:	08db      	lsrs	r3, r3, #3
 8000fd4:	2aff      	cmp	r2, #255	@ 0xff
 8000fd6:	d100      	bne.n	8000fda <__aeabi_fsub+0x18e>
 8000fd8:	e781      	b.n	8000ede <__aeabi_fsub+0x92>
 8000fda:	e7df      	b.n	8000f9c <__aeabi_fsub+0x150>
 8000fdc:	019f      	lsls	r7, r3, #6
 8000fde:	09bf      	lsrs	r7, r7, #6
 8000fe0:	0038      	movs	r0, r7
 8000fe2:	f002 f8a1 	bl	8003128 <__clzsi2>
 8000fe6:	3805      	subs	r0, #5
 8000fe8:	4087      	lsls	r7, r0
 8000fea:	4285      	cmp	r5, r0
 8000fec:	dc21      	bgt.n	8001032 <__aeabi_fsub+0x1e6>
 8000fee:	003b      	movs	r3, r7
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	1b42      	subs	r2, r0, r5
 8000ff4:	3201      	adds	r2, #1
 8000ff6:	40d3      	lsrs	r3, r2
 8000ff8:	1a8a      	subs	r2, r1, r2
 8000ffa:	4097      	lsls	r7, r2
 8000ffc:	1e7a      	subs	r2, r7, #1
 8000ffe:	4197      	sbcs	r7, r2
 8001000:	2200      	movs	r2, #0
 8001002:	433b      	orrs	r3, r7
 8001004:	0759      	lsls	r1, r3, #29
 8001006:	d000      	beq.n	800100a <__aeabi_fsub+0x1be>
 8001008:	e78b      	b.n	8000f22 <__aeabi_fsub+0xd6>
 800100a:	e78f      	b.n	8000f2c <__aeabi_fsub+0xe0>
 800100c:	20fe      	movs	r0, #254	@ 0xfe
 800100e:	1c6a      	adds	r2, r5, #1
 8001010:	4210      	tst	r0, r2
 8001012:	d112      	bne.n	800103a <__aeabi_fsub+0x1ee>
 8001014:	2d00      	cmp	r5, #0
 8001016:	d152      	bne.n	80010be <__aeabi_fsub+0x272>
 8001018:	2b00      	cmp	r3, #0
 800101a:	d07c      	beq.n	8001116 <__aeabi_fsub+0x2ca>
 800101c:	2e00      	cmp	r6, #0
 800101e:	d0bb      	beq.n	8000f98 <__aeabi_fsub+0x14c>
 8001020:	1b9a      	subs	r2, r3, r6
 8001022:	0150      	lsls	r0, r2, #5
 8001024:	d400      	bmi.n	8001028 <__aeabi_fsub+0x1dc>
 8001026:	e08b      	b.n	8001140 <__aeabi_fsub+0x2f4>
 8001028:	2401      	movs	r4, #1
 800102a:	2200      	movs	r2, #0
 800102c:	1af3      	subs	r3, r6, r3
 800102e:	400c      	ands	r4, r1
 8001030:	e7e8      	b.n	8001004 <__aeabi_fsub+0x1b8>
 8001032:	4b56      	ldr	r3, [pc, #344]	@ (800118c <__aeabi_fsub+0x340>)
 8001034:	1a2a      	subs	r2, r5, r0
 8001036:	403b      	ands	r3, r7
 8001038:	e7e4      	b.n	8001004 <__aeabi_fsub+0x1b8>
 800103a:	1b9f      	subs	r7, r3, r6
 800103c:	017a      	lsls	r2, r7, #5
 800103e:	d446      	bmi.n	80010ce <__aeabi_fsub+0x282>
 8001040:	2f00      	cmp	r7, #0
 8001042:	d1cd      	bne.n	8000fe0 <__aeabi_fsub+0x194>
 8001044:	2400      	movs	r4, #0
 8001046:	2000      	movs	r0, #0
 8001048:	2300      	movs	r3, #0
 800104a:	e777      	b.n	8000f3c <__aeabi_fsub+0xf0>
 800104c:	199b      	adds	r3, r3, r6
 800104e:	2501      	movs	r5, #1
 8001050:	3201      	adds	r2, #1
 8001052:	0159      	lsls	r1, r3, #5
 8001054:	d400      	bmi.n	8001058 <__aeabi_fsub+0x20c>
 8001056:	e760      	b.n	8000f1a <__aeabi_fsub+0xce>
 8001058:	2101      	movs	r1, #1
 800105a:	484d      	ldr	r0, [pc, #308]	@ (8001190 <__aeabi_fsub+0x344>)
 800105c:	4019      	ands	r1, r3
 800105e:	085b      	lsrs	r3, r3, #1
 8001060:	4003      	ands	r3, r0
 8001062:	430b      	orrs	r3, r1
 8001064:	e7ce      	b.n	8001004 <__aeabi_fsub+0x1b8>
 8001066:	1e57      	subs	r7, r2, #1
 8001068:	2a01      	cmp	r2, #1
 800106a:	d05a      	beq.n	8001122 <__aeabi_fsub+0x2d6>
 800106c:	000c      	movs	r4, r1
 800106e:	2aff      	cmp	r2, #255	@ 0xff
 8001070:	d033      	beq.n	80010da <__aeabi_fsub+0x28e>
 8001072:	2201      	movs	r2, #1
 8001074:	2f1b      	cmp	r7, #27
 8001076:	dc07      	bgt.n	8001088 <__aeabi_fsub+0x23c>
 8001078:	2120      	movs	r1, #32
 800107a:	1bc9      	subs	r1, r1, r7
 800107c:	001a      	movs	r2, r3
 800107e:	408b      	lsls	r3, r1
 8001080:	40fa      	lsrs	r2, r7
 8001082:	1e59      	subs	r1, r3, #1
 8001084:	418b      	sbcs	r3, r1
 8001086:	431a      	orrs	r2, r3
 8001088:	0005      	movs	r5, r0
 800108a:	1ab3      	subs	r3, r6, r2
 800108c:	e743      	b.n	8000f16 <__aeabi_fsub+0xca>
 800108e:	2d00      	cmp	r5, #0
 8001090:	d123      	bne.n	80010da <__aeabi_fsub+0x28e>
 8001092:	22ff      	movs	r2, #255	@ 0xff
 8001094:	2b00      	cmp	r3, #0
 8001096:	d09b      	beq.n	8000fd0 <__aeabi_fsub+0x184>
 8001098:	1e51      	subs	r1, r2, #1
 800109a:	2a01      	cmp	r2, #1
 800109c:	d0d6      	beq.n	800104c <__aeabi_fsub+0x200>
 800109e:	2aff      	cmp	r2, #255	@ 0xff
 80010a0:	d01b      	beq.n	80010da <__aeabi_fsub+0x28e>
 80010a2:	291b      	cmp	r1, #27
 80010a4:	dd2c      	ble.n	8001100 <__aeabi_fsub+0x2b4>
 80010a6:	0002      	movs	r2, r0
 80010a8:	1c73      	adds	r3, r6, #1
 80010aa:	e73a      	b.n	8000f22 <__aeabi_fsub+0xd6>
 80010ac:	2aff      	cmp	r2, #255	@ 0xff
 80010ae:	d088      	beq.n	8000fc2 <__aeabi_fsub+0x176>
 80010b0:	199b      	adds	r3, r3, r6
 80010b2:	085b      	lsrs	r3, r3, #1
 80010b4:	0759      	lsls	r1, r3, #29
 80010b6:	d000      	beq.n	80010ba <__aeabi_fsub+0x26e>
 80010b8:	e733      	b.n	8000f22 <__aeabi_fsub+0xd6>
 80010ba:	08db      	lsrs	r3, r3, #3
 80010bc:	e76e      	b.n	8000f9c <__aeabi_fsub+0x150>
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d110      	bne.n	80010e4 <__aeabi_fsub+0x298>
 80010c2:	2e00      	cmp	r6, #0
 80010c4:	d043      	beq.n	800114e <__aeabi_fsub+0x302>
 80010c6:	2401      	movs	r4, #1
 80010c8:	0033      	movs	r3, r6
 80010ca:	400c      	ands	r4, r1
 80010cc:	e706      	b.n	8000edc <__aeabi_fsub+0x90>
 80010ce:	2401      	movs	r4, #1
 80010d0:	1af7      	subs	r7, r6, r3
 80010d2:	400c      	ands	r4, r1
 80010d4:	e784      	b.n	8000fe0 <__aeabi_fsub+0x194>
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d104      	bne.n	80010e4 <__aeabi_fsub+0x298>
 80010da:	0033      	movs	r3, r6
 80010dc:	e6fe      	b.n	8000edc <__aeabi_fsub+0x90>
 80010de:	2501      	movs	r5, #1
 80010e0:	1b9b      	subs	r3, r3, r6
 80010e2:	e718      	b.n	8000f16 <__aeabi_fsub+0xca>
 80010e4:	2e00      	cmp	r6, #0
 80010e6:	d100      	bne.n	80010ea <__aeabi_fsub+0x29e>
 80010e8:	e6f8      	b.n	8000edc <__aeabi_fsub+0x90>
 80010ea:	2280      	movs	r2, #128	@ 0x80
 80010ec:	03d2      	lsls	r2, r2, #15
 80010ee:	4297      	cmp	r7, r2
 80010f0:	d304      	bcc.n	80010fc <__aeabi_fsub+0x2b0>
 80010f2:	4594      	cmp	ip, r2
 80010f4:	d202      	bcs.n	80010fc <__aeabi_fsub+0x2b0>
 80010f6:	2401      	movs	r4, #1
 80010f8:	0033      	movs	r3, r6
 80010fa:	400c      	ands	r4, r1
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	e6f1      	b.n	8000ee4 <__aeabi_fsub+0x98>
 8001100:	001a      	movs	r2, r3
 8001102:	2520      	movs	r5, #32
 8001104:	40ca      	lsrs	r2, r1
 8001106:	1a69      	subs	r1, r5, r1
 8001108:	408b      	lsls	r3, r1
 800110a:	1e59      	subs	r1, r3, #1
 800110c:	418b      	sbcs	r3, r1
 800110e:	4313      	orrs	r3, r2
 8001110:	0005      	movs	r5, r0
 8001112:	199b      	adds	r3, r3, r6
 8001114:	e750      	b.n	8000fb8 <__aeabi_fsub+0x16c>
 8001116:	2e00      	cmp	r6, #0
 8001118:	d094      	beq.n	8001044 <__aeabi_fsub+0x1f8>
 800111a:	2401      	movs	r4, #1
 800111c:	0033      	movs	r3, r6
 800111e:	400c      	ands	r4, r1
 8001120:	e73a      	b.n	8000f98 <__aeabi_fsub+0x14c>
 8001122:	000c      	movs	r4, r1
 8001124:	2501      	movs	r5, #1
 8001126:	1af3      	subs	r3, r6, r3
 8001128:	e6f5      	b.n	8000f16 <__aeabi_fsub+0xca>
 800112a:	0033      	movs	r3, r6
 800112c:	e734      	b.n	8000f98 <__aeabi_fsub+0x14c>
 800112e:	199b      	adds	r3, r3, r6
 8001130:	2200      	movs	r2, #0
 8001132:	0159      	lsls	r1, r3, #5
 8001134:	d5c1      	bpl.n	80010ba <__aeabi_fsub+0x26e>
 8001136:	4a15      	ldr	r2, [pc, #84]	@ (800118c <__aeabi_fsub+0x340>)
 8001138:	4013      	ands	r3, r2
 800113a:	08db      	lsrs	r3, r3, #3
 800113c:	2201      	movs	r2, #1
 800113e:	e72d      	b.n	8000f9c <__aeabi_fsub+0x150>
 8001140:	2a00      	cmp	r2, #0
 8001142:	d100      	bne.n	8001146 <__aeabi_fsub+0x2fa>
 8001144:	e77e      	b.n	8001044 <__aeabi_fsub+0x1f8>
 8001146:	0013      	movs	r3, r2
 8001148:	2200      	movs	r2, #0
 800114a:	08db      	lsrs	r3, r3, #3
 800114c:	e726      	b.n	8000f9c <__aeabi_fsub+0x150>
 800114e:	2380      	movs	r3, #128	@ 0x80
 8001150:	2400      	movs	r4, #0
 8001152:	20ff      	movs	r0, #255	@ 0xff
 8001154:	03db      	lsls	r3, r3, #15
 8001156:	e6f1      	b.n	8000f3c <__aeabi_fsub+0xf0>
 8001158:	2a00      	cmp	r2, #0
 800115a:	d100      	bne.n	800115e <__aeabi_fsub+0x312>
 800115c:	e756      	b.n	800100c <__aeabi_fsub+0x1c0>
 800115e:	1b47      	subs	r7, r0, r5
 8001160:	003a      	movs	r2, r7
 8001162:	2d00      	cmp	r5, #0
 8001164:	d100      	bne.n	8001168 <__aeabi_fsub+0x31c>
 8001166:	e730      	b.n	8000fca <__aeabi_fsub+0x17e>
 8001168:	2280      	movs	r2, #128	@ 0x80
 800116a:	04d2      	lsls	r2, r2, #19
 800116c:	000c      	movs	r4, r1
 800116e:	4313      	orrs	r3, r2
 8001170:	e77f      	b.n	8001072 <__aeabi_fsub+0x226>
 8001172:	2a00      	cmp	r2, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_fsub+0x32c>
 8001176:	e701      	b.n	8000f7c <__aeabi_fsub+0x130>
 8001178:	1b41      	subs	r1, r0, r5
 800117a:	2d00      	cmp	r5, #0
 800117c:	d101      	bne.n	8001182 <__aeabi_fsub+0x336>
 800117e:	000a      	movs	r2, r1
 8001180:	e788      	b.n	8001094 <__aeabi_fsub+0x248>
 8001182:	2280      	movs	r2, #128	@ 0x80
 8001184:	04d2      	lsls	r2, r2, #19
 8001186:	4313      	orrs	r3, r2
 8001188:	e78b      	b.n	80010a2 <__aeabi_fsub+0x256>
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	fbffffff 	.word	0xfbffffff
 8001190:	7dffffff 	.word	0x7dffffff

08001194 <__aeabi_ui2f>:
 8001194:	b570      	push	{r4, r5, r6, lr}
 8001196:	1e04      	subs	r4, r0, #0
 8001198:	d00e      	beq.n	80011b8 <__aeabi_ui2f+0x24>
 800119a:	f001 ffc5 	bl	8003128 <__clzsi2>
 800119e:	239e      	movs	r3, #158	@ 0x9e
 80011a0:	0001      	movs	r1, r0
 80011a2:	1a1b      	subs	r3, r3, r0
 80011a4:	2b96      	cmp	r3, #150	@ 0x96
 80011a6:	dc0c      	bgt.n	80011c2 <__aeabi_ui2f+0x2e>
 80011a8:	2808      	cmp	r0, #8
 80011aa:	d02f      	beq.n	800120c <__aeabi_ui2f+0x78>
 80011ac:	3908      	subs	r1, #8
 80011ae:	408c      	lsls	r4, r1
 80011b0:	0264      	lsls	r4, r4, #9
 80011b2:	0a64      	lsrs	r4, r4, #9
 80011b4:	b2d8      	uxtb	r0, r3
 80011b6:	e001      	b.n	80011bc <__aeabi_ui2f+0x28>
 80011b8:	2000      	movs	r0, #0
 80011ba:	2400      	movs	r4, #0
 80011bc:	05c0      	lsls	r0, r0, #23
 80011be:	4320      	orrs	r0, r4
 80011c0:	bd70      	pop	{r4, r5, r6, pc}
 80011c2:	2b99      	cmp	r3, #153	@ 0x99
 80011c4:	dc16      	bgt.n	80011f4 <__aeabi_ui2f+0x60>
 80011c6:	1f42      	subs	r2, r0, #5
 80011c8:	2805      	cmp	r0, #5
 80011ca:	d000      	beq.n	80011ce <__aeabi_ui2f+0x3a>
 80011cc:	4094      	lsls	r4, r2
 80011ce:	0022      	movs	r2, r4
 80011d0:	4810      	ldr	r0, [pc, #64]	@ (8001214 <__aeabi_ui2f+0x80>)
 80011d2:	4002      	ands	r2, r0
 80011d4:	0765      	lsls	r5, r4, #29
 80011d6:	d009      	beq.n	80011ec <__aeabi_ui2f+0x58>
 80011d8:	250f      	movs	r5, #15
 80011da:	402c      	ands	r4, r5
 80011dc:	2c04      	cmp	r4, #4
 80011de:	d005      	beq.n	80011ec <__aeabi_ui2f+0x58>
 80011e0:	3204      	adds	r2, #4
 80011e2:	0154      	lsls	r4, r2, #5
 80011e4:	d502      	bpl.n	80011ec <__aeabi_ui2f+0x58>
 80011e6:	239f      	movs	r3, #159	@ 0x9f
 80011e8:	4002      	ands	r2, r0
 80011ea:	1a5b      	subs	r3, r3, r1
 80011ec:	0192      	lsls	r2, r2, #6
 80011ee:	0a54      	lsrs	r4, r2, #9
 80011f0:	b2d8      	uxtb	r0, r3
 80011f2:	e7e3      	b.n	80011bc <__aeabi_ui2f+0x28>
 80011f4:	0002      	movs	r2, r0
 80011f6:	0020      	movs	r0, r4
 80011f8:	321b      	adds	r2, #27
 80011fa:	4090      	lsls	r0, r2
 80011fc:	0002      	movs	r2, r0
 80011fe:	1e50      	subs	r0, r2, #1
 8001200:	4182      	sbcs	r2, r0
 8001202:	2005      	movs	r0, #5
 8001204:	1a40      	subs	r0, r0, r1
 8001206:	40c4      	lsrs	r4, r0
 8001208:	4314      	orrs	r4, r2
 800120a:	e7e0      	b.n	80011ce <__aeabi_ui2f+0x3a>
 800120c:	0264      	lsls	r4, r4, #9
 800120e:	2096      	movs	r0, #150	@ 0x96
 8001210:	0a64      	lsrs	r4, r4, #9
 8001212:	e7d3      	b.n	80011bc <__aeabi_ui2f+0x28>
 8001214:	fbffffff 	.word	0xfbffffff

08001218 <__aeabi_dadd>:
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	4657      	mov	r7, sl
 800121c:	464e      	mov	r6, r9
 800121e:	4645      	mov	r5, r8
 8001220:	46de      	mov	lr, fp
 8001222:	b5e0      	push	{r5, r6, r7, lr}
 8001224:	b083      	sub	sp, #12
 8001226:	9000      	str	r0, [sp, #0]
 8001228:	9101      	str	r1, [sp, #4]
 800122a:	030c      	lsls	r4, r1, #12
 800122c:	004f      	lsls	r7, r1, #1
 800122e:	0fce      	lsrs	r6, r1, #31
 8001230:	0a61      	lsrs	r1, r4, #9
 8001232:	9c00      	ldr	r4, [sp, #0]
 8001234:	031d      	lsls	r5, r3, #12
 8001236:	0f64      	lsrs	r4, r4, #29
 8001238:	430c      	orrs	r4, r1
 800123a:	9900      	ldr	r1, [sp, #0]
 800123c:	9200      	str	r2, [sp, #0]
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	00c8      	lsls	r0, r1, #3
 8001242:	0059      	lsls	r1, r3, #1
 8001244:	0d4b      	lsrs	r3, r1, #21
 8001246:	4699      	mov	r9, r3
 8001248:	9a00      	ldr	r2, [sp, #0]
 800124a:	9b01      	ldr	r3, [sp, #4]
 800124c:	0a6d      	lsrs	r5, r5, #9
 800124e:	0fd9      	lsrs	r1, r3, #31
 8001250:	0f53      	lsrs	r3, r2, #29
 8001252:	432b      	orrs	r3, r5
 8001254:	469a      	mov	sl, r3
 8001256:	9b00      	ldr	r3, [sp, #0]
 8001258:	0d7f      	lsrs	r7, r7, #21
 800125a:	00da      	lsls	r2, r3, #3
 800125c:	4694      	mov	ip, r2
 800125e:	464a      	mov	r2, r9
 8001260:	46b0      	mov	r8, r6
 8001262:	1aba      	subs	r2, r7, r2
 8001264:	428e      	cmp	r6, r1
 8001266:	d100      	bne.n	800126a <__aeabi_dadd+0x52>
 8001268:	e0b0      	b.n	80013cc <__aeabi_dadd+0x1b4>
 800126a:	2a00      	cmp	r2, #0
 800126c:	dc00      	bgt.n	8001270 <__aeabi_dadd+0x58>
 800126e:	e078      	b.n	8001362 <__aeabi_dadd+0x14a>
 8001270:	4649      	mov	r1, r9
 8001272:	2900      	cmp	r1, #0
 8001274:	d100      	bne.n	8001278 <__aeabi_dadd+0x60>
 8001276:	e0e9      	b.n	800144c <__aeabi_dadd+0x234>
 8001278:	49c9      	ldr	r1, [pc, #804]	@ (80015a0 <__aeabi_dadd+0x388>)
 800127a:	428f      	cmp	r7, r1
 800127c:	d100      	bne.n	8001280 <__aeabi_dadd+0x68>
 800127e:	e195      	b.n	80015ac <__aeabi_dadd+0x394>
 8001280:	2501      	movs	r5, #1
 8001282:	2a38      	cmp	r2, #56	@ 0x38
 8001284:	dc16      	bgt.n	80012b4 <__aeabi_dadd+0x9c>
 8001286:	2180      	movs	r1, #128	@ 0x80
 8001288:	4653      	mov	r3, sl
 800128a:	0409      	lsls	r1, r1, #16
 800128c:	430b      	orrs	r3, r1
 800128e:	469a      	mov	sl, r3
 8001290:	2a1f      	cmp	r2, #31
 8001292:	dd00      	ble.n	8001296 <__aeabi_dadd+0x7e>
 8001294:	e1e7      	b.n	8001666 <__aeabi_dadd+0x44e>
 8001296:	2120      	movs	r1, #32
 8001298:	4655      	mov	r5, sl
 800129a:	1a8b      	subs	r3, r1, r2
 800129c:	4661      	mov	r1, ip
 800129e:	409d      	lsls	r5, r3
 80012a0:	40d1      	lsrs	r1, r2
 80012a2:	430d      	orrs	r5, r1
 80012a4:	4661      	mov	r1, ip
 80012a6:	4099      	lsls	r1, r3
 80012a8:	1e4b      	subs	r3, r1, #1
 80012aa:	4199      	sbcs	r1, r3
 80012ac:	4653      	mov	r3, sl
 80012ae:	40d3      	lsrs	r3, r2
 80012b0:	430d      	orrs	r5, r1
 80012b2:	1ae4      	subs	r4, r4, r3
 80012b4:	1b45      	subs	r5, r0, r5
 80012b6:	42a8      	cmp	r0, r5
 80012b8:	4180      	sbcs	r0, r0
 80012ba:	4240      	negs	r0, r0
 80012bc:	1a24      	subs	r4, r4, r0
 80012be:	0223      	lsls	r3, r4, #8
 80012c0:	d400      	bmi.n	80012c4 <__aeabi_dadd+0xac>
 80012c2:	e10f      	b.n	80014e4 <__aeabi_dadd+0x2cc>
 80012c4:	0264      	lsls	r4, r4, #9
 80012c6:	0a64      	lsrs	r4, r4, #9
 80012c8:	2c00      	cmp	r4, #0
 80012ca:	d100      	bne.n	80012ce <__aeabi_dadd+0xb6>
 80012cc:	e139      	b.n	8001542 <__aeabi_dadd+0x32a>
 80012ce:	0020      	movs	r0, r4
 80012d0:	f001 ff2a 	bl	8003128 <__clzsi2>
 80012d4:	0003      	movs	r3, r0
 80012d6:	3b08      	subs	r3, #8
 80012d8:	2120      	movs	r1, #32
 80012da:	0028      	movs	r0, r5
 80012dc:	1aca      	subs	r2, r1, r3
 80012de:	40d0      	lsrs	r0, r2
 80012e0:	409c      	lsls	r4, r3
 80012e2:	0002      	movs	r2, r0
 80012e4:	409d      	lsls	r5, r3
 80012e6:	4322      	orrs	r2, r4
 80012e8:	429f      	cmp	r7, r3
 80012ea:	dd00      	ble.n	80012ee <__aeabi_dadd+0xd6>
 80012ec:	e173      	b.n	80015d6 <__aeabi_dadd+0x3be>
 80012ee:	1bd8      	subs	r0, r3, r7
 80012f0:	3001      	adds	r0, #1
 80012f2:	1a09      	subs	r1, r1, r0
 80012f4:	002c      	movs	r4, r5
 80012f6:	408d      	lsls	r5, r1
 80012f8:	40c4      	lsrs	r4, r0
 80012fa:	1e6b      	subs	r3, r5, #1
 80012fc:	419d      	sbcs	r5, r3
 80012fe:	0013      	movs	r3, r2
 8001300:	40c2      	lsrs	r2, r0
 8001302:	408b      	lsls	r3, r1
 8001304:	4325      	orrs	r5, r4
 8001306:	2700      	movs	r7, #0
 8001308:	0014      	movs	r4, r2
 800130a:	431d      	orrs	r5, r3
 800130c:	076b      	lsls	r3, r5, #29
 800130e:	d009      	beq.n	8001324 <__aeabi_dadd+0x10c>
 8001310:	230f      	movs	r3, #15
 8001312:	402b      	ands	r3, r5
 8001314:	2b04      	cmp	r3, #4
 8001316:	d005      	beq.n	8001324 <__aeabi_dadd+0x10c>
 8001318:	1d2b      	adds	r3, r5, #4
 800131a:	42ab      	cmp	r3, r5
 800131c:	41ad      	sbcs	r5, r5
 800131e:	426d      	negs	r5, r5
 8001320:	1964      	adds	r4, r4, r5
 8001322:	001d      	movs	r5, r3
 8001324:	0223      	lsls	r3, r4, #8
 8001326:	d400      	bmi.n	800132a <__aeabi_dadd+0x112>
 8001328:	e12d      	b.n	8001586 <__aeabi_dadd+0x36e>
 800132a:	4a9d      	ldr	r2, [pc, #628]	@ (80015a0 <__aeabi_dadd+0x388>)
 800132c:	3701      	adds	r7, #1
 800132e:	4297      	cmp	r7, r2
 8001330:	d100      	bne.n	8001334 <__aeabi_dadd+0x11c>
 8001332:	e0d3      	b.n	80014dc <__aeabi_dadd+0x2c4>
 8001334:	4646      	mov	r6, r8
 8001336:	499b      	ldr	r1, [pc, #620]	@ (80015a4 <__aeabi_dadd+0x38c>)
 8001338:	08ed      	lsrs	r5, r5, #3
 800133a:	4021      	ands	r1, r4
 800133c:	074a      	lsls	r2, r1, #29
 800133e:	432a      	orrs	r2, r5
 8001340:	057c      	lsls	r4, r7, #21
 8001342:	024d      	lsls	r5, r1, #9
 8001344:	0b2d      	lsrs	r5, r5, #12
 8001346:	0d64      	lsrs	r4, r4, #21
 8001348:	0524      	lsls	r4, r4, #20
 800134a:	432c      	orrs	r4, r5
 800134c:	07f6      	lsls	r6, r6, #31
 800134e:	4334      	orrs	r4, r6
 8001350:	0010      	movs	r0, r2
 8001352:	0021      	movs	r1, r4
 8001354:	b003      	add	sp, #12
 8001356:	bcf0      	pop	{r4, r5, r6, r7}
 8001358:	46bb      	mov	fp, r7
 800135a:	46b2      	mov	sl, r6
 800135c:	46a9      	mov	r9, r5
 800135e:	46a0      	mov	r8, r4
 8001360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001362:	2a00      	cmp	r2, #0
 8001364:	d100      	bne.n	8001368 <__aeabi_dadd+0x150>
 8001366:	e084      	b.n	8001472 <__aeabi_dadd+0x25a>
 8001368:	464a      	mov	r2, r9
 800136a:	1bd2      	subs	r2, r2, r7
 800136c:	2f00      	cmp	r7, #0
 800136e:	d000      	beq.n	8001372 <__aeabi_dadd+0x15a>
 8001370:	e16d      	b.n	800164e <__aeabi_dadd+0x436>
 8001372:	0025      	movs	r5, r4
 8001374:	4305      	orrs	r5, r0
 8001376:	d100      	bne.n	800137a <__aeabi_dadd+0x162>
 8001378:	e127      	b.n	80015ca <__aeabi_dadd+0x3b2>
 800137a:	1e56      	subs	r6, r2, #1
 800137c:	2a01      	cmp	r2, #1
 800137e:	d100      	bne.n	8001382 <__aeabi_dadd+0x16a>
 8001380:	e23b      	b.n	80017fa <__aeabi_dadd+0x5e2>
 8001382:	4d87      	ldr	r5, [pc, #540]	@ (80015a0 <__aeabi_dadd+0x388>)
 8001384:	42aa      	cmp	r2, r5
 8001386:	d100      	bne.n	800138a <__aeabi_dadd+0x172>
 8001388:	e26a      	b.n	8001860 <__aeabi_dadd+0x648>
 800138a:	2501      	movs	r5, #1
 800138c:	2e38      	cmp	r6, #56	@ 0x38
 800138e:	dc12      	bgt.n	80013b6 <__aeabi_dadd+0x19e>
 8001390:	0032      	movs	r2, r6
 8001392:	2a1f      	cmp	r2, #31
 8001394:	dd00      	ble.n	8001398 <__aeabi_dadd+0x180>
 8001396:	e1f8      	b.n	800178a <__aeabi_dadd+0x572>
 8001398:	2620      	movs	r6, #32
 800139a:	0025      	movs	r5, r4
 800139c:	1ab6      	subs	r6, r6, r2
 800139e:	0007      	movs	r7, r0
 80013a0:	4653      	mov	r3, sl
 80013a2:	40b0      	lsls	r0, r6
 80013a4:	40d4      	lsrs	r4, r2
 80013a6:	40b5      	lsls	r5, r6
 80013a8:	40d7      	lsrs	r7, r2
 80013aa:	1e46      	subs	r6, r0, #1
 80013ac:	41b0      	sbcs	r0, r6
 80013ae:	1b1b      	subs	r3, r3, r4
 80013b0:	469a      	mov	sl, r3
 80013b2:	433d      	orrs	r5, r7
 80013b4:	4305      	orrs	r5, r0
 80013b6:	4662      	mov	r2, ip
 80013b8:	1b55      	subs	r5, r2, r5
 80013ba:	45ac      	cmp	ip, r5
 80013bc:	4192      	sbcs	r2, r2
 80013be:	4653      	mov	r3, sl
 80013c0:	4252      	negs	r2, r2
 80013c2:	000e      	movs	r6, r1
 80013c4:	464f      	mov	r7, r9
 80013c6:	4688      	mov	r8, r1
 80013c8:	1a9c      	subs	r4, r3, r2
 80013ca:	e778      	b.n	80012be <__aeabi_dadd+0xa6>
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	dc00      	bgt.n	80013d2 <__aeabi_dadd+0x1ba>
 80013d0:	e08e      	b.n	80014f0 <__aeabi_dadd+0x2d8>
 80013d2:	4649      	mov	r1, r9
 80013d4:	2900      	cmp	r1, #0
 80013d6:	d175      	bne.n	80014c4 <__aeabi_dadd+0x2ac>
 80013d8:	4661      	mov	r1, ip
 80013da:	4653      	mov	r3, sl
 80013dc:	4319      	orrs	r1, r3
 80013de:	d100      	bne.n	80013e2 <__aeabi_dadd+0x1ca>
 80013e0:	e0f6      	b.n	80015d0 <__aeabi_dadd+0x3b8>
 80013e2:	1e51      	subs	r1, r2, #1
 80013e4:	2a01      	cmp	r2, #1
 80013e6:	d100      	bne.n	80013ea <__aeabi_dadd+0x1d2>
 80013e8:	e191      	b.n	800170e <__aeabi_dadd+0x4f6>
 80013ea:	4d6d      	ldr	r5, [pc, #436]	@ (80015a0 <__aeabi_dadd+0x388>)
 80013ec:	42aa      	cmp	r2, r5
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x1da>
 80013f0:	e0dc      	b.n	80015ac <__aeabi_dadd+0x394>
 80013f2:	2501      	movs	r5, #1
 80013f4:	2938      	cmp	r1, #56	@ 0x38
 80013f6:	dc14      	bgt.n	8001422 <__aeabi_dadd+0x20a>
 80013f8:	000a      	movs	r2, r1
 80013fa:	2a1f      	cmp	r2, #31
 80013fc:	dd00      	ble.n	8001400 <__aeabi_dadd+0x1e8>
 80013fe:	e1a2      	b.n	8001746 <__aeabi_dadd+0x52e>
 8001400:	2120      	movs	r1, #32
 8001402:	4653      	mov	r3, sl
 8001404:	1a89      	subs	r1, r1, r2
 8001406:	408b      	lsls	r3, r1
 8001408:	001d      	movs	r5, r3
 800140a:	4663      	mov	r3, ip
 800140c:	40d3      	lsrs	r3, r2
 800140e:	431d      	orrs	r5, r3
 8001410:	4663      	mov	r3, ip
 8001412:	408b      	lsls	r3, r1
 8001414:	0019      	movs	r1, r3
 8001416:	1e4b      	subs	r3, r1, #1
 8001418:	4199      	sbcs	r1, r3
 800141a:	4653      	mov	r3, sl
 800141c:	40d3      	lsrs	r3, r2
 800141e:	430d      	orrs	r5, r1
 8001420:	18e4      	adds	r4, r4, r3
 8001422:	182d      	adds	r5, r5, r0
 8001424:	4285      	cmp	r5, r0
 8001426:	4180      	sbcs	r0, r0
 8001428:	4240      	negs	r0, r0
 800142a:	1824      	adds	r4, r4, r0
 800142c:	0223      	lsls	r3, r4, #8
 800142e:	d559      	bpl.n	80014e4 <__aeabi_dadd+0x2cc>
 8001430:	4b5b      	ldr	r3, [pc, #364]	@ (80015a0 <__aeabi_dadd+0x388>)
 8001432:	3701      	adds	r7, #1
 8001434:	429f      	cmp	r7, r3
 8001436:	d051      	beq.n	80014dc <__aeabi_dadd+0x2c4>
 8001438:	2101      	movs	r1, #1
 800143a:	4b5a      	ldr	r3, [pc, #360]	@ (80015a4 <__aeabi_dadd+0x38c>)
 800143c:	086a      	lsrs	r2, r5, #1
 800143e:	401c      	ands	r4, r3
 8001440:	4029      	ands	r1, r5
 8001442:	430a      	orrs	r2, r1
 8001444:	07e5      	lsls	r5, r4, #31
 8001446:	4315      	orrs	r5, r2
 8001448:	0864      	lsrs	r4, r4, #1
 800144a:	e75f      	b.n	800130c <__aeabi_dadd+0xf4>
 800144c:	4661      	mov	r1, ip
 800144e:	4653      	mov	r3, sl
 8001450:	4319      	orrs	r1, r3
 8001452:	d100      	bne.n	8001456 <__aeabi_dadd+0x23e>
 8001454:	e0bc      	b.n	80015d0 <__aeabi_dadd+0x3b8>
 8001456:	1e51      	subs	r1, r2, #1
 8001458:	2a01      	cmp	r2, #1
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x246>
 800145c:	e164      	b.n	8001728 <__aeabi_dadd+0x510>
 800145e:	4d50      	ldr	r5, [pc, #320]	@ (80015a0 <__aeabi_dadd+0x388>)
 8001460:	42aa      	cmp	r2, r5
 8001462:	d100      	bne.n	8001466 <__aeabi_dadd+0x24e>
 8001464:	e16a      	b.n	800173c <__aeabi_dadd+0x524>
 8001466:	2501      	movs	r5, #1
 8001468:	2938      	cmp	r1, #56	@ 0x38
 800146a:	dd00      	ble.n	800146e <__aeabi_dadd+0x256>
 800146c:	e722      	b.n	80012b4 <__aeabi_dadd+0x9c>
 800146e:	000a      	movs	r2, r1
 8001470:	e70e      	b.n	8001290 <__aeabi_dadd+0x78>
 8001472:	4a4d      	ldr	r2, [pc, #308]	@ (80015a8 <__aeabi_dadd+0x390>)
 8001474:	1c7d      	adds	r5, r7, #1
 8001476:	4215      	tst	r5, r2
 8001478:	d000      	beq.n	800147c <__aeabi_dadd+0x264>
 800147a:	e0d0      	b.n	800161e <__aeabi_dadd+0x406>
 800147c:	0025      	movs	r5, r4
 800147e:	4662      	mov	r2, ip
 8001480:	4653      	mov	r3, sl
 8001482:	4305      	orrs	r5, r0
 8001484:	431a      	orrs	r2, r3
 8001486:	2f00      	cmp	r7, #0
 8001488:	d000      	beq.n	800148c <__aeabi_dadd+0x274>
 800148a:	e137      	b.n	80016fc <__aeabi_dadd+0x4e4>
 800148c:	2d00      	cmp	r5, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x27a>
 8001490:	e1a8      	b.n	80017e4 <__aeabi_dadd+0x5cc>
 8001492:	2a00      	cmp	r2, #0
 8001494:	d100      	bne.n	8001498 <__aeabi_dadd+0x280>
 8001496:	e16a      	b.n	800176e <__aeabi_dadd+0x556>
 8001498:	4663      	mov	r3, ip
 800149a:	1ac5      	subs	r5, r0, r3
 800149c:	4653      	mov	r3, sl
 800149e:	1ae2      	subs	r2, r4, r3
 80014a0:	42a8      	cmp	r0, r5
 80014a2:	419b      	sbcs	r3, r3
 80014a4:	425b      	negs	r3, r3
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	021a      	lsls	r2, r3, #8
 80014aa:	d400      	bmi.n	80014ae <__aeabi_dadd+0x296>
 80014ac:	e203      	b.n	80018b6 <__aeabi_dadd+0x69e>
 80014ae:	4663      	mov	r3, ip
 80014b0:	1a1d      	subs	r5, r3, r0
 80014b2:	45ac      	cmp	ip, r5
 80014b4:	4192      	sbcs	r2, r2
 80014b6:	4653      	mov	r3, sl
 80014b8:	4252      	negs	r2, r2
 80014ba:	1b1c      	subs	r4, r3, r4
 80014bc:	000e      	movs	r6, r1
 80014be:	4688      	mov	r8, r1
 80014c0:	1aa4      	subs	r4, r4, r2
 80014c2:	e723      	b.n	800130c <__aeabi_dadd+0xf4>
 80014c4:	4936      	ldr	r1, [pc, #216]	@ (80015a0 <__aeabi_dadd+0x388>)
 80014c6:	428f      	cmp	r7, r1
 80014c8:	d070      	beq.n	80015ac <__aeabi_dadd+0x394>
 80014ca:	2501      	movs	r5, #1
 80014cc:	2a38      	cmp	r2, #56	@ 0x38
 80014ce:	dca8      	bgt.n	8001422 <__aeabi_dadd+0x20a>
 80014d0:	2180      	movs	r1, #128	@ 0x80
 80014d2:	4653      	mov	r3, sl
 80014d4:	0409      	lsls	r1, r1, #16
 80014d6:	430b      	orrs	r3, r1
 80014d8:	469a      	mov	sl, r3
 80014da:	e78e      	b.n	80013fa <__aeabi_dadd+0x1e2>
 80014dc:	003c      	movs	r4, r7
 80014de:	2500      	movs	r5, #0
 80014e0:	2200      	movs	r2, #0
 80014e2:	e731      	b.n	8001348 <__aeabi_dadd+0x130>
 80014e4:	2307      	movs	r3, #7
 80014e6:	402b      	ands	r3, r5
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d000      	beq.n	80014ee <__aeabi_dadd+0x2d6>
 80014ec:	e710      	b.n	8001310 <__aeabi_dadd+0xf8>
 80014ee:	e093      	b.n	8001618 <__aeabi_dadd+0x400>
 80014f0:	2a00      	cmp	r2, #0
 80014f2:	d074      	beq.n	80015de <__aeabi_dadd+0x3c6>
 80014f4:	464a      	mov	r2, r9
 80014f6:	1bd2      	subs	r2, r2, r7
 80014f8:	2f00      	cmp	r7, #0
 80014fa:	d100      	bne.n	80014fe <__aeabi_dadd+0x2e6>
 80014fc:	e0c7      	b.n	800168e <__aeabi_dadd+0x476>
 80014fe:	4928      	ldr	r1, [pc, #160]	@ (80015a0 <__aeabi_dadd+0x388>)
 8001500:	4589      	cmp	r9, r1
 8001502:	d100      	bne.n	8001506 <__aeabi_dadd+0x2ee>
 8001504:	e185      	b.n	8001812 <__aeabi_dadd+0x5fa>
 8001506:	2501      	movs	r5, #1
 8001508:	2a38      	cmp	r2, #56	@ 0x38
 800150a:	dc12      	bgt.n	8001532 <__aeabi_dadd+0x31a>
 800150c:	2180      	movs	r1, #128	@ 0x80
 800150e:	0409      	lsls	r1, r1, #16
 8001510:	430c      	orrs	r4, r1
 8001512:	2a1f      	cmp	r2, #31
 8001514:	dd00      	ble.n	8001518 <__aeabi_dadd+0x300>
 8001516:	e1ab      	b.n	8001870 <__aeabi_dadd+0x658>
 8001518:	2120      	movs	r1, #32
 800151a:	0025      	movs	r5, r4
 800151c:	1a89      	subs	r1, r1, r2
 800151e:	0007      	movs	r7, r0
 8001520:	4088      	lsls	r0, r1
 8001522:	408d      	lsls	r5, r1
 8001524:	40d7      	lsrs	r7, r2
 8001526:	1e41      	subs	r1, r0, #1
 8001528:	4188      	sbcs	r0, r1
 800152a:	40d4      	lsrs	r4, r2
 800152c:	433d      	orrs	r5, r7
 800152e:	4305      	orrs	r5, r0
 8001530:	44a2      	add	sl, r4
 8001532:	4465      	add	r5, ip
 8001534:	4565      	cmp	r5, ip
 8001536:	4192      	sbcs	r2, r2
 8001538:	4252      	negs	r2, r2
 800153a:	4452      	add	r2, sl
 800153c:	0014      	movs	r4, r2
 800153e:	464f      	mov	r7, r9
 8001540:	e774      	b.n	800142c <__aeabi_dadd+0x214>
 8001542:	0028      	movs	r0, r5
 8001544:	f001 fdf0 	bl	8003128 <__clzsi2>
 8001548:	0003      	movs	r3, r0
 800154a:	3318      	adds	r3, #24
 800154c:	2b1f      	cmp	r3, #31
 800154e:	dc00      	bgt.n	8001552 <__aeabi_dadd+0x33a>
 8001550:	e6c2      	b.n	80012d8 <__aeabi_dadd+0xc0>
 8001552:	002a      	movs	r2, r5
 8001554:	3808      	subs	r0, #8
 8001556:	4082      	lsls	r2, r0
 8001558:	429f      	cmp	r7, r3
 800155a:	dd00      	ble.n	800155e <__aeabi_dadd+0x346>
 800155c:	e0a9      	b.n	80016b2 <__aeabi_dadd+0x49a>
 800155e:	1bdb      	subs	r3, r3, r7
 8001560:	1c58      	adds	r0, r3, #1
 8001562:	281f      	cmp	r0, #31
 8001564:	dc00      	bgt.n	8001568 <__aeabi_dadd+0x350>
 8001566:	e1ac      	b.n	80018c2 <__aeabi_dadd+0x6aa>
 8001568:	0015      	movs	r5, r2
 800156a:	3b1f      	subs	r3, #31
 800156c:	40dd      	lsrs	r5, r3
 800156e:	2820      	cmp	r0, #32
 8001570:	d005      	beq.n	800157e <__aeabi_dadd+0x366>
 8001572:	2340      	movs	r3, #64	@ 0x40
 8001574:	1a1b      	subs	r3, r3, r0
 8001576:	409a      	lsls	r2, r3
 8001578:	1e53      	subs	r3, r2, #1
 800157a:	419a      	sbcs	r2, r3
 800157c:	4315      	orrs	r5, r2
 800157e:	2307      	movs	r3, #7
 8001580:	2700      	movs	r7, #0
 8001582:	402b      	ands	r3, r5
 8001584:	e7b0      	b.n	80014e8 <__aeabi_dadd+0x2d0>
 8001586:	08ed      	lsrs	r5, r5, #3
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <__aeabi_dadd+0x388>)
 800158a:	0762      	lsls	r2, r4, #29
 800158c:	432a      	orrs	r2, r5
 800158e:	08e4      	lsrs	r4, r4, #3
 8001590:	429f      	cmp	r7, r3
 8001592:	d00f      	beq.n	80015b4 <__aeabi_dadd+0x39c>
 8001594:	0324      	lsls	r4, r4, #12
 8001596:	0b25      	lsrs	r5, r4, #12
 8001598:	057c      	lsls	r4, r7, #21
 800159a:	0d64      	lsrs	r4, r4, #21
 800159c:	e6d4      	b.n	8001348 <__aeabi_dadd+0x130>
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff
 80015a4:	ff7fffff 	.word	0xff7fffff
 80015a8:	000007fe 	.word	0x000007fe
 80015ac:	08c0      	lsrs	r0, r0, #3
 80015ae:	0762      	lsls	r2, r4, #29
 80015b0:	4302      	orrs	r2, r0
 80015b2:	08e4      	lsrs	r4, r4, #3
 80015b4:	0013      	movs	r3, r2
 80015b6:	4323      	orrs	r3, r4
 80015b8:	d100      	bne.n	80015bc <__aeabi_dadd+0x3a4>
 80015ba:	e186      	b.n	80018ca <__aeabi_dadd+0x6b2>
 80015bc:	2580      	movs	r5, #128	@ 0x80
 80015be:	032d      	lsls	r5, r5, #12
 80015c0:	4325      	orrs	r5, r4
 80015c2:	032d      	lsls	r5, r5, #12
 80015c4:	4cc3      	ldr	r4, [pc, #780]	@ (80018d4 <__aeabi_dadd+0x6bc>)
 80015c6:	0b2d      	lsrs	r5, r5, #12
 80015c8:	e6be      	b.n	8001348 <__aeabi_dadd+0x130>
 80015ca:	4660      	mov	r0, ip
 80015cc:	4654      	mov	r4, sl
 80015ce:	000e      	movs	r6, r1
 80015d0:	0017      	movs	r7, r2
 80015d2:	08c5      	lsrs	r5, r0, #3
 80015d4:	e7d8      	b.n	8001588 <__aeabi_dadd+0x370>
 80015d6:	4cc0      	ldr	r4, [pc, #768]	@ (80018d8 <__aeabi_dadd+0x6c0>)
 80015d8:	1aff      	subs	r7, r7, r3
 80015da:	4014      	ands	r4, r2
 80015dc:	e696      	b.n	800130c <__aeabi_dadd+0xf4>
 80015de:	4abf      	ldr	r2, [pc, #764]	@ (80018dc <__aeabi_dadd+0x6c4>)
 80015e0:	1c79      	adds	r1, r7, #1
 80015e2:	4211      	tst	r1, r2
 80015e4:	d16b      	bne.n	80016be <__aeabi_dadd+0x4a6>
 80015e6:	0022      	movs	r2, r4
 80015e8:	4302      	orrs	r2, r0
 80015ea:	2f00      	cmp	r7, #0
 80015ec:	d000      	beq.n	80015f0 <__aeabi_dadd+0x3d8>
 80015ee:	e0db      	b.n	80017a8 <__aeabi_dadd+0x590>
 80015f0:	2a00      	cmp	r2, #0
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dadd+0x3de>
 80015f4:	e12d      	b.n	8001852 <__aeabi_dadd+0x63a>
 80015f6:	4662      	mov	r2, ip
 80015f8:	4653      	mov	r3, sl
 80015fa:	431a      	orrs	r2, r3
 80015fc:	d100      	bne.n	8001600 <__aeabi_dadd+0x3e8>
 80015fe:	e0b6      	b.n	800176e <__aeabi_dadd+0x556>
 8001600:	4663      	mov	r3, ip
 8001602:	18c5      	adds	r5, r0, r3
 8001604:	4285      	cmp	r5, r0
 8001606:	4180      	sbcs	r0, r0
 8001608:	4454      	add	r4, sl
 800160a:	4240      	negs	r0, r0
 800160c:	1824      	adds	r4, r4, r0
 800160e:	0223      	lsls	r3, r4, #8
 8001610:	d502      	bpl.n	8001618 <__aeabi_dadd+0x400>
 8001612:	000f      	movs	r7, r1
 8001614:	4bb0      	ldr	r3, [pc, #704]	@ (80018d8 <__aeabi_dadd+0x6c0>)
 8001616:	401c      	ands	r4, r3
 8001618:	003a      	movs	r2, r7
 800161a:	0028      	movs	r0, r5
 800161c:	e7d8      	b.n	80015d0 <__aeabi_dadd+0x3b8>
 800161e:	4662      	mov	r2, ip
 8001620:	1a85      	subs	r5, r0, r2
 8001622:	42a8      	cmp	r0, r5
 8001624:	4192      	sbcs	r2, r2
 8001626:	4653      	mov	r3, sl
 8001628:	4252      	negs	r2, r2
 800162a:	4691      	mov	r9, r2
 800162c:	1ae3      	subs	r3, r4, r3
 800162e:	001a      	movs	r2, r3
 8001630:	464b      	mov	r3, r9
 8001632:	1ad2      	subs	r2, r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	4691      	mov	r9, r2
 8001638:	021a      	lsls	r2, r3, #8
 800163a:	d454      	bmi.n	80016e6 <__aeabi_dadd+0x4ce>
 800163c:	464a      	mov	r2, r9
 800163e:	464c      	mov	r4, r9
 8001640:	432a      	orrs	r2, r5
 8001642:	d000      	beq.n	8001646 <__aeabi_dadd+0x42e>
 8001644:	e640      	b.n	80012c8 <__aeabi_dadd+0xb0>
 8001646:	2600      	movs	r6, #0
 8001648:	2400      	movs	r4, #0
 800164a:	2500      	movs	r5, #0
 800164c:	e67c      	b.n	8001348 <__aeabi_dadd+0x130>
 800164e:	4da1      	ldr	r5, [pc, #644]	@ (80018d4 <__aeabi_dadd+0x6bc>)
 8001650:	45a9      	cmp	r9, r5
 8001652:	d100      	bne.n	8001656 <__aeabi_dadd+0x43e>
 8001654:	e090      	b.n	8001778 <__aeabi_dadd+0x560>
 8001656:	2501      	movs	r5, #1
 8001658:	2a38      	cmp	r2, #56	@ 0x38
 800165a:	dd00      	ble.n	800165e <__aeabi_dadd+0x446>
 800165c:	e6ab      	b.n	80013b6 <__aeabi_dadd+0x19e>
 800165e:	2580      	movs	r5, #128	@ 0x80
 8001660:	042d      	lsls	r5, r5, #16
 8001662:	432c      	orrs	r4, r5
 8001664:	e695      	b.n	8001392 <__aeabi_dadd+0x17a>
 8001666:	0011      	movs	r1, r2
 8001668:	4655      	mov	r5, sl
 800166a:	3920      	subs	r1, #32
 800166c:	40cd      	lsrs	r5, r1
 800166e:	46a9      	mov	r9, r5
 8001670:	2a20      	cmp	r2, #32
 8001672:	d006      	beq.n	8001682 <__aeabi_dadd+0x46a>
 8001674:	2140      	movs	r1, #64	@ 0x40
 8001676:	4653      	mov	r3, sl
 8001678:	1a8a      	subs	r2, r1, r2
 800167a:	4093      	lsls	r3, r2
 800167c:	4662      	mov	r2, ip
 800167e:	431a      	orrs	r2, r3
 8001680:	4694      	mov	ip, r2
 8001682:	4665      	mov	r5, ip
 8001684:	1e6b      	subs	r3, r5, #1
 8001686:	419d      	sbcs	r5, r3
 8001688:	464b      	mov	r3, r9
 800168a:	431d      	orrs	r5, r3
 800168c:	e612      	b.n	80012b4 <__aeabi_dadd+0x9c>
 800168e:	0021      	movs	r1, r4
 8001690:	4301      	orrs	r1, r0
 8001692:	d100      	bne.n	8001696 <__aeabi_dadd+0x47e>
 8001694:	e0c4      	b.n	8001820 <__aeabi_dadd+0x608>
 8001696:	1e51      	subs	r1, r2, #1
 8001698:	2a01      	cmp	r2, #1
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0x486>
 800169c:	e0fb      	b.n	8001896 <__aeabi_dadd+0x67e>
 800169e:	4d8d      	ldr	r5, [pc, #564]	@ (80018d4 <__aeabi_dadd+0x6bc>)
 80016a0:	42aa      	cmp	r2, r5
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dadd+0x48e>
 80016a4:	e0b5      	b.n	8001812 <__aeabi_dadd+0x5fa>
 80016a6:	2501      	movs	r5, #1
 80016a8:	2938      	cmp	r1, #56	@ 0x38
 80016aa:	dd00      	ble.n	80016ae <__aeabi_dadd+0x496>
 80016ac:	e741      	b.n	8001532 <__aeabi_dadd+0x31a>
 80016ae:	000a      	movs	r2, r1
 80016b0:	e72f      	b.n	8001512 <__aeabi_dadd+0x2fa>
 80016b2:	4c89      	ldr	r4, [pc, #548]	@ (80018d8 <__aeabi_dadd+0x6c0>)
 80016b4:	1aff      	subs	r7, r7, r3
 80016b6:	4014      	ands	r4, r2
 80016b8:	0762      	lsls	r2, r4, #29
 80016ba:	08e4      	lsrs	r4, r4, #3
 80016bc:	e76a      	b.n	8001594 <__aeabi_dadd+0x37c>
 80016be:	4a85      	ldr	r2, [pc, #532]	@ (80018d4 <__aeabi_dadd+0x6bc>)
 80016c0:	4291      	cmp	r1, r2
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dadd+0x4ae>
 80016c4:	e0e3      	b.n	800188e <__aeabi_dadd+0x676>
 80016c6:	4663      	mov	r3, ip
 80016c8:	18c2      	adds	r2, r0, r3
 80016ca:	4282      	cmp	r2, r0
 80016cc:	4180      	sbcs	r0, r0
 80016ce:	0023      	movs	r3, r4
 80016d0:	4240      	negs	r0, r0
 80016d2:	4453      	add	r3, sl
 80016d4:	181b      	adds	r3, r3, r0
 80016d6:	07dd      	lsls	r5, r3, #31
 80016d8:	085c      	lsrs	r4, r3, #1
 80016da:	2307      	movs	r3, #7
 80016dc:	0852      	lsrs	r2, r2, #1
 80016de:	4315      	orrs	r5, r2
 80016e0:	000f      	movs	r7, r1
 80016e2:	402b      	ands	r3, r5
 80016e4:	e700      	b.n	80014e8 <__aeabi_dadd+0x2d0>
 80016e6:	4663      	mov	r3, ip
 80016e8:	1a1d      	subs	r5, r3, r0
 80016ea:	45ac      	cmp	ip, r5
 80016ec:	4192      	sbcs	r2, r2
 80016ee:	4653      	mov	r3, sl
 80016f0:	4252      	negs	r2, r2
 80016f2:	1b1c      	subs	r4, r3, r4
 80016f4:	000e      	movs	r6, r1
 80016f6:	4688      	mov	r8, r1
 80016f8:	1aa4      	subs	r4, r4, r2
 80016fa:	e5e5      	b.n	80012c8 <__aeabi_dadd+0xb0>
 80016fc:	2d00      	cmp	r5, #0
 80016fe:	d000      	beq.n	8001702 <__aeabi_dadd+0x4ea>
 8001700:	e091      	b.n	8001826 <__aeabi_dadd+0x60e>
 8001702:	2a00      	cmp	r2, #0
 8001704:	d138      	bne.n	8001778 <__aeabi_dadd+0x560>
 8001706:	2480      	movs	r4, #128	@ 0x80
 8001708:	2600      	movs	r6, #0
 800170a:	0324      	lsls	r4, r4, #12
 800170c:	e756      	b.n	80015bc <__aeabi_dadd+0x3a4>
 800170e:	4663      	mov	r3, ip
 8001710:	18c5      	adds	r5, r0, r3
 8001712:	4285      	cmp	r5, r0
 8001714:	4180      	sbcs	r0, r0
 8001716:	4454      	add	r4, sl
 8001718:	4240      	negs	r0, r0
 800171a:	1824      	adds	r4, r4, r0
 800171c:	2701      	movs	r7, #1
 800171e:	0223      	lsls	r3, r4, #8
 8001720:	d400      	bmi.n	8001724 <__aeabi_dadd+0x50c>
 8001722:	e6df      	b.n	80014e4 <__aeabi_dadd+0x2cc>
 8001724:	2702      	movs	r7, #2
 8001726:	e687      	b.n	8001438 <__aeabi_dadd+0x220>
 8001728:	4663      	mov	r3, ip
 800172a:	1ac5      	subs	r5, r0, r3
 800172c:	42a8      	cmp	r0, r5
 800172e:	4180      	sbcs	r0, r0
 8001730:	4653      	mov	r3, sl
 8001732:	4240      	negs	r0, r0
 8001734:	1ae4      	subs	r4, r4, r3
 8001736:	2701      	movs	r7, #1
 8001738:	1a24      	subs	r4, r4, r0
 800173a:	e5c0      	b.n	80012be <__aeabi_dadd+0xa6>
 800173c:	0762      	lsls	r2, r4, #29
 800173e:	08c0      	lsrs	r0, r0, #3
 8001740:	4302      	orrs	r2, r0
 8001742:	08e4      	lsrs	r4, r4, #3
 8001744:	e736      	b.n	80015b4 <__aeabi_dadd+0x39c>
 8001746:	0011      	movs	r1, r2
 8001748:	4653      	mov	r3, sl
 800174a:	3920      	subs	r1, #32
 800174c:	40cb      	lsrs	r3, r1
 800174e:	4699      	mov	r9, r3
 8001750:	2a20      	cmp	r2, #32
 8001752:	d006      	beq.n	8001762 <__aeabi_dadd+0x54a>
 8001754:	2140      	movs	r1, #64	@ 0x40
 8001756:	4653      	mov	r3, sl
 8001758:	1a8a      	subs	r2, r1, r2
 800175a:	4093      	lsls	r3, r2
 800175c:	4662      	mov	r2, ip
 800175e:	431a      	orrs	r2, r3
 8001760:	4694      	mov	ip, r2
 8001762:	4665      	mov	r5, ip
 8001764:	1e6b      	subs	r3, r5, #1
 8001766:	419d      	sbcs	r5, r3
 8001768:	464b      	mov	r3, r9
 800176a:	431d      	orrs	r5, r3
 800176c:	e659      	b.n	8001422 <__aeabi_dadd+0x20a>
 800176e:	0762      	lsls	r2, r4, #29
 8001770:	08c0      	lsrs	r0, r0, #3
 8001772:	4302      	orrs	r2, r0
 8001774:	08e4      	lsrs	r4, r4, #3
 8001776:	e70d      	b.n	8001594 <__aeabi_dadd+0x37c>
 8001778:	4653      	mov	r3, sl
 800177a:	075a      	lsls	r2, r3, #29
 800177c:	4663      	mov	r3, ip
 800177e:	08d8      	lsrs	r0, r3, #3
 8001780:	4653      	mov	r3, sl
 8001782:	000e      	movs	r6, r1
 8001784:	4302      	orrs	r2, r0
 8001786:	08dc      	lsrs	r4, r3, #3
 8001788:	e714      	b.n	80015b4 <__aeabi_dadd+0x39c>
 800178a:	0015      	movs	r5, r2
 800178c:	0026      	movs	r6, r4
 800178e:	3d20      	subs	r5, #32
 8001790:	40ee      	lsrs	r6, r5
 8001792:	2a20      	cmp	r2, #32
 8001794:	d003      	beq.n	800179e <__aeabi_dadd+0x586>
 8001796:	2540      	movs	r5, #64	@ 0x40
 8001798:	1aaa      	subs	r2, r5, r2
 800179a:	4094      	lsls	r4, r2
 800179c:	4320      	orrs	r0, r4
 800179e:	1e42      	subs	r2, r0, #1
 80017a0:	4190      	sbcs	r0, r2
 80017a2:	0005      	movs	r5, r0
 80017a4:	4335      	orrs	r5, r6
 80017a6:	e606      	b.n	80013b6 <__aeabi_dadd+0x19e>
 80017a8:	2a00      	cmp	r2, #0
 80017aa:	d07c      	beq.n	80018a6 <__aeabi_dadd+0x68e>
 80017ac:	4662      	mov	r2, ip
 80017ae:	4653      	mov	r3, sl
 80017b0:	08c0      	lsrs	r0, r0, #3
 80017b2:	431a      	orrs	r2, r3
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dadd+0x5a0>
 80017b6:	e6fa      	b.n	80015ae <__aeabi_dadd+0x396>
 80017b8:	0762      	lsls	r2, r4, #29
 80017ba:	4310      	orrs	r0, r2
 80017bc:	2280      	movs	r2, #128	@ 0x80
 80017be:	08e4      	lsrs	r4, r4, #3
 80017c0:	0312      	lsls	r2, r2, #12
 80017c2:	4214      	tst	r4, r2
 80017c4:	d008      	beq.n	80017d8 <__aeabi_dadd+0x5c0>
 80017c6:	08d9      	lsrs	r1, r3, #3
 80017c8:	4211      	tst	r1, r2
 80017ca:	d105      	bne.n	80017d8 <__aeabi_dadd+0x5c0>
 80017cc:	4663      	mov	r3, ip
 80017ce:	08d8      	lsrs	r0, r3, #3
 80017d0:	4653      	mov	r3, sl
 80017d2:	000c      	movs	r4, r1
 80017d4:	075b      	lsls	r3, r3, #29
 80017d6:	4318      	orrs	r0, r3
 80017d8:	0f42      	lsrs	r2, r0, #29
 80017da:	00c0      	lsls	r0, r0, #3
 80017dc:	08c0      	lsrs	r0, r0, #3
 80017de:	0752      	lsls	r2, r2, #29
 80017e0:	4302      	orrs	r2, r0
 80017e2:	e6e7      	b.n	80015b4 <__aeabi_dadd+0x39c>
 80017e4:	2a00      	cmp	r2, #0
 80017e6:	d100      	bne.n	80017ea <__aeabi_dadd+0x5d2>
 80017e8:	e72d      	b.n	8001646 <__aeabi_dadd+0x42e>
 80017ea:	4663      	mov	r3, ip
 80017ec:	08d8      	lsrs	r0, r3, #3
 80017ee:	4653      	mov	r3, sl
 80017f0:	075a      	lsls	r2, r3, #29
 80017f2:	000e      	movs	r6, r1
 80017f4:	4302      	orrs	r2, r0
 80017f6:	08dc      	lsrs	r4, r3, #3
 80017f8:	e6cc      	b.n	8001594 <__aeabi_dadd+0x37c>
 80017fa:	4663      	mov	r3, ip
 80017fc:	1a1d      	subs	r5, r3, r0
 80017fe:	45ac      	cmp	ip, r5
 8001800:	4192      	sbcs	r2, r2
 8001802:	4653      	mov	r3, sl
 8001804:	4252      	negs	r2, r2
 8001806:	1b1c      	subs	r4, r3, r4
 8001808:	000e      	movs	r6, r1
 800180a:	4688      	mov	r8, r1
 800180c:	1aa4      	subs	r4, r4, r2
 800180e:	3701      	adds	r7, #1
 8001810:	e555      	b.n	80012be <__aeabi_dadd+0xa6>
 8001812:	4663      	mov	r3, ip
 8001814:	08d9      	lsrs	r1, r3, #3
 8001816:	4653      	mov	r3, sl
 8001818:	075a      	lsls	r2, r3, #29
 800181a:	430a      	orrs	r2, r1
 800181c:	08dc      	lsrs	r4, r3, #3
 800181e:	e6c9      	b.n	80015b4 <__aeabi_dadd+0x39c>
 8001820:	4660      	mov	r0, ip
 8001822:	4654      	mov	r4, sl
 8001824:	e6d4      	b.n	80015d0 <__aeabi_dadd+0x3b8>
 8001826:	08c0      	lsrs	r0, r0, #3
 8001828:	2a00      	cmp	r2, #0
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x616>
 800182c:	e6bf      	b.n	80015ae <__aeabi_dadd+0x396>
 800182e:	0762      	lsls	r2, r4, #29
 8001830:	4310      	orrs	r0, r2
 8001832:	2280      	movs	r2, #128	@ 0x80
 8001834:	08e4      	lsrs	r4, r4, #3
 8001836:	0312      	lsls	r2, r2, #12
 8001838:	4214      	tst	r4, r2
 800183a:	d0cd      	beq.n	80017d8 <__aeabi_dadd+0x5c0>
 800183c:	08dd      	lsrs	r5, r3, #3
 800183e:	4215      	tst	r5, r2
 8001840:	d1ca      	bne.n	80017d8 <__aeabi_dadd+0x5c0>
 8001842:	4663      	mov	r3, ip
 8001844:	08d8      	lsrs	r0, r3, #3
 8001846:	4653      	mov	r3, sl
 8001848:	075b      	lsls	r3, r3, #29
 800184a:	000e      	movs	r6, r1
 800184c:	002c      	movs	r4, r5
 800184e:	4318      	orrs	r0, r3
 8001850:	e7c2      	b.n	80017d8 <__aeabi_dadd+0x5c0>
 8001852:	4663      	mov	r3, ip
 8001854:	08d9      	lsrs	r1, r3, #3
 8001856:	4653      	mov	r3, sl
 8001858:	075a      	lsls	r2, r3, #29
 800185a:	430a      	orrs	r2, r1
 800185c:	08dc      	lsrs	r4, r3, #3
 800185e:	e699      	b.n	8001594 <__aeabi_dadd+0x37c>
 8001860:	4663      	mov	r3, ip
 8001862:	08d8      	lsrs	r0, r3, #3
 8001864:	4653      	mov	r3, sl
 8001866:	075a      	lsls	r2, r3, #29
 8001868:	000e      	movs	r6, r1
 800186a:	4302      	orrs	r2, r0
 800186c:	08dc      	lsrs	r4, r3, #3
 800186e:	e6a1      	b.n	80015b4 <__aeabi_dadd+0x39c>
 8001870:	0011      	movs	r1, r2
 8001872:	0027      	movs	r7, r4
 8001874:	3920      	subs	r1, #32
 8001876:	40cf      	lsrs	r7, r1
 8001878:	2a20      	cmp	r2, #32
 800187a:	d003      	beq.n	8001884 <__aeabi_dadd+0x66c>
 800187c:	2140      	movs	r1, #64	@ 0x40
 800187e:	1a8a      	subs	r2, r1, r2
 8001880:	4094      	lsls	r4, r2
 8001882:	4320      	orrs	r0, r4
 8001884:	1e42      	subs	r2, r0, #1
 8001886:	4190      	sbcs	r0, r2
 8001888:	0005      	movs	r5, r0
 800188a:	433d      	orrs	r5, r7
 800188c:	e651      	b.n	8001532 <__aeabi_dadd+0x31a>
 800188e:	000c      	movs	r4, r1
 8001890:	2500      	movs	r5, #0
 8001892:	2200      	movs	r2, #0
 8001894:	e558      	b.n	8001348 <__aeabi_dadd+0x130>
 8001896:	4460      	add	r0, ip
 8001898:	4560      	cmp	r0, ip
 800189a:	4192      	sbcs	r2, r2
 800189c:	4454      	add	r4, sl
 800189e:	4252      	negs	r2, r2
 80018a0:	0005      	movs	r5, r0
 80018a2:	18a4      	adds	r4, r4, r2
 80018a4:	e73a      	b.n	800171c <__aeabi_dadd+0x504>
 80018a6:	4653      	mov	r3, sl
 80018a8:	075a      	lsls	r2, r3, #29
 80018aa:	4663      	mov	r3, ip
 80018ac:	08d9      	lsrs	r1, r3, #3
 80018ae:	4653      	mov	r3, sl
 80018b0:	430a      	orrs	r2, r1
 80018b2:	08dc      	lsrs	r4, r3, #3
 80018b4:	e67e      	b.n	80015b4 <__aeabi_dadd+0x39c>
 80018b6:	001a      	movs	r2, r3
 80018b8:	001c      	movs	r4, r3
 80018ba:	432a      	orrs	r2, r5
 80018bc:	d000      	beq.n	80018c0 <__aeabi_dadd+0x6a8>
 80018be:	e6ab      	b.n	8001618 <__aeabi_dadd+0x400>
 80018c0:	e6c1      	b.n	8001646 <__aeabi_dadd+0x42e>
 80018c2:	2120      	movs	r1, #32
 80018c4:	2500      	movs	r5, #0
 80018c6:	1a09      	subs	r1, r1, r0
 80018c8:	e519      	b.n	80012fe <__aeabi_dadd+0xe6>
 80018ca:	2200      	movs	r2, #0
 80018cc:	2500      	movs	r5, #0
 80018ce:	4c01      	ldr	r4, [pc, #4]	@ (80018d4 <__aeabi_dadd+0x6bc>)
 80018d0:	e53a      	b.n	8001348 <__aeabi_dadd+0x130>
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	000007ff 	.word	0x000007ff
 80018d8:	ff7fffff 	.word	0xff7fffff
 80018dc:	000007fe 	.word	0x000007fe

080018e0 <__aeabi_ddiv>:
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	46de      	mov	lr, fp
 80018e4:	4645      	mov	r5, r8
 80018e6:	4657      	mov	r7, sl
 80018e8:	464e      	mov	r6, r9
 80018ea:	b5e0      	push	{r5, r6, r7, lr}
 80018ec:	b087      	sub	sp, #28
 80018ee:	9200      	str	r2, [sp, #0]
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	030b      	lsls	r3, r1, #12
 80018f4:	0b1b      	lsrs	r3, r3, #12
 80018f6:	469b      	mov	fp, r3
 80018f8:	0fca      	lsrs	r2, r1, #31
 80018fa:	004b      	lsls	r3, r1, #1
 80018fc:	0004      	movs	r4, r0
 80018fe:	4680      	mov	r8, r0
 8001900:	0d5b      	lsrs	r3, r3, #21
 8001902:	9202      	str	r2, [sp, #8]
 8001904:	d100      	bne.n	8001908 <__aeabi_ddiv+0x28>
 8001906:	e16a      	b.n	8001bde <__aeabi_ddiv+0x2fe>
 8001908:	4ad4      	ldr	r2, [pc, #848]	@ (8001c5c <__aeabi_ddiv+0x37c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d100      	bne.n	8001910 <__aeabi_ddiv+0x30>
 800190e:	e18c      	b.n	8001c2a <__aeabi_ddiv+0x34a>
 8001910:	4659      	mov	r1, fp
 8001912:	0f42      	lsrs	r2, r0, #29
 8001914:	00c9      	lsls	r1, r1, #3
 8001916:	430a      	orrs	r2, r1
 8001918:	2180      	movs	r1, #128	@ 0x80
 800191a:	0409      	lsls	r1, r1, #16
 800191c:	4311      	orrs	r1, r2
 800191e:	00c2      	lsls	r2, r0, #3
 8001920:	4690      	mov	r8, r2
 8001922:	4acf      	ldr	r2, [pc, #828]	@ (8001c60 <__aeabi_ddiv+0x380>)
 8001924:	4689      	mov	r9, r1
 8001926:	4692      	mov	sl, r2
 8001928:	449a      	add	sl, r3
 800192a:	2300      	movs	r3, #0
 800192c:	2400      	movs	r4, #0
 800192e:	9303      	str	r3, [sp, #12]
 8001930:	9e00      	ldr	r6, [sp, #0]
 8001932:	9f01      	ldr	r7, [sp, #4]
 8001934:	033b      	lsls	r3, r7, #12
 8001936:	0b1b      	lsrs	r3, r3, #12
 8001938:	469b      	mov	fp, r3
 800193a:	007b      	lsls	r3, r7, #1
 800193c:	0030      	movs	r0, r6
 800193e:	0d5b      	lsrs	r3, r3, #21
 8001940:	0ffd      	lsrs	r5, r7, #31
 8001942:	2b00      	cmp	r3, #0
 8001944:	d100      	bne.n	8001948 <__aeabi_ddiv+0x68>
 8001946:	e128      	b.n	8001b9a <__aeabi_ddiv+0x2ba>
 8001948:	4ac4      	ldr	r2, [pc, #784]	@ (8001c5c <__aeabi_ddiv+0x37c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d100      	bne.n	8001950 <__aeabi_ddiv+0x70>
 800194e:	e177      	b.n	8001c40 <__aeabi_ddiv+0x360>
 8001950:	4659      	mov	r1, fp
 8001952:	0f72      	lsrs	r2, r6, #29
 8001954:	00c9      	lsls	r1, r1, #3
 8001956:	430a      	orrs	r2, r1
 8001958:	2180      	movs	r1, #128	@ 0x80
 800195a:	0409      	lsls	r1, r1, #16
 800195c:	4311      	orrs	r1, r2
 800195e:	468b      	mov	fp, r1
 8001960:	49bf      	ldr	r1, [pc, #764]	@ (8001c60 <__aeabi_ddiv+0x380>)
 8001962:	00f2      	lsls	r2, r6, #3
 8001964:	468c      	mov	ip, r1
 8001966:	4651      	mov	r1, sl
 8001968:	4463      	add	r3, ip
 800196a:	1acb      	subs	r3, r1, r3
 800196c:	469a      	mov	sl, r3
 800196e:	2300      	movs	r3, #0
 8001970:	9e02      	ldr	r6, [sp, #8]
 8001972:	406e      	eors	r6, r5
 8001974:	2c0f      	cmp	r4, #15
 8001976:	d827      	bhi.n	80019c8 <__aeabi_ddiv+0xe8>
 8001978:	49ba      	ldr	r1, [pc, #744]	@ (8001c64 <__aeabi_ddiv+0x384>)
 800197a:	00a4      	lsls	r4, r4, #2
 800197c:	5909      	ldr	r1, [r1, r4]
 800197e:	468f      	mov	pc, r1
 8001980:	46cb      	mov	fp, r9
 8001982:	4642      	mov	r2, r8
 8001984:	9e02      	ldr	r6, [sp, #8]
 8001986:	9b03      	ldr	r3, [sp, #12]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d016      	beq.n	80019ba <__aeabi_ddiv+0xda>
 800198c:	2b03      	cmp	r3, #3
 800198e:	d100      	bne.n	8001992 <__aeabi_ddiv+0xb2>
 8001990:	e2a6      	b.n	8001ee0 <__aeabi_ddiv+0x600>
 8001992:	2b01      	cmp	r3, #1
 8001994:	d000      	beq.n	8001998 <__aeabi_ddiv+0xb8>
 8001996:	e0df      	b.n	8001b58 <__aeabi_ddiv+0x278>
 8001998:	2200      	movs	r2, #0
 800199a:	2300      	movs	r3, #0
 800199c:	2400      	movs	r4, #0
 800199e:	4690      	mov	r8, r2
 80019a0:	051b      	lsls	r3, r3, #20
 80019a2:	4323      	orrs	r3, r4
 80019a4:	07f6      	lsls	r6, r6, #31
 80019a6:	4333      	orrs	r3, r6
 80019a8:	4640      	mov	r0, r8
 80019aa:	0019      	movs	r1, r3
 80019ac:	b007      	add	sp, #28
 80019ae:	bcf0      	pop	{r4, r5, r6, r7}
 80019b0:	46bb      	mov	fp, r7
 80019b2:	46b2      	mov	sl, r6
 80019b4:	46a9      	mov	r9, r5
 80019b6:	46a0      	mov	r8, r4
 80019b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ba:	2200      	movs	r2, #0
 80019bc:	2400      	movs	r4, #0
 80019be:	4690      	mov	r8, r2
 80019c0:	4ba6      	ldr	r3, [pc, #664]	@ (8001c5c <__aeabi_ddiv+0x37c>)
 80019c2:	e7ed      	b.n	80019a0 <__aeabi_ddiv+0xc0>
 80019c4:	002e      	movs	r6, r5
 80019c6:	e7df      	b.n	8001988 <__aeabi_ddiv+0xa8>
 80019c8:	45cb      	cmp	fp, r9
 80019ca:	d200      	bcs.n	80019ce <__aeabi_ddiv+0xee>
 80019cc:	e1d4      	b.n	8001d78 <__aeabi_ddiv+0x498>
 80019ce:	d100      	bne.n	80019d2 <__aeabi_ddiv+0xf2>
 80019d0:	e1cf      	b.n	8001d72 <__aeabi_ddiv+0x492>
 80019d2:	2301      	movs	r3, #1
 80019d4:	425b      	negs	r3, r3
 80019d6:	469c      	mov	ip, r3
 80019d8:	4644      	mov	r4, r8
 80019da:	4648      	mov	r0, r9
 80019dc:	2700      	movs	r7, #0
 80019de:	44e2      	add	sl, ip
 80019e0:	465b      	mov	r3, fp
 80019e2:	0e15      	lsrs	r5, r2, #24
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	431d      	orrs	r5, r3
 80019e8:	0c19      	lsrs	r1, r3, #16
 80019ea:	042b      	lsls	r3, r5, #16
 80019ec:	0212      	lsls	r2, r2, #8
 80019ee:	9500      	str	r5, [sp, #0]
 80019f0:	0c1d      	lsrs	r5, r3, #16
 80019f2:	4691      	mov	r9, r2
 80019f4:	9102      	str	r1, [sp, #8]
 80019f6:	9503      	str	r5, [sp, #12]
 80019f8:	f7fe fc26 	bl	8000248 <__aeabi_uidivmod>
 80019fc:	0002      	movs	r2, r0
 80019fe:	436a      	muls	r2, r5
 8001a00:	040b      	lsls	r3, r1, #16
 8001a02:	0c21      	lsrs	r1, r4, #16
 8001a04:	4680      	mov	r8, r0
 8001a06:	4319      	orrs	r1, r3
 8001a08:	428a      	cmp	r2, r1
 8001a0a:	d909      	bls.n	8001a20 <__aeabi_ddiv+0x140>
 8001a0c:	9d00      	ldr	r5, [sp, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	46ac      	mov	ip, r5
 8001a12:	425b      	negs	r3, r3
 8001a14:	4461      	add	r1, ip
 8001a16:	469c      	mov	ip, r3
 8001a18:	44e0      	add	r8, ip
 8001a1a:	428d      	cmp	r5, r1
 8001a1c:	d800      	bhi.n	8001a20 <__aeabi_ddiv+0x140>
 8001a1e:	e1fb      	b.n	8001e18 <__aeabi_ddiv+0x538>
 8001a20:	1a88      	subs	r0, r1, r2
 8001a22:	9902      	ldr	r1, [sp, #8]
 8001a24:	f7fe fc10 	bl	8000248 <__aeabi_uidivmod>
 8001a28:	9a03      	ldr	r2, [sp, #12]
 8001a2a:	0424      	lsls	r4, r4, #16
 8001a2c:	4342      	muls	r2, r0
 8001a2e:	0409      	lsls	r1, r1, #16
 8001a30:	0c24      	lsrs	r4, r4, #16
 8001a32:	0003      	movs	r3, r0
 8001a34:	430c      	orrs	r4, r1
 8001a36:	42a2      	cmp	r2, r4
 8001a38:	d906      	bls.n	8001a48 <__aeabi_ddiv+0x168>
 8001a3a:	9900      	ldr	r1, [sp, #0]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	468c      	mov	ip, r1
 8001a40:	4464      	add	r4, ip
 8001a42:	42a1      	cmp	r1, r4
 8001a44:	d800      	bhi.n	8001a48 <__aeabi_ddiv+0x168>
 8001a46:	e1e1      	b.n	8001e0c <__aeabi_ddiv+0x52c>
 8001a48:	1aa0      	subs	r0, r4, r2
 8001a4a:	4642      	mov	r2, r8
 8001a4c:	0412      	lsls	r2, r2, #16
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4693      	mov	fp, r2
 8001a52:	464b      	mov	r3, r9
 8001a54:	4659      	mov	r1, fp
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	001d      	movs	r5, r3
 8001a5a:	9304      	str	r3, [sp, #16]
 8001a5c:	040b      	lsls	r3, r1, #16
 8001a5e:	4649      	mov	r1, r9
 8001a60:	0409      	lsls	r1, r1, #16
 8001a62:	0c09      	lsrs	r1, r1, #16
 8001a64:	000c      	movs	r4, r1
 8001a66:	0c1b      	lsrs	r3, r3, #16
 8001a68:	435c      	muls	r4, r3
 8001a6a:	0c12      	lsrs	r2, r2, #16
 8001a6c:	436b      	muls	r3, r5
 8001a6e:	4688      	mov	r8, r1
 8001a70:	4351      	muls	r1, r2
 8001a72:	436a      	muls	r2, r5
 8001a74:	0c25      	lsrs	r5, r4, #16
 8001a76:	46ac      	mov	ip, r5
 8001a78:	185b      	adds	r3, r3, r1
 8001a7a:	4463      	add	r3, ip
 8001a7c:	4299      	cmp	r1, r3
 8001a7e:	d903      	bls.n	8001a88 <__aeabi_ddiv+0x1a8>
 8001a80:	2180      	movs	r1, #128	@ 0x80
 8001a82:	0249      	lsls	r1, r1, #9
 8001a84:	468c      	mov	ip, r1
 8001a86:	4462      	add	r2, ip
 8001a88:	0c19      	lsrs	r1, r3, #16
 8001a8a:	0424      	lsls	r4, r4, #16
 8001a8c:	041b      	lsls	r3, r3, #16
 8001a8e:	0c24      	lsrs	r4, r4, #16
 8001a90:	188a      	adds	r2, r1, r2
 8001a92:	191c      	adds	r4, r3, r4
 8001a94:	4290      	cmp	r0, r2
 8001a96:	d302      	bcc.n	8001a9e <__aeabi_ddiv+0x1be>
 8001a98:	d116      	bne.n	8001ac8 <__aeabi_ddiv+0x1e8>
 8001a9a:	42a7      	cmp	r7, r4
 8001a9c:	d214      	bcs.n	8001ac8 <__aeabi_ddiv+0x1e8>
 8001a9e:	465b      	mov	r3, fp
 8001aa0:	9d00      	ldr	r5, [sp, #0]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	444f      	add	r7, r9
 8001aa6:	9305      	str	r3, [sp, #20]
 8001aa8:	454f      	cmp	r7, r9
 8001aaa:	419b      	sbcs	r3, r3
 8001aac:	46ac      	mov	ip, r5
 8001aae:	425b      	negs	r3, r3
 8001ab0:	4463      	add	r3, ip
 8001ab2:	18c0      	adds	r0, r0, r3
 8001ab4:	4285      	cmp	r5, r0
 8001ab6:	d300      	bcc.n	8001aba <__aeabi_ddiv+0x1da>
 8001ab8:	e1a1      	b.n	8001dfe <__aeabi_ddiv+0x51e>
 8001aba:	4282      	cmp	r2, r0
 8001abc:	d900      	bls.n	8001ac0 <__aeabi_ddiv+0x1e0>
 8001abe:	e1f6      	b.n	8001eae <__aeabi_ddiv+0x5ce>
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_ddiv+0x1e4>
 8001ac2:	e1f1      	b.n	8001ea8 <__aeabi_ddiv+0x5c8>
 8001ac4:	9b05      	ldr	r3, [sp, #20]
 8001ac6:	469b      	mov	fp, r3
 8001ac8:	1b3c      	subs	r4, r7, r4
 8001aca:	42a7      	cmp	r7, r4
 8001acc:	41bf      	sbcs	r7, r7
 8001ace:	9d00      	ldr	r5, [sp, #0]
 8001ad0:	1a80      	subs	r0, r0, r2
 8001ad2:	427f      	negs	r7, r7
 8001ad4:	1bc0      	subs	r0, r0, r7
 8001ad6:	4285      	cmp	r5, r0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_ddiv+0x1fc>
 8001ada:	e1d0      	b.n	8001e7e <__aeabi_ddiv+0x59e>
 8001adc:	9902      	ldr	r1, [sp, #8]
 8001ade:	f7fe fbb3 	bl	8000248 <__aeabi_uidivmod>
 8001ae2:	9a03      	ldr	r2, [sp, #12]
 8001ae4:	040b      	lsls	r3, r1, #16
 8001ae6:	4342      	muls	r2, r0
 8001ae8:	0c21      	lsrs	r1, r4, #16
 8001aea:	0007      	movs	r7, r0
 8001aec:	4319      	orrs	r1, r3
 8001aee:	428a      	cmp	r2, r1
 8001af0:	d900      	bls.n	8001af4 <__aeabi_ddiv+0x214>
 8001af2:	e178      	b.n	8001de6 <__aeabi_ddiv+0x506>
 8001af4:	1a88      	subs	r0, r1, r2
 8001af6:	9902      	ldr	r1, [sp, #8]
 8001af8:	f7fe fba6 	bl	8000248 <__aeabi_uidivmod>
 8001afc:	9a03      	ldr	r2, [sp, #12]
 8001afe:	0424      	lsls	r4, r4, #16
 8001b00:	4342      	muls	r2, r0
 8001b02:	0409      	lsls	r1, r1, #16
 8001b04:	0c24      	lsrs	r4, r4, #16
 8001b06:	0003      	movs	r3, r0
 8001b08:	430c      	orrs	r4, r1
 8001b0a:	42a2      	cmp	r2, r4
 8001b0c:	d900      	bls.n	8001b10 <__aeabi_ddiv+0x230>
 8001b0e:	e15d      	b.n	8001dcc <__aeabi_ddiv+0x4ec>
 8001b10:	4641      	mov	r1, r8
 8001b12:	1aa4      	subs	r4, r4, r2
 8001b14:	043a      	lsls	r2, r7, #16
 8001b16:	431a      	orrs	r2, r3
 8001b18:	9d04      	ldr	r5, [sp, #16]
 8001b1a:	0413      	lsls	r3, r2, #16
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	4359      	muls	r1, r3
 8001b20:	4647      	mov	r7, r8
 8001b22:	436b      	muls	r3, r5
 8001b24:	469c      	mov	ip, r3
 8001b26:	0c10      	lsrs	r0, r2, #16
 8001b28:	4347      	muls	r7, r0
 8001b2a:	0c0b      	lsrs	r3, r1, #16
 8001b2c:	44bc      	add	ip, r7
 8001b2e:	4463      	add	r3, ip
 8001b30:	4368      	muls	r0, r5
 8001b32:	429f      	cmp	r7, r3
 8001b34:	d903      	bls.n	8001b3e <__aeabi_ddiv+0x25e>
 8001b36:	2580      	movs	r5, #128	@ 0x80
 8001b38:	026d      	lsls	r5, r5, #9
 8001b3a:	46ac      	mov	ip, r5
 8001b3c:	4460      	add	r0, ip
 8001b3e:	0c1f      	lsrs	r7, r3, #16
 8001b40:	0409      	lsls	r1, r1, #16
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	0c09      	lsrs	r1, r1, #16
 8001b46:	183f      	adds	r7, r7, r0
 8001b48:	185b      	adds	r3, r3, r1
 8001b4a:	42bc      	cmp	r4, r7
 8001b4c:	d200      	bcs.n	8001b50 <__aeabi_ddiv+0x270>
 8001b4e:	e102      	b.n	8001d56 <__aeabi_ddiv+0x476>
 8001b50:	d100      	bne.n	8001b54 <__aeabi_ddiv+0x274>
 8001b52:	e0fd      	b.n	8001d50 <__aeabi_ddiv+0x470>
 8001b54:	2301      	movs	r3, #1
 8001b56:	431a      	orrs	r2, r3
 8001b58:	4b43      	ldr	r3, [pc, #268]	@ (8001c68 <__aeabi_ddiv+0x388>)
 8001b5a:	4453      	add	r3, sl
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x282>
 8001b60:	e0ae      	b.n	8001cc0 <__aeabi_ddiv+0x3e0>
 8001b62:	0751      	lsls	r1, r2, #29
 8001b64:	d000      	beq.n	8001b68 <__aeabi_ddiv+0x288>
 8001b66:	e198      	b.n	8001e9a <__aeabi_ddiv+0x5ba>
 8001b68:	4659      	mov	r1, fp
 8001b6a:	01c9      	lsls	r1, r1, #7
 8001b6c:	d506      	bpl.n	8001b7c <__aeabi_ddiv+0x29c>
 8001b6e:	4659      	mov	r1, fp
 8001b70:	4b3e      	ldr	r3, [pc, #248]	@ (8001c6c <__aeabi_ddiv+0x38c>)
 8001b72:	4019      	ands	r1, r3
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	468b      	mov	fp, r1
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4453      	add	r3, sl
 8001b7c:	493c      	ldr	r1, [pc, #240]	@ (8001c70 <__aeabi_ddiv+0x390>)
 8001b7e:	428b      	cmp	r3, r1
 8001b80:	dd00      	ble.n	8001b84 <__aeabi_ddiv+0x2a4>
 8001b82:	e71a      	b.n	80019ba <__aeabi_ddiv+0xda>
 8001b84:	4659      	mov	r1, fp
 8001b86:	08d2      	lsrs	r2, r2, #3
 8001b88:	0749      	lsls	r1, r1, #29
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	465a      	mov	r2, fp
 8001b8e:	055b      	lsls	r3, r3, #21
 8001b90:	0254      	lsls	r4, r2, #9
 8001b92:	4688      	mov	r8, r1
 8001b94:	0b24      	lsrs	r4, r4, #12
 8001b96:	0d5b      	lsrs	r3, r3, #21
 8001b98:	e702      	b.n	80019a0 <__aeabi_ddiv+0xc0>
 8001b9a:	465a      	mov	r2, fp
 8001b9c:	9b00      	ldr	r3, [sp, #0]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_ddiv+0x2c4>
 8001ba2:	e07e      	b.n	8001ca2 <__aeabi_ddiv+0x3c2>
 8001ba4:	465b      	mov	r3, fp
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d100      	bne.n	8001bac <__aeabi_ddiv+0x2cc>
 8001baa:	e100      	b.n	8001dae <__aeabi_ddiv+0x4ce>
 8001bac:	4658      	mov	r0, fp
 8001bae:	f001 fabb 	bl	8003128 <__clzsi2>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	3a0b      	subs	r2, #11
 8001bb8:	271d      	movs	r7, #29
 8001bba:	9e00      	ldr	r6, [sp, #0]
 8001bbc:	1aba      	subs	r2, r7, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	4658      	mov	r0, fp
 8001bc2:	40d6      	lsrs	r6, r2
 8001bc4:	3908      	subs	r1, #8
 8001bc6:	4088      	lsls	r0, r1
 8001bc8:	0032      	movs	r2, r6
 8001bca:	4302      	orrs	r2, r0
 8001bcc:	4693      	mov	fp, r2
 8001bce:	9a00      	ldr	r2, [sp, #0]
 8001bd0:	408a      	lsls	r2, r1
 8001bd2:	4928      	ldr	r1, [pc, #160]	@ (8001c74 <__aeabi_ddiv+0x394>)
 8001bd4:	4453      	add	r3, sl
 8001bd6:	468a      	mov	sl, r1
 8001bd8:	449a      	add	sl, r3
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e6c8      	b.n	8001970 <__aeabi_ddiv+0x90>
 8001bde:	465b      	mov	r3, fp
 8001be0:	4303      	orrs	r3, r0
 8001be2:	4699      	mov	r9, r3
 8001be4:	d056      	beq.n	8001c94 <__aeabi_ddiv+0x3b4>
 8001be6:	465b      	mov	r3, fp
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d100      	bne.n	8001bee <__aeabi_ddiv+0x30e>
 8001bec:	e0cd      	b.n	8001d8a <__aeabi_ddiv+0x4aa>
 8001bee:	4658      	mov	r0, fp
 8001bf0:	f001 fa9a 	bl	8003128 <__clzsi2>
 8001bf4:	230b      	movs	r3, #11
 8001bf6:	425b      	negs	r3, r3
 8001bf8:	469c      	mov	ip, r3
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	4484      	add	ip, r0
 8001bfe:	4666      	mov	r6, ip
 8001c00:	231d      	movs	r3, #29
 8001c02:	1b9b      	subs	r3, r3, r6
 8001c04:	0026      	movs	r6, r4
 8001c06:	0011      	movs	r1, r2
 8001c08:	4658      	mov	r0, fp
 8001c0a:	40de      	lsrs	r6, r3
 8001c0c:	3908      	subs	r1, #8
 8001c0e:	4088      	lsls	r0, r1
 8001c10:	0033      	movs	r3, r6
 8001c12:	4303      	orrs	r3, r0
 8001c14:	4699      	mov	r9, r3
 8001c16:	0023      	movs	r3, r4
 8001c18:	408b      	lsls	r3, r1
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <__aeabi_ddiv+0x398>)
 8001c1e:	2400      	movs	r4, #0
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	469a      	mov	sl, r3
 8001c24:	2300      	movs	r3, #0
 8001c26:	9303      	str	r3, [sp, #12]
 8001c28:	e682      	b.n	8001930 <__aeabi_ddiv+0x50>
 8001c2a:	465a      	mov	r2, fp
 8001c2c:	4302      	orrs	r2, r0
 8001c2e:	4691      	mov	r9, r2
 8001c30:	d12a      	bne.n	8001c88 <__aeabi_ddiv+0x3a8>
 8001c32:	2200      	movs	r2, #0
 8001c34:	469a      	mov	sl, r3
 8001c36:	2302      	movs	r3, #2
 8001c38:	4690      	mov	r8, r2
 8001c3a:	2408      	movs	r4, #8
 8001c3c:	9303      	str	r3, [sp, #12]
 8001c3e:	e677      	b.n	8001930 <__aeabi_ddiv+0x50>
 8001c40:	465a      	mov	r2, fp
 8001c42:	9b00      	ldr	r3, [sp, #0]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	4b0d      	ldr	r3, [pc, #52]	@ (8001c7c <__aeabi_ddiv+0x39c>)
 8001c48:	469c      	mov	ip, r3
 8001c4a:	44e2      	add	sl, ip
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d117      	bne.n	8001c80 <__aeabi_ddiv+0x3a0>
 8001c50:	2302      	movs	r3, #2
 8001c52:	431c      	orrs	r4, r3
 8001c54:	2300      	movs	r3, #0
 8001c56:	469b      	mov	fp, r3
 8001c58:	3302      	adds	r3, #2
 8001c5a:	e689      	b.n	8001970 <__aeabi_ddiv+0x90>
 8001c5c:	000007ff 	.word	0x000007ff
 8001c60:	fffffc01 	.word	0xfffffc01
 8001c64:	0800b870 	.word	0x0800b870
 8001c68:	000003ff 	.word	0x000003ff
 8001c6c:	feffffff 	.word	0xfeffffff
 8001c70:	000007fe 	.word	0x000007fe
 8001c74:	000003f3 	.word	0x000003f3
 8001c78:	fffffc0d 	.word	0xfffffc0d
 8001c7c:	fffff801 	.word	0xfffff801
 8001c80:	2303      	movs	r3, #3
 8001c82:	0032      	movs	r2, r6
 8001c84:	431c      	orrs	r4, r3
 8001c86:	e673      	b.n	8001970 <__aeabi_ddiv+0x90>
 8001c88:	469a      	mov	sl, r3
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	46d9      	mov	r9, fp
 8001c8e:	240c      	movs	r4, #12
 8001c90:	9303      	str	r3, [sp, #12]
 8001c92:	e64d      	b.n	8001930 <__aeabi_ddiv+0x50>
 8001c94:	2300      	movs	r3, #0
 8001c96:	4698      	mov	r8, r3
 8001c98:	469a      	mov	sl, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	2404      	movs	r4, #4
 8001c9e:	9303      	str	r3, [sp, #12]
 8001ca0:	e646      	b.n	8001930 <__aeabi_ddiv+0x50>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	431c      	orrs	r4, r3
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	469b      	mov	fp, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	e660      	b.n	8001970 <__aeabi_ddiv+0x90>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2480      	movs	r4, #128	@ 0x80
 8001cb2:	4698      	mov	r8, r3
 8001cb4:	2600      	movs	r6, #0
 8001cb6:	4b92      	ldr	r3, [pc, #584]	@ (8001f00 <__aeabi_ddiv+0x620>)
 8001cb8:	0324      	lsls	r4, r4, #12
 8001cba:	e671      	b.n	80019a0 <__aeabi_ddiv+0xc0>
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4252      	negs	r2, r2
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	1ac9      	subs	r1, r1, r3
 8001cc4:	2938      	cmp	r1, #56	@ 0x38
 8001cc6:	dd00      	ble.n	8001cca <__aeabi_ddiv+0x3ea>
 8001cc8:	e666      	b.n	8001998 <__aeabi_ddiv+0xb8>
 8001cca:	291f      	cmp	r1, #31
 8001ccc:	dc00      	bgt.n	8001cd0 <__aeabi_ddiv+0x3f0>
 8001cce:	e0ab      	b.n	8001e28 <__aeabi_ddiv+0x548>
 8001cd0:	201f      	movs	r0, #31
 8001cd2:	4240      	negs	r0, r0
 8001cd4:	1ac3      	subs	r3, r0, r3
 8001cd6:	4658      	mov	r0, fp
 8001cd8:	40d8      	lsrs	r0, r3
 8001cda:	0003      	movs	r3, r0
 8001cdc:	2920      	cmp	r1, #32
 8001cde:	d004      	beq.n	8001cea <__aeabi_ddiv+0x40a>
 8001ce0:	4658      	mov	r0, fp
 8001ce2:	4988      	ldr	r1, [pc, #544]	@ (8001f04 <__aeabi_ddiv+0x624>)
 8001ce4:	4451      	add	r1, sl
 8001ce6:	4088      	lsls	r0, r1
 8001ce8:	4302      	orrs	r2, r0
 8001cea:	1e51      	subs	r1, r2, #1
 8001cec:	418a      	sbcs	r2, r1
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	2400      	movs	r4, #0
 8001cf6:	4011      	ands	r1, r2
 8001cf8:	4213      	tst	r3, r2
 8001cfa:	d00c      	beq.n	8001d16 <__aeabi_ddiv+0x436>
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d100      	bne.n	8001d06 <__aeabi_ddiv+0x426>
 8001d04:	e0f9      	b.n	8001efa <__aeabi_ddiv+0x61a>
 8001d06:	1d11      	adds	r1, r2, #4
 8001d08:	4291      	cmp	r1, r2
 8001d0a:	419b      	sbcs	r3, r3
 8001d0c:	000a      	movs	r2, r1
 8001d0e:	425b      	negs	r3, r3
 8001d10:	0759      	lsls	r1, r3, #29
 8001d12:	025b      	lsls	r3, r3, #9
 8001d14:	0b1c      	lsrs	r4, r3, #12
 8001d16:	08d2      	lsrs	r2, r2, #3
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	4690      	mov	r8, r2
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e63f      	b.n	80019a0 <__aeabi_ddiv+0xc0>
 8001d20:	2480      	movs	r4, #128	@ 0x80
 8001d22:	464b      	mov	r3, r9
 8001d24:	0324      	lsls	r4, r4, #12
 8001d26:	4223      	tst	r3, r4
 8001d28:	d009      	beq.n	8001d3e <__aeabi_ddiv+0x45e>
 8001d2a:	465b      	mov	r3, fp
 8001d2c:	4223      	tst	r3, r4
 8001d2e:	d106      	bne.n	8001d3e <__aeabi_ddiv+0x45e>
 8001d30:	431c      	orrs	r4, r3
 8001d32:	0324      	lsls	r4, r4, #12
 8001d34:	002e      	movs	r6, r5
 8001d36:	4690      	mov	r8, r2
 8001d38:	4b71      	ldr	r3, [pc, #452]	@ (8001f00 <__aeabi_ddiv+0x620>)
 8001d3a:	0b24      	lsrs	r4, r4, #12
 8001d3c:	e630      	b.n	80019a0 <__aeabi_ddiv+0xc0>
 8001d3e:	2480      	movs	r4, #128	@ 0x80
 8001d40:	464b      	mov	r3, r9
 8001d42:	0324      	lsls	r4, r4, #12
 8001d44:	431c      	orrs	r4, r3
 8001d46:	0324      	lsls	r4, r4, #12
 8001d48:	9e02      	ldr	r6, [sp, #8]
 8001d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f00 <__aeabi_ddiv+0x620>)
 8001d4c:	0b24      	lsrs	r4, r4, #12
 8001d4e:	e627      	b.n	80019a0 <__aeabi_ddiv+0xc0>
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d100      	bne.n	8001d56 <__aeabi_ddiv+0x476>
 8001d54:	e700      	b.n	8001b58 <__aeabi_ddiv+0x278>
 8001d56:	9800      	ldr	r0, [sp, #0]
 8001d58:	1e51      	subs	r1, r2, #1
 8001d5a:	4684      	mov	ip, r0
 8001d5c:	4464      	add	r4, ip
 8001d5e:	4284      	cmp	r4, r0
 8001d60:	d200      	bcs.n	8001d64 <__aeabi_ddiv+0x484>
 8001d62:	e084      	b.n	8001e6e <__aeabi_ddiv+0x58e>
 8001d64:	42bc      	cmp	r4, r7
 8001d66:	d200      	bcs.n	8001d6a <__aeabi_ddiv+0x48a>
 8001d68:	e0ae      	b.n	8001ec8 <__aeabi_ddiv+0x5e8>
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_ddiv+0x48e>
 8001d6c:	e0c1      	b.n	8001ef2 <__aeabi_ddiv+0x612>
 8001d6e:	000a      	movs	r2, r1
 8001d70:	e6f0      	b.n	8001b54 <__aeabi_ddiv+0x274>
 8001d72:	4542      	cmp	r2, r8
 8001d74:	d900      	bls.n	8001d78 <__aeabi_ddiv+0x498>
 8001d76:	e62c      	b.n	80019d2 <__aeabi_ddiv+0xf2>
 8001d78:	464b      	mov	r3, r9
 8001d7a:	07dc      	lsls	r4, r3, #31
 8001d7c:	0858      	lsrs	r0, r3, #1
 8001d7e:	4643      	mov	r3, r8
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	431c      	orrs	r4, r3
 8001d84:	4643      	mov	r3, r8
 8001d86:	07df      	lsls	r7, r3, #31
 8001d88:	e62a      	b.n	80019e0 <__aeabi_ddiv+0x100>
 8001d8a:	f001 f9cd 	bl	8003128 <__clzsi2>
 8001d8e:	2315      	movs	r3, #21
 8001d90:	469c      	mov	ip, r3
 8001d92:	4484      	add	ip, r0
 8001d94:	0002      	movs	r2, r0
 8001d96:	4663      	mov	r3, ip
 8001d98:	3220      	adds	r2, #32
 8001d9a:	2b1c      	cmp	r3, #28
 8001d9c:	dc00      	bgt.n	8001da0 <__aeabi_ddiv+0x4c0>
 8001d9e:	e72e      	b.n	8001bfe <__aeabi_ddiv+0x31e>
 8001da0:	0023      	movs	r3, r4
 8001da2:	3808      	subs	r0, #8
 8001da4:	4083      	lsls	r3, r0
 8001da6:	4699      	mov	r9, r3
 8001da8:	2300      	movs	r3, #0
 8001daa:	4698      	mov	r8, r3
 8001dac:	e736      	b.n	8001c1c <__aeabi_ddiv+0x33c>
 8001dae:	f001 f9bb 	bl	8003128 <__clzsi2>
 8001db2:	0002      	movs	r2, r0
 8001db4:	0003      	movs	r3, r0
 8001db6:	3215      	adds	r2, #21
 8001db8:	3320      	adds	r3, #32
 8001dba:	2a1c      	cmp	r2, #28
 8001dbc:	dc00      	bgt.n	8001dc0 <__aeabi_ddiv+0x4e0>
 8001dbe:	e6fb      	b.n	8001bb8 <__aeabi_ddiv+0x2d8>
 8001dc0:	9900      	ldr	r1, [sp, #0]
 8001dc2:	3808      	subs	r0, #8
 8001dc4:	4081      	lsls	r1, r0
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	468b      	mov	fp, r1
 8001dca:	e702      	b.n	8001bd2 <__aeabi_ddiv+0x2f2>
 8001dcc:	9900      	ldr	r1, [sp, #0]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	468c      	mov	ip, r1
 8001dd2:	4464      	add	r4, ip
 8001dd4:	42a1      	cmp	r1, r4
 8001dd6:	d900      	bls.n	8001dda <__aeabi_ddiv+0x4fa>
 8001dd8:	e69a      	b.n	8001b10 <__aeabi_ddiv+0x230>
 8001dda:	42a2      	cmp	r2, r4
 8001ddc:	d800      	bhi.n	8001de0 <__aeabi_ddiv+0x500>
 8001dde:	e697      	b.n	8001b10 <__aeabi_ddiv+0x230>
 8001de0:	1e83      	subs	r3, r0, #2
 8001de2:	4464      	add	r4, ip
 8001de4:	e694      	b.n	8001b10 <__aeabi_ddiv+0x230>
 8001de6:	46ac      	mov	ip, r5
 8001de8:	4461      	add	r1, ip
 8001dea:	3f01      	subs	r7, #1
 8001dec:	428d      	cmp	r5, r1
 8001dee:	d900      	bls.n	8001df2 <__aeabi_ddiv+0x512>
 8001df0:	e680      	b.n	8001af4 <__aeabi_ddiv+0x214>
 8001df2:	428a      	cmp	r2, r1
 8001df4:	d800      	bhi.n	8001df8 <__aeabi_ddiv+0x518>
 8001df6:	e67d      	b.n	8001af4 <__aeabi_ddiv+0x214>
 8001df8:	1e87      	subs	r7, r0, #2
 8001dfa:	4461      	add	r1, ip
 8001dfc:	e67a      	b.n	8001af4 <__aeabi_ddiv+0x214>
 8001dfe:	4285      	cmp	r5, r0
 8001e00:	d000      	beq.n	8001e04 <__aeabi_ddiv+0x524>
 8001e02:	e65f      	b.n	8001ac4 <__aeabi_ddiv+0x1e4>
 8001e04:	45b9      	cmp	r9, r7
 8001e06:	d900      	bls.n	8001e0a <__aeabi_ddiv+0x52a>
 8001e08:	e65c      	b.n	8001ac4 <__aeabi_ddiv+0x1e4>
 8001e0a:	e656      	b.n	8001aba <__aeabi_ddiv+0x1da>
 8001e0c:	42a2      	cmp	r2, r4
 8001e0e:	d800      	bhi.n	8001e12 <__aeabi_ddiv+0x532>
 8001e10:	e61a      	b.n	8001a48 <__aeabi_ddiv+0x168>
 8001e12:	1e83      	subs	r3, r0, #2
 8001e14:	4464      	add	r4, ip
 8001e16:	e617      	b.n	8001a48 <__aeabi_ddiv+0x168>
 8001e18:	428a      	cmp	r2, r1
 8001e1a:	d800      	bhi.n	8001e1e <__aeabi_ddiv+0x53e>
 8001e1c:	e600      	b.n	8001a20 <__aeabi_ddiv+0x140>
 8001e1e:	46ac      	mov	ip, r5
 8001e20:	1e83      	subs	r3, r0, #2
 8001e22:	4698      	mov	r8, r3
 8001e24:	4461      	add	r1, ip
 8001e26:	e5fb      	b.n	8001a20 <__aeabi_ddiv+0x140>
 8001e28:	4837      	ldr	r0, [pc, #220]	@ (8001f08 <__aeabi_ddiv+0x628>)
 8001e2a:	0014      	movs	r4, r2
 8001e2c:	4450      	add	r0, sl
 8001e2e:	4082      	lsls	r2, r0
 8001e30:	465b      	mov	r3, fp
 8001e32:	0017      	movs	r7, r2
 8001e34:	4083      	lsls	r3, r0
 8001e36:	40cc      	lsrs	r4, r1
 8001e38:	1e7a      	subs	r2, r7, #1
 8001e3a:	4197      	sbcs	r7, r2
 8001e3c:	4323      	orrs	r3, r4
 8001e3e:	433b      	orrs	r3, r7
 8001e40:	001a      	movs	r2, r3
 8001e42:	465b      	mov	r3, fp
 8001e44:	40cb      	lsrs	r3, r1
 8001e46:	0751      	lsls	r1, r2, #29
 8001e48:	d009      	beq.n	8001e5e <__aeabi_ddiv+0x57e>
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	4011      	ands	r1, r2
 8001e4e:	2904      	cmp	r1, #4
 8001e50:	d005      	beq.n	8001e5e <__aeabi_ddiv+0x57e>
 8001e52:	1d11      	adds	r1, r2, #4
 8001e54:	4291      	cmp	r1, r2
 8001e56:	4192      	sbcs	r2, r2
 8001e58:	4252      	negs	r2, r2
 8001e5a:	189b      	adds	r3, r3, r2
 8001e5c:	000a      	movs	r2, r1
 8001e5e:	0219      	lsls	r1, r3, #8
 8001e60:	d400      	bmi.n	8001e64 <__aeabi_ddiv+0x584>
 8001e62:	e755      	b.n	8001d10 <__aeabi_ddiv+0x430>
 8001e64:	2200      	movs	r2, #0
 8001e66:	2301      	movs	r3, #1
 8001e68:	2400      	movs	r4, #0
 8001e6a:	4690      	mov	r8, r2
 8001e6c:	e598      	b.n	80019a0 <__aeabi_ddiv+0xc0>
 8001e6e:	000a      	movs	r2, r1
 8001e70:	42bc      	cmp	r4, r7
 8001e72:	d000      	beq.n	8001e76 <__aeabi_ddiv+0x596>
 8001e74:	e66e      	b.n	8001b54 <__aeabi_ddiv+0x274>
 8001e76:	454b      	cmp	r3, r9
 8001e78:	d000      	beq.n	8001e7c <__aeabi_ddiv+0x59c>
 8001e7a:	e66b      	b.n	8001b54 <__aeabi_ddiv+0x274>
 8001e7c:	e66c      	b.n	8001b58 <__aeabi_ddiv+0x278>
 8001e7e:	4b23      	ldr	r3, [pc, #140]	@ (8001f0c <__aeabi_ddiv+0x62c>)
 8001e80:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <__aeabi_ddiv+0x630>)
 8001e82:	4453      	add	r3, sl
 8001e84:	4592      	cmp	sl, r2
 8001e86:	da00      	bge.n	8001e8a <__aeabi_ddiv+0x5aa>
 8001e88:	e718      	b.n	8001cbc <__aeabi_ddiv+0x3dc>
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	4249      	negs	r1, r1
 8001e8e:	1d0a      	adds	r2, r1, #4
 8001e90:	428a      	cmp	r2, r1
 8001e92:	4189      	sbcs	r1, r1
 8001e94:	4249      	negs	r1, r1
 8001e96:	448b      	add	fp, r1
 8001e98:	e666      	b.n	8001b68 <__aeabi_ddiv+0x288>
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	4011      	ands	r1, r2
 8001e9e:	2904      	cmp	r1, #4
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_ddiv+0x5c4>
 8001ea2:	e661      	b.n	8001b68 <__aeabi_ddiv+0x288>
 8001ea4:	0011      	movs	r1, r2
 8001ea6:	e7f2      	b.n	8001e8e <__aeabi_ddiv+0x5ae>
 8001ea8:	42bc      	cmp	r4, r7
 8001eaa:	d800      	bhi.n	8001eae <__aeabi_ddiv+0x5ce>
 8001eac:	e60a      	b.n	8001ac4 <__aeabi_ddiv+0x1e4>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	425b      	negs	r3, r3
 8001eb2:	469c      	mov	ip, r3
 8001eb4:	9900      	ldr	r1, [sp, #0]
 8001eb6:	444f      	add	r7, r9
 8001eb8:	454f      	cmp	r7, r9
 8001eba:	419b      	sbcs	r3, r3
 8001ebc:	44e3      	add	fp, ip
 8001ebe:	468c      	mov	ip, r1
 8001ec0:	425b      	negs	r3, r3
 8001ec2:	4463      	add	r3, ip
 8001ec4:	18c0      	adds	r0, r0, r3
 8001ec6:	e5ff      	b.n	8001ac8 <__aeabi_ddiv+0x1e8>
 8001ec8:	4649      	mov	r1, r9
 8001eca:	9d00      	ldr	r5, [sp, #0]
 8001ecc:	0048      	lsls	r0, r1, #1
 8001ece:	4548      	cmp	r0, r9
 8001ed0:	4189      	sbcs	r1, r1
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	4249      	negs	r1, r1
 8001ed6:	4461      	add	r1, ip
 8001ed8:	4681      	mov	r9, r0
 8001eda:	3a02      	subs	r2, #2
 8001edc:	1864      	adds	r4, r4, r1
 8001ede:	e7c7      	b.n	8001e70 <__aeabi_ddiv+0x590>
 8001ee0:	2480      	movs	r4, #128	@ 0x80
 8001ee2:	465b      	mov	r3, fp
 8001ee4:	0324      	lsls	r4, r4, #12
 8001ee6:	431c      	orrs	r4, r3
 8001ee8:	0324      	lsls	r4, r4, #12
 8001eea:	4690      	mov	r8, r2
 8001eec:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <__aeabi_ddiv+0x620>)
 8001eee:	0b24      	lsrs	r4, r4, #12
 8001ef0:	e556      	b.n	80019a0 <__aeabi_ddiv+0xc0>
 8001ef2:	4599      	cmp	r9, r3
 8001ef4:	d3e8      	bcc.n	8001ec8 <__aeabi_ddiv+0x5e8>
 8001ef6:	000a      	movs	r2, r1
 8001ef8:	e7bd      	b.n	8001e76 <__aeabi_ddiv+0x596>
 8001efa:	2300      	movs	r3, #0
 8001efc:	e708      	b.n	8001d10 <__aeabi_ddiv+0x430>
 8001efe:	46c0      	nop			@ (mov r8, r8)
 8001f00:	000007ff 	.word	0x000007ff
 8001f04:	0000043e 	.word	0x0000043e
 8001f08:	0000041e 	.word	0x0000041e
 8001f0c:	000003ff 	.word	0x000003ff
 8001f10:	fffffc02 	.word	0xfffffc02

08001f14 <__eqdf2>:
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	4657      	mov	r7, sl
 8001f18:	46de      	mov	lr, fp
 8001f1a:	464e      	mov	r6, r9
 8001f1c:	4645      	mov	r5, r8
 8001f1e:	b5e0      	push	{r5, r6, r7, lr}
 8001f20:	000d      	movs	r5, r1
 8001f22:	0004      	movs	r4, r0
 8001f24:	0fe8      	lsrs	r0, r5, #31
 8001f26:	4683      	mov	fp, r0
 8001f28:	0309      	lsls	r1, r1, #12
 8001f2a:	0fd8      	lsrs	r0, r3, #31
 8001f2c:	0b09      	lsrs	r1, r1, #12
 8001f2e:	4682      	mov	sl, r0
 8001f30:	4819      	ldr	r0, [pc, #100]	@ (8001f98 <__eqdf2+0x84>)
 8001f32:	468c      	mov	ip, r1
 8001f34:	031f      	lsls	r7, r3, #12
 8001f36:	0069      	lsls	r1, r5, #1
 8001f38:	005e      	lsls	r6, r3, #1
 8001f3a:	0d49      	lsrs	r1, r1, #21
 8001f3c:	0b3f      	lsrs	r7, r7, #12
 8001f3e:	0d76      	lsrs	r6, r6, #21
 8001f40:	4281      	cmp	r1, r0
 8001f42:	d018      	beq.n	8001f76 <__eqdf2+0x62>
 8001f44:	4286      	cmp	r6, r0
 8001f46:	d00f      	beq.n	8001f68 <__eqdf2+0x54>
 8001f48:	2001      	movs	r0, #1
 8001f4a:	42b1      	cmp	r1, r6
 8001f4c:	d10d      	bne.n	8001f6a <__eqdf2+0x56>
 8001f4e:	45bc      	cmp	ip, r7
 8001f50:	d10b      	bne.n	8001f6a <__eqdf2+0x56>
 8001f52:	4294      	cmp	r4, r2
 8001f54:	d109      	bne.n	8001f6a <__eqdf2+0x56>
 8001f56:	45d3      	cmp	fp, sl
 8001f58:	d01c      	beq.n	8001f94 <__eqdf2+0x80>
 8001f5a:	2900      	cmp	r1, #0
 8001f5c:	d105      	bne.n	8001f6a <__eqdf2+0x56>
 8001f5e:	4660      	mov	r0, ip
 8001f60:	4320      	orrs	r0, r4
 8001f62:	1e43      	subs	r3, r0, #1
 8001f64:	4198      	sbcs	r0, r3
 8001f66:	e000      	b.n	8001f6a <__eqdf2+0x56>
 8001f68:	2001      	movs	r0, #1
 8001f6a:	bcf0      	pop	{r4, r5, r6, r7}
 8001f6c:	46bb      	mov	fp, r7
 8001f6e:	46b2      	mov	sl, r6
 8001f70:	46a9      	mov	r9, r5
 8001f72:	46a0      	mov	r8, r4
 8001f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f76:	2001      	movs	r0, #1
 8001f78:	428e      	cmp	r6, r1
 8001f7a:	d1f6      	bne.n	8001f6a <__eqdf2+0x56>
 8001f7c:	4661      	mov	r1, ip
 8001f7e:	4339      	orrs	r1, r7
 8001f80:	000f      	movs	r7, r1
 8001f82:	4317      	orrs	r7, r2
 8001f84:	4327      	orrs	r7, r4
 8001f86:	d1f0      	bne.n	8001f6a <__eqdf2+0x56>
 8001f88:	465b      	mov	r3, fp
 8001f8a:	4652      	mov	r2, sl
 8001f8c:	1a98      	subs	r0, r3, r2
 8001f8e:	1e43      	subs	r3, r0, #1
 8001f90:	4198      	sbcs	r0, r3
 8001f92:	e7ea      	b.n	8001f6a <__eqdf2+0x56>
 8001f94:	2000      	movs	r0, #0
 8001f96:	e7e8      	b.n	8001f6a <__eqdf2+0x56>
 8001f98:	000007ff 	.word	0x000007ff

08001f9c <__gedf2>:
 8001f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9e:	4657      	mov	r7, sl
 8001fa0:	464e      	mov	r6, r9
 8001fa2:	4645      	mov	r5, r8
 8001fa4:	46de      	mov	lr, fp
 8001fa6:	b5e0      	push	{r5, r6, r7, lr}
 8001fa8:	000d      	movs	r5, r1
 8001faa:	030f      	lsls	r7, r1, #12
 8001fac:	0b39      	lsrs	r1, r7, #12
 8001fae:	b083      	sub	sp, #12
 8001fb0:	0004      	movs	r4, r0
 8001fb2:	4680      	mov	r8, r0
 8001fb4:	9101      	str	r1, [sp, #4]
 8001fb6:	0058      	lsls	r0, r3, #1
 8001fb8:	0fe9      	lsrs	r1, r5, #31
 8001fba:	4f31      	ldr	r7, [pc, #196]	@ (8002080 <__gedf2+0xe4>)
 8001fbc:	0d40      	lsrs	r0, r0, #21
 8001fbe:	468c      	mov	ip, r1
 8001fc0:	006e      	lsls	r6, r5, #1
 8001fc2:	0319      	lsls	r1, r3, #12
 8001fc4:	4682      	mov	sl, r0
 8001fc6:	4691      	mov	r9, r2
 8001fc8:	0d76      	lsrs	r6, r6, #21
 8001fca:	0b09      	lsrs	r1, r1, #12
 8001fcc:	0fd8      	lsrs	r0, r3, #31
 8001fce:	42be      	cmp	r6, r7
 8001fd0:	d01f      	beq.n	8002012 <__gedf2+0x76>
 8001fd2:	45ba      	cmp	sl, r7
 8001fd4:	d00f      	beq.n	8001ff6 <__gedf2+0x5a>
 8001fd6:	2e00      	cmp	r6, #0
 8001fd8:	d12f      	bne.n	800203a <__gedf2+0x9e>
 8001fda:	4655      	mov	r5, sl
 8001fdc:	9e01      	ldr	r6, [sp, #4]
 8001fde:	4334      	orrs	r4, r6
 8001fe0:	2d00      	cmp	r5, #0
 8001fe2:	d127      	bne.n	8002034 <__gedf2+0x98>
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	d03a      	beq.n	800205e <__gedf2+0xc2>
 8001fe8:	2c00      	cmp	r4, #0
 8001fea:	d145      	bne.n	8002078 <__gedf2+0xdc>
 8001fec:	2800      	cmp	r0, #0
 8001fee:	d11a      	bne.n	8002026 <__gedf2+0x8a>
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	4240      	negs	r0, r0
 8001ff4:	e017      	b.n	8002026 <__gedf2+0x8a>
 8001ff6:	4311      	orrs	r1, r2
 8001ff8:	d13b      	bne.n	8002072 <__gedf2+0xd6>
 8001ffa:	2e00      	cmp	r6, #0
 8001ffc:	d102      	bne.n	8002004 <__gedf2+0x68>
 8001ffe:	9f01      	ldr	r7, [sp, #4]
 8002000:	4327      	orrs	r7, r4
 8002002:	d0f3      	beq.n	8001fec <__gedf2+0x50>
 8002004:	4584      	cmp	ip, r0
 8002006:	d109      	bne.n	800201c <__gedf2+0x80>
 8002008:	4663      	mov	r3, ip
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <__gedf2+0x54>
 800200e:	4660      	mov	r0, ip
 8002010:	e009      	b.n	8002026 <__gedf2+0x8a>
 8002012:	9f01      	ldr	r7, [sp, #4]
 8002014:	4327      	orrs	r7, r4
 8002016:	d12c      	bne.n	8002072 <__gedf2+0xd6>
 8002018:	45b2      	cmp	sl, r6
 800201a:	d024      	beq.n	8002066 <__gedf2+0xca>
 800201c:	4663      	mov	r3, ip
 800201e:	2002      	movs	r0, #2
 8002020:	3b01      	subs	r3, #1
 8002022:	4018      	ands	r0, r3
 8002024:	3801      	subs	r0, #1
 8002026:	b003      	add	sp, #12
 8002028:	bcf0      	pop	{r4, r5, r6, r7}
 800202a:	46bb      	mov	fp, r7
 800202c:	46b2      	mov	sl, r6
 800202e:	46a9      	mov	r9, r5
 8002030:	46a0      	mov	r8, r4
 8002032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002034:	2c00      	cmp	r4, #0
 8002036:	d0d9      	beq.n	8001fec <__gedf2+0x50>
 8002038:	e7e4      	b.n	8002004 <__gedf2+0x68>
 800203a:	4654      	mov	r4, sl
 800203c:	2c00      	cmp	r4, #0
 800203e:	d0ed      	beq.n	800201c <__gedf2+0x80>
 8002040:	4584      	cmp	ip, r0
 8002042:	d1eb      	bne.n	800201c <__gedf2+0x80>
 8002044:	4556      	cmp	r6, sl
 8002046:	dce9      	bgt.n	800201c <__gedf2+0x80>
 8002048:	dbde      	blt.n	8002008 <__gedf2+0x6c>
 800204a:	9b01      	ldr	r3, [sp, #4]
 800204c:	428b      	cmp	r3, r1
 800204e:	d8e5      	bhi.n	800201c <__gedf2+0x80>
 8002050:	d1da      	bne.n	8002008 <__gedf2+0x6c>
 8002052:	45c8      	cmp	r8, r9
 8002054:	d8e2      	bhi.n	800201c <__gedf2+0x80>
 8002056:	2000      	movs	r0, #0
 8002058:	45c8      	cmp	r8, r9
 800205a:	d2e4      	bcs.n	8002026 <__gedf2+0x8a>
 800205c:	e7d4      	b.n	8002008 <__gedf2+0x6c>
 800205e:	2000      	movs	r0, #0
 8002060:	2c00      	cmp	r4, #0
 8002062:	d0e0      	beq.n	8002026 <__gedf2+0x8a>
 8002064:	e7da      	b.n	800201c <__gedf2+0x80>
 8002066:	4311      	orrs	r1, r2
 8002068:	d103      	bne.n	8002072 <__gedf2+0xd6>
 800206a:	4584      	cmp	ip, r0
 800206c:	d1d6      	bne.n	800201c <__gedf2+0x80>
 800206e:	2000      	movs	r0, #0
 8002070:	e7d9      	b.n	8002026 <__gedf2+0x8a>
 8002072:	2002      	movs	r0, #2
 8002074:	4240      	negs	r0, r0
 8002076:	e7d6      	b.n	8002026 <__gedf2+0x8a>
 8002078:	4584      	cmp	ip, r0
 800207a:	d0e6      	beq.n	800204a <__gedf2+0xae>
 800207c:	e7ce      	b.n	800201c <__gedf2+0x80>
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	000007ff 	.word	0x000007ff

08002084 <__ledf2>:
 8002084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002086:	4657      	mov	r7, sl
 8002088:	464e      	mov	r6, r9
 800208a:	4645      	mov	r5, r8
 800208c:	46de      	mov	lr, fp
 800208e:	b5e0      	push	{r5, r6, r7, lr}
 8002090:	000d      	movs	r5, r1
 8002092:	030f      	lsls	r7, r1, #12
 8002094:	0004      	movs	r4, r0
 8002096:	4680      	mov	r8, r0
 8002098:	0fe8      	lsrs	r0, r5, #31
 800209a:	0b39      	lsrs	r1, r7, #12
 800209c:	4684      	mov	ip, r0
 800209e:	b083      	sub	sp, #12
 80020a0:	0058      	lsls	r0, r3, #1
 80020a2:	4f30      	ldr	r7, [pc, #192]	@ (8002164 <__ledf2+0xe0>)
 80020a4:	0d40      	lsrs	r0, r0, #21
 80020a6:	9101      	str	r1, [sp, #4]
 80020a8:	031e      	lsls	r6, r3, #12
 80020aa:	0069      	lsls	r1, r5, #1
 80020ac:	4682      	mov	sl, r0
 80020ae:	4691      	mov	r9, r2
 80020b0:	0d49      	lsrs	r1, r1, #21
 80020b2:	0b36      	lsrs	r6, r6, #12
 80020b4:	0fd8      	lsrs	r0, r3, #31
 80020b6:	42b9      	cmp	r1, r7
 80020b8:	d020      	beq.n	80020fc <__ledf2+0x78>
 80020ba:	45ba      	cmp	sl, r7
 80020bc:	d00f      	beq.n	80020de <__ledf2+0x5a>
 80020be:	2900      	cmp	r1, #0
 80020c0:	d12b      	bne.n	800211a <__ledf2+0x96>
 80020c2:	9901      	ldr	r1, [sp, #4]
 80020c4:	430c      	orrs	r4, r1
 80020c6:	4651      	mov	r1, sl
 80020c8:	2900      	cmp	r1, #0
 80020ca:	d137      	bne.n	800213c <__ledf2+0xb8>
 80020cc:	4332      	orrs	r2, r6
 80020ce:	d038      	beq.n	8002142 <__ledf2+0xbe>
 80020d0:	2c00      	cmp	r4, #0
 80020d2:	d144      	bne.n	800215e <__ledf2+0xda>
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d119      	bne.n	800210c <__ledf2+0x88>
 80020d8:	2001      	movs	r0, #1
 80020da:	4240      	negs	r0, r0
 80020dc:	e016      	b.n	800210c <__ledf2+0x88>
 80020de:	4316      	orrs	r6, r2
 80020e0:	d113      	bne.n	800210a <__ledf2+0x86>
 80020e2:	2900      	cmp	r1, #0
 80020e4:	d102      	bne.n	80020ec <__ledf2+0x68>
 80020e6:	9f01      	ldr	r7, [sp, #4]
 80020e8:	4327      	orrs	r7, r4
 80020ea:	d0f3      	beq.n	80020d4 <__ledf2+0x50>
 80020ec:	4584      	cmp	ip, r0
 80020ee:	d020      	beq.n	8002132 <__ledf2+0xae>
 80020f0:	4663      	mov	r3, ip
 80020f2:	2002      	movs	r0, #2
 80020f4:	3b01      	subs	r3, #1
 80020f6:	4018      	ands	r0, r3
 80020f8:	3801      	subs	r0, #1
 80020fa:	e007      	b.n	800210c <__ledf2+0x88>
 80020fc:	9f01      	ldr	r7, [sp, #4]
 80020fe:	4327      	orrs	r7, r4
 8002100:	d103      	bne.n	800210a <__ledf2+0x86>
 8002102:	458a      	cmp	sl, r1
 8002104:	d1f4      	bne.n	80020f0 <__ledf2+0x6c>
 8002106:	4316      	orrs	r6, r2
 8002108:	d01f      	beq.n	800214a <__ledf2+0xc6>
 800210a:	2002      	movs	r0, #2
 800210c:	b003      	add	sp, #12
 800210e:	bcf0      	pop	{r4, r5, r6, r7}
 8002110:	46bb      	mov	fp, r7
 8002112:	46b2      	mov	sl, r6
 8002114:	46a9      	mov	r9, r5
 8002116:	46a0      	mov	r8, r4
 8002118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211a:	4654      	mov	r4, sl
 800211c:	2c00      	cmp	r4, #0
 800211e:	d0e7      	beq.n	80020f0 <__ledf2+0x6c>
 8002120:	4584      	cmp	ip, r0
 8002122:	d1e5      	bne.n	80020f0 <__ledf2+0x6c>
 8002124:	4551      	cmp	r1, sl
 8002126:	dce3      	bgt.n	80020f0 <__ledf2+0x6c>
 8002128:	db03      	blt.n	8002132 <__ledf2+0xae>
 800212a:	9b01      	ldr	r3, [sp, #4]
 800212c:	42b3      	cmp	r3, r6
 800212e:	d8df      	bhi.n	80020f0 <__ledf2+0x6c>
 8002130:	d00f      	beq.n	8002152 <__ledf2+0xce>
 8002132:	4663      	mov	r3, ip
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0cf      	beq.n	80020d8 <__ledf2+0x54>
 8002138:	4660      	mov	r0, ip
 800213a:	e7e7      	b.n	800210c <__ledf2+0x88>
 800213c:	2c00      	cmp	r4, #0
 800213e:	d0c9      	beq.n	80020d4 <__ledf2+0x50>
 8002140:	e7d4      	b.n	80020ec <__ledf2+0x68>
 8002142:	2000      	movs	r0, #0
 8002144:	2c00      	cmp	r4, #0
 8002146:	d0e1      	beq.n	800210c <__ledf2+0x88>
 8002148:	e7d2      	b.n	80020f0 <__ledf2+0x6c>
 800214a:	4584      	cmp	ip, r0
 800214c:	d1d0      	bne.n	80020f0 <__ledf2+0x6c>
 800214e:	2000      	movs	r0, #0
 8002150:	e7dc      	b.n	800210c <__ledf2+0x88>
 8002152:	45c8      	cmp	r8, r9
 8002154:	d8cc      	bhi.n	80020f0 <__ledf2+0x6c>
 8002156:	2000      	movs	r0, #0
 8002158:	45c8      	cmp	r8, r9
 800215a:	d2d7      	bcs.n	800210c <__ledf2+0x88>
 800215c:	e7e9      	b.n	8002132 <__ledf2+0xae>
 800215e:	4584      	cmp	ip, r0
 8002160:	d0e3      	beq.n	800212a <__ledf2+0xa6>
 8002162:	e7c5      	b.n	80020f0 <__ledf2+0x6c>
 8002164:	000007ff 	.word	0x000007ff

08002168 <__aeabi_dmul>:
 8002168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216a:	4657      	mov	r7, sl
 800216c:	46de      	mov	lr, fp
 800216e:	464e      	mov	r6, r9
 8002170:	4645      	mov	r5, r8
 8002172:	b5e0      	push	{r5, r6, r7, lr}
 8002174:	001f      	movs	r7, r3
 8002176:	030b      	lsls	r3, r1, #12
 8002178:	0b1b      	lsrs	r3, r3, #12
 800217a:	0016      	movs	r6, r2
 800217c:	469a      	mov	sl, r3
 800217e:	0fca      	lsrs	r2, r1, #31
 8002180:	004b      	lsls	r3, r1, #1
 8002182:	0004      	movs	r4, r0
 8002184:	4693      	mov	fp, r2
 8002186:	b087      	sub	sp, #28
 8002188:	0d5b      	lsrs	r3, r3, #21
 800218a:	d100      	bne.n	800218e <__aeabi_dmul+0x26>
 800218c:	e0d5      	b.n	800233a <__aeabi_dmul+0x1d2>
 800218e:	4abb      	ldr	r2, [pc, #748]	@ (800247c <__aeabi_dmul+0x314>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d100      	bne.n	8002196 <__aeabi_dmul+0x2e>
 8002194:	e0f8      	b.n	8002388 <__aeabi_dmul+0x220>
 8002196:	4651      	mov	r1, sl
 8002198:	0f42      	lsrs	r2, r0, #29
 800219a:	00c9      	lsls	r1, r1, #3
 800219c:	430a      	orrs	r2, r1
 800219e:	2180      	movs	r1, #128	@ 0x80
 80021a0:	0409      	lsls	r1, r1, #16
 80021a2:	4311      	orrs	r1, r2
 80021a4:	00c2      	lsls	r2, r0, #3
 80021a6:	4691      	mov	r9, r2
 80021a8:	4ab5      	ldr	r2, [pc, #724]	@ (8002480 <__aeabi_dmul+0x318>)
 80021aa:	468a      	mov	sl, r1
 80021ac:	189d      	adds	r5, r3, r2
 80021ae:	2300      	movs	r3, #0
 80021b0:	4698      	mov	r8, r3
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	033c      	lsls	r4, r7, #12
 80021b6:	007b      	lsls	r3, r7, #1
 80021b8:	0ffa      	lsrs	r2, r7, #31
 80021ba:	0030      	movs	r0, r6
 80021bc:	0b24      	lsrs	r4, r4, #12
 80021be:	0d5b      	lsrs	r3, r3, #21
 80021c0:	9200      	str	r2, [sp, #0]
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dmul+0x5e>
 80021c4:	e096      	b.n	80022f4 <__aeabi_dmul+0x18c>
 80021c6:	4aad      	ldr	r2, [pc, #692]	@ (800247c <__aeabi_dmul+0x314>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d031      	beq.n	8002230 <__aeabi_dmul+0xc8>
 80021cc:	0f72      	lsrs	r2, r6, #29
 80021ce:	00e4      	lsls	r4, r4, #3
 80021d0:	4322      	orrs	r2, r4
 80021d2:	2480      	movs	r4, #128	@ 0x80
 80021d4:	0424      	lsls	r4, r4, #16
 80021d6:	4314      	orrs	r4, r2
 80021d8:	4aa9      	ldr	r2, [pc, #676]	@ (8002480 <__aeabi_dmul+0x318>)
 80021da:	00f0      	lsls	r0, r6, #3
 80021dc:	4694      	mov	ip, r2
 80021de:	4463      	add	r3, ip
 80021e0:	195b      	adds	r3, r3, r5
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	9201      	str	r2, [sp, #4]
 80021e6:	4642      	mov	r2, r8
 80021e8:	2600      	movs	r6, #0
 80021ea:	2a0a      	cmp	r2, #10
 80021ec:	dc42      	bgt.n	8002274 <__aeabi_dmul+0x10c>
 80021ee:	465a      	mov	r2, fp
 80021f0:	9900      	ldr	r1, [sp, #0]
 80021f2:	404a      	eors	r2, r1
 80021f4:	4693      	mov	fp, r2
 80021f6:	4642      	mov	r2, r8
 80021f8:	2a02      	cmp	r2, #2
 80021fa:	dc32      	bgt.n	8002262 <__aeabi_dmul+0xfa>
 80021fc:	3a01      	subs	r2, #1
 80021fe:	2a01      	cmp	r2, #1
 8002200:	d900      	bls.n	8002204 <__aeabi_dmul+0x9c>
 8002202:	e149      	b.n	8002498 <__aeabi_dmul+0x330>
 8002204:	2e02      	cmp	r6, #2
 8002206:	d100      	bne.n	800220a <__aeabi_dmul+0xa2>
 8002208:	e0ca      	b.n	80023a0 <__aeabi_dmul+0x238>
 800220a:	2e01      	cmp	r6, #1
 800220c:	d13d      	bne.n	800228a <__aeabi_dmul+0x122>
 800220e:	2300      	movs	r3, #0
 8002210:	2400      	movs	r4, #0
 8002212:	2200      	movs	r2, #0
 8002214:	0010      	movs	r0, r2
 8002216:	465a      	mov	r2, fp
 8002218:	051b      	lsls	r3, r3, #20
 800221a:	4323      	orrs	r3, r4
 800221c:	07d2      	lsls	r2, r2, #31
 800221e:	4313      	orrs	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	b007      	add	sp, #28
 8002224:	bcf0      	pop	{r4, r5, r6, r7}
 8002226:	46bb      	mov	fp, r7
 8002228:	46b2      	mov	sl, r6
 800222a:	46a9      	mov	r9, r5
 800222c:	46a0      	mov	r8, r4
 800222e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002230:	4b92      	ldr	r3, [pc, #584]	@ (800247c <__aeabi_dmul+0x314>)
 8002232:	4326      	orrs	r6, r4
 8002234:	18eb      	adds	r3, r5, r3
 8002236:	2e00      	cmp	r6, #0
 8002238:	d100      	bne.n	800223c <__aeabi_dmul+0xd4>
 800223a:	e0bb      	b.n	80023b4 <__aeabi_dmul+0x24c>
 800223c:	2203      	movs	r2, #3
 800223e:	4641      	mov	r1, r8
 8002240:	4311      	orrs	r1, r2
 8002242:	465a      	mov	r2, fp
 8002244:	4688      	mov	r8, r1
 8002246:	9900      	ldr	r1, [sp, #0]
 8002248:	404a      	eors	r2, r1
 800224a:	2180      	movs	r1, #128	@ 0x80
 800224c:	0109      	lsls	r1, r1, #4
 800224e:	468c      	mov	ip, r1
 8002250:	0029      	movs	r1, r5
 8002252:	4461      	add	r1, ip
 8002254:	9101      	str	r1, [sp, #4]
 8002256:	4641      	mov	r1, r8
 8002258:	290a      	cmp	r1, #10
 800225a:	dd00      	ble.n	800225e <__aeabi_dmul+0xf6>
 800225c:	e233      	b.n	80026c6 <__aeabi_dmul+0x55e>
 800225e:	4693      	mov	fp, r2
 8002260:	2603      	movs	r6, #3
 8002262:	4642      	mov	r2, r8
 8002264:	2701      	movs	r7, #1
 8002266:	4097      	lsls	r7, r2
 8002268:	21a6      	movs	r1, #166	@ 0xa6
 800226a:	003a      	movs	r2, r7
 800226c:	00c9      	lsls	r1, r1, #3
 800226e:	400a      	ands	r2, r1
 8002270:	420f      	tst	r7, r1
 8002272:	d031      	beq.n	80022d8 <__aeabi_dmul+0x170>
 8002274:	9e02      	ldr	r6, [sp, #8]
 8002276:	2e02      	cmp	r6, #2
 8002278:	d100      	bne.n	800227c <__aeabi_dmul+0x114>
 800227a:	e235      	b.n	80026e8 <__aeabi_dmul+0x580>
 800227c:	2e03      	cmp	r6, #3
 800227e:	d100      	bne.n	8002282 <__aeabi_dmul+0x11a>
 8002280:	e1d2      	b.n	8002628 <__aeabi_dmul+0x4c0>
 8002282:	4654      	mov	r4, sl
 8002284:	4648      	mov	r0, r9
 8002286:	2e01      	cmp	r6, #1
 8002288:	d0c1      	beq.n	800220e <__aeabi_dmul+0xa6>
 800228a:	9a01      	ldr	r2, [sp, #4]
 800228c:	4b7d      	ldr	r3, [pc, #500]	@ (8002484 <__aeabi_dmul+0x31c>)
 800228e:	4694      	mov	ip, r2
 8002290:	4463      	add	r3, ip
 8002292:	2b00      	cmp	r3, #0
 8002294:	dc00      	bgt.n	8002298 <__aeabi_dmul+0x130>
 8002296:	e0c0      	b.n	800241a <__aeabi_dmul+0x2b2>
 8002298:	0742      	lsls	r2, r0, #29
 800229a:	d009      	beq.n	80022b0 <__aeabi_dmul+0x148>
 800229c:	220f      	movs	r2, #15
 800229e:	4002      	ands	r2, r0
 80022a0:	2a04      	cmp	r2, #4
 80022a2:	d005      	beq.n	80022b0 <__aeabi_dmul+0x148>
 80022a4:	1d02      	adds	r2, r0, #4
 80022a6:	4282      	cmp	r2, r0
 80022a8:	4180      	sbcs	r0, r0
 80022aa:	4240      	negs	r0, r0
 80022ac:	1824      	adds	r4, r4, r0
 80022ae:	0010      	movs	r0, r2
 80022b0:	01e2      	lsls	r2, r4, #7
 80022b2:	d506      	bpl.n	80022c2 <__aeabi_dmul+0x15a>
 80022b4:	4b74      	ldr	r3, [pc, #464]	@ (8002488 <__aeabi_dmul+0x320>)
 80022b6:	9a01      	ldr	r2, [sp, #4]
 80022b8:	401c      	ands	r4, r3
 80022ba:	2380      	movs	r3, #128	@ 0x80
 80022bc:	4694      	mov	ip, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4463      	add	r3, ip
 80022c2:	4a72      	ldr	r2, [pc, #456]	@ (800248c <__aeabi_dmul+0x324>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	dc6b      	bgt.n	80023a0 <__aeabi_dmul+0x238>
 80022c8:	0762      	lsls	r2, r4, #29
 80022ca:	08c0      	lsrs	r0, r0, #3
 80022cc:	0264      	lsls	r4, r4, #9
 80022ce:	055b      	lsls	r3, r3, #21
 80022d0:	4302      	orrs	r2, r0
 80022d2:	0b24      	lsrs	r4, r4, #12
 80022d4:	0d5b      	lsrs	r3, r3, #21
 80022d6:	e79d      	b.n	8002214 <__aeabi_dmul+0xac>
 80022d8:	2190      	movs	r1, #144	@ 0x90
 80022da:	0089      	lsls	r1, r1, #2
 80022dc:	420f      	tst	r7, r1
 80022de:	d163      	bne.n	80023a8 <__aeabi_dmul+0x240>
 80022e0:	2288      	movs	r2, #136	@ 0x88
 80022e2:	423a      	tst	r2, r7
 80022e4:	d100      	bne.n	80022e8 <__aeabi_dmul+0x180>
 80022e6:	e0d7      	b.n	8002498 <__aeabi_dmul+0x330>
 80022e8:	9b00      	ldr	r3, [sp, #0]
 80022ea:	46a2      	mov	sl, r4
 80022ec:	469b      	mov	fp, r3
 80022ee:	4681      	mov	r9, r0
 80022f0:	9602      	str	r6, [sp, #8]
 80022f2:	e7bf      	b.n	8002274 <__aeabi_dmul+0x10c>
 80022f4:	0023      	movs	r3, r4
 80022f6:	4333      	orrs	r3, r6
 80022f8:	d100      	bne.n	80022fc <__aeabi_dmul+0x194>
 80022fa:	e07f      	b.n	80023fc <__aeabi_dmul+0x294>
 80022fc:	2c00      	cmp	r4, #0
 80022fe:	d100      	bne.n	8002302 <__aeabi_dmul+0x19a>
 8002300:	e1ad      	b.n	800265e <__aeabi_dmul+0x4f6>
 8002302:	0020      	movs	r0, r4
 8002304:	f000 ff10 	bl	8003128 <__clzsi2>
 8002308:	0002      	movs	r2, r0
 800230a:	0003      	movs	r3, r0
 800230c:	3a0b      	subs	r2, #11
 800230e:	201d      	movs	r0, #29
 8002310:	0019      	movs	r1, r3
 8002312:	1a82      	subs	r2, r0, r2
 8002314:	0030      	movs	r0, r6
 8002316:	3908      	subs	r1, #8
 8002318:	40d0      	lsrs	r0, r2
 800231a:	408c      	lsls	r4, r1
 800231c:	4304      	orrs	r4, r0
 800231e:	0030      	movs	r0, r6
 8002320:	4088      	lsls	r0, r1
 8002322:	4a5b      	ldr	r2, [pc, #364]	@ (8002490 <__aeabi_dmul+0x328>)
 8002324:	1aeb      	subs	r3, r5, r3
 8002326:	4694      	mov	ip, r2
 8002328:	4463      	add	r3, ip
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	9201      	str	r2, [sp, #4]
 800232e:	4642      	mov	r2, r8
 8002330:	2600      	movs	r6, #0
 8002332:	2a0a      	cmp	r2, #10
 8002334:	dc00      	bgt.n	8002338 <__aeabi_dmul+0x1d0>
 8002336:	e75a      	b.n	80021ee <__aeabi_dmul+0x86>
 8002338:	e79c      	b.n	8002274 <__aeabi_dmul+0x10c>
 800233a:	4653      	mov	r3, sl
 800233c:	4303      	orrs	r3, r0
 800233e:	4699      	mov	r9, r3
 8002340:	d054      	beq.n	80023ec <__aeabi_dmul+0x284>
 8002342:	4653      	mov	r3, sl
 8002344:	2b00      	cmp	r3, #0
 8002346:	d100      	bne.n	800234a <__aeabi_dmul+0x1e2>
 8002348:	e177      	b.n	800263a <__aeabi_dmul+0x4d2>
 800234a:	4650      	mov	r0, sl
 800234c:	f000 feec 	bl	8003128 <__clzsi2>
 8002350:	230b      	movs	r3, #11
 8002352:	425b      	negs	r3, r3
 8002354:	469c      	mov	ip, r3
 8002356:	0002      	movs	r2, r0
 8002358:	4484      	add	ip, r0
 800235a:	0011      	movs	r1, r2
 800235c:	4650      	mov	r0, sl
 800235e:	3908      	subs	r1, #8
 8002360:	4088      	lsls	r0, r1
 8002362:	231d      	movs	r3, #29
 8002364:	4680      	mov	r8, r0
 8002366:	4660      	mov	r0, ip
 8002368:	1a1b      	subs	r3, r3, r0
 800236a:	0020      	movs	r0, r4
 800236c:	40d8      	lsrs	r0, r3
 800236e:	0003      	movs	r3, r0
 8002370:	4640      	mov	r0, r8
 8002372:	4303      	orrs	r3, r0
 8002374:	469a      	mov	sl, r3
 8002376:	0023      	movs	r3, r4
 8002378:	408b      	lsls	r3, r1
 800237a:	4699      	mov	r9, r3
 800237c:	2300      	movs	r3, #0
 800237e:	4d44      	ldr	r5, [pc, #272]	@ (8002490 <__aeabi_dmul+0x328>)
 8002380:	4698      	mov	r8, r3
 8002382:	1aad      	subs	r5, r5, r2
 8002384:	9302      	str	r3, [sp, #8]
 8002386:	e715      	b.n	80021b4 <__aeabi_dmul+0x4c>
 8002388:	4652      	mov	r2, sl
 800238a:	4302      	orrs	r2, r0
 800238c:	4691      	mov	r9, r2
 800238e:	d126      	bne.n	80023de <__aeabi_dmul+0x276>
 8002390:	2200      	movs	r2, #0
 8002392:	001d      	movs	r5, r3
 8002394:	2302      	movs	r3, #2
 8002396:	4692      	mov	sl, r2
 8002398:	3208      	adds	r2, #8
 800239a:	4690      	mov	r8, r2
 800239c:	9302      	str	r3, [sp, #8]
 800239e:	e709      	b.n	80021b4 <__aeabi_dmul+0x4c>
 80023a0:	2400      	movs	r4, #0
 80023a2:	2200      	movs	r2, #0
 80023a4:	4b35      	ldr	r3, [pc, #212]	@ (800247c <__aeabi_dmul+0x314>)
 80023a6:	e735      	b.n	8002214 <__aeabi_dmul+0xac>
 80023a8:	2300      	movs	r3, #0
 80023aa:	2480      	movs	r4, #128	@ 0x80
 80023ac:	469b      	mov	fp, r3
 80023ae:	0324      	lsls	r4, r4, #12
 80023b0:	4b32      	ldr	r3, [pc, #200]	@ (800247c <__aeabi_dmul+0x314>)
 80023b2:	e72f      	b.n	8002214 <__aeabi_dmul+0xac>
 80023b4:	2202      	movs	r2, #2
 80023b6:	4641      	mov	r1, r8
 80023b8:	4311      	orrs	r1, r2
 80023ba:	2280      	movs	r2, #128	@ 0x80
 80023bc:	0112      	lsls	r2, r2, #4
 80023be:	4694      	mov	ip, r2
 80023c0:	002a      	movs	r2, r5
 80023c2:	4462      	add	r2, ip
 80023c4:	4688      	mov	r8, r1
 80023c6:	9201      	str	r2, [sp, #4]
 80023c8:	290a      	cmp	r1, #10
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dmul+0x266>
 80023cc:	e752      	b.n	8002274 <__aeabi_dmul+0x10c>
 80023ce:	465a      	mov	r2, fp
 80023d0:	2000      	movs	r0, #0
 80023d2:	9900      	ldr	r1, [sp, #0]
 80023d4:	0004      	movs	r4, r0
 80023d6:	404a      	eors	r2, r1
 80023d8:	4693      	mov	fp, r2
 80023da:	2602      	movs	r6, #2
 80023dc:	e70b      	b.n	80021f6 <__aeabi_dmul+0x8e>
 80023de:	220c      	movs	r2, #12
 80023e0:	001d      	movs	r5, r3
 80023e2:	2303      	movs	r3, #3
 80023e4:	4681      	mov	r9, r0
 80023e6:	4690      	mov	r8, r2
 80023e8:	9302      	str	r3, [sp, #8]
 80023ea:	e6e3      	b.n	80021b4 <__aeabi_dmul+0x4c>
 80023ec:	2300      	movs	r3, #0
 80023ee:	469a      	mov	sl, r3
 80023f0:	3304      	adds	r3, #4
 80023f2:	4698      	mov	r8, r3
 80023f4:	3b03      	subs	r3, #3
 80023f6:	2500      	movs	r5, #0
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	e6db      	b.n	80021b4 <__aeabi_dmul+0x4c>
 80023fc:	4642      	mov	r2, r8
 80023fe:	3301      	adds	r3, #1
 8002400:	431a      	orrs	r2, r3
 8002402:	002b      	movs	r3, r5
 8002404:	4690      	mov	r8, r2
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	9201      	str	r2, [sp, #4]
 800240a:	4642      	mov	r2, r8
 800240c:	2400      	movs	r4, #0
 800240e:	2000      	movs	r0, #0
 8002410:	2601      	movs	r6, #1
 8002412:	2a0a      	cmp	r2, #10
 8002414:	dc00      	bgt.n	8002418 <__aeabi_dmul+0x2b0>
 8002416:	e6ea      	b.n	80021ee <__aeabi_dmul+0x86>
 8002418:	e72c      	b.n	8002274 <__aeabi_dmul+0x10c>
 800241a:	2201      	movs	r2, #1
 800241c:	1ad2      	subs	r2, r2, r3
 800241e:	2a38      	cmp	r2, #56	@ 0x38
 8002420:	dd00      	ble.n	8002424 <__aeabi_dmul+0x2bc>
 8002422:	e6f4      	b.n	800220e <__aeabi_dmul+0xa6>
 8002424:	2a1f      	cmp	r2, #31
 8002426:	dc00      	bgt.n	800242a <__aeabi_dmul+0x2c2>
 8002428:	e12a      	b.n	8002680 <__aeabi_dmul+0x518>
 800242a:	211f      	movs	r1, #31
 800242c:	4249      	negs	r1, r1
 800242e:	1acb      	subs	r3, r1, r3
 8002430:	0021      	movs	r1, r4
 8002432:	40d9      	lsrs	r1, r3
 8002434:	000b      	movs	r3, r1
 8002436:	2a20      	cmp	r2, #32
 8002438:	d005      	beq.n	8002446 <__aeabi_dmul+0x2de>
 800243a:	4a16      	ldr	r2, [pc, #88]	@ (8002494 <__aeabi_dmul+0x32c>)
 800243c:	9d01      	ldr	r5, [sp, #4]
 800243e:	4694      	mov	ip, r2
 8002440:	4465      	add	r5, ip
 8002442:	40ac      	lsls	r4, r5
 8002444:	4320      	orrs	r0, r4
 8002446:	1e42      	subs	r2, r0, #1
 8002448:	4190      	sbcs	r0, r2
 800244a:	4318      	orrs	r0, r3
 800244c:	2307      	movs	r3, #7
 800244e:	0019      	movs	r1, r3
 8002450:	2400      	movs	r4, #0
 8002452:	4001      	ands	r1, r0
 8002454:	4203      	tst	r3, r0
 8002456:	d00c      	beq.n	8002472 <__aeabi_dmul+0x30a>
 8002458:	230f      	movs	r3, #15
 800245a:	4003      	ands	r3, r0
 800245c:	2b04      	cmp	r3, #4
 800245e:	d100      	bne.n	8002462 <__aeabi_dmul+0x2fa>
 8002460:	e140      	b.n	80026e4 <__aeabi_dmul+0x57c>
 8002462:	1d03      	adds	r3, r0, #4
 8002464:	4283      	cmp	r3, r0
 8002466:	41a4      	sbcs	r4, r4
 8002468:	0018      	movs	r0, r3
 800246a:	4264      	negs	r4, r4
 800246c:	0761      	lsls	r1, r4, #29
 800246e:	0264      	lsls	r4, r4, #9
 8002470:	0b24      	lsrs	r4, r4, #12
 8002472:	08c2      	lsrs	r2, r0, #3
 8002474:	2300      	movs	r3, #0
 8002476:	430a      	orrs	r2, r1
 8002478:	e6cc      	b.n	8002214 <__aeabi_dmul+0xac>
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	000007ff 	.word	0x000007ff
 8002480:	fffffc01 	.word	0xfffffc01
 8002484:	000003ff 	.word	0x000003ff
 8002488:	feffffff 	.word	0xfeffffff
 800248c:	000007fe 	.word	0x000007fe
 8002490:	fffffc0d 	.word	0xfffffc0d
 8002494:	0000043e 	.word	0x0000043e
 8002498:	4649      	mov	r1, r9
 800249a:	464a      	mov	r2, r9
 800249c:	0409      	lsls	r1, r1, #16
 800249e:	0c09      	lsrs	r1, r1, #16
 80024a0:	000d      	movs	r5, r1
 80024a2:	0c16      	lsrs	r6, r2, #16
 80024a4:	0c02      	lsrs	r2, r0, #16
 80024a6:	0400      	lsls	r0, r0, #16
 80024a8:	0c00      	lsrs	r0, r0, #16
 80024aa:	4345      	muls	r5, r0
 80024ac:	46ac      	mov	ip, r5
 80024ae:	0005      	movs	r5, r0
 80024b0:	4375      	muls	r5, r6
 80024b2:	46a8      	mov	r8, r5
 80024b4:	0015      	movs	r5, r2
 80024b6:	000f      	movs	r7, r1
 80024b8:	4375      	muls	r5, r6
 80024ba:	9200      	str	r2, [sp, #0]
 80024bc:	9502      	str	r5, [sp, #8]
 80024be:	002a      	movs	r2, r5
 80024c0:	9d00      	ldr	r5, [sp, #0]
 80024c2:	436f      	muls	r7, r5
 80024c4:	4665      	mov	r5, ip
 80024c6:	0c2d      	lsrs	r5, r5, #16
 80024c8:	46a9      	mov	r9, r5
 80024ca:	4447      	add	r7, r8
 80024cc:	444f      	add	r7, r9
 80024ce:	45b8      	cmp	r8, r7
 80024d0:	d905      	bls.n	80024de <__aeabi_dmul+0x376>
 80024d2:	0015      	movs	r5, r2
 80024d4:	2280      	movs	r2, #128	@ 0x80
 80024d6:	0252      	lsls	r2, r2, #9
 80024d8:	4690      	mov	r8, r2
 80024da:	4445      	add	r5, r8
 80024dc:	9502      	str	r5, [sp, #8]
 80024de:	0c3d      	lsrs	r5, r7, #16
 80024e0:	9503      	str	r5, [sp, #12]
 80024e2:	4665      	mov	r5, ip
 80024e4:	042d      	lsls	r5, r5, #16
 80024e6:	043f      	lsls	r7, r7, #16
 80024e8:	0c2d      	lsrs	r5, r5, #16
 80024ea:	46ac      	mov	ip, r5
 80024ec:	003d      	movs	r5, r7
 80024ee:	4465      	add	r5, ip
 80024f0:	9504      	str	r5, [sp, #16]
 80024f2:	0c25      	lsrs	r5, r4, #16
 80024f4:	0424      	lsls	r4, r4, #16
 80024f6:	0c24      	lsrs	r4, r4, #16
 80024f8:	46ac      	mov	ip, r5
 80024fa:	0025      	movs	r5, r4
 80024fc:	4375      	muls	r5, r6
 80024fe:	46a8      	mov	r8, r5
 8002500:	4665      	mov	r5, ip
 8002502:	000f      	movs	r7, r1
 8002504:	4369      	muls	r1, r5
 8002506:	4441      	add	r1, r8
 8002508:	4689      	mov	r9, r1
 800250a:	4367      	muls	r7, r4
 800250c:	0c39      	lsrs	r1, r7, #16
 800250e:	4449      	add	r1, r9
 8002510:	436e      	muls	r6, r5
 8002512:	4588      	cmp	r8, r1
 8002514:	d903      	bls.n	800251e <__aeabi_dmul+0x3b6>
 8002516:	2280      	movs	r2, #128	@ 0x80
 8002518:	0252      	lsls	r2, r2, #9
 800251a:	4690      	mov	r8, r2
 800251c:	4446      	add	r6, r8
 800251e:	0c0d      	lsrs	r5, r1, #16
 8002520:	46a8      	mov	r8, r5
 8002522:	0035      	movs	r5, r6
 8002524:	4445      	add	r5, r8
 8002526:	9505      	str	r5, [sp, #20]
 8002528:	9d03      	ldr	r5, [sp, #12]
 800252a:	043f      	lsls	r7, r7, #16
 800252c:	46a8      	mov	r8, r5
 800252e:	0c3f      	lsrs	r7, r7, #16
 8002530:	0409      	lsls	r1, r1, #16
 8002532:	19c9      	adds	r1, r1, r7
 8002534:	4488      	add	r8, r1
 8002536:	4645      	mov	r5, r8
 8002538:	9503      	str	r5, [sp, #12]
 800253a:	4655      	mov	r5, sl
 800253c:	042e      	lsls	r6, r5, #16
 800253e:	0c36      	lsrs	r6, r6, #16
 8002540:	0c2f      	lsrs	r7, r5, #16
 8002542:	0035      	movs	r5, r6
 8002544:	4345      	muls	r5, r0
 8002546:	4378      	muls	r0, r7
 8002548:	4681      	mov	r9, r0
 800254a:	0038      	movs	r0, r7
 800254c:	46a8      	mov	r8, r5
 800254e:	0c2d      	lsrs	r5, r5, #16
 8002550:	46aa      	mov	sl, r5
 8002552:	9a00      	ldr	r2, [sp, #0]
 8002554:	4350      	muls	r0, r2
 8002556:	4372      	muls	r2, r6
 8002558:	444a      	add	r2, r9
 800255a:	4452      	add	r2, sl
 800255c:	4591      	cmp	r9, r2
 800255e:	d903      	bls.n	8002568 <__aeabi_dmul+0x400>
 8002560:	2580      	movs	r5, #128	@ 0x80
 8002562:	026d      	lsls	r5, r5, #9
 8002564:	46a9      	mov	r9, r5
 8002566:	4448      	add	r0, r9
 8002568:	0c15      	lsrs	r5, r2, #16
 800256a:	46a9      	mov	r9, r5
 800256c:	4645      	mov	r5, r8
 800256e:	042d      	lsls	r5, r5, #16
 8002570:	0c2d      	lsrs	r5, r5, #16
 8002572:	46a8      	mov	r8, r5
 8002574:	4665      	mov	r5, ip
 8002576:	437d      	muls	r5, r7
 8002578:	0412      	lsls	r2, r2, #16
 800257a:	4448      	add	r0, r9
 800257c:	4490      	add	r8, r2
 800257e:	46a9      	mov	r9, r5
 8002580:	0032      	movs	r2, r6
 8002582:	4665      	mov	r5, ip
 8002584:	4362      	muls	r2, r4
 8002586:	436e      	muls	r6, r5
 8002588:	437c      	muls	r4, r7
 800258a:	0c17      	lsrs	r7, r2, #16
 800258c:	1936      	adds	r6, r6, r4
 800258e:	19bf      	adds	r7, r7, r6
 8002590:	42bc      	cmp	r4, r7
 8002592:	d903      	bls.n	800259c <__aeabi_dmul+0x434>
 8002594:	2480      	movs	r4, #128	@ 0x80
 8002596:	0264      	lsls	r4, r4, #9
 8002598:	46a4      	mov	ip, r4
 800259a:	44e1      	add	r9, ip
 800259c:	9c02      	ldr	r4, [sp, #8]
 800259e:	9e03      	ldr	r6, [sp, #12]
 80025a0:	46a4      	mov	ip, r4
 80025a2:	9d05      	ldr	r5, [sp, #20]
 80025a4:	4466      	add	r6, ip
 80025a6:	428e      	cmp	r6, r1
 80025a8:	4189      	sbcs	r1, r1
 80025aa:	46ac      	mov	ip, r5
 80025ac:	0412      	lsls	r2, r2, #16
 80025ae:	043c      	lsls	r4, r7, #16
 80025b0:	0c12      	lsrs	r2, r2, #16
 80025b2:	18a2      	adds	r2, r4, r2
 80025b4:	4462      	add	r2, ip
 80025b6:	4249      	negs	r1, r1
 80025b8:	1854      	adds	r4, r2, r1
 80025ba:	4446      	add	r6, r8
 80025bc:	46a4      	mov	ip, r4
 80025be:	4546      	cmp	r6, r8
 80025c0:	41a4      	sbcs	r4, r4
 80025c2:	4682      	mov	sl, r0
 80025c4:	4264      	negs	r4, r4
 80025c6:	46a0      	mov	r8, r4
 80025c8:	42aa      	cmp	r2, r5
 80025ca:	4192      	sbcs	r2, r2
 80025cc:	458c      	cmp	ip, r1
 80025ce:	4189      	sbcs	r1, r1
 80025d0:	44e2      	add	sl, ip
 80025d2:	44d0      	add	r8, sl
 80025d4:	4249      	negs	r1, r1
 80025d6:	4252      	negs	r2, r2
 80025d8:	430a      	orrs	r2, r1
 80025da:	45a0      	cmp	r8, r4
 80025dc:	41a4      	sbcs	r4, r4
 80025de:	4582      	cmp	sl, r0
 80025e0:	4189      	sbcs	r1, r1
 80025e2:	4264      	negs	r4, r4
 80025e4:	4249      	negs	r1, r1
 80025e6:	430c      	orrs	r4, r1
 80025e8:	4641      	mov	r1, r8
 80025ea:	0c3f      	lsrs	r7, r7, #16
 80025ec:	19d2      	adds	r2, r2, r7
 80025ee:	1912      	adds	r2, r2, r4
 80025f0:	0dcc      	lsrs	r4, r1, #23
 80025f2:	9904      	ldr	r1, [sp, #16]
 80025f4:	0270      	lsls	r0, r6, #9
 80025f6:	4308      	orrs	r0, r1
 80025f8:	1e41      	subs	r1, r0, #1
 80025fa:	4188      	sbcs	r0, r1
 80025fc:	4641      	mov	r1, r8
 80025fe:	444a      	add	r2, r9
 8002600:	0df6      	lsrs	r6, r6, #23
 8002602:	0252      	lsls	r2, r2, #9
 8002604:	4330      	orrs	r0, r6
 8002606:	0249      	lsls	r1, r1, #9
 8002608:	4314      	orrs	r4, r2
 800260a:	4308      	orrs	r0, r1
 800260c:	01d2      	lsls	r2, r2, #7
 800260e:	d535      	bpl.n	800267c <__aeabi_dmul+0x514>
 8002610:	2201      	movs	r2, #1
 8002612:	0843      	lsrs	r3, r0, #1
 8002614:	4002      	ands	r2, r0
 8002616:	4313      	orrs	r3, r2
 8002618:	07e0      	lsls	r0, r4, #31
 800261a:	4318      	orrs	r0, r3
 800261c:	0864      	lsrs	r4, r4, #1
 800261e:	e634      	b.n	800228a <__aeabi_dmul+0x122>
 8002620:	9b00      	ldr	r3, [sp, #0]
 8002622:	46a2      	mov	sl, r4
 8002624:	469b      	mov	fp, r3
 8002626:	4681      	mov	r9, r0
 8002628:	2480      	movs	r4, #128	@ 0x80
 800262a:	4653      	mov	r3, sl
 800262c:	0324      	lsls	r4, r4, #12
 800262e:	431c      	orrs	r4, r3
 8002630:	0324      	lsls	r4, r4, #12
 8002632:	464a      	mov	r2, r9
 8002634:	4b2e      	ldr	r3, [pc, #184]	@ (80026f0 <__aeabi_dmul+0x588>)
 8002636:	0b24      	lsrs	r4, r4, #12
 8002638:	e5ec      	b.n	8002214 <__aeabi_dmul+0xac>
 800263a:	f000 fd75 	bl	8003128 <__clzsi2>
 800263e:	2315      	movs	r3, #21
 8002640:	469c      	mov	ip, r3
 8002642:	4484      	add	ip, r0
 8002644:	0002      	movs	r2, r0
 8002646:	4663      	mov	r3, ip
 8002648:	3220      	adds	r2, #32
 800264a:	2b1c      	cmp	r3, #28
 800264c:	dc00      	bgt.n	8002650 <__aeabi_dmul+0x4e8>
 800264e:	e684      	b.n	800235a <__aeabi_dmul+0x1f2>
 8002650:	2300      	movs	r3, #0
 8002652:	4699      	mov	r9, r3
 8002654:	0023      	movs	r3, r4
 8002656:	3808      	subs	r0, #8
 8002658:	4083      	lsls	r3, r0
 800265a:	469a      	mov	sl, r3
 800265c:	e68e      	b.n	800237c <__aeabi_dmul+0x214>
 800265e:	f000 fd63 	bl	8003128 <__clzsi2>
 8002662:	0002      	movs	r2, r0
 8002664:	0003      	movs	r3, r0
 8002666:	3215      	adds	r2, #21
 8002668:	3320      	adds	r3, #32
 800266a:	2a1c      	cmp	r2, #28
 800266c:	dc00      	bgt.n	8002670 <__aeabi_dmul+0x508>
 800266e:	e64e      	b.n	800230e <__aeabi_dmul+0x1a6>
 8002670:	0002      	movs	r2, r0
 8002672:	0034      	movs	r4, r6
 8002674:	3a08      	subs	r2, #8
 8002676:	2000      	movs	r0, #0
 8002678:	4094      	lsls	r4, r2
 800267a:	e652      	b.n	8002322 <__aeabi_dmul+0x1ba>
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	e604      	b.n	800228a <__aeabi_dmul+0x122>
 8002680:	4b1c      	ldr	r3, [pc, #112]	@ (80026f4 <__aeabi_dmul+0x58c>)
 8002682:	0021      	movs	r1, r4
 8002684:	469c      	mov	ip, r3
 8002686:	0003      	movs	r3, r0
 8002688:	9d01      	ldr	r5, [sp, #4]
 800268a:	40d3      	lsrs	r3, r2
 800268c:	4465      	add	r5, ip
 800268e:	40a9      	lsls	r1, r5
 8002690:	4319      	orrs	r1, r3
 8002692:	0003      	movs	r3, r0
 8002694:	40ab      	lsls	r3, r5
 8002696:	1e58      	subs	r0, r3, #1
 8002698:	4183      	sbcs	r3, r0
 800269a:	4319      	orrs	r1, r3
 800269c:	0008      	movs	r0, r1
 800269e:	40d4      	lsrs	r4, r2
 80026a0:	074b      	lsls	r3, r1, #29
 80026a2:	d009      	beq.n	80026b8 <__aeabi_dmul+0x550>
 80026a4:	230f      	movs	r3, #15
 80026a6:	400b      	ands	r3, r1
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d005      	beq.n	80026b8 <__aeabi_dmul+0x550>
 80026ac:	1d0b      	adds	r3, r1, #4
 80026ae:	428b      	cmp	r3, r1
 80026b0:	4180      	sbcs	r0, r0
 80026b2:	4240      	negs	r0, r0
 80026b4:	1824      	adds	r4, r4, r0
 80026b6:	0018      	movs	r0, r3
 80026b8:	0223      	lsls	r3, r4, #8
 80026ba:	d400      	bmi.n	80026be <__aeabi_dmul+0x556>
 80026bc:	e6d6      	b.n	800246c <__aeabi_dmul+0x304>
 80026be:	2301      	movs	r3, #1
 80026c0:	2400      	movs	r4, #0
 80026c2:	2200      	movs	r2, #0
 80026c4:	e5a6      	b.n	8002214 <__aeabi_dmul+0xac>
 80026c6:	290f      	cmp	r1, #15
 80026c8:	d1aa      	bne.n	8002620 <__aeabi_dmul+0x4b8>
 80026ca:	2380      	movs	r3, #128	@ 0x80
 80026cc:	4652      	mov	r2, sl
 80026ce:	031b      	lsls	r3, r3, #12
 80026d0:	421a      	tst	r2, r3
 80026d2:	d0a9      	beq.n	8002628 <__aeabi_dmul+0x4c0>
 80026d4:	421c      	tst	r4, r3
 80026d6:	d1a7      	bne.n	8002628 <__aeabi_dmul+0x4c0>
 80026d8:	431c      	orrs	r4, r3
 80026da:	9b00      	ldr	r3, [sp, #0]
 80026dc:	0002      	movs	r2, r0
 80026de:	469b      	mov	fp, r3
 80026e0:	4b03      	ldr	r3, [pc, #12]	@ (80026f0 <__aeabi_dmul+0x588>)
 80026e2:	e597      	b.n	8002214 <__aeabi_dmul+0xac>
 80026e4:	2400      	movs	r4, #0
 80026e6:	e6c1      	b.n	800246c <__aeabi_dmul+0x304>
 80026e8:	2400      	movs	r4, #0
 80026ea:	4b01      	ldr	r3, [pc, #4]	@ (80026f0 <__aeabi_dmul+0x588>)
 80026ec:	0022      	movs	r2, r4
 80026ee:	e591      	b.n	8002214 <__aeabi_dmul+0xac>
 80026f0:	000007ff 	.word	0x000007ff
 80026f4:	0000041e 	.word	0x0000041e

080026f8 <__aeabi_dsub>:
 80026f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026fa:	464e      	mov	r6, r9
 80026fc:	4645      	mov	r5, r8
 80026fe:	46de      	mov	lr, fp
 8002700:	4657      	mov	r7, sl
 8002702:	b5e0      	push	{r5, r6, r7, lr}
 8002704:	b085      	sub	sp, #20
 8002706:	9000      	str	r0, [sp, #0]
 8002708:	9101      	str	r1, [sp, #4]
 800270a:	030c      	lsls	r4, r1, #12
 800270c:	004f      	lsls	r7, r1, #1
 800270e:	0fce      	lsrs	r6, r1, #31
 8002710:	0a61      	lsrs	r1, r4, #9
 8002712:	9c00      	ldr	r4, [sp, #0]
 8002714:	46b0      	mov	r8, r6
 8002716:	0f64      	lsrs	r4, r4, #29
 8002718:	430c      	orrs	r4, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	0d7f      	lsrs	r7, r7, #21
 800271e:	00c8      	lsls	r0, r1, #3
 8002720:	0011      	movs	r1, r2
 8002722:	001a      	movs	r2, r3
 8002724:	031b      	lsls	r3, r3, #12
 8002726:	469c      	mov	ip, r3
 8002728:	9100      	str	r1, [sp, #0]
 800272a:	9201      	str	r2, [sp, #4]
 800272c:	0051      	lsls	r1, r2, #1
 800272e:	0d4b      	lsrs	r3, r1, #21
 8002730:	4699      	mov	r9, r3
 8002732:	9b01      	ldr	r3, [sp, #4]
 8002734:	9d00      	ldr	r5, [sp, #0]
 8002736:	0fd9      	lsrs	r1, r3, #31
 8002738:	4663      	mov	r3, ip
 800273a:	0f6a      	lsrs	r2, r5, #29
 800273c:	0a5b      	lsrs	r3, r3, #9
 800273e:	4313      	orrs	r3, r2
 8002740:	00ea      	lsls	r2, r5, #3
 8002742:	4694      	mov	ip, r2
 8002744:	4693      	mov	fp, r2
 8002746:	4ac1      	ldr	r2, [pc, #772]	@ (8002a4c <__aeabi_dsub+0x354>)
 8002748:	9003      	str	r0, [sp, #12]
 800274a:	9302      	str	r3, [sp, #8]
 800274c:	4591      	cmp	r9, r2
 800274e:	d100      	bne.n	8002752 <__aeabi_dsub+0x5a>
 8002750:	e0cd      	b.n	80028ee <__aeabi_dsub+0x1f6>
 8002752:	2501      	movs	r5, #1
 8002754:	4069      	eors	r1, r5
 8002756:	464d      	mov	r5, r9
 8002758:	1b7d      	subs	r5, r7, r5
 800275a:	46aa      	mov	sl, r5
 800275c:	428e      	cmp	r6, r1
 800275e:	d100      	bne.n	8002762 <__aeabi_dsub+0x6a>
 8002760:	e080      	b.n	8002864 <__aeabi_dsub+0x16c>
 8002762:	2d00      	cmp	r5, #0
 8002764:	dc00      	bgt.n	8002768 <__aeabi_dsub+0x70>
 8002766:	e335      	b.n	8002dd4 <__aeabi_dsub+0x6dc>
 8002768:	4649      	mov	r1, r9
 800276a:	2900      	cmp	r1, #0
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x78>
 800276e:	e0df      	b.n	8002930 <__aeabi_dsub+0x238>
 8002770:	4297      	cmp	r7, r2
 8002772:	d100      	bne.n	8002776 <__aeabi_dsub+0x7e>
 8002774:	e194      	b.n	8002aa0 <__aeabi_dsub+0x3a8>
 8002776:	4652      	mov	r2, sl
 8002778:	2501      	movs	r5, #1
 800277a:	2a38      	cmp	r2, #56	@ 0x38
 800277c:	dc19      	bgt.n	80027b2 <__aeabi_dsub+0xba>
 800277e:	2280      	movs	r2, #128	@ 0x80
 8002780:	9b02      	ldr	r3, [sp, #8]
 8002782:	0412      	lsls	r2, r2, #16
 8002784:	4313      	orrs	r3, r2
 8002786:	9302      	str	r3, [sp, #8]
 8002788:	4652      	mov	r2, sl
 800278a:	2a1f      	cmp	r2, #31
 800278c:	dd00      	ble.n	8002790 <__aeabi_dsub+0x98>
 800278e:	e1e3      	b.n	8002b58 <__aeabi_dsub+0x460>
 8002790:	4653      	mov	r3, sl
 8002792:	2220      	movs	r2, #32
 8002794:	4661      	mov	r1, ip
 8002796:	9d02      	ldr	r5, [sp, #8]
 8002798:	1ad2      	subs	r2, r2, r3
 800279a:	4095      	lsls	r5, r2
 800279c:	40d9      	lsrs	r1, r3
 800279e:	430d      	orrs	r5, r1
 80027a0:	4661      	mov	r1, ip
 80027a2:	4091      	lsls	r1, r2
 80027a4:	000a      	movs	r2, r1
 80027a6:	1e51      	subs	r1, r2, #1
 80027a8:	418a      	sbcs	r2, r1
 80027aa:	4315      	orrs	r5, r2
 80027ac:	9a02      	ldr	r2, [sp, #8]
 80027ae:	40da      	lsrs	r2, r3
 80027b0:	1aa4      	subs	r4, r4, r2
 80027b2:	1b45      	subs	r5, r0, r5
 80027b4:	42a8      	cmp	r0, r5
 80027b6:	4180      	sbcs	r0, r0
 80027b8:	4240      	negs	r0, r0
 80027ba:	1a24      	subs	r4, r4, r0
 80027bc:	0223      	lsls	r3, r4, #8
 80027be:	d400      	bmi.n	80027c2 <__aeabi_dsub+0xca>
 80027c0:	e13d      	b.n	8002a3e <__aeabi_dsub+0x346>
 80027c2:	0264      	lsls	r4, r4, #9
 80027c4:	0a64      	lsrs	r4, r4, #9
 80027c6:	2c00      	cmp	r4, #0
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0xd4>
 80027ca:	e147      	b.n	8002a5c <__aeabi_dsub+0x364>
 80027cc:	0020      	movs	r0, r4
 80027ce:	f000 fcab 	bl	8003128 <__clzsi2>
 80027d2:	0003      	movs	r3, r0
 80027d4:	3b08      	subs	r3, #8
 80027d6:	2120      	movs	r1, #32
 80027d8:	0028      	movs	r0, r5
 80027da:	1aca      	subs	r2, r1, r3
 80027dc:	40d0      	lsrs	r0, r2
 80027de:	409c      	lsls	r4, r3
 80027e0:	0002      	movs	r2, r0
 80027e2:	409d      	lsls	r5, r3
 80027e4:	4322      	orrs	r2, r4
 80027e6:	429f      	cmp	r7, r3
 80027e8:	dd00      	ble.n	80027ec <__aeabi_dsub+0xf4>
 80027ea:	e177      	b.n	8002adc <__aeabi_dsub+0x3e4>
 80027ec:	1bd8      	subs	r0, r3, r7
 80027ee:	3001      	adds	r0, #1
 80027f0:	1a09      	subs	r1, r1, r0
 80027f2:	002c      	movs	r4, r5
 80027f4:	408d      	lsls	r5, r1
 80027f6:	40c4      	lsrs	r4, r0
 80027f8:	1e6b      	subs	r3, r5, #1
 80027fa:	419d      	sbcs	r5, r3
 80027fc:	0013      	movs	r3, r2
 80027fe:	40c2      	lsrs	r2, r0
 8002800:	408b      	lsls	r3, r1
 8002802:	4325      	orrs	r5, r4
 8002804:	2700      	movs	r7, #0
 8002806:	0014      	movs	r4, r2
 8002808:	431d      	orrs	r5, r3
 800280a:	076b      	lsls	r3, r5, #29
 800280c:	d009      	beq.n	8002822 <__aeabi_dsub+0x12a>
 800280e:	230f      	movs	r3, #15
 8002810:	402b      	ands	r3, r5
 8002812:	2b04      	cmp	r3, #4
 8002814:	d005      	beq.n	8002822 <__aeabi_dsub+0x12a>
 8002816:	1d2b      	adds	r3, r5, #4
 8002818:	42ab      	cmp	r3, r5
 800281a:	41ad      	sbcs	r5, r5
 800281c:	426d      	negs	r5, r5
 800281e:	1964      	adds	r4, r4, r5
 8002820:	001d      	movs	r5, r3
 8002822:	0223      	lsls	r3, r4, #8
 8002824:	d400      	bmi.n	8002828 <__aeabi_dsub+0x130>
 8002826:	e140      	b.n	8002aaa <__aeabi_dsub+0x3b2>
 8002828:	4a88      	ldr	r2, [pc, #544]	@ (8002a4c <__aeabi_dsub+0x354>)
 800282a:	3701      	adds	r7, #1
 800282c:	4297      	cmp	r7, r2
 800282e:	d100      	bne.n	8002832 <__aeabi_dsub+0x13a>
 8002830:	e101      	b.n	8002a36 <__aeabi_dsub+0x33e>
 8002832:	2601      	movs	r6, #1
 8002834:	4643      	mov	r3, r8
 8002836:	4986      	ldr	r1, [pc, #536]	@ (8002a50 <__aeabi_dsub+0x358>)
 8002838:	08ed      	lsrs	r5, r5, #3
 800283a:	4021      	ands	r1, r4
 800283c:	074a      	lsls	r2, r1, #29
 800283e:	432a      	orrs	r2, r5
 8002840:	057c      	lsls	r4, r7, #21
 8002842:	024d      	lsls	r5, r1, #9
 8002844:	0b2d      	lsrs	r5, r5, #12
 8002846:	0d64      	lsrs	r4, r4, #21
 8002848:	401e      	ands	r6, r3
 800284a:	0524      	lsls	r4, r4, #20
 800284c:	432c      	orrs	r4, r5
 800284e:	07f6      	lsls	r6, r6, #31
 8002850:	4334      	orrs	r4, r6
 8002852:	0010      	movs	r0, r2
 8002854:	0021      	movs	r1, r4
 8002856:	b005      	add	sp, #20
 8002858:	bcf0      	pop	{r4, r5, r6, r7}
 800285a:	46bb      	mov	fp, r7
 800285c:	46b2      	mov	sl, r6
 800285e:	46a9      	mov	r9, r5
 8002860:	46a0      	mov	r8, r4
 8002862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002864:	2d00      	cmp	r5, #0
 8002866:	dc00      	bgt.n	800286a <__aeabi_dsub+0x172>
 8002868:	e2d0      	b.n	8002e0c <__aeabi_dsub+0x714>
 800286a:	4649      	mov	r1, r9
 800286c:	2900      	cmp	r1, #0
 800286e:	d000      	beq.n	8002872 <__aeabi_dsub+0x17a>
 8002870:	e0d4      	b.n	8002a1c <__aeabi_dsub+0x324>
 8002872:	4661      	mov	r1, ip
 8002874:	9b02      	ldr	r3, [sp, #8]
 8002876:	4319      	orrs	r1, r3
 8002878:	d100      	bne.n	800287c <__aeabi_dsub+0x184>
 800287a:	e12b      	b.n	8002ad4 <__aeabi_dsub+0x3dc>
 800287c:	1e69      	subs	r1, r5, #1
 800287e:	2d01      	cmp	r5, #1
 8002880:	d100      	bne.n	8002884 <__aeabi_dsub+0x18c>
 8002882:	e1d9      	b.n	8002c38 <__aeabi_dsub+0x540>
 8002884:	4295      	cmp	r5, r2
 8002886:	d100      	bne.n	800288a <__aeabi_dsub+0x192>
 8002888:	e10a      	b.n	8002aa0 <__aeabi_dsub+0x3a8>
 800288a:	2501      	movs	r5, #1
 800288c:	2938      	cmp	r1, #56	@ 0x38
 800288e:	dc17      	bgt.n	80028c0 <__aeabi_dsub+0x1c8>
 8002890:	468a      	mov	sl, r1
 8002892:	4653      	mov	r3, sl
 8002894:	2b1f      	cmp	r3, #31
 8002896:	dd00      	ble.n	800289a <__aeabi_dsub+0x1a2>
 8002898:	e1e7      	b.n	8002c6a <__aeabi_dsub+0x572>
 800289a:	2220      	movs	r2, #32
 800289c:	1ad2      	subs	r2, r2, r3
 800289e:	9b02      	ldr	r3, [sp, #8]
 80028a0:	4661      	mov	r1, ip
 80028a2:	4093      	lsls	r3, r2
 80028a4:	001d      	movs	r5, r3
 80028a6:	4653      	mov	r3, sl
 80028a8:	40d9      	lsrs	r1, r3
 80028aa:	4663      	mov	r3, ip
 80028ac:	4093      	lsls	r3, r2
 80028ae:	001a      	movs	r2, r3
 80028b0:	430d      	orrs	r5, r1
 80028b2:	1e51      	subs	r1, r2, #1
 80028b4:	418a      	sbcs	r2, r1
 80028b6:	4653      	mov	r3, sl
 80028b8:	4315      	orrs	r5, r2
 80028ba:	9a02      	ldr	r2, [sp, #8]
 80028bc:	40da      	lsrs	r2, r3
 80028be:	18a4      	adds	r4, r4, r2
 80028c0:	182d      	adds	r5, r5, r0
 80028c2:	4285      	cmp	r5, r0
 80028c4:	4180      	sbcs	r0, r0
 80028c6:	4240      	negs	r0, r0
 80028c8:	1824      	adds	r4, r4, r0
 80028ca:	0223      	lsls	r3, r4, #8
 80028cc:	d400      	bmi.n	80028d0 <__aeabi_dsub+0x1d8>
 80028ce:	e0b6      	b.n	8002a3e <__aeabi_dsub+0x346>
 80028d0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a4c <__aeabi_dsub+0x354>)
 80028d2:	3701      	adds	r7, #1
 80028d4:	429f      	cmp	r7, r3
 80028d6:	d100      	bne.n	80028da <__aeabi_dsub+0x1e2>
 80028d8:	e0ad      	b.n	8002a36 <__aeabi_dsub+0x33e>
 80028da:	2101      	movs	r1, #1
 80028dc:	4b5c      	ldr	r3, [pc, #368]	@ (8002a50 <__aeabi_dsub+0x358>)
 80028de:	086a      	lsrs	r2, r5, #1
 80028e0:	401c      	ands	r4, r3
 80028e2:	4029      	ands	r1, r5
 80028e4:	430a      	orrs	r2, r1
 80028e6:	07e5      	lsls	r5, r4, #31
 80028e8:	4315      	orrs	r5, r2
 80028ea:	0864      	lsrs	r4, r4, #1
 80028ec:	e78d      	b.n	800280a <__aeabi_dsub+0x112>
 80028ee:	4a59      	ldr	r2, [pc, #356]	@ (8002a54 <__aeabi_dsub+0x35c>)
 80028f0:	9b02      	ldr	r3, [sp, #8]
 80028f2:	4692      	mov	sl, r2
 80028f4:	4662      	mov	r2, ip
 80028f6:	44ba      	add	sl, r7
 80028f8:	431a      	orrs	r2, r3
 80028fa:	d02c      	beq.n	8002956 <__aeabi_dsub+0x25e>
 80028fc:	428e      	cmp	r6, r1
 80028fe:	d02e      	beq.n	800295e <__aeabi_dsub+0x266>
 8002900:	4652      	mov	r2, sl
 8002902:	2a00      	cmp	r2, #0
 8002904:	d060      	beq.n	80029c8 <__aeabi_dsub+0x2d0>
 8002906:	2f00      	cmp	r7, #0
 8002908:	d100      	bne.n	800290c <__aeabi_dsub+0x214>
 800290a:	e0db      	b.n	8002ac4 <__aeabi_dsub+0x3cc>
 800290c:	4663      	mov	r3, ip
 800290e:	000e      	movs	r6, r1
 8002910:	9c02      	ldr	r4, [sp, #8]
 8002912:	08d8      	lsrs	r0, r3, #3
 8002914:	0762      	lsls	r2, r4, #29
 8002916:	4302      	orrs	r2, r0
 8002918:	08e4      	lsrs	r4, r4, #3
 800291a:	0013      	movs	r3, r2
 800291c:	4323      	orrs	r3, r4
 800291e:	d100      	bne.n	8002922 <__aeabi_dsub+0x22a>
 8002920:	e254      	b.n	8002dcc <__aeabi_dsub+0x6d4>
 8002922:	2580      	movs	r5, #128	@ 0x80
 8002924:	032d      	lsls	r5, r5, #12
 8002926:	4325      	orrs	r5, r4
 8002928:	032d      	lsls	r5, r5, #12
 800292a:	4c48      	ldr	r4, [pc, #288]	@ (8002a4c <__aeabi_dsub+0x354>)
 800292c:	0b2d      	lsrs	r5, r5, #12
 800292e:	e78c      	b.n	800284a <__aeabi_dsub+0x152>
 8002930:	4661      	mov	r1, ip
 8002932:	9b02      	ldr	r3, [sp, #8]
 8002934:	4319      	orrs	r1, r3
 8002936:	d100      	bne.n	800293a <__aeabi_dsub+0x242>
 8002938:	e0cc      	b.n	8002ad4 <__aeabi_dsub+0x3dc>
 800293a:	0029      	movs	r1, r5
 800293c:	3901      	subs	r1, #1
 800293e:	2d01      	cmp	r5, #1
 8002940:	d100      	bne.n	8002944 <__aeabi_dsub+0x24c>
 8002942:	e188      	b.n	8002c56 <__aeabi_dsub+0x55e>
 8002944:	4295      	cmp	r5, r2
 8002946:	d100      	bne.n	800294a <__aeabi_dsub+0x252>
 8002948:	e0aa      	b.n	8002aa0 <__aeabi_dsub+0x3a8>
 800294a:	2501      	movs	r5, #1
 800294c:	2938      	cmp	r1, #56	@ 0x38
 800294e:	dd00      	ble.n	8002952 <__aeabi_dsub+0x25a>
 8002950:	e72f      	b.n	80027b2 <__aeabi_dsub+0xba>
 8002952:	468a      	mov	sl, r1
 8002954:	e718      	b.n	8002788 <__aeabi_dsub+0x90>
 8002956:	2201      	movs	r2, #1
 8002958:	4051      	eors	r1, r2
 800295a:	428e      	cmp	r6, r1
 800295c:	d1d0      	bne.n	8002900 <__aeabi_dsub+0x208>
 800295e:	4653      	mov	r3, sl
 8002960:	2b00      	cmp	r3, #0
 8002962:	d100      	bne.n	8002966 <__aeabi_dsub+0x26e>
 8002964:	e0be      	b.n	8002ae4 <__aeabi_dsub+0x3ec>
 8002966:	2f00      	cmp	r7, #0
 8002968:	d000      	beq.n	800296c <__aeabi_dsub+0x274>
 800296a:	e138      	b.n	8002bde <__aeabi_dsub+0x4e6>
 800296c:	46ca      	mov	sl, r9
 800296e:	0022      	movs	r2, r4
 8002970:	4302      	orrs	r2, r0
 8002972:	d100      	bne.n	8002976 <__aeabi_dsub+0x27e>
 8002974:	e1e2      	b.n	8002d3c <__aeabi_dsub+0x644>
 8002976:	4653      	mov	r3, sl
 8002978:	1e59      	subs	r1, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d100      	bne.n	8002980 <__aeabi_dsub+0x288>
 800297e:	e20d      	b.n	8002d9c <__aeabi_dsub+0x6a4>
 8002980:	4a32      	ldr	r2, [pc, #200]	@ (8002a4c <__aeabi_dsub+0x354>)
 8002982:	4592      	cmp	sl, r2
 8002984:	d100      	bne.n	8002988 <__aeabi_dsub+0x290>
 8002986:	e1d2      	b.n	8002d2e <__aeabi_dsub+0x636>
 8002988:	2701      	movs	r7, #1
 800298a:	2938      	cmp	r1, #56	@ 0x38
 800298c:	dc13      	bgt.n	80029b6 <__aeabi_dsub+0x2be>
 800298e:	291f      	cmp	r1, #31
 8002990:	dd00      	ble.n	8002994 <__aeabi_dsub+0x29c>
 8002992:	e1ee      	b.n	8002d72 <__aeabi_dsub+0x67a>
 8002994:	2220      	movs	r2, #32
 8002996:	9b02      	ldr	r3, [sp, #8]
 8002998:	1a52      	subs	r2, r2, r1
 800299a:	0025      	movs	r5, r4
 800299c:	0007      	movs	r7, r0
 800299e:	469a      	mov	sl, r3
 80029a0:	40cc      	lsrs	r4, r1
 80029a2:	4090      	lsls	r0, r2
 80029a4:	4095      	lsls	r5, r2
 80029a6:	40cf      	lsrs	r7, r1
 80029a8:	44a2      	add	sl, r4
 80029aa:	1e42      	subs	r2, r0, #1
 80029ac:	4190      	sbcs	r0, r2
 80029ae:	4653      	mov	r3, sl
 80029b0:	432f      	orrs	r7, r5
 80029b2:	4307      	orrs	r7, r0
 80029b4:	9302      	str	r3, [sp, #8]
 80029b6:	003d      	movs	r5, r7
 80029b8:	4465      	add	r5, ip
 80029ba:	4565      	cmp	r5, ip
 80029bc:	4192      	sbcs	r2, r2
 80029be:	9b02      	ldr	r3, [sp, #8]
 80029c0:	4252      	negs	r2, r2
 80029c2:	464f      	mov	r7, r9
 80029c4:	18d4      	adds	r4, r2, r3
 80029c6:	e780      	b.n	80028ca <__aeabi_dsub+0x1d2>
 80029c8:	4a23      	ldr	r2, [pc, #140]	@ (8002a58 <__aeabi_dsub+0x360>)
 80029ca:	1c7d      	adds	r5, r7, #1
 80029cc:	4215      	tst	r5, r2
 80029ce:	d000      	beq.n	80029d2 <__aeabi_dsub+0x2da>
 80029d0:	e0aa      	b.n	8002b28 <__aeabi_dsub+0x430>
 80029d2:	4662      	mov	r2, ip
 80029d4:	0025      	movs	r5, r4
 80029d6:	9b02      	ldr	r3, [sp, #8]
 80029d8:	4305      	orrs	r5, r0
 80029da:	431a      	orrs	r2, r3
 80029dc:	2f00      	cmp	r7, #0
 80029de:	d000      	beq.n	80029e2 <__aeabi_dsub+0x2ea>
 80029e0:	e0f5      	b.n	8002bce <__aeabi_dsub+0x4d6>
 80029e2:	2d00      	cmp	r5, #0
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x2f0>
 80029e6:	e16b      	b.n	8002cc0 <__aeabi_dsub+0x5c8>
 80029e8:	2a00      	cmp	r2, #0
 80029ea:	d100      	bne.n	80029ee <__aeabi_dsub+0x2f6>
 80029ec:	e152      	b.n	8002c94 <__aeabi_dsub+0x59c>
 80029ee:	4663      	mov	r3, ip
 80029f0:	1ac5      	subs	r5, r0, r3
 80029f2:	9b02      	ldr	r3, [sp, #8]
 80029f4:	1ae2      	subs	r2, r4, r3
 80029f6:	42a8      	cmp	r0, r5
 80029f8:	419b      	sbcs	r3, r3
 80029fa:	425b      	negs	r3, r3
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	021a      	lsls	r2, r3, #8
 8002a00:	d400      	bmi.n	8002a04 <__aeabi_dsub+0x30c>
 8002a02:	e1d5      	b.n	8002db0 <__aeabi_dsub+0x6b8>
 8002a04:	4663      	mov	r3, ip
 8002a06:	1a1d      	subs	r5, r3, r0
 8002a08:	45ac      	cmp	ip, r5
 8002a0a:	4192      	sbcs	r2, r2
 8002a0c:	2601      	movs	r6, #1
 8002a0e:	9b02      	ldr	r3, [sp, #8]
 8002a10:	4252      	negs	r2, r2
 8002a12:	1b1c      	subs	r4, r3, r4
 8002a14:	4688      	mov	r8, r1
 8002a16:	1aa4      	subs	r4, r4, r2
 8002a18:	400e      	ands	r6, r1
 8002a1a:	e6f6      	b.n	800280a <__aeabi_dsub+0x112>
 8002a1c:	4297      	cmp	r7, r2
 8002a1e:	d03f      	beq.n	8002aa0 <__aeabi_dsub+0x3a8>
 8002a20:	4652      	mov	r2, sl
 8002a22:	2501      	movs	r5, #1
 8002a24:	2a38      	cmp	r2, #56	@ 0x38
 8002a26:	dd00      	ble.n	8002a2a <__aeabi_dsub+0x332>
 8002a28:	e74a      	b.n	80028c0 <__aeabi_dsub+0x1c8>
 8002a2a:	2280      	movs	r2, #128	@ 0x80
 8002a2c:	9b02      	ldr	r3, [sp, #8]
 8002a2e:	0412      	lsls	r2, r2, #16
 8002a30:	4313      	orrs	r3, r2
 8002a32:	9302      	str	r3, [sp, #8]
 8002a34:	e72d      	b.n	8002892 <__aeabi_dsub+0x19a>
 8002a36:	003c      	movs	r4, r7
 8002a38:	2500      	movs	r5, #0
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	e705      	b.n	800284a <__aeabi_dsub+0x152>
 8002a3e:	2307      	movs	r3, #7
 8002a40:	402b      	ands	r3, r5
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d000      	beq.n	8002a48 <__aeabi_dsub+0x350>
 8002a46:	e6e2      	b.n	800280e <__aeabi_dsub+0x116>
 8002a48:	e06b      	b.n	8002b22 <__aeabi_dsub+0x42a>
 8002a4a:	46c0      	nop			@ (mov r8, r8)
 8002a4c:	000007ff 	.word	0x000007ff
 8002a50:	ff7fffff 	.word	0xff7fffff
 8002a54:	fffff801 	.word	0xfffff801
 8002a58:	000007fe 	.word	0x000007fe
 8002a5c:	0028      	movs	r0, r5
 8002a5e:	f000 fb63 	bl	8003128 <__clzsi2>
 8002a62:	0003      	movs	r3, r0
 8002a64:	3318      	adds	r3, #24
 8002a66:	2b1f      	cmp	r3, #31
 8002a68:	dc00      	bgt.n	8002a6c <__aeabi_dsub+0x374>
 8002a6a:	e6b4      	b.n	80027d6 <__aeabi_dsub+0xde>
 8002a6c:	002a      	movs	r2, r5
 8002a6e:	3808      	subs	r0, #8
 8002a70:	4082      	lsls	r2, r0
 8002a72:	429f      	cmp	r7, r3
 8002a74:	dd00      	ble.n	8002a78 <__aeabi_dsub+0x380>
 8002a76:	e0b9      	b.n	8002bec <__aeabi_dsub+0x4f4>
 8002a78:	1bdb      	subs	r3, r3, r7
 8002a7a:	1c58      	adds	r0, r3, #1
 8002a7c:	281f      	cmp	r0, #31
 8002a7e:	dc00      	bgt.n	8002a82 <__aeabi_dsub+0x38a>
 8002a80:	e1a0      	b.n	8002dc4 <__aeabi_dsub+0x6cc>
 8002a82:	0015      	movs	r5, r2
 8002a84:	3b1f      	subs	r3, #31
 8002a86:	40dd      	lsrs	r5, r3
 8002a88:	2820      	cmp	r0, #32
 8002a8a:	d005      	beq.n	8002a98 <__aeabi_dsub+0x3a0>
 8002a8c:	2340      	movs	r3, #64	@ 0x40
 8002a8e:	1a1b      	subs	r3, r3, r0
 8002a90:	409a      	lsls	r2, r3
 8002a92:	1e53      	subs	r3, r2, #1
 8002a94:	419a      	sbcs	r2, r3
 8002a96:	4315      	orrs	r5, r2
 8002a98:	2307      	movs	r3, #7
 8002a9a:	2700      	movs	r7, #0
 8002a9c:	402b      	ands	r3, r5
 8002a9e:	e7d0      	b.n	8002a42 <__aeabi_dsub+0x34a>
 8002aa0:	08c0      	lsrs	r0, r0, #3
 8002aa2:	0762      	lsls	r2, r4, #29
 8002aa4:	4302      	orrs	r2, r0
 8002aa6:	08e4      	lsrs	r4, r4, #3
 8002aa8:	e737      	b.n	800291a <__aeabi_dsub+0x222>
 8002aaa:	08ea      	lsrs	r2, r5, #3
 8002aac:	0763      	lsls	r3, r4, #29
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	4bd3      	ldr	r3, [pc, #844]	@ (8002e00 <__aeabi_dsub+0x708>)
 8002ab2:	08e4      	lsrs	r4, r4, #3
 8002ab4:	429f      	cmp	r7, r3
 8002ab6:	d100      	bne.n	8002aba <__aeabi_dsub+0x3c2>
 8002ab8:	e72f      	b.n	800291a <__aeabi_dsub+0x222>
 8002aba:	0324      	lsls	r4, r4, #12
 8002abc:	0b25      	lsrs	r5, r4, #12
 8002abe:	057c      	lsls	r4, r7, #21
 8002ac0:	0d64      	lsrs	r4, r4, #21
 8002ac2:	e6c2      	b.n	800284a <__aeabi_dsub+0x152>
 8002ac4:	46ca      	mov	sl, r9
 8002ac6:	0022      	movs	r2, r4
 8002ac8:	4302      	orrs	r2, r0
 8002aca:	d158      	bne.n	8002b7e <__aeabi_dsub+0x486>
 8002acc:	4663      	mov	r3, ip
 8002ace:	000e      	movs	r6, r1
 8002ad0:	9c02      	ldr	r4, [sp, #8]
 8002ad2:	9303      	str	r3, [sp, #12]
 8002ad4:	9b03      	ldr	r3, [sp, #12]
 8002ad6:	4657      	mov	r7, sl
 8002ad8:	08da      	lsrs	r2, r3, #3
 8002ada:	e7e7      	b.n	8002aac <__aeabi_dsub+0x3b4>
 8002adc:	4cc9      	ldr	r4, [pc, #804]	@ (8002e04 <__aeabi_dsub+0x70c>)
 8002ade:	1aff      	subs	r7, r7, r3
 8002ae0:	4014      	ands	r4, r2
 8002ae2:	e692      	b.n	800280a <__aeabi_dsub+0x112>
 8002ae4:	4dc8      	ldr	r5, [pc, #800]	@ (8002e08 <__aeabi_dsub+0x710>)
 8002ae6:	1c7a      	adds	r2, r7, #1
 8002ae8:	422a      	tst	r2, r5
 8002aea:	d000      	beq.n	8002aee <__aeabi_dsub+0x3f6>
 8002aec:	e084      	b.n	8002bf8 <__aeabi_dsub+0x500>
 8002aee:	0022      	movs	r2, r4
 8002af0:	4302      	orrs	r2, r0
 8002af2:	2f00      	cmp	r7, #0
 8002af4:	d000      	beq.n	8002af8 <__aeabi_dsub+0x400>
 8002af6:	e0ef      	b.n	8002cd8 <__aeabi_dsub+0x5e0>
 8002af8:	2a00      	cmp	r2, #0
 8002afa:	d100      	bne.n	8002afe <__aeabi_dsub+0x406>
 8002afc:	e0e5      	b.n	8002cca <__aeabi_dsub+0x5d2>
 8002afe:	4662      	mov	r2, ip
 8002b00:	9902      	ldr	r1, [sp, #8]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x410>
 8002b06:	e0c5      	b.n	8002c94 <__aeabi_dsub+0x59c>
 8002b08:	4663      	mov	r3, ip
 8002b0a:	18c5      	adds	r5, r0, r3
 8002b0c:	468c      	mov	ip, r1
 8002b0e:	4285      	cmp	r5, r0
 8002b10:	4180      	sbcs	r0, r0
 8002b12:	4464      	add	r4, ip
 8002b14:	4240      	negs	r0, r0
 8002b16:	1824      	adds	r4, r4, r0
 8002b18:	0223      	lsls	r3, r4, #8
 8002b1a:	d502      	bpl.n	8002b22 <__aeabi_dsub+0x42a>
 8002b1c:	4bb9      	ldr	r3, [pc, #740]	@ (8002e04 <__aeabi_dsub+0x70c>)
 8002b1e:	3701      	adds	r7, #1
 8002b20:	401c      	ands	r4, r3
 8002b22:	46ba      	mov	sl, r7
 8002b24:	9503      	str	r5, [sp, #12]
 8002b26:	e7d5      	b.n	8002ad4 <__aeabi_dsub+0x3dc>
 8002b28:	4662      	mov	r2, ip
 8002b2a:	1a85      	subs	r5, r0, r2
 8002b2c:	42a8      	cmp	r0, r5
 8002b2e:	4192      	sbcs	r2, r2
 8002b30:	4252      	negs	r2, r2
 8002b32:	4691      	mov	r9, r2
 8002b34:	9b02      	ldr	r3, [sp, #8]
 8002b36:	1ae3      	subs	r3, r4, r3
 8002b38:	001a      	movs	r2, r3
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	1ad2      	subs	r2, r2, r3
 8002b3e:	0013      	movs	r3, r2
 8002b40:	4691      	mov	r9, r2
 8002b42:	021a      	lsls	r2, r3, #8
 8002b44:	d46c      	bmi.n	8002c20 <__aeabi_dsub+0x528>
 8002b46:	464a      	mov	r2, r9
 8002b48:	464c      	mov	r4, r9
 8002b4a:	432a      	orrs	r2, r5
 8002b4c:	d000      	beq.n	8002b50 <__aeabi_dsub+0x458>
 8002b4e:	e63a      	b.n	80027c6 <__aeabi_dsub+0xce>
 8002b50:	2600      	movs	r6, #0
 8002b52:	2400      	movs	r4, #0
 8002b54:	2500      	movs	r5, #0
 8002b56:	e678      	b.n	800284a <__aeabi_dsub+0x152>
 8002b58:	9902      	ldr	r1, [sp, #8]
 8002b5a:	4653      	mov	r3, sl
 8002b5c:	000d      	movs	r5, r1
 8002b5e:	3a20      	subs	r2, #32
 8002b60:	40d5      	lsrs	r5, r2
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d006      	beq.n	8002b74 <__aeabi_dsub+0x47c>
 8002b66:	2240      	movs	r2, #64	@ 0x40
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	000b      	movs	r3, r1
 8002b6c:	4093      	lsls	r3, r2
 8002b6e:	4662      	mov	r2, ip
 8002b70:	431a      	orrs	r2, r3
 8002b72:	4693      	mov	fp, r2
 8002b74:	465b      	mov	r3, fp
 8002b76:	1e5a      	subs	r2, r3, #1
 8002b78:	4193      	sbcs	r3, r2
 8002b7a:	431d      	orrs	r5, r3
 8002b7c:	e619      	b.n	80027b2 <__aeabi_dsub+0xba>
 8002b7e:	4653      	mov	r3, sl
 8002b80:	1e5a      	subs	r2, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d100      	bne.n	8002b88 <__aeabi_dsub+0x490>
 8002b86:	e0c6      	b.n	8002d16 <__aeabi_dsub+0x61e>
 8002b88:	4e9d      	ldr	r6, [pc, #628]	@ (8002e00 <__aeabi_dsub+0x708>)
 8002b8a:	45b2      	cmp	sl, r6
 8002b8c:	d100      	bne.n	8002b90 <__aeabi_dsub+0x498>
 8002b8e:	e6bd      	b.n	800290c <__aeabi_dsub+0x214>
 8002b90:	4688      	mov	r8, r1
 8002b92:	000e      	movs	r6, r1
 8002b94:	2501      	movs	r5, #1
 8002b96:	2a38      	cmp	r2, #56	@ 0x38
 8002b98:	dc10      	bgt.n	8002bbc <__aeabi_dsub+0x4c4>
 8002b9a:	2a1f      	cmp	r2, #31
 8002b9c:	dc7f      	bgt.n	8002c9e <__aeabi_dsub+0x5a6>
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	0025      	movs	r5, r4
 8002ba2:	1a89      	subs	r1, r1, r2
 8002ba4:	0007      	movs	r7, r0
 8002ba6:	4088      	lsls	r0, r1
 8002ba8:	408d      	lsls	r5, r1
 8002baa:	40d7      	lsrs	r7, r2
 8002bac:	40d4      	lsrs	r4, r2
 8002bae:	1e41      	subs	r1, r0, #1
 8002bb0:	4188      	sbcs	r0, r1
 8002bb2:	9b02      	ldr	r3, [sp, #8]
 8002bb4:	433d      	orrs	r5, r7
 8002bb6:	1b1b      	subs	r3, r3, r4
 8002bb8:	4305      	orrs	r5, r0
 8002bba:	9302      	str	r3, [sp, #8]
 8002bbc:	4662      	mov	r2, ip
 8002bbe:	1b55      	subs	r5, r2, r5
 8002bc0:	45ac      	cmp	ip, r5
 8002bc2:	4192      	sbcs	r2, r2
 8002bc4:	9b02      	ldr	r3, [sp, #8]
 8002bc6:	4252      	negs	r2, r2
 8002bc8:	464f      	mov	r7, r9
 8002bca:	1a9c      	subs	r4, r3, r2
 8002bcc:	e5f6      	b.n	80027bc <__aeabi_dsub+0xc4>
 8002bce:	2d00      	cmp	r5, #0
 8002bd0:	d000      	beq.n	8002bd4 <__aeabi_dsub+0x4dc>
 8002bd2:	e0b7      	b.n	8002d44 <__aeabi_dsub+0x64c>
 8002bd4:	2a00      	cmp	r2, #0
 8002bd6:	d100      	bne.n	8002bda <__aeabi_dsub+0x4e2>
 8002bd8:	e0f0      	b.n	8002dbc <__aeabi_dsub+0x6c4>
 8002bda:	2601      	movs	r6, #1
 8002bdc:	400e      	ands	r6, r1
 8002bde:	4663      	mov	r3, ip
 8002be0:	9802      	ldr	r0, [sp, #8]
 8002be2:	08d9      	lsrs	r1, r3, #3
 8002be4:	0742      	lsls	r2, r0, #29
 8002be6:	430a      	orrs	r2, r1
 8002be8:	08c4      	lsrs	r4, r0, #3
 8002bea:	e696      	b.n	800291a <__aeabi_dsub+0x222>
 8002bec:	4c85      	ldr	r4, [pc, #532]	@ (8002e04 <__aeabi_dsub+0x70c>)
 8002bee:	1aff      	subs	r7, r7, r3
 8002bf0:	4014      	ands	r4, r2
 8002bf2:	0762      	lsls	r2, r4, #29
 8002bf4:	08e4      	lsrs	r4, r4, #3
 8002bf6:	e760      	b.n	8002aba <__aeabi_dsub+0x3c2>
 8002bf8:	4981      	ldr	r1, [pc, #516]	@ (8002e00 <__aeabi_dsub+0x708>)
 8002bfa:	428a      	cmp	r2, r1
 8002bfc:	d100      	bne.n	8002c00 <__aeabi_dsub+0x508>
 8002bfe:	e0c9      	b.n	8002d94 <__aeabi_dsub+0x69c>
 8002c00:	4663      	mov	r3, ip
 8002c02:	18c1      	adds	r1, r0, r3
 8002c04:	4281      	cmp	r1, r0
 8002c06:	4180      	sbcs	r0, r0
 8002c08:	9b02      	ldr	r3, [sp, #8]
 8002c0a:	4240      	negs	r0, r0
 8002c0c:	18e3      	adds	r3, r4, r3
 8002c0e:	181b      	adds	r3, r3, r0
 8002c10:	07dd      	lsls	r5, r3, #31
 8002c12:	085c      	lsrs	r4, r3, #1
 8002c14:	2307      	movs	r3, #7
 8002c16:	0849      	lsrs	r1, r1, #1
 8002c18:	430d      	orrs	r5, r1
 8002c1a:	0017      	movs	r7, r2
 8002c1c:	402b      	ands	r3, r5
 8002c1e:	e710      	b.n	8002a42 <__aeabi_dsub+0x34a>
 8002c20:	4663      	mov	r3, ip
 8002c22:	1a1d      	subs	r5, r3, r0
 8002c24:	45ac      	cmp	ip, r5
 8002c26:	4192      	sbcs	r2, r2
 8002c28:	2601      	movs	r6, #1
 8002c2a:	9b02      	ldr	r3, [sp, #8]
 8002c2c:	4252      	negs	r2, r2
 8002c2e:	1b1c      	subs	r4, r3, r4
 8002c30:	4688      	mov	r8, r1
 8002c32:	1aa4      	subs	r4, r4, r2
 8002c34:	400e      	ands	r6, r1
 8002c36:	e5c6      	b.n	80027c6 <__aeabi_dsub+0xce>
 8002c38:	4663      	mov	r3, ip
 8002c3a:	18c5      	adds	r5, r0, r3
 8002c3c:	9b02      	ldr	r3, [sp, #8]
 8002c3e:	4285      	cmp	r5, r0
 8002c40:	4180      	sbcs	r0, r0
 8002c42:	469c      	mov	ip, r3
 8002c44:	4240      	negs	r0, r0
 8002c46:	4464      	add	r4, ip
 8002c48:	1824      	adds	r4, r4, r0
 8002c4a:	2701      	movs	r7, #1
 8002c4c:	0223      	lsls	r3, r4, #8
 8002c4e:	d400      	bmi.n	8002c52 <__aeabi_dsub+0x55a>
 8002c50:	e6f5      	b.n	8002a3e <__aeabi_dsub+0x346>
 8002c52:	2702      	movs	r7, #2
 8002c54:	e641      	b.n	80028da <__aeabi_dsub+0x1e2>
 8002c56:	4663      	mov	r3, ip
 8002c58:	1ac5      	subs	r5, r0, r3
 8002c5a:	42a8      	cmp	r0, r5
 8002c5c:	4180      	sbcs	r0, r0
 8002c5e:	9b02      	ldr	r3, [sp, #8]
 8002c60:	4240      	negs	r0, r0
 8002c62:	1ae4      	subs	r4, r4, r3
 8002c64:	2701      	movs	r7, #1
 8002c66:	1a24      	subs	r4, r4, r0
 8002c68:	e5a8      	b.n	80027bc <__aeabi_dsub+0xc4>
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	4652      	mov	r2, sl
 8002c6e:	002b      	movs	r3, r5
 8002c70:	3a20      	subs	r2, #32
 8002c72:	40d3      	lsrs	r3, r2
 8002c74:	0019      	movs	r1, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d006      	beq.n	8002c8a <__aeabi_dsub+0x592>
 8002c7c:	2240      	movs	r2, #64	@ 0x40
 8002c7e:	1ad2      	subs	r2, r2, r3
 8002c80:	002b      	movs	r3, r5
 8002c82:	4093      	lsls	r3, r2
 8002c84:	4662      	mov	r2, ip
 8002c86:	431a      	orrs	r2, r3
 8002c88:	4693      	mov	fp, r2
 8002c8a:	465d      	mov	r5, fp
 8002c8c:	1e6b      	subs	r3, r5, #1
 8002c8e:	419d      	sbcs	r5, r3
 8002c90:	430d      	orrs	r5, r1
 8002c92:	e615      	b.n	80028c0 <__aeabi_dsub+0x1c8>
 8002c94:	0762      	lsls	r2, r4, #29
 8002c96:	08c0      	lsrs	r0, r0, #3
 8002c98:	4302      	orrs	r2, r0
 8002c9a:	08e4      	lsrs	r4, r4, #3
 8002c9c:	e70d      	b.n	8002aba <__aeabi_dsub+0x3c2>
 8002c9e:	0011      	movs	r1, r2
 8002ca0:	0027      	movs	r7, r4
 8002ca2:	3920      	subs	r1, #32
 8002ca4:	40cf      	lsrs	r7, r1
 8002ca6:	2a20      	cmp	r2, #32
 8002ca8:	d005      	beq.n	8002cb6 <__aeabi_dsub+0x5be>
 8002caa:	2140      	movs	r1, #64	@ 0x40
 8002cac:	1a8a      	subs	r2, r1, r2
 8002cae:	4094      	lsls	r4, r2
 8002cb0:	0025      	movs	r5, r4
 8002cb2:	4305      	orrs	r5, r0
 8002cb4:	9503      	str	r5, [sp, #12]
 8002cb6:	9d03      	ldr	r5, [sp, #12]
 8002cb8:	1e6a      	subs	r2, r5, #1
 8002cba:	4195      	sbcs	r5, r2
 8002cbc:	433d      	orrs	r5, r7
 8002cbe:	e77d      	b.n	8002bbc <__aeabi_dsub+0x4c4>
 8002cc0:	2a00      	cmp	r2, #0
 8002cc2:	d100      	bne.n	8002cc6 <__aeabi_dsub+0x5ce>
 8002cc4:	e744      	b.n	8002b50 <__aeabi_dsub+0x458>
 8002cc6:	2601      	movs	r6, #1
 8002cc8:	400e      	ands	r6, r1
 8002cca:	4663      	mov	r3, ip
 8002ccc:	08d9      	lsrs	r1, r3, #3
 8002cce:	9b02      	ldr	r3, [sp, #8]
 8002cd0:	075a      	lsls	r2, r3, #29
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	08dc      	lsrs	r4, r3, #3
 8002cd6:	e6f0      	b.n	8002aba <__aeabi_dsub+0x3c2>
 8002cd8:	2a00      	cmp	r2, #0
 8002cda:	d028      	beq.n	8002d2e <__aeabi_dsub+0x636>
 8002cdc:	4662      	mov	r2, ip
 8002cde:	9f02      	ldr	r7, [sp, #8]
 8002ce0:	08c0      	lsrs	r0, r0, #3
 8002ce2:	433a      	orrs	r2, r7
 8002ce4:	d100      	bne.n	8002ce8 <__aeabi_dsub+0x5f0>
 8002ce6:	e6dc      	b.n	8002aa2 <__aeabi_dsub+0x3aa>
 8002ce8:	0762      	lsls	r2, r4, #29
 8002cea:	4310      	orrs	r0, r2
 8002cec:	2280      	movs	r2, #128	@ 0x80
 8002cee:	08e4      	lsrs	r4, r4, #3
 8002cf0:	0312      	lsls	r2, r2, #12
 8002cf2:	4214      	tst	r4, r2
 8002cf4:	d009      	beq.n	8002d0a <__aeabi_dsub+0x612>
 8002cf6:	08fd      	lsrs	r5, r7, #3
 8002cf8:	4215      	tst	r5, r2
 8002cfa:	d106      	bne.n	8002d0a <__aeabi_dsub+0x612>
 8002cfc:	4663      	mov	r3, ip
 8002cfe:	2601      	movs	r6, #1
 8002d00:	002c      	movs	r4, r5
 8002d02:	08d8      	lsrs	r0, r3, #3
 8002d04:	077b      	lsls	r3, r7, #29
 8002d06:	4318      	orrs	r0, r3
 8002d08:	400e      	ands	r6, r1
 8002d0a:	0f42      	lsrs	r2, r0, #29
 8002d0c:	00c0      	lsls	r0, r0, #3
 8002d0e:	08c0      	lsrs	r0, r0, #3
 8002d10:	0752      	lsls	r2, r2, #29
 8002d12:	4302      	orrs	r2, r0
 8002d14:	e601      	b.n	800291a <__aeabi_dsub+0x222>
 8002d16:	4663      	mov	r3, ip
 8002d18:	1a1d      	subs	r5, r3, r0
 8002d1a:	45ac      	cmp	ip, r5
 8002d1c:	4192      	sbcs	r2, r2
 8002d1e:	9b02      	ldr	r3, [sp, #8]
 8002d20:	4252      	negs	r2, r2
 8002d22:	1b1c      	subs	r4, r3, r4
 8002d24:	000e      	movs	r6, r1
 8002d26:	4688      	mov	r8, r1
 8002d28:	2701      	movs	r7, #1
 8002d2a:	1aa4      	subs	r4, r4, r2
 8002d2c:	e546      	b.n	80027bc <__aeabi_dsub+0xc4>
 8002d2e:	4663      	mov	r3, ip
 8002d30:	08d9      	lsrs	r1, r3, #3
 8002d32:	9b02      	ldr	r3, [sp, #8]
 8002d34:	075a      	lsls	r2, r3, #29
 8002d36:	430a      	orrs	r2, r1
 8002d38:	08dc      	lsrs	r4, r3, #3
 8002d3a:	e5ee      	b.n	800291a <__aeabi_dsub+0x222>
 8002d3c:	4663      	mov	r3, ip
 8002d3e:	9c02      	ldr	r4, [sp, #8]
 8002d40:	9303      	str	r3, [sp, #12]
 8002d42:	e6c7      	b.n	8002ad4 <__aeabi_dsub+0x3dc>
 8002d44:	08c0      	lsrs	r0, r0, #3
 8002d46:	2a00      	cmp	r2, #0
 8002d48:	d100      	bne.n	8002d4c <__aeabi_dsub+0x654>
 8002d4a:	e6aa      	b.n	8002aa2 <__aeabi_dsub+0x3aa>
 8002d4c:	0762      	lsls	r2, r4, #29
 8002d4e:	4310      	orrs	r0, r2
 8002d50:	2280      	movs	r2, #128	@ 0x80
 8002d52:	08e4      	lsrs	r4, r4, #3
 8002d54:	0312      	lsls	r2, r2, #12
 8002d56:	4214      	tst	r4, r2
 8002d58:	d0d7      	beq.n	8002d0a <__aeabi_dsub+0x612>
 8002d5a:	9f02      	ldr	r7, [sp, #8]
 8002d5c:	08fd      	lsrs	r5, r7, #3
 8002d5e:	4215      	tst	r5, r2
 8002d60:	d1d3      	bne.n	8002d0a <__aeabi_dsub+0x612>
 8002d62:	4663      	mov	r3, ip
 8002d64:	2601      	movs	r6, #1
 8002d66:	08d8      	lsrs	r0, r3, #3
 8002d68:	077b      	lsls	r3, r7, #29
 8002d6a:	002c      	movs	r4, r5
 8002d6c:	4318      	orrs	r0, r3
 8002d6e:	400e      	ands	r6, r1
 8002d70:	e7cb      	b.n	8002d0a <__aeabi_dsub+0x612>
 8002d72:	000a      	movs	r2, r1
 8002d74:	0027      	movs	r7, r4
 8002d76:	3a20      	subs	r2, #32
 8002d78:	40d7      	lsrs	r7, r2
 8002d7a:	2920      	cmp	r1, #32
 8002d7c:	d005      	beq.n	8002d8a <__aeabi_dsub+0x692>
 8002d7e:	2240      	movs	r2, #64	@ 0x40
 8002d80:	1a52      	subs	r2, r2, r1
 8002d82:	4094      	lsls	r4, r2
 8002d84:	0025      	movs	r5, r4
 8002d86:	4305      	orrs	r5, r0
 8002d88:	9503      	str	r5, [sp, #12]
 8002d8a:	9d03      	ldr	r5, [sp, #12]
 8002d8c:	1e6a      	subs	r2, r5, #1
 8002d8e:	4195      	sbcs	r5, r2
 8002d90:	432f      	orrs	r7, r5
 8002d92:	e610      	b.n	80029b6 <__aeabi_dsub+0x2be>
 8002d94:	0014      	movs	r4, r2
 8002d96:	2500      	movs	r5, #0
 8002d98:	2200      	movs	r2, #0
 8002d9a:	e556      	b.n	800284a <__aeabi_dsub+0x152>
 8002d9c:	9b02      	ldr	r3, [sp, #8]
 8002d9e:	4460      	add	r0, ip
 8002da0:	4699      	mov	r9, r3
 8002da2:	4560      	cmp	r0, ip
 8002da4:	4192      	sbcs	r2, r2
 8002da6:	444c      	add	r4, r9
 8002da8:	4252      	negs	r2, r2
 8002daa:	0005      	movs	r5, r0
 8002dac:	18a4      	adds	r4, r4, r2
 8002dae:	e74c      	b.n	8002c4a <__aeabi_dsub+0x552>
 8002db0:	001a      	movs	r2, r3
 8002db2:	001c      	movs	r4, r3
 8002db4:	432a      	orrs	r2, r5
 8002db6:	d000      	beq.n	8002dba <__aeabi_dsub+0x6c2>
 8002db8:	e6b3      	b.n	8002b22 <__aeabi_dsub+0x42a>
 8002dba:	e6c9      	b.n	8002b50 <__aeabi_dsub+0x458>
 8002dbc:	2480      	movs	r4, #128	@ 0x80
 8002dbe:	2600      	movs	r6, #0
 8002dc0:	0324      	lsls	r4, r4, #12
 8002dc2:	e5ae      	b.n	8002922 <__aeabi_dsub+0x22a>
 8002dc4:	2120      	movs	r1, #32
 8002dc6:	2500      	movs	r5, #0
 8002dc8:	1a09      	subs	r1, r1, r0
 8002dca:	e517      	b.n	80027fc <__aeabi_dsub+0x104>
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2500      	movs	r5, #0
 8002dd0:	4c0b      	ldr	r4, [pc, #44]	@ (8002e00 <__aeabi_dsub+0x708>)
 8002dd2:	e53a      	b.n	800284a <__aeabi_dsub+0x152>
 8002dd4:	2d00      	cmp	r5, #0
 8002dd6:	d100      	bne.n	8002dda <__aeabi_dsub+0x6e2>
 8002dd8:	e5f6      	b.n	80029c8 <__aeabi_dsub+0x2d0>
 8002dda:	464b      	mov	r3, r9
 8002ddc:	1bda      	subs	r2, r3, r7
 8002dde:	4692      	mov	sl, r2
 8002de0:	2f00      	cmp	r7, #0
 8002de2:	d100      	bne.n	8002de6 <__aeabi_dsub+0x6ee>
 8002de4:	e66f      	b.n	8002ac6 <__aeabi_dsub+0x3ce>
 8002de6:	2a38      	cmp	r2, #56	@ 0x38
 8002de8:	dc05      	bgt.n	8002df6 <__aeabi_dsub+0x6fe>
 8002dea:	2680      	movs	r6, #128	@ 0x80
 8002dec:	0436      	lsls	r6, r6, #16
 8002dee:	4334      	orrs	r4, r6
 8002df0:	4688      	mov	r8, r1
 8002df2:	000e      	movs	r6, r1
 8002df4:	e6d1      	b.n	8002b9a <__aeabi_dsub+0x4a2>
 8002df6:	4688      	mov	r8, r1
 8002df8:	000e      	movs	r6, r1
 8002dfa:	2501      	movs	r5, #1
 8002dfc:	e6de      	b.n	8002bbc <__aeabi_dsub+0x4c4>
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	000007ff 	.word	0x000007ff
 8002e04:	ff7fffff 	.word	0xff7fffff
 8002e08:	000007fe 	.word	0x000007fe
 8002e0c:	2d00      	cmp	r5, #0
 8002e0e:	d100      	bne.n	8002e12 <__aeabi_dsub+0x71a>
 8002e10:	e668      	b.n	8002ae4 <__aeabi_dsub+0x3ec>
 8002e12:	464b      	mov	r3, r9
 8002e14:	1bd9      	subs	r1, r3, r7
 8002e16:	2f00      	cmp	r7, #0
 8002e18:	d101      	bne.n	8002e1e <__aeabi_dsub+0x726>
 8002e1a:	468a      	mov	sl, r1
 8002e1c:	e5a7      	b.n	800296e <__aeabi_dsub+0x276>
 8002e1e:	2701      	movs	r7, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x72e>
 8002e24:	e5c7      	b.n	80029b6 <__aeabi_dsub+0x2be>
 8002e26:	2280      	movs	r2, #128	@ 0x80
 8002e28:	0412      	lsls	r2, r2, #16
 8002e2a:	4314      	orrs	r4, r2
 8002e2c:	e5af      	b.n	800298e <__aeabi_dsub+0x296>
 8002e2e:	46c0      	nop			@ (mov r8, r8)

08002e30 <__aeabi_dcmpun>:
 8002e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e32:	46c6      	mov	lr, r8
 8002e34:	031e      	lsls	r6, r3, #12
 8002e36:	0b36      	lsrs	r6, r6, #12
 8002e38:	46b0      	mov	r8, r6
 8002e3a:	4e0d      	ldr	r6, [pc, #52]	@ (8002e70 <__aeabi_dcmpun+0x40>)
 8002e3c:	030c      	lsls	r4, r1, #12
 8002e3e:	004d      	lsls	r5, r1, #1
 8002e40:	005f      	lsls	r7, r3, #1
 8002e42:	b500      	push	{lr}
 8002e44:	0b24      	lsrs	r4, r4, #12
 8002e46:	0d6d      	lsrs	r5, r5, #21
 8002e48:	0d7f      	lsrs	r7, r7, #21
 8002e4a:	42b5      	cmp	r5, r6
 8002e4c:	d00b      	beq.n	8002e66 <__aeabi_dcmpun+0x36>
 8002e4e:	4908      	ldr	r1, [pc, #32]	@ (8002e70 <__aeabi_dcmpun+0x40>)
 8002e50:	2000      	movs	r0, #0
 8002e52:	428f      	cmp	r7, r1
 8002e54:	d104      	bne.n	8002e60 <__aeabi_dcmpun+0x30>
 8002e56:	4646      	mov	r6, r8
 8002e58:	4316      	orrs	r6, r2
 8002e5a:	0030      	movs	r0, r6
 8002e5c:	1e43      	subs	r3, r0, #1
 8002e5e:	4198      	sbcs	r0, r3
 8002e60:	bc80      	pop	{r7}
 8002e62:	46b8      	mov	r8, r7
 8002e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e66:	4304      	orrs	r4, r0
 8002e68:	2001      	movs	r0, #1
 8002e6a:	2c00      	cmp	r4, #0
 8002e6c:	d1f8      	bne.n	8002e60 <__aeabi_dcmpun+0x30>
 8002e6e:	e7ee      	b.n	8002e4e <__aeabi_dcmpun+0x1e>
 8002e70:	000007ff 	.word	0x000007ff

08002e74 <__aeabi_d2iz>:
 8002e74:	000b      	movs	r3, r1
 8002e76:	0002      	movs	r2, r0
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	4d16      	ldr	r5, [pc, #88]	@ (8002ed4 <__aeabi_d2iz+0x60>)
 8002e7c:	030c      	lsls	r4, r1, #12
 8002e7e:	b082      	sub	sp, #8
 8002e80:	0049      	lsls	r1, r1, #1
 8002e82:	2000      	movs	r0, #0
 8002e84:	9200      	str	r2, [sp, #0]
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	0b24      	lsrs	r4, r4, #12
 8002e8a:	0d49      	lsrs	r1, r1, #21
 8002e8c:	0fde      	lsrs	r6, r3, #31
 8002e8e:	42a9      	cmp	r1, r5
 8002e90:	dd04      	ble.n	8002e9c <__aeabi_d2iz+0x28>
 8002e92:	4811      	ldr	r0, [pc, #68]	@ (8002ed8 <__aeabi_d2iz+0x64>)
 8002e94:	4281      	cmp	r1, r0
 8002e96:	dd03      	ble.n	8002ea0 <__aeabi_d2iz+0x2c>
 8002e98:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <__aeabi_d2iz+0x68>)
 8002e9a:	18f0      	adds	r0, r6, r3
 8002e9c:	b002      	add	sp, #8
 8002e9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ea0:	2080      	movs	r0, #128	@ 0x80
 8002ea2:	0340      	lsls	r0, r0, #13
 8002ea4:	4320      	orrs	r0, r4
 8002ea6:	4c0e      	ldr	r4, [pc, #56]	@ (8002ee0 <__aeabi_d2iz+0x6c>)
 8002ea8:	1a64      	subs	r4, r4, r1
 8002eaa:	2c1f      	cmp	r4, #31
 8002eac:	dd08      	ble.n	8002ec0 <__aeabi_d2iz+0x4c>
 8002eae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee4 <__aeabi_d2iz+0x70>)
 8002eb0:	1a5b      	subs	r3, r3, r1
 8002eb2:	40d8      	lsrs	r0, r3
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	4258      	negs	r0, r3
 8002eb8:	2e00      	cmp	r6, #0
 8002eba:	d1ef      	bne.n	8002e9c <__aeabi_d2iz+0x28>
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	e7ed      	b.n	8002e9c <__aeabi_d2iz+0x28>
 8002ec0:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <__aeabi_d2iz+0x74>)
 8002ec2:	9a00      	ldr	r2, [sp, #0]
 8002ec4:	469c      	mov	ip, r3
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	4461      	add	r1, ip
 8002eca:	408b      	lsls	r3, r1
 8002ecc:	40e2      	lsrs	r2, r4
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	e7f1      	b.n	8002eb6 <__aeabi_d2iz+0x42>
 8002ed2:	46c0      	nop			@ (mov r8, r8)
 8002ed4:	000003fe 	.word	0x000003fe
 8002ed8:	0000041d 	.word	0x0000041d
 8002edc:	7fffffff 	.word	0x7fffffff
 8002ee0:	00000433 	.word	0x00000433
 8002ee4:	00000413 	.word	0x00000413
 8002ee8:	fffffbed 	.word	0xfffffbed

08002eec <__aeabi_i2d>:
 8002eec:	b570      	push	{r4, r5, r6, lr}
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d016      	beq.n	8002f20 <__aeabi_i2d+0x34>
 8002ef2:	17c3      	asrs	r3, r0, #31
 8002ef4:	18c5      	adds	r5, r0, r3
 8002ef6:	405d      	eors	r5, r3
 8002ef8:	0fc4      	lsrs	r4, r0, #31
 8002efa:	0028      	movs	r0, r5
 8002efc:	f000 f914 	bl	8003128 <__clzsi2>
 8002f00:	4b10      	ldr	r3, [pc, #64]	@ (8002f44 <__aeabi_i2d+0x58>)
 8002f02:	1a1b      	subs	r3, r3, r0
 8002f04:	055b      	lsls	r3, r3, #21
 8002f06:	0d5b      	lsrs	r3, r3, #21
 8002f08:	280a      	cmp	r0, #10
 8002f0a:	dc14      	bgt.n	8002f36 <__aeabi_i2d+0x4a>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	002e      	movs	r6, r5
 8002f10:	3215      	adds	r2, #21
 8002f12:	4096      	lsls	r6, r2
 8002f14:	220b      	movs	r2, #11
 8002f16:	1a12      	subs	r2, r2, r0
 8002f18:	40d5      	lsrs	r5, r2
 8002f1a:	032d      	lsls	r5, r5, #12
 8002f1c:	0b2d      	lsrs	r5, r5, #12
 8002f1e:	e003      	b.n	8002f28 <__aeabi_i2d+0x3c>
 8002f20:	2400      	movs	r4, #0
 8002f22:	2300      	movs	r3, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	2600      	movs	r6, #0
 8002f28:	051b      	lsls	r3, r3, #20
 8002f2a:	432b      	orrs	r3, r5
 8002f2c:	07e4      	lsls	r4, r4, #31
 8002f2e:	4323      	orrs	r3, r4
 8002f30:	0030      	movs	r0, r6
 8002f32:	0019      	movs	r1, r3
 8002f34:	bd70      	pop	{r4, r5, r6, pc}
 8002f36:	380b      	subs	r0, #11
 8002f38:	4085      	lsls	r5, r0
 8002f3a:	032d      	lsls	r5, r5, #12
 8002f3c:	2600      	movs	r6, #0
 8002f3e:	0b2d      	lsrs	r5, r5, #12
 8002f40:	e7f2      	b.n	8002f28 <__aeabi_i2d+0x3c>
 8002f42:	46c0      	nop			@ (mov r8, r8)
 8002f44:	0000041e 	.word	0x0000041e

08002f48 <__aeabi_ui2d>:
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	1e04      	subs	r4, r0, #0
 8002f4c:	d010      	beq.n	8002f70 <__aeabi_ui2d+0x28>
 8002f4e:	f000 f8eb 	bl	8003128 <__clzsi2>
 8002f52:	4b0e      	ldr	r3, [pc, #56]	@ (8002f8c <__aeabi_ui2d+0x44>)
 8002f54:	1a1b      	subs	r3, r3, r0
 8002f56:	055b      	lsls	r3, r3, #21
 8002f58:	0d5b      	lsrs	r3, r3, #21
 8002f5a:	280a      	cmp	r0, #10
 8002f5c:	dc0f      	bgt.n	8002f7e <__aeabi_ui2d+0x36>
 8002f5e:	220b      	movs	r2, #11
 8002f60:	0021      	movs	r1, r4
 8002f62:	1a12      	subs	r2, r2, r0
 8002f64:	40d1      	lsrs	r1, r2
 8002f66:	3015      	adds	r0, #21
 8002f68:	030a      	lsls	r2, r1, #12
 8002f6a:	4084      	lsls	r4, r0
 8002f6c:	0b12      	lsrs	r2, r2, #12
 8002f6e:	e001      	b.n	8002f74 <__aeabi_ui2d+0x2c>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2200      	movs	r2, #0
 8002f74:	051b      	lsls	r3, r3, #20
 8002f76:	4313      	orrs	r3, r2
 8002f78:	0020      	movs	r0, r4
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	bd10      	pop	{r4, pc}
 8002f7e:	0022      	movs	r2, r4
 8002f80:	380b      	subs	r0, #11
 8002f82:	4082      	lsls	r2, r0
 8002f84:	0312      	lsls	r2, r2, #12
 8002f86:	2400      	movs	r4, #0
 8002f88:	0b12      	lsrs	r2, r2, #12
 8002f8a:	e7f3      	b.n	8002f74 <__aeabi_ui2d+0x2c>
 8002f8c:	0000041e 	.word	0x0000041e

08002f90 <__aeabi_f2d>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	0242      	lsls	r2, r0, #9
 8002f94:	0043      	lsls	r3, r0, #1
 8002f96:	0fc4      	lsrs	r4, r0, #31
 8002f98:	20fe      	movs	r0, #254	@ 0xfe
 8002f9a:	0e1b      	lsrs	r3, r3, #24
 8002f9c:	1c59      	adds	r1, r3, #1
 8002f9e:	0a55      	lsrs	r5, r2, #9
 8002fa0:	4208      	tst	r0, r1
 8002fa2:	d00c      	beq.n	8002fbe <__aeabi_f2d+0x2e>
 8002fa4:	21e0      	movs	r1, #224	@ 0xe0
 8002fa6:	0089      	lsls	r1, r1, #2
 8002fa8:	468c      	mov	ip, r1
 8002faa:	076d      	lsls	r5, r5, #29
 8002fac:	0b12      	lsrs	r2, r2, #12
 8002fae:	4463      	add	r3, ip
 8002fb0:	051b      	lsls	r3, r3, #20
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	07e4      	lsls	r4, r4, #31
 8002fb6:	4323      	orrs	r3, r4
 8002fb8:	0028      	movs	r0, r5
 8002fba:	0019      	movs	r1, r3
 8002fbc:	bd70      	pop	{r4, r5, r6, pc}
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d114      	bne.n	8002fec <__aeabi_f2d+0x5c>
 8002fc2:	2d00      	cmp	r5, #0
 8002fc4:	d01b      	beq.n	8002ffe <__aeabi_f2d+0x6e>
 8002fc6:	0028      	movs	r0, r5
 8002fc8:	f000 f8ae 	bl	8003128 <__clzsi2>
 8002fcc:	280a      	cmp	r0, #10
 8002fce:	dc1c      	bgt.n	800300a <__aeabi_f2d+0x7a>
 8002fd0:	230b      	movs	r3, #11
 8002fd2:	002a      	movs	r2, r5
 8002fd4:	1a1b      	subs	r3, r3, r0
 8002fd6:	40da      	lsrs	r2, r3
 8002fd8:	0003      	movs	r3, r0
 8002fda:	3315      	adds	r3, #21
 8002fdc:	409d      	lsls	r5, r3
 8002fde:	4b0e      	ldr	r3, [pc, #56]	@ (8003018 <__aeabi_f2d+0x88>)
 8002fe0:	0312      	lsls	r2, r2, #12
 8002fe2:	1a1b      	subs	r3, r3, r0
 8002fe4:	055b      	lsls	r3, r3, #21
 8002fe6:	0b12      	lsrs	r2, r2, #12
 8002fe8:	0d5b      	lsrs	r3, r3, #21
 8002fea:	e7e1      	b.n	8002fb0 <__aeabi_f2d+0x20>
 8002fec:	2d00      	cmp	r5, #0
 8002fee:	d009      	beq.n	8003004 <__aeabi_f2d+0x74>
 8002ff0:	0b13      	lsrs	r3, r2, #12
 8002ff2:	2280      	movs	r2, #128	@ 0x80
 8002ff4:	0312      	lsls	r2, r2, #12
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	076d      	lsls	r5, r5, #29
 8002ffa:	4b08      	ldr	r3, [pc, #32]	@ (800301c <__aeabi_f2d+0x8c>)
 8002ffc:	e7d8      	b.n	8002fb0 <__aeabi_f2d+0x20>
 8002ffe:	2300      	movs	r3, #0
 8003000:	2200      	movs	r2, #0
 8003002:	e7d5      	b.n	8002fb0 <__aeabi_f2d+0x20>
 8003004:	2200      	movs	r2, #0
 8003006:	4b05      	ldr	r3, [pc, #20]	@ (800301c <__aeabi_f2d+0x8c>)
 8003008:	e7d2      	b.n	8002fb0 <__aeabi_f2d+0x20>
 800300a:	0003      	movs	r3, r0
 800300c:	002a      	movs	r2, r5
 800300e:	3b0b      	subs	r3, #11
 8003010:	409a      	lsls	r2, r3
 8003012:	2500      	movs	r5, #0
 8003014:	e7e3      	b.n	8002fde <__aeabi_f2d+0x4e>
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	00000389 	.word	0x00000389
 800301c:	000007ff 	.word	0x000007ff

08003020 <__aeabi_d2f>:
 8003020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003022:	004b      	lsls	r3, r1, #1
 8003024:	030f      	lsls	r7, r1, #12
 8003026:	0d5b      	lsrs	r3, r3, #21
 8003028:	4c3b      	ldr	r4, [pc, #236]	@ (8003118 <__aeabi_d2f+0xf8>)
 800302a:	0f45      	lsrs	r5, r0, #29
 800302c:	b083      	sub	sp, #12
 800302e:	0a7f      	lsrs	r7, r7, #9
 8003030:	1c5e      	adds	r6, r3, #1
 8003032:	432f      	orrs	r7, r5
 8003034:	9000      	str	r0, [sp, #0]
 8003036:	9101      	str	r1, [sp, #4]
 8003038:	0fca      	lsrs	r2, r1, #31
 800303a:	00c5      	lsls	r5, r0, #3
 800303c:	4226      	tst	r6, r4
 800303e:	d00b      	beq.n	8003058 <__aeabi_d2f+0x38>
 8003040:	4936      	ldr	r1, [pc, #216]	@ (800311c <__aeabi_d2f+0xfc>)
 8003042:	185c      	adds	r4, r3, r1
 8003044:	2cfe      	cmp	r4, #254	@ 0xfe
 8003046:	dd13      	ble.n	8003070 <__aeabi_d2f+0x50>
 8003048:	20ff      	movs	r0, #255	@ 0xff
 800304a:	2300      	movs	r3, #0
 800304c:	05c0      	lsls	r0, r0, #23
 800304e:	4318      	orrs	r0, r3
 8003050:	07d2      	lsls	r2, r2, #31
 8003052:	4310      	orrs	r0, r2
 8003054:	b003      	add	sp, #12
 8003056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <__aeabi_d2f+0x42>
 800305c:	2000      	movs	r0, #0
 800305e:	2300      	movs	r3, #0
 8003060:	e7f4      	b.n	800304c <__aeabi_d2f+0x2c>
 8003062:	433d      	orrs	r5, r7
 8003064:	d0f0      	beq.n	8003048 <__aeabi_d2f+0x28>
 8003066:	2380      	movs	r3, #128	@ 0x80
 8003068:	03db      	lsls	r3, r3, #15
 800306a:	20ff      	movs	r0, #255	@ 0xff
 800306c:	433b      	orrs	r3, r7
 800306e:	e7ed      	b.n	800304c <__aeabi_d2f+0x2c>
 8003070:	2c00      	cmp	r4, #0
 8003072:	dd14      	ble.n	800309e <__aeabi_d2f+0x7e>
 8003074:	9b00      	ldr	r3, [sp, #0]
 8003076:	00ff      	lsls	r7, r7, #3
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	1e58      	subs	r0, r3, #1
 800307c:	4183      	sbcs	r3, r0
 800307e:	0f69      	lsrs	r1, r5, #29
 8003080:	433b      	orrs	r3, r7
 8003082:	430b      	orrs	r3, r1
 8003084:	0759      	lsls	r1, r3, #29
 8003086:	d041      	beq.n	800310c <__aeabi_d2f+0xec>
 8003088:	210f      	movs	r1, #15
 800308a:	4019      	ands	r1, r3
 800308c:	2904      	cmp	r1, #4
 800308e:	d028      	beq.n	80030e2 <__aeabi_d2f+0xc2>
 8003090:	3304      	adds	r3, #4
 8003092:	0159      	lsls	r1, r3, #5
 8003094:	d525      	bpl.n	80030e2 <__aeabi_d2f+0xc2>
 8003096:	3401      	adds	r4, #1
 8003098:	2300      	movs	r3, #0
 800309a:	b2e0      	uxtb	r0, r4
 800309c:	e7d6      	b.n	800304c <__aeabi_d2f+0x2c>
 800309e:	0021      	movs	r1, r4
 80030a0:	3117      	adds	r1, #23
 80030a2:	dbdb      	blt.n	800305c <__aeabi_d2f+0x3c>
 80030a4:	2180      	movs	r1, #128	@ 0x80
 80030a6:	201e      	movs	r0, #30
 80030a8:	0409      	lsls	r1, r1, #16
 80030aa:	4339      	orrs	r1, r7
 80030ac:	1b00      	subs	r0, r0, r4
 80030ae:	281f      	cmp	r0, #31
 80030b0:	dd1b      	ble.n	80030ea <__aeabi_d2f+0xca>
 80030b2:	2602      	movs	r6, #2
 80030b4:	4276      	negs	r6, r6
 80030b6:	1b34      	subs	r4, r6, r4
 80030b8:	000e      	movs	r6, r1
 80030ba:	40e6      	lsrs	r6, r4
 80030bc:	0034      	movs	r4, r6
 80030be:	2820      	cmp	r0, #32
 80030c0:	d004      	beq.n	80030cc <__aeabi_d2f+0xac>
 80030c2:	4817      	ldr	r0, [pc, #92]	@ (8003120 <__aeabi_d2f+0x100>)
 80030c4:	4684      	mov	ip, r0
 80030c6:	4463      	add	r3, ip
 80030c8:	4099      	lsls	r1, r3
 80030ca:	430d      	orrs	r5, r1
 80030cc:	002b      	movs	r3, r5
 80030ce:	1e59      	subs	r1, r3, #1
 80030d0:	418b      	sbcs	r3, r1
 80030d2:	4323      	orrs	r3, r4
 80030d4:	0759      	lsls	r1, r3, #29
 80030d6:	d015      	beq.n	8003104 <__aeabi_d2f+0xe4>
 80030d8:	210f      	movs	r1, #15
 80030da:	2400      	movs	r4, #0
 80030dc:	4019      	ands	r1, r3
 80030de:	2904      	cmp	r1, #4
 80030e0:	d117      	bne.n	8003112 <__aeabi_d2f+0xf2>
 80030e2:	019b      	lsls	r3, r3, #6
 80030e4:	0a5b      	lsrs	r3, r3, #9
 80030e6:	b2e0      	uxtb	r0, r4
 80030e8:	e7b0      	b.n	800304c <__aeabi_d2f+0x2c>
 80030ea:	4c0e      	ldr	r4, [pc, #56]	@ (8003124 <__aeabi_d2f+0x104>)
 80030ec:	191c      	adds	r4, r3, r4
 80030ee:	002b      	movs	r3, r5
 80030f0:	40a5      	lsls	r5, r4
 80030f2:	40c3      	lsrs	r3, r0
 80030f4:	40a1      	lsls	r1, r4
 80030f6:	1e68      	subs	r0, r5, #1
 80030f8:	4185      	sbcs	r5, r0
 80030fa:	4329      	orrs	r1, r5
 80030fc:	430b      	orrs	r3, r1
 80030fe:	2400      	movs	r4, #0
 8003100:	0759      	lsls	r1, r3, #29
 8003102:	d1c1      	bne.n	8003088 <__aeabi_d2f+0x68>
 8003104:	019b      	lsls	r3, r3, #6
 8003106:	2000      	movs	r0, #0
 8003108:	0a5b      	lsrs	r3, r3, #9
 800310a:	e79f      	b.n	800304c <__aeabi_d2f+0x2c>
 800310c:	08db      	lsrs	r3, r3, #3
 800310e:	b2e0      	uxtb	r0, r4
 8003110:	e79c      	b.n	800304c <__aeabi_d2f+0x2c>
 8003112:	3304      	adds	r3, #4
 8003114:	e7e5      	b.n	80030e2 <__aeabi_d2f+0xc2>
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	000007fe 	.word	0x000007fe
 800311c:	fffffc80 	.word	0xfffffc80
 8003120:	fffffca2 	.word	0xfffffca2
 8003124:	fffffc82 	.word	0xfffffc82

08003128 <__clzsi2>:
 8003128:	211c      	movs	r1, #28
 800312a:	2301      	movs	r3, #1
 800312c:	041b      	lsls	r3, r3, #16
 800312e:	4298      	cmp	r0, r3
 8003130:	d301      	bcc.n	8003136 <__clzsi2+0xe>
 8003132:	0c00      	lsrs	r0, r0, #16
 8003134:	3910      	subs	r1, #16
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	4298      	cmp	r0, r3
 800313a:	d301      	bcc.n	8003140 <__clzsi2+0x18>
 800313c:	0a00      	lsrs	r0, r0, #8
 800313e:	3908      	subs	r1, #8
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	4298      	cmp	r0, r3
 8003144:	d301      	bcc.n	800314a <__clzsi2+0x22>
 8003146:	0900      	lsrs	r0, r0, #4
 8003148:	3904      	subs	r1, #4
 800314a:	a202      	add	r2, pc, #8	@ (adr r2, 8003154 <__clzsi2+0x2c>)
 800314c:	5c10      	ldrb	r0, [r2, r0]
 800314e:	1840      	adds	r0, r0, r1
 8003150:	4770      	bx	lr
 8003152:	46c0      	nop			@ (mov r8, r8)
 8003154:	02020304 	.word	0x02020304
 8003158:	01010101 	.word	0x01010101
	...

08003164 <__clzdi2>:
 8003164:	b510      	push	{r4, lr}
 8003166:	2900      	cmp	r1, #0
 8003168:	d103      	bne.n	8003172 <__clzdi2+0xe>
 800316a:	f7ff ffdd 	bl	8003128 <__clzsi2>
 800316e:	3020      	adds	r0, #32
 8003170:	e002      	b.n	8003178 <__clzdi2+0x14>
 8003172:	0008      	movs	r0, r1
 8003174:	f7ff ffd8 	bl	8003128 <__clzsi2>
 8003178:	bd10      	pop	{r4, pc}
 800317a:	46c0      	nop			@ (mov r8, r8)

0800317c <Estimate_R_thermistor>:
#include <math.h>
#include "Thermistor_Processing.h"


float Estimate_R_thermistor(uint32_t ADC)
{
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

	float VCC = 4095.0;
 8003184:	4b10      	ldr	r3, [pc, #64]	@ (80031c8 <Estimate_R_thermistor+0x4c>)
 8003186:	617b      	str	r3, [r7, #20]
	float R_up = 42000.0;
 8003188:	4b10      	ldr	r3, [pc, #64]	@ (80031cc <Estimate_R_thermistor+0x50>)
 800318a:	613b      	str	r3, [r7, #16]
	float R_therm;
	R_therm = (float)(R_up) * (float)(ADC) / (VCC - (float)(ADC));
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7fe f801 	bl	8001194 <__aeabi_ui2f>
 8003192:	1c03      	adds	r3, r0, #0
 8003194:	6939      	ldr	r1, [r7, #16]
 8003196:	1c18      	adds	r0, r3, #0
 8003198:	f7fd fd1a 	bl	8000bd0 <__aeabi_fmul>
 800319c:	1c03      	adds	r3, r0, #0
 800319e:	1c1c      	adds	r4, r3, #0
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7fd fff7 	bl	8001194 <__aeabi_ui2f>
 80031a6:	1c03      	adds	r3, r0, #0
 80031a8:	1c19      	adds	r1, r3, #0
 80031aa:	6978      	ldr	r0, [r7, #20]
 80031ac:	f7fd fe4e 	bl	8000e4c <__aeabi_fsub>
 80031b0:	1c03      	adds	r3, r0, #0
 80031b2:	1c19      	adds	r1, r3, #0
 80031b4:	1c20      	adds	r0, r4, #0
 80031b6:	f7fd fbeb 	bl	8000990 <__aeabi_fdiv>
 80031ba:	1c03      	adds	r3, r0, #0
 80031bc:	60fb      	str	r3, [r7, #12]

	return R_therm;
 80031be:	68fb      	ldr	r3, [r7, #12]
}
 80031c0:	1c18      	adds	r0, r3, #0
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b007      	add	sp, #28
 80031c6:	bd90      	pop	{r4, r7, pc}
 80031c8:	457ff000 	.word	0x457ff000
 80031cc:	47241000 	.word	0x47241000

080031d0 <Estimate_Temperature>:

float Estimate_Temperature(uint32_t ADC)
{
 80031d0:	b5b0      	push	{r4, r5, r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	float R_therm;

	float T_K  = 273.15;
 80031d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003298 <Estimate_Temperature+0xc8>)
 80031da:	61fb      	str	r3, [r7, #28]
	float R0   = 47000.0;
 80031dc:	4b2f      	ldr	r3, [pc, #188]	@ (800329c <Estimate_Temperature+0xcc>)
 80031de:	61bb      	str	r3, [r7, #24]
	float B    = 4050;
 80031e0:	4b2f      	ldr	r3, [pc, #188]	@ (80032a0 <Estimate_Temperature+0xd0>)
 80031e2:	617b      	str	r3, [r7, #20]
	float T0   = 25.0;
 80031e4:	4b2f      	ldr	r3, [pc, #188]	@ (80032a4 <Estimate_Temperature+0xd4>)
 80031e6:	613b      	str	r3, [r7, #16]

	float T_msm;

	R_therm = Estimate_R_thermistor(ADC);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7ff ffc6 	bl	800317c <Estimate_R_thermistor>
 80031f0:	1c03      	adds	r3, r0, #0
 80031f2:	60fb      	str	r3, [r7, #12]

	T_msm = 1 / (log(R_therm / R0)  / B + 1 / (T0 + T_K)) - T_K;
 80031f4:	69b9      	ldr	r1, [r7, #24]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7fd fbca 	bl	8000990 <__aeabi_fdiv>
 80031fc:	1c03      	adds	r3, r0, #0
 80031fe:	1c18      	adds	r0, r3, #0
 8003200:	f7ff fec6 	bl	8002f90 <__aeabi_f2d>
 8003204:	0002      	movs	r2, r0
 8003206:	000b      	movs	r3, r1
 8003208:	0010      	movs	r0, r2
 800320a:	0019      	movs	r1, r3
 800320c:	f008 f8f4 	bl	800b3f8 <log>
 8003210:	0004      	movs	r4, r0
 8003212:	000d      	movs	r5, r1
 8003214:	6978      	ldr	r0, [r7, #20]
 8003216:	f7ff febb 	bl	8002f90 <__aeabi_f2d>
 800321a:	0002      	movs	r2, r0
 800321c:	000b      	movs	r3, r1
 800321e:	0020      	movs	r0, r4
 8003220:	0029      	movs	r1, r5
 8003222:	f7fe fb5d 	bl	80018e0 <__aeabi_ddiv>
 8003226:	0002      	movs	r2, r0
 8003228:	000b      	movs	r3, r1
 800322a:	0014      	movs	r4, r2
 800322c:	001d      	movs	r5, r3
 800322e:	69f9      	ldr	r1, [r7, #28]
 8003230:	6938      	ldr	r0, [r7, #16]
 8003232:	f7fd fa23 	bl	800067c <__aeabi_fadd>
 8003236:	1c03      	adds	r3, r0, #0
 8003238:	1c19      	adds	r1, r3, #0
 800323a:	20fe      	movs	r0, #254	@ 0xfe
 800323c:	0580      	lsls	r0, r0, #22
 800323e:	f7fd fba7 	bl	8000990 <__aeabi_fdiv>
 8003242:	1c03      	adds	r3, r0, #0
 8003244:	1c18      	adds	r0, r3, #0
 8003246:	f7ff fea3 	bl	8002f90 <__aeabi_f2d>
 800324a:	0002      	movs	r2, r0
 800324c:	000b      	movs	r3, r1
 800324e:	0020      	movs	r0, r4
 8003250:	0029      	movs	r1, r5
 8003252:	f7fd ffe1 	bl	8001218 <__aeabi_dadd>
 8003256:	0002      	movs	r2, r0
 8003258:	000b      	movs	r3, r1
 800325a:	2000      	movs	r0, #0
 800325c:	4912      	ldr	r1, [pc, #72]	@ (80032a8 <Estimate_Temperature+0xd8>)
 800325e:	f7fe fb3f 	bl	80018e0 <__aeabi_ddiv>
 8003262:	0002      	movs	r2, r0
 8003264:	000b      	movs	r3, r1
 8003266:	0014      	movs	r4, r2
 8003268:	001d      	movs	r5, r3
 800326a:	69f8      	ldr	r0, [r7, #28]
 800326c:	f7ff fe90 	bl	8002f90 <__aeabi_f2d>
 8003270:	0002      	movs	r2, r0
 8003272:	000b      	movs	r3, r1
 8003274:	0020      	movs	r0, r4
 8003276:	0029      	movs	r1, r5
 8003278:	f7ff fa3e 	bl	80026f8 <__aeabi_dsub>
 800327c:	0002      	movs	r2, r0
 800327e:	000b      	movs	r3, r1
 8003280:	0010      	movs	r0, r2
 8003282:	0019      	movs	r1, r3
 8003284:	f7ff fecc 	bl	8003020 <__aeabi_d2f>
 8003288:	1c03      	adds	r3, r0, #0
 800328a:	60bb      	str	r3, [r7, #8]

	return T_msm;
 800328c:	68bb      	ldr	r3, [r7, #8]
}
 800328e:	1c18      	adds	r0, r3, #0
 8003290:	46bd      	mov	sp, r7
 8003292:	b008      	add	sp, #32
 8003294:	bdb0      	pop	{r4, r5, r7, pc}
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	43889333 	.word	0x43889333
 800329c:	47379800 	.word	0x47379800
 80032a0:	457d2000 	.word	0x457d2000
 80032a4:	41c80000 	.word	0x41c80000
 80032a8:	3ff00000 	.word	0x3ff00000

080032ac <Give_Temperature>:

void Give_Temperature(float T_msm, char *Temp)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	snprintf(Temp, 5, "%f", T_msm);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff fe6a 	bl	8002f90 <__aeabi_f2d>
 80032bc:	0002      	movs	r2, r0
 80032be:	000b      	movs	r3, r1
 80032c0:	4905      	ldr	r1, [pc, #20]	@ (80032d8 <Give_Temperature+0x2c>)
 80032c2:	6838      	ldr	r0, [r7, #0]
 80032c4:	9200      	str	r2, [sp, #0]
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	000a      	movs	r2, r1
 80032ca:	2105      	movs	r1, #5
 80032cc:	f005 fea2 	bl	8009014 <sniprintf>
}
 80032d0:	46c0      	nop			@ (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b002      	add	sp, #8
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	0800b7f0 	.word	0x0800b7f0

080032dc <HEX_to_DEC>:
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void HEX_to_DEC(uint32_t Hex, char * DEC)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
	char T = 48;
 80032e6:	210f      	movs	r1, #15
 80032e8:	187b      	adds	r3, r7, r1
 80032ea:	2230      	movs	r2, #48	@ 0x30
 80032ec:	701a      	strb	r2, [r3, #0]
	DEC[3] = T;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	3303      	adds	r3, #3
 80032f2:	187a      	adds	r2, r7, r1
 80032f4:	7812      	ldrb	r2, [r2, #0]
 80032f6:	701a      	strb	r2, [r3, #0]
	DEC[2] = T;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	3302      	adds	r3, #2
 80032fc:	187a      	adds	r2, r7, r1
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	701a      	strb	r2, [r3, #0]
	DEC[1] = T;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	3301      	adds	r3, #1
 8003306:	187a      	adds	r2, r7, r1
 8003308:	7812      	ldrb	r2, [r2, #0]
 800330a:	701a      	strb	r2, [r3, #0]
	DEC[0] = T;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	187a      	adds	r2, r7, r1
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	701a      	strb	r2, [r3, #0]
	while( Hex >= 1000 )
 8003314:	e00a      	b.n	800332c <HEX_to_DEC+0x50>
	{Hex = Hex - 1000; DEC[0] = DEC[0] + 1;}
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1d      	ldr	r2, [pc, #116]	@ (8003390 <HEX_to_DEC+0xb4>)
 800331a:	4694      	mov	ip, r2
 800331c:	4463      	add	r3, ip
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	701a      	strb	r2, [r3, #0]
	while( Hex >= 1000 )
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	23fa      	movs	r3, #250	@ 0xfa
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	429a      	cmp	r2, r3
 8003334:	d2ef      	bcs.n	8003316 <HEX_to_DEC+0x3a>

	while( Hex >= 100 )
 8003336:	e00a      	b.n	800334e <HEX_to_DEC+0x72>
	{Hex = Hex - 100; DEC[1] = DEC[1] + 1;}
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b64      	subs	r3, #100	@ 0x64
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	3301      	adds	r3, #1
 8003348:	3201      	adds	r2, #1
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]
	while( Hex >= 100 )
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b63      	cmp	r3, #99	@ 0x63
 8003352:	d8f1      	bhi.n	8003338 <HEX_to_DEC+0x5c>

	while( Hex >= 10 )
 8003354:	e00a      	b.n	800336c <HEX_to_DEC+0x90>
	{Hex = Hex - 10; DEC[2] = DEC[2] + 1;}
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3b0a      	subs	r3, #10
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	3302      	adds	r3, #2
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	3302      	adds	r3, #2
 8003366:	3201      	adds	r2, #1
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	701a      	strb	r2, [r3, #0]
	while( Hex >= 10 )
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b09      	cmp	r3, #9
 8003370:	d8f1      	bhi.n	8003356 <HEX_to_DEC+0x7a>
	DEC[3] = DEC[3] + Hex;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	3303      	adds	r3, #3
 8003376:	7819      	ldrb	r1, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	3303      	adds	r3, #3
 8003380:	188a      	adds	r2, r1, r2
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]
}
 8003386:	46c0      	nop			@ (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b004      	add	sp, #16
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	fffffc18 	.word	0xfffffc18

08003394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003398:	f000 fdb8 	bl	8003f0c <HAL_Init>

  /* USER CODE BEGIN Init */

  Timer_State = 0;
 800339c:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <main+0x3c>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033a2:	f000 f81b 	bl	80033dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033a6:	f000 f9b9 	bl	800371c <MX_GPIO_Init>
  MX_ADC1_Init();
 80033aa:	f000 f85f 	bl	800346c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80033ae:	f000 f933 	bl	8003618 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80033b2:	f000 f97f 	bl	80036b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80033b6:	f000 f8db 	bl	8003570 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80033ba:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <main+0x40>)
 80033bc:	0018      	movs	r0, r3
 80033be:	f003 f907 	bl	80065d0 <HAL_TIM_Base_Start_IT>

  HAL_ADCEx_Calibration_Start(&hadc1);
 80033c2:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <main+0x44>)
 80033c4:	0018      	movs	r0, r3
 80033c6:	f001 fdf9 	bl	8004fbc <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	e7fd      	b.n	80033ca <main+0x36>
 80033ce:	46c0      	nop			@ (mov r8, r8)
 80033d0:	200003e8 	.word	0x200003e8
 80033d4:	20000254 	.word	0x20000254
 80033d8:	200001f0 	.word	0x200001f0

080033dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b093      	sub	sp, #76	@ 0x4c
 80033e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033e2:	2410      	movs	r4, #16
 80033e4:	193b      	adds	r3, r7, r4
 80033e6:	0018      	movs	r0, r3
 80033e8:	2338      	movs	r3, #56	@ 0x38
 80033ea:	001a      	movs	r2, r3
 80033ec:	2100      	movs	r1, #0
 80033ee:	f005 fe91 	bl	8009114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033f2:	003b      	movs	r3, r7
 80033f4:	0018      	movs	r0, r3
 80033f6:	2310      	movs	r3, #16
 80033f8:	001a      	movs	r2, r3
 80033fa:	2100      	movs	r1, #0
 80033fc:	f005 fe8a 	bl	8009114 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003400:	2380      	movs	r3, #128	@ 0x80
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	0018      	movs	r0, r3
 8003406:	f002 fa01 	bl	800580c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800340a:	193b      	adds	r3, r7, r4
 800340c:	2202      	movs	r2, #2
 800340e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003410:	193b      	adds	r3, r7, r4
 8003412:	2280      	movs	r2, #128	@ 0x80
 8003414:	0052      	lsls	r2, r2, #1
 8003416:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003418:	193b      	adds	r3, r7, r4
 800341a:	2200      	movs	r2, #0
 800341c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800341e:	193b      	adds	r3, r7, r4
 8003420:	2240      	movs	r2, #64	@ 0x40
 8003422:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003424:	193b      	adds	r3, r7, r4
 8003426:	2200      	movs	r2, #0
 8003428:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800342a:	193b      	adds	r3, r7, r4
 800342c:	0018      	movs	r0, r3
 800342e:	f002 fa39 	bl	80058a4 <HAL_RCC_OscConfig>
 8003432:	1e03      	subs	r3, r0, #0
 8003434:	d001      	beq.n	800343a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003436:	f000 fae9 	bl	8003a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800343a:	003b      	movs	r3, r7
 800343c:	2207      	movs	r2, #7
 800343e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003440:	003b      	movs	r3, r7
 8003442:	2200      	movs	r2, #0
 8003444:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003446:	003b      	movs	r3, r7
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800344c:	003b      	movs	r3, r7
 800344e:	2200      	movs	r2, #0
 8003450:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003452:	003b      	movs	r3, r7
 8003454:	2100      	movs	r1, #0
 8003456:	0018      	movs	r0, r3
 8003458:	f002 fd3e 	bl	8005ed8 <HAL_RCC_ClockConfig>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d001      	beq.n	8003464 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003460:	f000 fad4 	bl	8003a0c <Error_Handler>
  }
}
 8003464:	46c0      	nop			@ (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b013      	add	sp, #76	@ 0x4c
 800346a:	bd90      	pop	{r4, r7, pc}

0800346c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003472:	1d3b      	adds	r3, r7, #4
 8003474:	0018      	movs	r0, r3
 8003476:	230c      	movs	r3, #12
 8003478:	001a      	movs	r2, r3
 800347a:	2100      	movs	r1, #0
 800347c:	f005 fe4a 	bl	8009114 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003480:	4b37      	ldr	r3, [pc, #220]	@ (8003560 <MX_ADC1_Init+0xf4>)
 8003482:	4a38      	ldr	r2, [pc, #224]	@ (8003564 <MX_ADC1_Init+0xf8>)
 8003484:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8003486:	4b36      	ldr	r3, [pc, #216]	@ (8003560 <MX_ADC1_Init+0xf4>)
 8003488:	22a0      	movs	r2, #160	@ 0xa0
 800348a:	0352      	lsls	r2, r2, #13
 800348c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800348e:	4b34      	ldr	r3, [pc, #208]	@ (8003560 <MX_ADC1_Init+0xf4>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003494:	4b32      	ldr	r3, [pc, #200]	@ (8003560 <MX_ADC1_Init+0xf4>)
 8003496:	2200      	movs	r2, #0
 8003498:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800349a:	4b31      	ldr	r3, [pc, #196]	@ (8003560 <MX_ADC1_Init+0xf4>)
 800349c:	2280      	movs	r2, #128	@ 0x80
 800349e:	0392      	lsls	r2, r2, #14
 80034a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034a4:	2204      	movs	r2, #4
 80034a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80034a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80034ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80034b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80034ba:	4b29      	ldr	r3, [pc, #164]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034bc:	2202      	movs	r2, #2
 80034be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80034c0:	4b27      	ldr	r3, [pc, #156]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034c2:	2220      	movs	r2, #32
 80034c4:	2101      	movs	r1, #1
 80034c6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034c8:	4b25      	ldr	r3, [pc, #148]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034ce:	4b24      	ldr	r3, [pc, #144]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80034d4:	4b22      	ldr	r3, [pc, #136]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034d6:	222c      	movs	r2, #44	@ 0x2c
 80034d8:	2100      	movs	r1, #0
 80034da:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80034dc:	4b20      	ldr	r3, [pc, #128]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80034e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034e4:	2207      	movs	r2, #7
 80034e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80034e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034ea:	2207      	movs	r2, #7
 80034ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80034ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034f0:	223c      	movs	r2, #60	@ 0x3c
 80034f2:	2100      	movs	r1, #0
 80034f4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80034f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034fc:	4b18      	ldr	r3, [pc, #96]	@ (8003560 <MX_ADC1_Init+0xf4>)
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 fef4 	bl	80042ec <HAL_ADC_Init>
 8003504:	1e03      	subs	r3, r0, #0
 8003506:	d001      	beq.n	800350c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003508:	f000 fa80 	bl	8003a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800350c:	1d3b      	adds	r3, r7, #4
 800350e:	2201      	movs	r2, #1
 8003510:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003512:	1d3b      	adds	r3, r7, #4
 8003514:	2200      	movs	r2, #0
 8003516:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003518:	1d3b      	adds	r3, r7, #4
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800351e:	1d3a      	adds	r2, r7, #4
 8003520:	4b0f      	ldr	r3, [pc, #60]	@ (8003560 <MX_ADC1_Init+0xf4>)
 8003522:	0011      	movs	r1, r2
 8003524:	0018      	movs	r0, r3
 8003526:	f001 f9b3 	bl	8004890 <HAL_ADC_ConfigChannel>
 800352a:	1e03      	subs	r3, r0, #0
 800352c:	d001      	beq.n	8003532 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800352e:	f000 fa6d 	bl	8003a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	4a0c      	ldr	r2, [pc, #48]	@ (8003568 <MX_ADC1_Init+0xfc>)
 8003536:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003538:	1d3b      	adds	r3, r7, #4
 800353a:	2204      	movs	r2, #4
 800353c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
 800353e:	1d3b      	adds	r3, r7, #4
 8003540:	4a0a      	ldr	r2, [pc, #40]	@ (800356c <MX_ADC1_Init+0x100>)
 8003542:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003544:	1d3a      	adds	r2, r7, #4
 8003546:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <MX_ADC1_Init+0xf4>)
 8003548:	0011      	movs	r1, r2
 800354a:	0018      	movs	r0, r3
 800354c:	f001 f9a0 	bl	8004890 <HAL_ADC_ConfigChannel>
 8003550:	1e03      	subs	r3, r0, #0
 8003552:	d001      	beq.n	8003558 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8003554:	f000 fa5a 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003558:	46c0      	nop			@ (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b004      	add	sp, #16
 800355e:	bd80      	pop	{r7, pc}
 8003560:	200001f0 	.word	0x200001f0
 8003564:	40012400 	.word	0x40012400
 8003568:	04000002 	.word	0x04000002
 800356c:	07ffff04 	.word	0x07ffff04

08003570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003576:	2310      	movs	r3, #16
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	0018      	movs	r0, r3
 800357c:	2310      	movs	r3, #16
 800357e:	001a      	movs	r2, r3
 8003580:	2100      	movs	r1, #0
 8003582:	f005 fdc7 	bl	8009114 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003586:	1d3b      	adds	r3, r7, #4
 8003588:	0018      	movs	r0, r3
 800358a:	230c      	movs	r3, #12
 800358c:	001a      	movs	r2, r3
 800358e:	2100      	movs	r1, #0
 8003590:	f005 fdc0 	bl	8009114 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003594:	4b1e      	ldr	r3, [pc, #120]	@ (8003610 <MX_TIM2_Init+0xa0>)
 8003596:	2280      	movs	r2, #128	@ 0x80
 8003598:	05d2      	lsls	r2, r2, #23
 800359a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 800359c:	4b1c      	ldr	r3, [pc, #112]	@ (8003610 <MX_TIM2_Init+0xa0>)
 800359e:	4a1d      	ldr	r2, [pc, #116]	@ (8003614 <MX_TIM2_Init+0xa4>)
 80035a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003610 <MX_TIM2_Init+0xa0>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80035a8:	4b19      	ldr	r3, [pc, #100]	@ (8003610 <MX_TIM2_Init+0xa0>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ae:	4b18      	ldr	r3, [pc, #96]	@ (8003610 <MX_TIM2_Init+0xa0>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b4:	4b16      	ldr	r3, [pc, #88]	@ (8003610 <MX_TIM2_Init+0xa0>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80035ba:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <MX_TIM2_Init+0xa0>)
 80035bc:	0018      	movs	r0, r3
 80035be:	f002 ffaf 	bl	8006520 <HAL_TIM_Base_Init>
 80035c2:	1e03      	subs	r3, r0, #0
 80035c4:	d001      	beq.n	80035ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80035c6:	f000 fa21 	bl	8003a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ca:	2110      	movs	r1, #16
 80035cc:	187b      	adds	r3, r7, r1
 80035ce:	2280      	movs	r2, #128	@ 0x80
 80035d0:	0152      	lsls	r2, r2, #5
 80035d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80035d4:	187a      	adds	r2, r7, r1
 80035d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003610 <MX_TIM2_Init+0xa0>)
 80035d8:	0011      	movs	r1, r2
 80035da:	0018      	movs	r0, r3
 80035dc:	f003 f954 	bl	8006888 <HAL_TIM_ConfigClockSource>
 80035e0:	1e03      	subs	r3, r0, #0
 80035e2:	d001      	beq.n	80035e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80035e4:	f000 fa12 	bl	8003a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ee:	1d3b      	adds	r3, r7, #4
 80035f0:	2200      	movs	r2, #0
 80035f2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035f4:	1d3a      	adds	r2, r7, #4
 80035f6:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <MX_TIM2_Init+0xa0>)
 80035f8:	0011      	movs	r1, r2
 80035fa:	0018      	movs	r0, r3
 80035fc:	f003 fb5a 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8003600:	1e03      	subs	r3, r0, #0
 8003602:	d001      	beq.n	8003608 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003604:	f000 fa02 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003608:	46c0      	nop			@ (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b008      	add	sp, #32
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20000254 	.word	0x20000254
 8003614:	00003e7f 	.word	0x00003e7f

08003618 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800361c:	4b23      	ldr	r3, [pc, #140]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 800361e:	4a24      	ldr	r2, [pc, #144]	@ (80036b0 <MX_USART1_UART_Init+0x98>)
 8003620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003622:	4b22      	ldr	r3, [pc, #136]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 8003624:	22e1      	movs	r2, #225	@ 0xe1
 8003626:	0252      	lsls	r2, r2, #9
 8003628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800362a:	4b20      	ldr	r3, [pc, #128]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003630:	4b1e      	ldr	r3, [pc, #120]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 8003632:	2200      	movs	r2, #0
 8003634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003636:	4b1d      	ldr	r3, [pc, #116]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800363c:	4b1b      	ldr	r3, [pc, #108]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 800363e:	220c      	movs	r2, #12
 8003640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003642:	4b1a      	ldr	r3, [pc, #104]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 8003644:	2200      	movs	r2, #0
 8003646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003648:	4b18      	ldr	r3, [pc, #96]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 800364a:	2200      	movs	r2, #0
 800364c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800364e:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 8003650:	2200      	movs	r2, #0
 8003652:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003654:	4b15      	ldr	r3, [pc, #84]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 8003656:	2200      	movs	r2, #0
 8003658:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800365a:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 800365c:	2200      	movs	r2, #0
 800365e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003660:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 8003662:	0018      	movs	r0, r3
 8003664:	f003 fba6 	bl	8006db4 <HAL_UART_Init>
 8003668:	1e03      	subs	r3, r0, #0
 800366a:	d001      	beq.n	8003670 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800366c:	f000 f9ce 	bl	8003a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003670:	4b0e      	ldr	r3, [pc, #56]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 8003672:	2100      	movs	r1, #0
 8003674:	0018      	movs	r0, r3
 8003676:	f004 fec7 	bl	8008408 <HAL_UARTEx_SetTxFifoThreshold>
 800367a:	1e03      	subs	r3, r0, #0
 800367c:	d001      	beq.n	8003682 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800367e:	f000 f9c5 	bl	8003a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003682:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 8003684:	2100      	movs	r1, #0
 8003686:	0018      	movs	r0, r3
 8003688:	f004 fefe 	bl	8008488 <HAL_UARTEx_SetRxFifoThreshold>
 800368c:	1e03      	subs	r3, r0, #0
 800368e:	d001      	beq.n	8003694 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003690:	f000 f9bc 	bl	8003a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <MX_USART1_UART_Init+0x94>)
 8003696:	0018      	movs	r0, r3
 8003698:	f004 fe7c 	bl	8008394 <HAL_UARTEx_DisableFifoMode>
 800369c:	1e03      	subs	r3, r0, #0
 800369e:	d001      	beq.n	80036a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80036a0:	f000 f9b4 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	200002a0 	.word	0x200002a0
 80036b0:	40013800 	.word	0x40013800

080036b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80036b8:	4b16      	ldr	r3, [pc, #88]	@ (8003714 <MX_USART2_UART_Init+0x60>)
 80036ba:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <MX_USART2_UART_Init+0x64>)
 80036bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80036be:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <MX_USART2_UART_Init+0x60>)
 80036c0:	22e1      	movs	r2, #225	@ 0xe1
 80036c2:	0252      	lsls	r2, r2, #9
 80036c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036c6:	4b13      	ldr	r3, [pc, #76]	@ (8003714 <MX_USART2_UART_Init+0x60>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036cc:	4b11      	ldr	r3, [pc, #68]	@ (8003714 <MX_USART2_UART_Init+0x60>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036d2:	4b10      	ldr	r3, [pc, #64]	@ (8003714 <MX_USART2_UART_Init+0x60>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003714 <MX_USART2_UART_Init+0x60>)
 80036da:	220c      	movs	r2, #12
 80036dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036de:	4b0d      	ldr	r3, [pc, #52]	@ (8003714 <MX_USART2_UART_Init+0x60>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <MX_USART2_UART_Init+0x60>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003714 <MX_USART2_UART_Init+0x60>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036f0:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <MX_USART2_UART_Init+0x60>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036f6:	4b07      	ldr	r3, [pc, #28]	@ (8003714 <MX_USART2_UART_Init+0x60>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <MX_USART2_UART_Init+0x60>)
 80036fe:	0018      	movs	r0, r3
 8003700:	f003 fb58 	bl	8006db4 <HAL_UART_Init>
 8003704:	1e03      	subs	r3, r0, #0
 8003706:	d001      	beq.n	800370c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003708:	f000 f980 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800370c:	46c0      	nop			@ (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	20000334 	.word	0x20000334
 8003718:	40004400 	.word	0x40004400

0800371c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b089      	sub	sp, #36	@ 0x24
 8003720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003722:	240c      	movs	r4, #12
 8003724:	193b      	adds	r3, r7, r4
 8003726:	0018      	movs	r0, r3
 8003728:	2314      	movs	r3, #20
 800372a:	001a      	movs	r2, r3
 800372c:	2100      	movs	r1, #0
 800372e:	f005 fcf1 	bl	8009114 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003732:	4b4e      	ldr	r3, [pc, #312]	@ (800386c <MX_GPIO_Init+0x150>)
 8003734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003736:	4b4d      	ldr	r3, [pc, #308]	@ (800386c <MX_GPIO_Init+0x150>)
 8003738:	2101      	movs	r1, #1
 800373a:	430a      	orrs	r2, r1
 800373c:	635a      	str	r2, [r3, #52]	@ 0x34
 800373e:	4b4b      	ldr	r3, [pc, #300]	@ (800386c <MX_GPIO_Init+0x150>)
 8003740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003742:	2201      	movs	r2, #1
 8003744:	4013      	ands	r3, r2
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800374a:	4b48      	ldr	r3, [pc, #288]	@ (800386c <MX_GPIO_Init+0x150>)
 800374c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800374e:	4b47      	ldr	r3, [pc, #284]	@ (800386c <MX_GPIO_Init+0x150>)
 8003750:	2102      	movs	r1, #2
 8003752:	430a      	orrs	r2, r1
 8003754:	635a      	str	r2, [r3, #52]	@ 0x34
 8003756:	4b45      	ldr	r3, [pc, #276]	@ (800386c <MX_GPIO_Init+0x150>)
 8003758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375a:	2202      	movs	r2, #2
 800375c:	4013      	ands	r3, r2
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003762:	4b42      	ldr	r3, [pc, #264]	@ (800386c <MX_GPIO_Init+0x150>)
 8003764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003766:	4b41      	ldr	r3, [pc, #260]	@ (800386c <MX_GPIO_Init+0x150>)
 8003768:	2104      	movs	r1, #4
 800376a:	430a      	orrs	r2, r1
 800376c:	635a      	str	r2, [r3, #52]	@ 0x34
 800376e:	4b3f      	ldr	r3, [pc, #252]	@ (800386c <MX_GPIO_Init+0x150>)
 8003770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003772:	2204      	movs	r2, #4
 8003774:	4013      	ands	r3, r2
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800377a:	4b3d      	ldr	r3, [pc, #244]	@ (8003870 <MX_GPIO_Init+0x154>)
 800377c:	2201      	movs	r2, #1
 800377e:	2101      	movs	r1, #1
 8003780:	0018      	movs	r0, r3
 8003782:	f002 f825 	bl	80057d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8003786:	4b3a      	ldr	r3, [pc, #232]	@ (8003870 <MX_GPIO_Init+0x154>)
 8003788:	2200      	movs	r2, #0
 800378a:	2102      	movs	r1, #2
 800378c:	0018      	movs	r0, r3
 800378e:	f002 f81f 	bl	80057d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8003792:	4b38      	ldr	r3, [pc, #224]	@ (8003874 <MX_GPIO_Init+0x158>)
 8003794:	2200      	movs	r2, #0
 8003796:	2140      	movs	r1, #64	@ 0x40
 8003798:	0018      	movs	r0, r3
 800379a:	f002 f819 	bl	80057d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	0219      	lsls	r1, r3, #8
 80037a2:	23a0      	movs	r3, #160	@ 0xa0
 80037a4:	05db      	lsls	r3, r3, #23
 80037a6:	2200      	movs	r2, #0
 80037a8:	0018      	movs	r0, r3
 80037aa:	f002 f811 	bl	80057d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80037ae:	193b      	adds	r3, r7, r4
 80037b0:	2210      	movs	r2, #16
 80037b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037b4:	193b      	adds	r3, r7, r4
 80037b6:	2288      	movs	r2, #136	@ 0x88
 80037b8:	0352      	lsls	r2, r2, #13
 80037ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037bc:	193b      	adds	r3, r7, r4
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c2:	193a      	adds	r2, r7, r4
 80037c4:	23a0      	movs	r3, #160	@ 0xa0
 80037c6:	05db      	lsls	r3, r3, #23
 80037c8:	0011      	movs	r1, r2
 80037ca:	0018      	movs	r0, r3
 80037cc:	f001 fe9c 	bl	8005508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037d0:	193b      	adds	r3, r7, r4
 80037d2:	2203      	movs	r2, #3
 80037d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d6:	193b      	adds	r3, r7, r4
 80037d8:	2201      	movs	r2, #1
 80037da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	193b      	adds	r3, r7, r4
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e2:	193b      	adds	r3, r7, r4
 80037e4:	2200      	movs	r2, #0
 80037e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e8:	193b      	adds	r3, r7, r4
 80037ea:	4a21      	ldr	r2, [pc, #132]	@ (8003870 <MX_GPIO_Init+0x154>)
 80037ec:	0019      	movs	r1, r3
 80037ee:	0010      	movs	r0, r2
 80037f0:	f001 fe8a 	bl	8005508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80037f4:	193b      	adds	r3, r7, r4
 80037f6:	2240      	movs	r2, #64	@ 0x40
 80037f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037fa:	193b      	adds	r3, r7, r4
 80037fc:	2201      	movs	r2, #1
 80037fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	193b      	adds	r3, r7, r4
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003806:	193b      	adds	r3, r7, r4
 8003808:	2200      	movs	r2, #0
 800380a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800380c:	193b      	adds	r3, r7, r4
 800380e:	4a19      	ldr	r2, [pc, #100]	@ (8003874 <MX_GPIO_Init+0x158>)
 8003810:	0019      	movs	r1, r3
 8003812:	0010      	movs	r0, r2
 8003814:	f001 fe78 	bl	8005508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003818:	0021      	movs	r1, r4
 800381a:	187b      	adds	r3, r7, r1
 800381c:	2280      	movs	r2, #128	@ 0x80
 800381e:	0212      	lsls	r2, r2, #8
 8003820:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003822:	000c      	movs	r4, r1
 8003824:	193b      	adds	r3, r7, r4
 8003826:	2201      	movs	r2, #1
 8003828:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382a:	193b      	adds	r3, r7, r4
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003830:	193b      	adds	r3, r7, r4
 8003832:	2200      	movs	r2, #0
 8003834:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003836:	193a      	adds	r2, r7, r4
 8003838:	23a0      	movs	r3, #160	@ 0xa0
 800383a:	05db      	lsls	r3, r3, #23
 800383c:	0011      	movs	r1, r2
 800383e:	0018      	movs	r0, r3
 8003840:	f001 fe62 	bl	8005508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003844:	193b      	adds	r3, r7, r4
 8003846:	2230      	movs	r2, #48	@ 0x30
 8003848:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800384a:	193b      	adds	r3, r7, r4
 800384c:	2200      	movs	r2, #0
 800384e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	193b      	adds	r3, r7, r4
 8003852:	2200      	movs	r2, #0
 8003854:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003856:	193b      	adds	r3, r7, r4
 8003858:	4a05      	ldr	r2, [pc, #20]	@ (8003870 <MX_GPIO_Init+0x154>)
 800385a:	0019      	movs	r1, r3
 800385c:	0010      	movs	r0, r2
 800385e:	f001 fe53 	bl	8005508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003862:	46c0      	nop			@ (mov r8, r8)
 8003864:	46bd      	mov	sp, r7
 8003866:	b009      	add	sp, #36	@ 0x24
 8003868:	bd90      	pop	{r4, r7, pc}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	40021000 	.word	0x40021000
 8003870:	50000400 	.word	0x50000400
 8003874:	50000800 	.word	0x50000800

08003878 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b5b0      	push	{r4, r5, r7, lr}
 800387a:	b08a      	sub	sp, #40	@ 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	static uint16_t cntr = 0;
    if (htim->Instance == TIM2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	2380      	movs	r3, #128	@ 0x80
 8003886:	05db      	lsls	r3, r3, #23
 8003888:	429a      	cmp	r2, r3
 800388a:	d000      	beq.n	800388e <HAL_TIM_PeriodElapsedCallback+0x16>
 800388c:	e0ab      	b.n	80039e6 <HAL_TIM_PeriodElapsedCallback+0x16e>
    {

    	if(Timer_State == PERIOD)
 800388e:	4b58      	ldr	r3, [pc, #352]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2bfa      	cmp	r3, #250	@ 0xfa
 8003894:	d000      	beq.n	8003898 <HAL_TIM_PeriodElapsedCallback+0x20>
 8003896:	e089      	b.n	80039ac <HAL_TIM_PeriodElapsedCallback+0x134>
    	{
    		Timer_State = 0;
 8003898:	4b55      	ldr	r3, [pc, #340]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]

    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800389e:	2380      	movs	r3, #128	@ 0x80
 80038a0:	0219      	lsls	r1, r3, #8
 80038a2:	23a0      	movs	r3, #160	@ 0xa0
 80038a4:	05db      	lsls	r3, r3, #23
 80038a6:	2201      	movs	r2, #1
 80038a8:	0018      	movs	r0, r3
 80038aa:	f001 ff91 	bl	80057d0 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80038ae:	4b51      	ldr	r3, [pc, #324]	@ (80039f4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	2101      	movs	r1, #1
 80038b4:	0018      	movs	r0, r3
 80038b6:	f001 ff8b 	bl	80057d0 <HAL_GPIO_WritePin>


    	uint32_t Data[2];
    	ADC_ChannelConfTypeDef sConfig = {0};
 80038ba:	2314      	movs	r3, #20
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	0018      	movs	r0, r3
 80038c0:	230c      	movs	r3, #12
 80038c2:	001a      	movs	r2, r3
 80038c4:	2100      	movs	r1, #0
 80038c6:	f005 fc25 	bl	8009114 <memset>

    	  transmitBuffer[0] = (char)'t';
 80038ca:	4b4b      	ldr	r3, [pc, #300]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80038cc:	2274      	movs	r2, #116	@ 0x74
 80038ce:	701a      	strb	r2, [r3, #0]
    	  transmitBuffer[1] = (char)'=';
 80038d0:	4b49      	ldr	r3, [pc, #292]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80038d2:	223d      	movs	r2, #61	@ 0x3d
 80038d4:	705a      	strb	r2, [r3, #1]
    	  transmitBuffer[2] = (char)'1';
 80038d6:	4b48      	ldr	r3, [pc, #288]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80038d8:	2231      	movs	r2, #49	@ 0x31
 80038da:	709a      	strb	r2, [r3, #2]
    	  transmitBuffer[3] = (char)'0';
 80038dc:	4b46      	ldr	r3, [pc, #280]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80038de:	2230      	movs	r2, #48	@ 0x30
 80038e0:	70da      	strb	r2, [r3, #3]
    	  transmitBuffer[4] = (char)'0';
 80038e2:	4b45      	ldr	r3, [pc, #276]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80038e4:	2230      	movs	r2, #48	@ 0x30
 80038e6:	711a      	strb	r2, [r3, #4]
    	  transmitBuffer[5] = (char)'C';
 80038e8:	4b43      	ldr	r3, [pc, #268]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80038ea:	2243      	movs	r2, #67	@ 0x43
 80038ec:	715a      	strb	r2, [r3, #5]
    	  transmitBuffer[8] = (char)'\n';
 80038ee:	4b42      	ldr	r3, [pc, #264]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80038f0:	220a      	movs	r2, #10
 80038f2:	721a      	strb	r2, [r3, #8]


    	  HAL_ADC_Start(&hadc1);
 80038f4:	4b41      	ldr	r3, [pc, #260]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x184>)
 80038f6:	0018      	movs	r0, r3
 80038f8:	f000 fea0 	bl	800463c <HAL_ADC_Start>
    	  HAL_ADC_PollForConversion(&hadc1,100);
 80038fc:	4b3f      	ldr	r3, [pc, #252]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x184>)
 80038fe:	2164      	movs	r1, #100	@ 0x64
 8003900:	0018      	movs	r0, r3
 8003902:	f000 ff25 	bl	8004750 <HAL_ADC_PollForConversion>
    	  Data[0] =  HAL_ADC_GetValue(&hadc1);
 8003906:	4b3d      	ldr	r3, [pc, #244]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003908:	0018      	movs	r0, r3
 800390a:	f000 ffb5 	bl	8004878 <HAL_ADC_GetValue>
 800390e:	0002      	movs	r2, r0
 8003910:	2520      	movs	r5, #32
 8003912:	197b      	adds	r3, r7, r5
 8003914:	601a      	str	r2, [r3, #0]



    	  HAL_ADC_Start(&hadc1);
 8003916:	4b39      	ldr	r3, [pc, #228]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003918:	0018      	movs	r0, r3
 800391a:	f000 fe8f 	bl	800463c <HAL_ADC_Start>
    	  HAL_ADC_PollForConversion(&hadc1, 100);
 800391e:	4b37      	ldr	r3, [pc, #220]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003920:	2164      	movs	r1, #100	@ 0x64
 8003922:	0018      	movs	r0, r3
 8003924:	f000 ff14 	bl	8004750 <HAL_ADC_PollForConversion>
    	  Data[1] =  HAL_ADC_GetValue(&hadc1);
 8003928:	4b34      	ldr	r3, [pc, #208]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x184>)
 800392a:	0018      	movs	r0, r3
 800392c:	f000 ffa4 	bl	8004878 <HAL_ADC_GetValue>
 8003930:	0002      	movs	r2, r0
 8003932:	197b      	adds	r3, r7, r5
 8003934:	605a      	str	r2, [r3, #4]
    	  HAL_ADC_Stop(&hadc1);
 8003936:	4b31      	ldr	r3, [pc, #196]	@ (80039fc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003938:	0018      	movs	r0, r3
 800393a:	f000 fecd 	bl	80046d8 <HAL_ADC_Stop>

//    	  https://community.st.com/t5/stm32cubemx-mcus/reading-multiple-adc-channel/td-p/171369


    	  Temperature = Estimate_Temperature(Data[1]);
 800393e:	197b      	adds	r3, r7, r5
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	0018      	movs	r0, r3
 8003944:	f7ff fc44 	bl	80031d0 <Estimate_Temperature>
 8003948:	1c02      	adds	r2, r0, #0
 800394a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800394c:	601a      	str	r2, [r3, #0]
    	  char Temp[5];
    	  Give_Temperature(Temperature, Temp);
 800394e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a00 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	240c      	movs	r4, #12
 8003954:	193a      	adds	r2, r7, r4
 8003956:	0011      	movs	r1, r2
 8003958:	1c18      	adds	r0, r3, #0
 800395a:	f7ff fca7 	bl	80032ac <Give_Temperature>

    	  HEX_to_DEC(Data[0], &transmitBuffer[2]);
 800395e:	197b      	adds	r3, r7, r5
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a28      	ldr	r2, [pc, #160]	@ (8003a04 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003964:	0011      	movs	r1, r2
 8003966:	0018      	movs	r0, r3
 8003968:	f7ff fcb8 	bl	80032dc <HEX_to_DEC>
    	  transmitBuffer[6] = 'T';
 800396c:	4b22      	ldr	r3, [pc, #136]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800396e:	2254      	movs	r2, #84	@ 0x54
 8003970:	719a      	strb	r2, [r3, #6]
    	  transmitBuffer[7] = '=';
 8003972:	4b21      	ldr	r3, [pc, #132]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003974:	223d      	movs	r2, #61	@ 0x3d
 8003976:	71da      	strb	r2, [r3, #7]

    	  transmitBuffer[8] = Temp[0];
 8003978:	193b      	adds	r3, r7, r4
 800397a:	781a      	ldrb	r2, [r3, #0]
 800397c:	4b1e      	ldr	r3, [pc, #120]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800397e:	721a      	strb	r2, [r3, #8]
    	  transmitBuffer[9] = Temp[1];
 8003980:	193b      	adds	r3, r7, r4
 8003982:	785a      	ldrb	r2, [r3, #1]
 8003984:	4b1c      	ldr	r3, [pc, #112]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003986:	725a      	strb	r2, [r3, #9]
    	  transmitBuffer[10] = Temp[2];
 8003988:	193b      	adds	r3, r7, r4
 800398a:	789a      	ldrb	r2, [r3, #2]
 800398c:	4b1a      	ldr	r3, [pc, #104]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800398e:	729a      	strb	r2, [r3, #10]
    	  transmitBuffer[11] = Temp[3];
 8003990:	193b      	adds	r3, r7, r4
 8003992:	78da      	ldrb	r2, [r3, #3]
 8003994:	4b18      	ldr	r3, [pc, #96]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003996:	72da      	strb	r2, [r3, #11]
//    	  HEX_to_DEC(Data[1], &transmitBuffer[7]);
    	  transmitBuffer[13] = (char)'\n';
 8003998:	4b17      	ldr	r3, [pc, #92]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800399a:	220a      	movs	r2, #10
 800399c:	735a      	strb	r2, [r3, #13]

        HAL_UART_Transmit_IT(&huart2, transmitBuffer, 12);
 800399e:	4916      	ldr	r1, [pc, #88]	@ (80039f8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80039a0:	4b19      	ldr	r3, [pc, #100]	@ (8003a08 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80039a2:	220c      	movs	r2, #12
 80039a4:	0018      	movs	r0, r3
 80039a6:	f003 fa5b 	bl	8006e60 <HAL_UART_Transmit_IT>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
    		Timer_State ++;
    	}
    	else{Timer_State ++;}
    }
}
 80039aa:	e01c      	b.n	80039e6 <HAL_TIM_PeriodElapsedCallback+0x16e>
    	else if(Timer_State == FLASH_PERIOD)
 80039ac:	4b10      	ldr	r3, [pc, #64]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b19      	cmp	r3, #25
 80039b2:	d113      	bne.n	80039dc <HAL_TIM_PeriodElapsedCallback+0x164>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80039b4:	2380      	movs	r3, #128	@ 0x80
 80039b6:	0219      	lsls	r1, r3, #8
 80039b8:	23a0      	movs	r3, #160	@ 0xa0
 80039ba:	05db      	lsls	r3, r3, #23
 80039bc:	2200      	movs	r2, #0
 80039be:	0018      	movs	r0, r3
 80039c0:	f001 ff06 	bl	80057d0 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80039c4:	4b0b      	ldr	r3, [pc, #44]	@ (80039f4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	2101      	movs	r1, #1
 80039ca:	0018      	movs	r0, r3
 80039cc:	f001 ff00 	bl	80057d0 <HAL_GPIO_WritePin>
    		Timer_State ++;
 80039d0:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80039d8:	601a      	str	r2, [r3, #0]
}
 80039da:	e004      	b.n	80039e6 <HAL_TIM_PeriodElapsedCallback+0x16e>
    	else{Timer_State ++;}
 80039dc:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	4b03      	ldr	r3, [pc, #12]	@ (80039f0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80039e4:	601a      	str	r2, [r3, #0]
}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b00a      	add	sp, #40	@ 0x28
 80039ec:	bdb0      	pop	{r4, r5, r7, pc}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	200003e8 	.word	0x200003e8
 80039f4:	50000400 	.word	0x50000400
 80039f8:	200003c8 	.word	0x200003c8
 80039fc:	200001f0 	.word	0x200001f0
 8003a00:	200003ec 	.word	0x200003ec
 8003a04:	200003ca 	.word	0x200003ca
 8003a08:	20000334 	.word	0x20000334

08003a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a10:	b672      	cpsid	i
}
 8003a12:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a14:	46c0      	nop			@ (mov r8, r8)
 8003a16:	e7fd      	b.n	8003a14 <Error_Handler+0x8>

08003a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a5c <HAL_MspInit+0x44>)
 8003a20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a22:	4b0e      	ldr	r3, [pc, #56]	@ (8003a5c <HAL_MspInit+0x44>)
 8003a24:	2101      	movs	r1, #1
 8003a26:	430a      	orrs	r2, r1
 8003a28:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a5c <HAL_MspInit+0x44>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4013      	ands	r3, r2
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	4b09      	ldr	r3, [pc, #36]	@ (8003a5c <HAL_MspInit+0x44>)
 8003a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a3a:	4b08      	ldr	r3, [pc, #32]	@ (8003a5c <HAL_MspInit+0x44>)
 8003a3c:	2180      	movs	r1, #128	@ 0x80
 8003a3e:	0549      	lsls	r1, r1, #21
 8003a40:	430a      	orrs	r2, r1
 8003a42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a44:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <HAL_MspInit+0x44>)
 8003a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a48:	2380      	movs	r3, #128	@ 0x80
 8003a4a:	055b      	lsls	r3, r3, #21
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b002      	add	sp, #8
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			@ (mov r8, r8)
 8003a5c:	40021000 	.word	0x40021000

08003a60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b095      	sub	sp, #84	@ 0x54
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a68:	233c      	movs	r3, #60	@ 0x3c
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	2314      	movs	r3, #20
 8003a70:	001a      	movs	r2, r3
 8003a72:	2100      	movs	r1, #0
 8003a74:	f005 fb4e 	bl	8009114 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a78:	2414      	movs	r4, #20
 8003a7a:	193b      	adds	r3, r7, r4
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	2328      	movs	r3, #40	@ 0x28
 8003a80:	001a      	movs	r2, r3
 8003a82:	2100      	movs	r1, #0
 8003a84:	f005 fb46 	bl	8009114 <memset>
  if(hadc->Instance==ADC1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a20      	ldr	r2, [pc, #128]	@ (8003b10 <HAL_ADC_MspInit+0xb0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d139      	bne.n	8003b06 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	2280      	movs	r2, #128	@ 0x80
 8003a96:	01d2      	lsls	r2, r2, #7
 8003a98:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003a9a:	193b      	adds	r3, r7, r4
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003aa0:	193b      	adds	r3, r7, r4
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f002 fbc2 	bl	800622c <HAL_RCCEx_PeriphCLKConfig>
 8003aa8:	1e03      	subs	r3, r0, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003aac:	f7ff ffae 	bl	8003a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003ab0:	4b18      	ldr	r3, [pc, #96]	@ (8003b14 <HAL_ADC_MspInit+0xb4>)
 8003ab2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ab4:	4b17      	ldr	r3, [pc, #92]	@ (8003b14 <HAL_ADC_MspInit+0xb4>)
 8003ab6:	2180      	movs	r1, #128	@ 0x80
 8003ab8:	0349      	lsls	r1, r1, #13
 8003aba:	430a      	orrs	r2, r1
 8003abc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003abe:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <HAL_ADC_MspInit+0xb4>)
 8003ac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ac2:	2380      	movs	r3, #128	@ 0x80
 8003ac4:	035b      	lsls	r3, r3, #13
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003acc:	4b11      	ldr	r3, [pc, #68]	@ (8003b14 <HAL_ADC_MspInit+0xb4>)
 8003ace:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad0:	4b10      	ldr	r3, [pc, #64]	@ (8003b14 <HAL_ADC_MspInit+0xb4>)
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b14 <HAL_ADC_MspInit+0xb4>)
 8003ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003adc:	2201      	movs	r2, #1
 8003ade:	4013      	ands	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ae4:	213c      	movs	r1, #60	@ 0x3c
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	2203      	movs	r2, #3
 8003aea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	2203      	movs	r2, #3
 8003af0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	187b      	adds	r3, r7, r1
 8003af4:	2200      	movs	r2, #0
 8003af6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af8:	187a      	adds	r2, r7, r1
 8003afa:	23a0      	movs	r3, #160	@ 0xa0
 8003afc:	05db      	lsls	r3, r3, #23
 8003afe:	0011      	movs	r1, r2
 8003b00:	0018      	movs	r0, r3
 8003b02:	f001 fd01 	bl	8005508 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b06:	46c0      	nop			@ (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b015      	add	sp, #84	@ 0x54
 8003b0c:	bd90      	pop	{r4, r7, pc}
 8003b0e:	46c0      	nop			@ (mov r8, r8)
 8003b10:	40012400 	.word	0x40012400
 8003b14:	40021000 	.word	0x40021000

08003b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	2380      	movs	r3, #128	@ 0x80
 8003b26:	05db      	lsls	r3, r3, #23
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d113      	bne.n	8003b54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <HAL_TIM_Base_MspInit+0x44>)
 8003b2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b30:	4b0a      	ldr	r3, [pc, #40]	@ (8003b5c <HAL_TIM_Base_MspInit+0x44>)
 8003b32:	2101      	movs	r1, #1
 8003b34:	430a      	orrs	r2, r1
 8003b36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b38:	4b08      	ldr	r3, [pc, #32]	@ (8003b5c <HAL_TIM_Base_MspInit+0x44>)
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	4013      	ands	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b44:	2200      	movs	r2, #0
 8003b46:	2100      	movs	r1, #0
 8003b48:	200f      	movs	r0, #15
 8003b4a:	f001 fbdf 	bl	800530c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b4e:	200f      	movs	r0, #15
 8003b50:	f001 fbf1 	bl	8005336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003b54:	46c0      	nop			@ (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b004      	add	sp, #16
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000

08003b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b60:	b590      	push	{r4, r7, lr}
 8003b62:	b097      	sub	sp, #92	@ 0x5c
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	2344      	movs	r3, #68	@ 0x44
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	2314      	movs	r3, #20
 8003b70:	001a      	movs	r2, r3
 8003b72:	2100      	movs	r1, #0
 8003b74:	f005 face 	bl	8009114 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b78:	241c      	movs	r4, #28
 8003b7a:	193b      	adds	r3, r7, r4
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	2328      	movs	r3, #40	@ 0x28
 8003b80:	001a      	movs	r2, r3
 8003b82:	2100      	movs	r1, #0
 8003b84:	f005 fac6 	bl	8009114 <memset>
  if(huart->Instance==USART1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a45      	ldr	r2, [pc, #276]	@ (8003ca4 <HAL_UART_MspInit+0x144>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d146      	bne.n	8003c20 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b92:	193b      	adds	r3, r7, r4
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003b98:	193b      	adds	r3, r7, r4
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b9e:	193b      	adds	r3, r7, r4
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f002 fb43 	bl	800622c <HAL_RCCEx_PeriphCLKConfig>
 8003ba6:	1e03      	subs	r3, r0, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003baa:	f7ff ff2f 	bl	8003a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bae:	4b3e      	ldr	r3, [pc, #248]	@ (8003ca8 <HAL_UART_MspInit+0x148>)
 8003bb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ca8 <HAL_UART_MspInit+0x148>)
 8003bb4:	2180      	movs	r1, #128	@ 0x80
 8003bb6:	01c9      	lsls	r1, r1, #7
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bbc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ca8 <HAL_UART_MspInit+0x148>)
 8003bbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bc0:	2380      	movs	r3, #128	@ 0x80
 8003bc2:	01db      	lsls	r3, r3, #7
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bca:	4b37      	ldr	r3, [pc, #220]	@ (8003ca8 <HAL_UART_MspInit+0x148>)
 8003bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bce:	4b36      	ldr	r3, [pc, #216]	@ (8003ca8 <HAL_UART_MspInit+0x148>)
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bd6:	4b34      	ldr	r3, [pc, #208]	@ (8003ca8 <HAL_UART_MspInit+0x148>)
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bda:	2202      	movs	r2, #2
 8003bdc:	4013      	ands	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003be2:	2144      	movs	r1, #68	@ 0x44
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	22c0      	movs	r2, #192	@ 0xc0
 8003be8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	2202      	movs	r2, #2
 8003bee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	187b      	adds	r3, r7, r1
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	2200      	movs	r2, #0
 8003c00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	4a29      	ldr	r2, [pc, #164]	@ (8003cac <HAL_UART_MspInit+0x14c>)
 8003c06:	0019      	movs	r1, r3
 8003c08:	0010      	movs	r0, r2
 8003c0a:	f001 fc7d 	bl	8005508 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2100      	movs	r1, #0
 8003c12:	201b      	movs	r0, #27
 8003c14:	f001 fb7a 	bl	800530c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c18:	201b      	movs	r0, #27
 8003c1a:	f001 fb8c 	bl	8005336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c1e:	e03d      	b.n	8003c9c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a22      	ldr	r2, [pc, #136]	@ (8003cb0 <HAL_UART_MspInit+0x150>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d138      	bne.n	8003c9c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ca8 <HAL_UART_MspInit+0x148>)
 8003c2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca8 <HAL_UART_MspInit+0x148>)
 8003c30:	2180      	movs	r1, #128	@ 0x80
 8003c32:	0289      	lsls	r1, r1, #10
 8003c34:	430a      	orrs	r2, r1
 8003c36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca8 <HAL_UART_MspInit+0x148>)
 8003c3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c3c:	2380      	movs	r3, #128	@ 0x80
 8003c3e:	029b      	lsls	r3, r3, #10
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c46:	4b18      	ldr	r3, [pc, #96]	@ (8003ca8 <HAL_UART_MspInit+0x148>)
 8003c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c4a:	4b17      	ldr	r3, [pc, #92]	@ (8003ca8 <HAL_UART_MspInit+0x148>)
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c52:	4b15      	ldr	r3, [pc, #84]	@ (8003ca8 <HAL_UART_MspInit+0x148>)
 8003c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c56:	2201      	movs	r2, #1
 8003c58:	4013      	ands	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c5e:	2144      	movs	r1, #68	@ 0x44
 8003c60:	187b      	adds	r3, r7, r1
 8003c62:	220c      	movs	r2, #12
 8003c64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c66:	187b      	adds	r3, r7, r1
 8003c68:	2202      	movs	r2, #2
 8003c6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	187b      	adds	r3, r7, r1
 8003c6e:	2200      	movs	r2, #0
 8003c70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c72:	187b      	adds	r3, r7, r1
 8003c74:	2200      	movs	r2, #0
 8003c76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003c78:	187b      	adds	r3, r7, r1
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7e:	187a      	adds	r2, r7, r1
 8003c80:	23a0      	movs	r3, #160	@ 0xa0
 8003c82:	05db      	lsls	r3, r3, #23
 8003c84:	0011      	movs	r1, r2
 8003c86:	0018      	movs	r0, r3
 8003c88:	f001 fc3e 	bl	8005508 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2100      	movs	r1, #0
 8003c90:	201c      	movs	r0, #28
 8003c92:	f001 fb3b 	bl	800530c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c96:	201c      	movs	r0, #28
 8003c98:	f001 fb4d 	bl	8005336 <HAL_NVIC_EnableIRQ>
}
 8003c9c:	46c0      	nop			@ (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b017      	add	sp, #92	@ 0x5c
 8003ca2:	bd90      	pop	{r4, r7, pc}
 8003ca4:	40013800 	.word	0x40013800
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	50000400 	.word	0x50000400
 8003cb0:	40004400 	.word	0x40004400

08003cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cb8:	46c0      	nop			@ (mov r8, r8)
 8003cba:	e7fd      	b.n	8003cb8 <NMI_Handler+0x4>

08003cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cc0:	46c0      	nop			@ (mov r8, r8)
 8003cc2:	e7fd      	b.n	8003cc0 <HardFault_Handler+0x4>

08003cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003cc8:	46c0      	nop			@ (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cdc:	f000 f980 	bl	8003fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ce0:	46c0      	nop			@ (mov r8, r8)
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cec:	4b03      	ldr	r3, [pc, #12]	@ (8003cfc <TIM2_IRQHandler+0x14>)
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f002 fcc2 	bl	8006678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cf4:	46c0      	nop			@ (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	46c0      	nop			@ (mov r8, r8)
 8003cfc:	20000254 	.word	0x20000254

08003d00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d04:	4b03      	ldr	r3, [pc, #12]	@ (8003d14 <USART1_IRQHandler+0x14>)
 8003d06:	0018      	movs	r0, r3
 8003d08:	f003 f952 	bl	8006fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d0c:	46c0      	nop			@ (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	200002a0 	.word	0x200002a0

08003d18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d1c:	4b03      	ldr	r3, [pc, #12]	@ (8003d2c <USART2_IRQHandler+0x14>)
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f003 f946 	bl	8006fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d24:	46c0      	nop			@ (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	20000334 	.word	0x20000334

08003d30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  return 1;
 8003d34:	2301      	movs	r3, #1
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <_kill>:

int _kill(int pid, int sig)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d46:	f005 fa3f 	bl	80091c8 <__errno>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	2216      	movs	r2, #22
 8003d4e:	601a      	str	r2, [r3, #0]
  return -1;
 8003d50:	2301      	movs	r3, #1
 8003d52:	425b      	negs	r3, r3
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b002      	add	sp, #8
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <_exit>:

void _exit (int status)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d64:	2301      	movs	r3, #1
 8003d66:	425a      	negs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	0011      	movs	r1, r2
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f7ff ffe5 	bl	8003d3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d72:	46c0      	nop			@ (mov r8, r8)
 8003d74:	e7fd      	b.n	8003d72 <_exit+0x16>

08003d76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b086      	sub	sp, #24
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e00a      	b.n	8003d9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d88:	e000      	b.n	8003d8c <_read+0x16>
 8003d8a:	bf00      	nop
 8003d8c:	0001      	movs	r1, r0
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	60ba      	str	r2, [r7, #8]
 8003d94:	b2ca      	uxtb	r2, r1
 8003d96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	dbf0      	blt.n	8003d88 <_read+0x12>
  }

  return len;
 8003da6:	687b      	ldr	r3, [r7, #4]
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b006      	add	sp, #24
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e009      	b.n	8003dd6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	60ba      	str	r2, [r7, #8]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	0018      	movs	r0, r3
 8003dcc:	e000      	b.n	8003dd0 <_write+0x20>
 8003dce:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	dbf1      	blt.n	8003dc2 <_write+0x12>
  }
  return len;
 8003dde:	687b      	ldr	r3, [r7, #4]
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b006      	add	sp, #24
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <_close>:

int _close(int file)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003df0:	2301      	movs	r3, #1
 8003df2:	425b      	negs	r3, r3
}
 8003df4:	0018      	movs	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b002      	add	sp, #8
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2280      	movs	r2, #128	@ 0x80
 8003e0a:	0192      	lsls	r2, r2, #6
 8003e0c:	605a      	str	r2, [r3, #4]
  return 0;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b002      	add	sp, #8
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <_isatty>:

int _isatty(int file)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e20:	2301      	movs	r3, #1
}
 8003e22:	0018      	movs	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b002      	add	sp, #8
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	0018      	movs	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b004      	add	sp, #16
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e48:	4a14      	ldr	r2, [pc, #80]	@ (8003e9c <_sbrk+0x5c>)
 8003e4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <_sbrk+0x60>)
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e54:	4b13      	ldr	r3, [pc, #76]	@ (8003ea4 <_sbrk+0x64>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ea4 <_sbrk+0x64>)
 8003e5e:	4a12      	ldr	r2, [pc, #72]	@ (8003ea8 <_sbrk+0x68>)
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e62:	4b10      	ldr	r3, [pc, #64]	@ (8003ea4 <_sbrk+0x64>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	18d3      	adds	r3, r2, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d207      	bcs.n	8003e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e70:	f005 f9aa 	bl	80091c8 <__errno>
 8003e74:	0003      	movs	r3, r0
 8003e76:	220c      	movs	r2, #12
 8003e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	e009      	b.n	8003e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e80:	4b08      	ldr	r3, [pc, #32]	@ (8003ea4 <_sbrk+0x64>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e86:	4b07      	ldr	r3, [pc, #28]	@ (8003ea4 <_sbrk+0x64>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	18d2      	adds	r2, r2, r3
 8003e8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <_sbrk+0x64>)
 8003e90:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003e92:	68fb      	ldr	r3, [r7, #12]
}
 8003e94:	0018      	movs	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b006      	add	sp, #24
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20002000 	.word	0x20002000
 8003ea0:	00000400 	.word	0x00000400
 8003ea4:	200003f0 	.word	0x200003f0
 8003ea8:	20000548 	.word	0x20000548

08003eac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003eb8:	480d      	ldr	r0, [pc, #52]	@ (8003ef0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003eba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ebc:	f7ff fff6 	bl	8003eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ec0:	480c      	ldr	r0, [pc, #48]	@ (8003ef4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ec2:	490d      	ldr	r1, [pc, #52]	@ (8003ef8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8003efc <LoopForever+0xe>)
  movs r3, #0
 8003ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ec8:	e002      	b.n	8003ed0 <LoopCopyDataInit>

08003eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ece:	3304      	adds	r3, #4

08003ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ed4:	d3f9      	bcc.n	8003eca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8003f00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8003f04 <LoopForever+0x16>)
  movs r3, #0
 8003eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003edc:	e001      	b.n	8003ee2 <LoopFillZerobss>

08003ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ee0:	3204      	adds	r2, #4

08003ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ee4:	d3fb      	bcc.n	8003ede <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003ee6:	f005 f975 	bl	80091d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003eea:	f7ff fa53 	bl	8003394 <main>

08003eee <LoopForever>:

LoopForever:
  b LoopForever
 8003eee:	e7fe      	b.n	8003eee <LoopForever>
  ldr   r0, =_estack
 8003ef0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ef8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003efc:	0800bcb8 	.word	0x0800bcb8
  ldr r2, =_sbss
 8003f00:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003f04:	20000544 	.word	0x20000544

08003f08 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f08:	e7fe      	b.n	8003f08 <ADC1_IRQHandler>
	...

08003f0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f12:	1dfb      	adds	r3, r7, #7
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f18:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <HAL_Init+0x3c>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f48 <HAL_Init+0x3c>)
 8003f1e:	2180      	movs	r1, #128	@ 0x80
 8003f20:	0049      	lsls	r1, r1, #1
 8003f22:	430a      	orrs	r2, r1
 8003f24:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f26:	2003      	movs	r0, #3
 8003f28:	f000 f810 	bl	8003f4c <HAL_InitTick>
 8003f2c:	1e03      	subs	r3, r0, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003f30:	1dfb      	adds	r3, r7, #7
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	e001      	b.n	8003f3c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003f38:	f7ff fd6e 	bl	8003a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f3c:	1dfb      	adds	r3, r7, #7
 8003f3e:	781b      	ldrb	r3, [r3, #0]
}
 8003f40:	0018      	movs	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b002      	add	sp, #8
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40022000 	.word	0x40022000

08003f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f54:	230f      	movs	r3, #15
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd4 <HAL_InitTick+0x88>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d02b      	beq.n	8003fbc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003f64:	4b1c      	ldr	r3, [pc, #112]	@ (8003fd8 <HAL_InitTick+0x8c>)
 8003f66:	681c      	ldr	r4, [r3, #0]
 8003f68:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd4 <HAL_InitTick+0x88>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	23fa      	movs	r3, #250	@ 0xfa
 8003f70:	0098      	lsls	r0, r3, #2
 8003f72:	f7fc f8e3 	bl	800013c <__udivsi3>
 8003f76:	0003      	movs	r3, r0
 8003f78:	0019      	movs	r1, r3
 8003f7a:	0020      	movs	r0, r4
 8003f7c:	f7fc f8de 	bl	800013c <__udivsi3>
 8003f80:	0003      	movs	r3, r0
 8003f82:	0018      	movs	r0, r3
 8003f84:	f001 f9e7 	bl	8005356 <HAL_SYSTICK_Config>
 8003f88:	1e03      	subs	r3, r0, #0
 8003f8a:	d112      	bne.n	8003fb2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d80a      	bhi.n	8003fa8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	2301      	movs	r3, #1
 8003f96:	425b      	negs	r3, r3
 8003f98:	2200      	movs	r2, #0
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f001 f9b6 	bl	800530c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8003fdc <HAL_InitTick+0x90>)
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e00d      	b.n	8003fc4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003fa8:	230f      	movs	r3, #15
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	2201      	movs	r2, #1
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	e008      	b.n	8003fc4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003fb2:	230f      	movs	r3, #15
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	e003      	b.n	8003fc4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003fbc:	230f      	movs	r3, #15
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003fc4:	230f      	movs	r3, #15
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	781b      	ldrb	r3, [r3, #0]
}
 8003fca:	0018      	movs	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b005      	add	sp, #20
 8003fd0:	bd90      	pop	{r4, r7, pc}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	20000008 	.word	0x20000008
 8003fd8:	20000000 	.word	0x20000000
 8003fdc:	20000004 	.word	0x20000004

08003fe0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003fe4:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <HAL_IncTick+0x1c>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	001a      	movs	r2, r3
 8003fea:	4b05      	ldr	r3, [pc, #20]	@ (8004000 <HAL_IncTick+0x20>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	18d2      	adds	r2, r2, r3
 8003ff0:	4b03      	ldr	r3, [pc, #12]	@ (8004000 <HAL_IncTick+0x20>)
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	20000008 	.word	0x20000008
 8004000:	200003f4 	.word	0x200003f4

08004004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  return uwTick;
 8004008:	4b02      	ldr	r3, [pc, #8]	@ (8004014 <HAL_GetTick+0x10>)
 800400a:	681b      	ldr	r3, [r3, #0]
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			@ (mov r8, r8)
 8004014:	200003f4 	.word	0x200003f4

08004018 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a05      	ldr	r2, [pc, #20]	@ (800403c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004028:	401a      	ands	r2, r3
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]
}
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	46bd      	mov	sp, r7
 8004036:	b002      	add	sp, #8
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	fe3fffff 	.word	0xfe3fffff

08004040 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	23e0      	movs	r3, #224	@ 0xe0
 800404e:	045b      	lsls	r3, r3, #17
 8004050:	4013      	ands	r3, r2
}
 8004052:	0018      	movs	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	b002      	add	sp, #8
 8004058:	bd80      	pop	{r7, pc}

0800405a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	2104      	movs	r1, #4
 800406e:	400a      	ands	r2, r1
 8004070:	2107      	movs	r1, #7
 8004072:	4091      	lsls	r1, r2
 8004074:	000a      	movs	r2, r1
 8004076:	43d2      	mvns	r2, r2
 8004078:	401a      	ands	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2104      	movs	r1, #4
 800407e:	400b      	ands	r3, r1
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4099      	lsls	r1, r3
 8004084:	000b      	movs	r3, r1
 8004086:	431a      	orrs	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800408c:	46c0      	nop			@ (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	b004      	add	sp, #16
 8004092:	bd80      	pop	{r7, pc}

08004094 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	2104      	movs	r1, #4
 80040a6:	400a      	ands	r2, r1
 80040a8:	2107      	movs	r1, #7
 80040aa:	4091      	lsls	r1, r2
 80040ac:	000a      	movs	r2, r1
 80040ae:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2104      	movs	r1, #4
 80040b4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80040b6:	40da      	lsrs	r2, r3
 80040b8:	0013      	movs	r3, r2
}
 80040ba:	0018      	movs	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	b002      	add	sp, #8
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	23c0      	movs	r3, #192	@ 0xc0
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	4013      	ands	r3, r2
 80040d4:	d101      	bne.n	80040da <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80040da:	2300      	movs	r3, #0
}
 80040dc:	0018      	movs	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	b002      	add	sp, #8
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	211f      	movs	r1, #31
 80040f8:	400a      	ands	r2, r1
 80040fa:	210f      	movs	r1, #15
 80040fc:	4091      	lsls	r1, r2
 80040fe:	000a      	movs	r2, r1
 8004100:	43d2      	mvns	r2, r2
 8004102:	401a      	ands	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	0e9b      	lsrs	r3, r3, #26
 8004108:	210f      	movs	r1, #15
 800410a:	4019      	ands	r1, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	201f      	movs	r0, #31
 8004110:	4003      	ands	r3, r0
 8004112:	4099      	lsls	r1, r3
 8004114:	000b      	movs	r3, r1
 8004116:	431a      	orrs	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800411c:	46c0      	nop			@ (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	b004      	add	sp, #16
 8004122:	bd80      	pop	{r7, pc}

08004124 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	035b      	lsls	r3, r3, #13
 8004136:	0b5b      	lsrs	r3, r3, #13
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	b002      	add	sp, #8
 8004144:	bd80      	pop	{r7, pc}

08004146 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	0352      	lsls	r2, r2, #13
 8004158:	0b52      	lsrs	r2, r2, #13
 800415a:	43d2      	mvns	r2, r2
 800415c:	401a      	ands	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004162:	46c0      	nop			@ (mov r8, r8)
 8004164:	46bd      	mov	sp, r7
 8004166:	b002      	add	sp, #8
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	0212      	lsls	r2, r2, #8
 8004180:	43d2      	mvns	r2, r2
 8004182:	401a      	ands	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	400b      	ands	r3, r1
 800418c:	4904      	ldr	r1, [pc, #16]	@ (80041a0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800418e:	400b      	ands	r3, r1
 8004190:	431a      	orrs	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004196:	46c0      	nop			@ (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	b004      	add	sp, #16
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	07ffff00 	.word	0x07ffff00

080041a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4a05      	ldr	r2, [pc, #20]	@ (80041c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	2280      	movs	r2, #128	@ 0x80
 80041b6:	0552      	lsls	r2, r2, #21
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b002      	add	sp, #8
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	6fffffe8 	.word	0x6fffffe8

080041cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	2380      	movs	r3, #128	@ 0x80
 80041da:	055b      	lsls	r3, r3, #21
 80041dc:	401a      	ands	r2, r3
 80041de:	2380      	movs	r3, #128	@ 0x80
 80041e0:	055b      	lsls	r3, r3, #21
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d101      	bne.n	80041ea <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	0018      	movs	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b002      	add	sp, #8
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	4a04      	ldr	r2, [pc, #16]	@ (8004214 <LL_ADC_Enable+0x20>)
 8004202:	4013      	ands	r3, r2
 8004204:	2201      	movs	r2, #1
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800420c:	46c0      	nop			@ (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	b002      	add	sp, #8
 8004212:	bd80      	pop	{r7, pc}
 8004214:	7fffffe8 	.word	0x7fffffe8

08004218 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a04      	ldr	r2, [pc, #16]	@ (8004238 <LL_ADC_Disable+0x20>)
 8004226:	4013      	ands	r3, r2
 8004228:	2202      	movs	r2, #2
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004230:	46c0      	nop			@ (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}
 8004238:	7fffffe8 	.word	0x7fffffe8

0800423c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2201      	movs	r2, #1
 800424a:	4013      	ands	r3, r2
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <LL_ADC_IsEnabled+0x18>
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <LL_ADC_IsEnabled+0x1a>
 8004254:	2300      	movs	r3, #0
}
 8004256:	0018      	movs	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	b002      	add	sp, #8
 800425c:	bd80      	pop	{r7, pc}

0800425e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2202      	movs	r2, #2
 800426c:	4013      	ands	r3, r2
 800426e:	2b02      	cmp	r3, #2
 8004270:	d101      	bne.n	8004276 <LL_ADC_IsDisableOngoing+0x18>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <LL_ADC_IsDisableOngoing+0x1a>
 8004276:	2300      	movs	r3, #0
}
 8004278:	0018      	movs	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	b002      	add	sp, #8
 800427e:	bd80      	pop	{r7, pc}

08004280 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a04      	ldr	r2, [pc, #16]	@ (80042a0 <LL_ADC_REG_StartConversion+0x20>)
 800428e:	4013      	ands	r3, r2
 8004290:	2204      	movs	r2, #4
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004298:	46c0      	nop			@ (mov r8, r8)
 800429a:	46bd      	mov	sp, r7
 800429c:	b002      	add	sp, #8
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	7fffffe8 	.word	0x7fffffe8

080042a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	4a04      	ldr	r2, [pc, #16]	@ (80042c4 <LL_ADC_REG_StopConversion+0x20>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	2210      	movs	r2, #16
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80042bc:	46c0      	nop			@ (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b002      	add	sp, #8
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	7fffffe8 	.word	0x7fffffe8

080042c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2204      	movs	r2, #4
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d101      	bne.n	80042e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	0018      	movs	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b002      	add	sp, #8
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042f4:	231f      	movs	r3, #31
 80042f6:	18fb      	adds	r3, r7, r3
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e17f      	b.n	8004612 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0018      	movs	r0, r3
 800431e:	f7ff fb9f 	bl	8003a60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2254      	movs	r2, #84	@ 0x54
 800432c:	2100      	movs	r1, #0
 800432e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	0018      	movs	r0, r3
 8004336:	f7ff ff49 	bl	80041cc <LL_ADC_IsInternalRegulatorEnabled>
 800433a:	1e03      	subs	r3, r0, #0
 800433c:	d115      	bne.n	800436a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	0018      	movs	r0, r3
 8004344:	f7ff ff2e 	bl	80041a4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004348:	4bb4      	ldr	r3, [pc, #720]	@ (800461c <HAL_ADC_Init+0x330>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	49b4      	ldr	r1, [pc, #720]	@ (8004620 <HAL_ADC_Init+0x334>)
 800434e:	0018      	movs	r0, r3
 8004350:	f7fb fef4 	bl	800013c <__udivsi3>
 8004354:	0003      	movs	r3, r0
 8004356:	3301      	adds	r3, #1
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800435c:	e002      	b.n	8004364 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3b01      	subs	r3, #1
 8004362:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f9      	bne.n	800435e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	0018      	movs	r0, r3
 8004370:	f7ff ff2c 	bl	80041cc <LL_ADC_IsInternalRegulatorEnabled>
 8004374:	1e03      	subs	r3, r0, #0
 8004376:	d10f      	bne.n	8004398 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437c:	2210      	movs	r2, #16
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004388:	2201      	movs	r2, #1
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004390:	231f      	movs	r3, #31
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	0018      	movs	r0, r3
 800439e:	f7ff ff93 	bl	80042c8 <LL_ADC_REG_IsConversionOngoing>
 80043a2:	0003      	movs	r3, r0
 80043a4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043aa:	2210      	movs	r2, #16
 80043ac:	4013      	ands	r3, r2
 80043ae:	d000      	beq.n	80043b2 <HAL_ADC_Init+0xc6>
 80043b0:	e122      	b.n	80045f8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d000      	beq.n	80043ba <HAL_ADC_Init+0xce>
 80043b8:	e11e      	b.n	80045f8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043be:	4a99      	ldr	r2, [pc, #612]	@ (8004624 <HAL_ADC_Init+0x338>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	2202      	movs	r2, #2
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7ff ff34 	bl	800423c <LL_ADC_IsEnabled>
 80043d4:	1e03      	subs	r3, r0, #0
 80043d6:	d000      	beq.n	80043da <HAL_ADC_Init+0xee>
 80043d8:	e0ad      	b.n	8004536 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	7e1b      	ldrb	r3, [r3, #24]
 80043e2:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80043e4:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	7e5b      	ldrb	r3, [r3, #25]
 80043ea:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80043ec:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	7e9b      	ldrb	r3, [r3, #26]
 80043f2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80043f4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_ADC_Init+0x118>
 80043fe:	2380      	movs	r3, #128	@ 0x80
 8004400:	015b      	lsls	r3, r3, #5
 8004402:	e000      	b.n	8004406 <HAL_ADC_Init+0x11a>
 8004404:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004406:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800440c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	da04      	bge.n	8004420 <HAL_ADC_Init+0x134>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	e001      	b.n	8004424 <HAL_ADC_Init+0x138>
 8004420:	2380      	movs	r3, #128	@ 0x80
 8004422:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8004424:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	212c      	movs	r1, #44	@ 0x2c
 800442a:	5c5b      	ldrb	r3, [r3, r1]
 800442c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800442e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	5c9b      	ldrb	r3, [r3, r2]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d115      	bne.n	800446c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	7e9b      	ldrb	r3, [r3, #26]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d105      	bne.n	8004454 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2280      	movs	r2, #128	@ 0x80
 800444c:	0252      	lsls	r2, r2, #9
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e00b      	b.n	800446c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004458:	2220      	movs	r2, #32
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004464:	2201      	movs	r2, #1
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004478:	23e0      	movs	r3, #224	@ 0xe0
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004482:	4313      	orrs	r3, r2
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4a65      	ldr	r2, [pc, #404]	@ (8004628 <HAL_ADC_Init+0x33c>)
 8004492:	4013      	ands	r3, r2
 8004494:	0019      	movs	r1, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	430a      	orrs	r2, r1
 800449e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	0f9b      	lsrs	r3, r3, #30
 80044a6:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044ac:	4313      	orrs	r3, r2
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	223c      	movs	r2, #60	@ 0x3c
 80044b8:	5c9b      	ldrb	r3, [r3, r2]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d111      	bne.n	80044e2 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	0f9b      	lsrs	r3, r3, #30
 80044c4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044ca:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80044d0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80044d6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	2201      	movs	r2, #1
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	4a50      	ldr	r2, [pc, #320]	@ (800462c <HAL_ADC_Init+0x340>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	23c0      	movs	r3, #192	@ 0xc0
 80044fe:	061b      	lsls	r3, r3, #24
 8004500:	429a      	cmp	r2, r3
 8004502:	d018      	beq.n	8004536 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004508:	2380      	movs	r3, #128	@ 0x80
 800450a:	05db      	lsls	r3, r3, #23
 800450c:	429a      	cmp	r2, r3
 800450e:	d012      	beq.n	8004536 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004514:	2380      	movs	r3, #128	@ 0x80
 8004516:	061b      	lsls	r3, r3, #24
 8004518:	429a      	cmp	r2, r3
 800451a:	d00c      	beq.n	8004536 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800451c:	4b44      	ldr	r3, [pc, #272]	@ (8004630 <HAL_ADC_Init+0x344>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a44      	ldr	r2, [pc, #272]	@ (8004634 <HAL_ADC_Init+0x348>)
 8004522:	4013      	ands	r3, r2
 8004524:	0019      	movs	r1, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	23f0      	movs	r3, #240	@ 0xf0
 800452c:	039b      	lsls	r3, r3, #14
 800452e:	401a      	ands	r2, r3
 8004530:	4b3f      	ldr	r3, [pc, #252]	@ (8004630 <HAL_ADC_Init+0x344>)
 8004532:	430a      	orrs	r2, r1
 8004534:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453e:	001a      	movs	r2, r3
 8004540:	2100      	movs	r1, #0
 8004542:	f7ff fd8a 	bl	800405a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454e:	493a      	ldr	r1, [pc, #232]	@ (8004638 <HAL_ADC_Init+0x34c>)
 8004550:	001a      	movs	r2, r3
 8004552:	f7ff fd82 	bl	800405a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2110      	movs	r1, #16
 800456a:	4249      	negs	r1, r1
 800456c:	430a      	orrs	r2, r1
 800456e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004570:	e018      	b.n	80045a4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	2380      	movs	r3, #128	@ 0x80
 8004578:	039b      	lsls	r3, r3, #14
 800457a:	429a      	cmp	r2, r3
 800457c:	d112      	bne.n	80045a4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	3b01      	subs	r3, #1
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	221c      	movs	r2, #28
 800458e:	4013      	ands	r3, r2
 8004590:	2210      	movs	r2, #16
 8004592:	4252      	negs	r2, r2
 8004594:	409a      	lsls	r2, r3
 8004596:	0011      	movs	r1, r2
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2100      	movs	r1, #0
 80045aa:	0018      	movs	r0, r3
 80045ac:	f7ff fd72 	bl	8004094 <LL_ADC_GetSamplingTimeCommonChannels>
 80045b0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d10b      	bne.n	80045d2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c4:	2203      	movs	r2, #3
 80045c6:	4393      	bics	r3, r2
 80045c8:	2201      	movs	r2, #1
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80045d0:	e01c      	b.n	800460c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d6:	2212      	movs	r2, #18
 80045d8:	4393      	bics	r3, r2
 80045da:	2210      	movs	r2, #16
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e6:	2201      	movs	r2, #1
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80045ee:	231f      	movs	r3, #31
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	2201      	movs	r2, #1
 80045f4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80045f6:	e009      	b.n	800460c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fc:	2210      	movs	r2, #16
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004604:	231f      	movs	r3, #31
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	2201      	movs	r2, #1
 800460a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800460c:	231f      	movs	r3, #31
 800460e:	18fb      	adds	r3, r7, r3
 8004610:	781b      	ldrb	r3, [r3, #0]
}
 8004612:	0018      	movs	r0, r3
 8004614:	46bd      	mov	sp, r7
 8004616:	b008      	add	sp, #32
 8004618:	bd80      	pop	{r7, pc}
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	20000000 	.word	0x20000000
 8004620:	00030d40 	.word	0x00030d40
 8004624:	fffffefd 	.word	0xfffffefd
 8004628:	ffde0201 	.word	0xffde0201
 800462c:	1ffffc02 	.word	0x1ffffc02
 8004630:	40012708 	.word	0x40012708
 8004634:	ffc3ffff 	.word	0xffc3ffff
 8004638:	07ffff04 	.word	0x07ffff04

0800463c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800463c:	b5b0      	push	{r4, r5, r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0018      	movs	r0, r3
 800464a:	f7ff fe3d 	bl	80042c8 <LL_ADC_REG_IsConversionOngoing>
 800464e:	1e03      	subs	r3, r0, #0
 8004650:	d135      	bne.n	80046be <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2254      	movs	r2, #84	@ 0x54
 8004656:	5c9b      	ldrb	r3, [r3, r2]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_ADC_Start+0x24>
 800465c:	2302      	movs	r3, #2
 800465e:	e035      	b.n	80046cc <HAL_ADC_Start+0x90>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2254      	movs	r2, #84	@ 0x54
 8004664:	2101      	movs	r1, #1
 8004666:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004668:	250f      	movs	r5, #15
 800466a:	197c      	adds	r4, r7, r5
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	0018      	movs	r0, r3
 8004670:	f000 fb28 	bl	8004cc4 <ADC_Enable>
 8004674:	0003      	movs	r3, r0
 8004676:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004678:	197b      	adds	r3, r7, r5
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d119      	bne.n	80046b4 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004684:	4a13      	ldr	r2, [pc, #76]	@ (80046d4 <HAL_ADC_Start+0x98>)
 8004686:	4013      	ands	r3, r2
 8004688:	2280      	movs	r2, #128	@ 0x80
 800468a:	0052      	lsls	r2, r2, #1
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	221c      	movs	r2, #28
 800469e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2254      	movs	r2, #84	@ 0x54
 80046a4:	2100      	movs	r1, #0
 80046a6:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	0018      	movs	r0, r3
 80046ae:	f7ff fde7 	bl	8004280 <LL_ADC_REG_StartConversion>
 80046b2:	e008      	b.n	80046c6 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2254      	movs	r2, #84	@ 0x54
 80046b8:	2100      	movs	r1, #0
 80046ba:	5499      	strb	r1, [r3, r2]
 80046bc:	e003      	b.n	80046c6 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80046be:	230f      	movs	r3, #15
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	2202      	movs	r2, #2
 80046c4:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80046c6:	230f      	movs	r3, #15
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	781b      	ldrb	r3, [r3, #0]
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b004      	add	sp, #16
 80046d2:	bdb0      	pop	{r4, r5, r7, pc}
 80046d4:	fffff0fe 	.word	0xfffff0fe

080046d8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80046d8:	b5b0      	push	{r4, r5, r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2254      	movs	r2, #84	@ 0x54
 80046e4:	5c9b      	ldrb	r3, [r3, r2]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_Stop+0x16>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e029      	b.n	8004742 <HAL_ADC_Stop+0x6a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2254      	movs	r2, #84	@ 0x54
 80046f2:	2101      	movs	r1, #1
 80046f4:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80046f6:	250f      	movs	r5, #15
 80046f8:	197c      	adds	r4, r7, r5
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	0018      	movs	r0, r3
 80046fe:	f000 fa9f 	bl	8004c40 <ADC_ConversionStop>
 8004702:	0003      	movs	r3, r0
 8004704:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004706:	197b      	adds	r3, r7, r5
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d112      	bne.n	8004734 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800470e:	197c      	adds	r4, r7, r5
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	0018      	movs	r0, r3
 8004714:	f000 fb5c 	bl	8004dd0 <ADC_Disable>
 8004718:	0003      	movs	r3, r0
 800471a:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800471c:	197b      	adds	r3, r7, r5
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d107      	bne.n	8004734 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004728:	4a08      	ldr	r2, [pc, #32]	@ (800474c <HAL_ADC_Stop+0x74>)
 800472a:	4013      	ands	r3, r2
 800472c:	2201      	movs	r2, #1
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2254      	movs	r2, #84	@ 0x54
 8004738:	2100      	movs	r1, #0
 800473a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800473c:	230f      	movs	r3, #15
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	781b      	ldrb	r3, [r3, #0]
}
 8004742:	0018      	movs	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	b004      	add	sp, #16
 8004748:	bdb0      	pop	{r4, r5, r7, pc}
 800474a:	46c0      	nop			@ (mov r8, r8)
 800474c:	fffffefe 	.word	0xfffffefe

08004750 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	2b08      	cmp	r3, #8
 8004760:	d102      	bne.n	8004768 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004762:	2308      	movs	r3, #8
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e00f      	b.n	8004788 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	4013      	ands	r3, r2
 8004772:	d007      	beq.n	8004784 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004778:	2220      	movs	r2, #32
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e072      	b.n	800486a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004784:	2304      	movs	r3, #4
 8004786:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004788:	f7ff fc3c 	bl	8004004 <HAL_GetTick>
 800478c:	0003      	movs	r3, r0
 800478e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004790:	e01f      	b.n	80047d2 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	3301      	adds	r3, #1
 8004796:	d01c      	beq.n	80047d2 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004798:	f7ff fc34 	bl	8004004 <HAL_GetTick>
 800479c:	0002      	movs	r2, r0
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d302      	bcc.n	80047ae <HAL_ADC_PollForConversion+0x5e>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d111      	bne.n	80047d2 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4013      	ands	r3, r2
 80047b8:	d10b      	bne.n	80047d2 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047be:	2204      	movs	r2, #4
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2254      	movs	r2, #84	@ 0x54
 80047ca:	2100      	movs	r1, #0
 80047cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e04b      	b.n	800486a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4013      	ands	r3, r2
 80047dc:	d0d9      	beq.n	8004792 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e2:	2280      	movs	r2, #128	@ 0x80
 80047e4:	0092      	lsls	r2, r2, #2
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	0018      	movs	r0, r3
 80047f2:	f7ff fc66 	bl	80040c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80047f6:	1e03      	subs	r3, r0, #0
 80047f8:	d02e      	beq.n	8004858 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	7e9b      	ldrb	r3, [r3, #26]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d12a      	bne.n	8004858 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2208      	movs	r2, #8
 800480a:	4013      	ands	r3, r2
 800480c:	2b08      	cmp	r3, #8
 800480e:	d123      	bne.n	8004858 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	0018      	movs	r0, r3
 8004816:	f7ff fd57 	bl	80042c8 <LL_ADC_REG_IsConversionOngoing>
 800481a:	1e03      	subs	r3, r0, #0
 800481c:	d110      	bne.n	8004840 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	210c      	movs	r1, #12
 800482a:	438a      	bics	r2, r1
 800482c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004832:	4a10      	ldr	r2, [pc, #64]	@ (8004874 <HAL_ADC_PollForConversion+0x124>)
 8004834:	4013      	ands	r3, r2
 8004836:	2201      	movs	r2, #1
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	659a      	str	r2, [r3, #88]	@ 0x58
 800483e:	e00b      	b.n	8004858 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004844:	2220      	movs	r2, #32
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004850:	2201      	movs	r2, #1
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	7e1b      	ldrb	r3, [r3, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d103      	bne.n	8004868 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	220c      	movs	r2, #12
 8004866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	0018      	movs	r0, r3
 800486c:	46bd      	mov	sp, r7
 800486e:	b004      	add	sp, #16
 8004870:	bd80      	pop	{r7, pc}
 8004872:	46c0      	nop			@ (mov r8, r8)
 8004874:	fffffefe 	.word	0xfffffefe

08004878 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004886:	0018      	movs	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	b002      	add	sp, #8
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800489a:	2317      	movs	r3, #23
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	2200      	movs	r2, #0
 80048a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2254      	movs	r2, #84	@ 0x54
 80048aa:	5c9b      	ldrb	r3, [r3, r2]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x24>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e1c0      	b.n	8004c36 <HAL_ADC_ConfigChannel+0x3a6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2254      	movs	r2, #84	@ 0x54
 80048b8:	2101      	movs	r1, #1
 80048ba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7ff fd01 	bl	80042c8 <LL_ADC_REG_IsConversionOngoing>
 80048c6:	1e03      	subs	r3, r0, #0
 80048c8:	d000      	beq.n	80048cc <HAL_ADC_ConfigChannel+0x3c>
 80048ca:	e1a3      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d100      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x46>
 80048d4:	e143      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	2380      	movs	r3, #128	@ 0x80
 80048dc:	061b      	lsls	r3, r3, #24
 80048de:	429a      	cmp	r2, r3
 80048e0:	d004      	beq.n	80048ec <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80048e6:	4ac1      	ldr	r2, [pc, #772]	@ (8004bec <HAL_ADC_ConfigChannel+0x35c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d108      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	0019      	movs	r1, r3
 80048f6:	0010      	movs	r0, r2
 80048f8:	f7ff fc14 	bl	8004124 <LL_ADC_REG_SetSequencerChAdd>
 80048fc:	e0c9      	b.n	8004a92 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	211f      	movs	r1, #31
 8004908:	400b      	ands	r3, r1
 800490a:	210f      	movs	r1, #15
 800490c:	4099      	lsls	r1, r3
 800490e:	000b      	movs	r3, r1
 8004910:	43db      	mvns	r3, r3
 8004912:	4013      	ands	r3, r2
 8004914:	0019      	movs	r1, r3
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	035b      	lsls	r3, r3, #13
 800491c:	0b5b      	lsrs	r3, r3, #13
 800491e:	d105      	bne.n	800492c <HAL_ADC_ConfigChannel+0x9c>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	0e9b      	lsrs	r3, r3, #26
 8004926:	221f      	movs	r2, #31
 8004928:	4013      	ands	r3, r2
 800492a:	e098      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2201      	movs	r2, #1
 8004932:	4013      	ands	r3, r2
 8004934:	d000      	beq.n	8004938 <HAL_ADC_ConfigChannel+0xa8>
 8004936:	e091      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x1cc>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2202      	movs	r2, #2
 800493e:	4013      	ands	r3, r2
 8004940:	d000      	beq.n	8004944 <HAL_ADC_ConfigChannel+0xb4>
 8004942:	e089      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x1c8>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2204      	movs	r2, #4
 800494a:	4013      	ands	r3, r2
 800494c:	d000      	beq.n	8004950 <HAL_ADC_ConfigChannel+0xc0>
 800494e:	e081      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x1c4>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2208      	movs	r2, #8
 8004956:	4013      	ands	r3, r2
 8004958:	d000      	beq.n	800495c <HAL_ADC_ConfigChannel+0xcc>
 800495a:	e079      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x1c0>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2210      	movs	r2, #16
 8004962:	4013      	ands	r3, r2
 8004964:	d000      	beq.n	8004968 <HAL_ADC_ConfigChannel+0xd8>
 8004966:	e071      	b.n	8004a4c <HAL_ADC_ConfigChannel+0x1bc>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2220      	movs	r2, #32
 800496e:	4013      	ands	r3, r2
 8004970:	d000      	beq.n	8004974 <HAL_ADC_ConfigChannel+0xe4>
 8004972:	e069      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x1b8>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2240      	movs	r2, #64	@ 0x40
 800497a:	4013      	ands	r3, r2
 800497c:	d000      	beq.n	8004980 <HAL_ADC_ConfigChannel+0xf0>
 800497e:	e061      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x1b4>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2280      	movs	r2, #128	@ 0x80
 8004986:	4013      	ands	r3, r2
 8004988:	d000      	beq.n	800498c <HAL_ADC_ConfigChannel+0xfc>
 800498a:	e059      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x1b0>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	2380      	movs	r3, #128	@ 0x80
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	4013      	ands	r3, r2
 8004996:	d151      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x1ac>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	2380      	movs	r3, #128	@ 0x80
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4013      	ands	r3, r2
 80049a2:	d149      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x1a8>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	2380      	movs	r3, #128	@ 0x80
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4013      	ands	r3, r2
 80049ae:	d141      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x1a4>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	2380      	movs	r3, #128	@ 0x80
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	4013      	ands	r3, r2
 80049ba:	d139      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x1a0>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	2380      	movs	r3, #128	@ 0x80
 80049c2:	015b      	lsls	r3, r3, #5
 80049c4:	4013      	ands	r3, r2
 80049c6:	d131      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x19c>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	2380      	movs	r3, #128	@ 0x80
 80049ce:	019b      	lsls	r3, r3, #6
 80049d0:	4013      	ands	r3, r2
 80049d2:	d129      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x198>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	2380      	movs	r3, #128	@ 0x80
 80049da:	01db      	lsls	r3, r3, #7
 80049dc:	4013      	ands	r3, r2
 80049de:	d121      	bne.n	8004a24 <HAL_ADC_ConfigChannel+0x194>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	2380      	movs	r3, #128	@ 0x80
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	4013      	ands	r3, r2
 80049ea:	d119      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x190>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	2380      	movs	r3, #128	@ 0x80
 80049f2:	025b      	lsls	r3, r3, #9
 80049f4:	4013      	ands	r3, r2
 80049f6:	d111      	bne.n	8004a1c <HAL_ADC_ConfigChannel+0x18c>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	2380      	movs	r3, #128	@ 0x80
 80049fe:	029b      	lsls	r3, r3, #10
 8004a00:	4013      	ands	r3, r2
 8004a02:	d109      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x188>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	2380      	movs	r3, #128	@ 0x80
 8004a0a:	02db      	lsls	r3, r3, #11
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d001      	beq.n	8004a14 <HAL_ADC_ConfigChannel+0x184>
 8004a10:	2312      	movs	r3, #18
 8004a12:	e024      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a14:	2300      	movs	r3, #0
 8004a16:	e022      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a18:	2311      	movs	r3, #17
 8004a1a:	e020      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	e01e      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a20:	230f      	movs	r3, #15
 8004a22:	e01c      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a24:	230e      	movs	r3, #14
 8004a26:	e01a      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a28:	230d      	movs	r3, #13
 8004a2a:	e018      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a2c:	230c      	movs	r3, #12
 8004a2e:	e016      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a30:	230b      	movs	r3, #11
 8004a32:	e014      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a34:	230a      	movs	r3, #10
 8004a36:	e012      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a38:	2309      	movs	r3, #9
 8004a3a:	e010      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	e00e      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a40:	2307      	movs	r3, #7
 8004a42:	e00c      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a44:	2306      	movs	r3, #6
 8004a46:	e00a      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a48:	2305      	movs	r3, #5
 8004a4a:	e008      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	e006      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a50:	2303      	movs	r3, #3
 8004a52:	e004      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e002      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x1ce>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	6852      	ldr	r2, [r2, #4]
 8004a62:	201f      	movs	r0, #31
 8004a64:	4002      	ands	r2, r0
 8004a66:	4093      	lsls	r3, r2
 8004a68:	000a      	movs	r2, r1
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	089b      	lsrs	r3, r3, #2
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d808      	bhi.n	8004a92 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6818      	ldr	r0, [r3, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	6859      	ldr	r1, [r3, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	001a      	movs	r2, r3
 8004a8e:	f7ff fb29 	bl	80040e4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6819      	ldr	r1, [r3, #0]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	001a      	movs	r2, r3
 8004aa0:	f7ff fb64 	bl	800416c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	db00      	blt.n	8004aae <HAL_ADC_ConfigChannel+0x21e>
 8004aac:	e0bc      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004aae:	4b50      	ldr	r3, [pc, #320]	@ (8004bf0 <HAL_ADC_ConfigChannel+0x360>)
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f7ff fac5 	bl	8004040 <LL_ADC_GetCommonPathInternalCh>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a4d      	ldr	r2, [pc, #308]	@ (8004bf4 <HAL_ADC_ConfigChannel+0x364>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d122      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	2380      	movs	r3, #128	@ 0x80
 8004ac8:	041b      	lsls	r3, r3, #16
 8004aca:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004acc:	d11d      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2280      	movs	r2, #128	@ 0x80
 8004ad2:	0412      	lsls	r2, r2, #16
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	4a46      	ldr	r2, [pc, #280]	@ (8004bf0 <HAL_ADC_ConfigChannel+0x360>)
 8004ad8:	0019      	movs	r1, r3
 8004ada:	0010      	movs	r0, r2
 8004adc:	f7ff fa9c 	bl	8004018 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ae0:	4b45      	ldr	r3, [pc, #276]	@ (8004bf8 <HAL_ADC_ConfigChannel+0x368>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4945      	ldr	r1, [pc, #276]	@ (8004bfc <HAL_ADC_ConfigChannel+0x36c>)
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f7fb fb28 	bl	800013c <__udivsi3>
 8004aec:	0003      	movs	r3, r0
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	0013      	movs	r3, r2
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	189b      	adds	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004afa:	e002      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f9      	bne.n	8004afc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004b08:	e08e      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c00 <HAL_ADC_ConfigChannel+0x370>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d10e      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	2380      	movs	r3, #128	@ 0x80
 8004b18:	045b      	lsls	r3, r3, #17
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d109      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	2280      	movs	r2, #128	@ 0x80
 8004b22:	0452      	lsls	r2, r2, #17
 8004b24:	4313      	orrs	r3, r2
 8004b26:	4a32      	ldr	r2, [pc, #200]	@ (8004bf0 <HAL_ADC_ConfigChannel+0x360>)
 8004b28:	0019      	movs	r1, r3
 8004b2a:	0010      	movs	r0, r2
 8004b2c:	f7ff fa74 	bl	8004018 <LL_ADC_SetCommonPathInternalCh>
 8004b30:	e07a      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a33      	ldr	r2, [pc, #204]	@ (8004c04 <HAL_ADC_ConfigChannel+0x374>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d000      	beq.n	8004b3e <HAL_ADC_ConfigChannel+0x2ae>
 8004b3c:	e074      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	2380      	movs	r3, #128	@ 0x80
 8004b42:	03db      	lsls	r3, r3, #15
 8004b44:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004b46:	d000      	beq.n	8004b4a <HAL_ADC_ConfigChannel+0x2ba>
 8004b48:	e06e      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2280      	movs	r2, #128	@ 0x80
 8004b4e:	03d2      	lsls	r2, r2, #15
 8004b50:	4313      	orrs	r3, r2
 8004b52:	4a27      	ldr	r2, [pc, #156]	@ (8004bf0 <HAL_ADC_ConfigChannel+0x360>)
 8004b54:	0019      	movs	r1, r3
 8004b56:	0010      	movs	r0, r2
 8004b58:	f7ff fa5e 	bl	8004018 <LL_ADC_SetCommonPathInternalCh>
 8004b5c:	e064      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	2380      	movs	r3, #128	@ 0x80
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d004      	beq.n	8004b74 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bec <HAL_ADC_ConfigChannel+0x35c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d107      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	0010      	movs	r0, r2
 8004b80:	f7ff fae1 	bl	8004146 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	da4d      	bge.n	8004c28 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b8c:	4b18      	ldr	r3, [pc, #96]	@ (8004bf0 <HAL_ADC_ConfigChannel+0x360>)
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f7ff fa56 	bl	8004040 <LL_ADC_GetCommonPathInternalCh>
 8004b94:	0003      	movs	r3, r0
 8004b96:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a15      	ldr	r2, [pc, #84]	@ (8004bf4 <HAL_ADC_ConfigChannel+0x364>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d108      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4a18      	ldr	r2, [pc, #96]	@ (8004c08 <HAL_ADC_ConfigChannel+0x378>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	4a11      	ldr	r2, [pc, #68]	@ (8004bf0 <HAL_ADC_ConfigChannel+0x360>)
 8004baa:	0019      	movs	r1, r3
 8004bac:	0010      	movs	r0, r2
 8004bae:	f7ff fa33 	bl	8004018 <LL_ADC_SetCommonPathInternalCh>
 8004bb2:	e039      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a11      	ldr	r2, [pc, #68]	@ (8004c00 <HAL_ADC_ConfigChannel+0x370>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d108      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4a12      	ldr	r2, [pc, #72]	@ (8004c0c <HAL_ADC_ConfigChannel+0x37c>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf0 <HAL_ADC_ConfigChannel+0x360>)
 8004bc6:	0019      	movs	r1, r3
 8004bc8:	0010      	movs	r0, r2
 8004bca:	f7ff fa25 	bl	8004018 <LL_ADC_SetCommonPathInternalCh>
 8004bce:	e02b      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8004c04 <HAL_ADC_ConfigChannel+0x374>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d126      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8004c10 <HAL_ADC_ConfigChannel+0x380>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	4a03      	ldr	r2, [pc, #12]	@ (8004bf0 <HAL_ADC_ConfigChannel+0x360>)
 8004be2:	0019      	movs	r1, r3
 8004be4:	0010      	movs	r0, r2
 8004be6:	f7ff fa17 	bl	8004018 <LL_ADC_SetCommonPathInternalCh>
 8004bea:	e01d      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x398>
 8004bec:	80000004 	.word	0x80000004
 8004bf0:	40012708 	.word	0x40012708
 8004bf4:	b0001000 	.word	0xb0001000
 8004bf8:	20000000 	.word	0x20000000
 8004bfc:	00030d40 	.word	0x00030d40
 8004c00:	b8004000 	.word	0xb8004000
 8004c04:	b4002000 	.word	0xb4002000
 8004c08:	ff7fffff 	.word	0xff7fffff
 8004c0c:	feffffff 	.word	0xfeffffff
 8004c10:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c18:	2220      	movs	r2, #32
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004c20:	2317      	movs	r3, #23
 8004c22:	18fb      	adds	r3, r7, r3
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2254      	movs	r2, #84	@ 0x54
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004c30:	2317      	movs	r3, #23
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	781b      	ldrb	r3, [r3, #0]
}
 8004c36:	0018      	movs	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b006      	add	sp, #24
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	46c0      	nop			@ (mov r8, r8)

08004c40 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7ff fb3b 	bl	80042c8 <LL_ADC_REG_IsConversionOngoing>
 8004c52:	1e03      	subs	r3, r0, #0
 8004c54:	d031      	beq.n	8004cba <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f7ff faff 	bl	800425e <LL_ADC_IsDisableOngoing>
 8004c60:	1e03      	subs	r3, r0, #0
 8004c62:	d104      	bne.n	8004c6e <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7ff fb1b 	bl	80042a4 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c6e:	f7ff f9c9 	bl	8004004 <HAL_GetTick>
 8004c72:	0003      	movs	r3, r0
 8004c74:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004c76:	e01a      	b.n	8004cae <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004c78:	f7ff f9c4 	bl	8004004 <HAL_GetTick>
 8004c7c:	0002      	movs	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d913      	bls.n	8004cae <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	4013      	ands	r3, r2
 8004c90:	d00d      	beq.n	8004cae <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c96:	2210      	movs	r2, #16
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e006      	b.n	8004cbc <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d1de      	bne.n	8004c78 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b004      	add	sp, #16
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f7ff fab1 	bl	800423c <LL_ADC_IsEnabled>
 8004cda:	1e03      	subs	r3, r0, #0
 8004cdc:	d000      	beq.n	8004ce0 <ADC_Enable+0x1c>
 8004cde:	e069      	b.n	8004db4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	4a36      	ldr	r2, [pc, #216]	@ (8004dc0 <ADC_Enable+0xfc>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d00d      	beq.n	8004d08 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf0:	2210      	movs	r2, #16
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e056      	b.n	8004db6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f7ff fa71 	bl	80041f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8004d12:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc4 <ADC_Enable+0x100>)
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7ff f993 	bl	8004040 <LL_ADC_GetCommonPathInternalCh>
 8004d1a:	0002      	movs	r2, r0
 8004d1c:	2380      	movs	r3, #128	@ 0x80
 8004d1e:	041b      	lsls	r3, r3, #16
 8004d20:	4013      	ands	r3, r2
 8004d22:	d00f      	beq.n	8004d44 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d24:	4b28      	ldr	r3, [pc, #160]	@ (8004dc8 <ADC_Enable+0x104>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4928      	ldr	r1, [pc, #160]	@ (8004dcc <ADC_Enable+0x108>)
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f7fb fa06 	bl	800013c <__udivsi3>
 8004d30:	0003      	movs	r3, r0
 8004d32:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8004d34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004d36:	e002      	b.n	8004d3e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1f9      	bne.n	8004d38 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	7e5b      	ldrb	r3, [r3, #25]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d033      	beq.n	8004db4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004d4c:	f7ff f95a 	bl	8004004 <HAL_GetTick>
 8004d50:	0003      	movs	r3, r0
 8004d52:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d54:	e027      	b.n	8004da6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7ff fa6e 	bl	800423c <LL_ADC_IsEnabled>
 8004d60:	1e03      	subs	r3, r0, #0
 8004d62:	d104      	bne.n	8004d6e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f7ff fa43 	bl	80041f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d6e:	f7ff f949 	bl	8004004 <HAL_GetTick>
 8004d72:	0002      	movs	r2, r0
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d914      	bls.n	8004da6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2201      	movs	r2, #1
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d00d      	beq.n	8004da6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8e:	2210      	movs	r2, #16
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e007      	b.n	8004db6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2201      	movs	r2, #1
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d1d0      	bne.n	8004d56 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	0018      	movs	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b004      	add	sp, #16
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	80000017 	.word	0x80000017
 8004dc4:	40012708 	.word	0x40012708
 8004dc8:	20000000 	.word	0x20000000
 8004dcc:	00030d40 	.word	0x00030d40

08004dd0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f7ff fa3e 	bl	800425e <LL_ADC_IsDisableOngoing>
 8004de2:	0003      	movs	r3, r0
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	0018      	movs	r0, r3
 8004dec:	f7ff fa26 	bl	800423c <LL_ADC_IsEnabled>
 8004df0:	1e03      	subs	r3, r0, #0
 8004df2:	d046      	beq.n	8004e82 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d143      	bne.n	8004e82 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2205      	movs	r2, #5
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d10d      	bne.n	8004e24 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff fa03 	bl	8004218 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2203      	movs	r2, #3
 8004e18:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e1a:	f7ff f8f3 	bl	8004004 <HAL_GetTick>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e22:	e028      	b.n	8004e76 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e28:	2210      	movs	r2, #16
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e34:	2201      	movs	r2, #1
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e021      	b.n	8004e84 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e40:	f7ff f8e0 	bl	8004004 <HAL_GetTick>
 8004e44:	0002      	movs	r2, r0
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d913      	bls.n	8004e76 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2201      	movs	r2, #1
 8004e56:	4013      	ands	r3, r2
 8004e58:	d00d      	beq.n	8004e76 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	2210      	movs	r2, #16
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e006      	b.n	8004e84 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d1de      	bne.n	8004e40 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	0018      	movs	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b004      	add	sp, #16
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <LL_ADC_GetCommonClock>:
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	23f0      	movs	r3, #240	@ 0xf0
 8004e9a:	039b      	lsls	r3, r3, #14
 8004e9c:	4013      	ands	r3, r2
}
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b002      	add	sp, #8
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <LL_ADC_GetClock>:
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	0f9b      	lsrs	r3, r3, #30
 8004eb4:	079b      	lsls	r3, r3, #30
}
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b002      	add	sp, #8
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <LL_ADC_SetCalibrationFactor>:
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	22b4      	movs	r2, #180	@ 0xb4
 8004ecc:	589b      	ldr	r3, [r3, r2]
 8004ece:	227f      	movs	r2, #127	@ 0x7f
 8004ed0:	4393      	bics	r3, r2
 8004ed2:	001a      	movs	r2, r3
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	21b4      	movs	r1, #180	@ 0xb4
 8004edc:	505a      	str	r2, [r3, r1]
}
 8004ede:	46c0      	nop			@ (mov r8, r8)
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b002      	add	sp, #8
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <LL_ADC_GetCalibrationFactor>:
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	22b4      	movs	r2, #180	@ 0xb4
 8004ef2:	589b      	ldr	r3, [r3, r2]
 8004ef4:	227f      	movs	r2, #127	@ 0x7f
 8004ef6:	4013      	ands	r3, r2
}
 8004ef8:	0018      	movs	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b002      	add	sp, #8
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <LL_ADC_Enable>:
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4a04      	ldr	r2, [pc, #16]	@ (8004f20 <LL_ADC_Enable+0x20>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2201      	movs	r2, #1
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	609a      	str	r2, [r3, #8]
}
 8004f18:	46c0      	nop			@ (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b002      	add	sp, #8
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	7fffffe8 	.word	0x7fffffe8

08004f24 <LL_ADC_Disable>:
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4a04      	ldr	r2, [pc, #16]	@ (8004f44 <LL_ADC_Disable+0x20>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	2202      	movs	r2, #2
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	609a      	str	r2, [r3, #8]
}
 8004f3c:	46c0      	nop			@ (mov r8, r8)
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b002      	add	sp, #8
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	7fffffe8 	.word	0x7fffffe8

08004f48 <LL_ADC_IsEnabled>:
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2201      	movs	r2, #1
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <LL_ADC_IsEnabled+0x18>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e000      	b.n	8004f62 <LL_ADC_IsEnabled+0x1a>
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	0018      	movs	r0, r3
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b002      	add	sp, #8
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <LL_ADC_StartCalibration>:
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4a05      	ldr	r2, [pc, #20]	@ (8004f90 <LL_ADC_StartCalibration+0x24>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2280      	movs	r2, #128	@ 0x80
 8004f7e:	0612      	lsls	r2, r2, #24
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	609a      	str	r2, [r3, #8]
}
 8004f86:	46c0      	nop			@ (mov r8, r8)
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b002      	add	sp, #8
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			@ (mov r8, r8)
 8004f90:	7fffffe8 	.word	0x7fffffe8

08004f94 <LL_ADC_IsCalibrationOnGoing>:
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	0fdb      	lsrs	r3, r3, #31
 8004fa2:	07da      	lsls	r2, r3, #31
 8004fa4:	2380      	movs	r3, #128	@ 0x80
 8004fa6:	061b      	lsls	r3, r3, #24
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d101      	bne.n	8004fb0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b002      	add	sp, #8
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004fbc:	b590      	push	{r4, r7, lr}
 8004fbe:	b08b      	sub	sp, #44	@ 0x2c
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2254      	movs	r2, #84	@ 0x54
 8004fd0:	5c9b      	ldrb	r3, [r3, r2]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_ADCEx_Calibration_Start+0x1e>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e0dd      	b.n	8005196 <HAL_ADCEx_Calibration_Start+0x1da>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2254      	movs	r2, #84	@ 0x54
 8004fde:	2101      	movs	r1, #1
 8004fe0:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004fe2:	231f      	movs	r3, #31
 8004fe4:	18fc      	adds	r4, r7, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f7ff fef1 	bl	8004dd0 <ADC_Disable>
 8004fee:	0003      	movs	r3, r0
 8004ff0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f7ff ffa6 	bl	8004f48 <LL_ADC_IsEnabled>
 8004ffc:	1e03      	subs	r3, r0, #0
 8004ffe:	d000      	beq.n	8005002 <HAL_ADCEx_Calibration_Start+0x46>
 8005000:	e0bc      	b.n	800517c <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005006:	4a66      	ldr	r2, [pc, #408]	@ (80051a0 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8005008:	4013      	ands	r3, r2
 800500a:	2202      	movs	r2, #2
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4a62      	ldr	r2, [pc, #392]	@ (80051a4 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800501a:	4013      	ands	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	495f      	ldr	r1, [pc, #380]	@ (80051a8 <HAL_ADCEx_Calibration_Start+0x1ec>)
 800502a:	400a      	ands	r2, r1
 800502c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800502e:	2300      	movs	r3, #0
 8005030:	627b      	str	r3, [r7, #36]	@ 0x24
 8005032:	e02d      	b.n	8005090 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	0018      	movs	r0, r3
 800503a:	f7ff ff97 	bl	8004f6c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800503e:	e014      	b.n	800506a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3301      	adds	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4a58      	ldr	r2, [pc, #352]	@ (80051ac <HAL_ADCEx_Calibration_Start+0x1f0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d90d      	bls.n	800506a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005052:	2212      	movs	r2, #18
 8005054:	4393      	bics	r3, r2
 8005056:	2210      	movs	r2, #16
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2254      	movs	r2, #84	@ 0x54
 8005062:	2100      	movs	r1, #0
 8005064:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e095      	b.n	8005196 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	0018      	movs	r0, r3
 8005070:	f7ff ff90 	bl	8004f94 <LL_ADC_IsCalibrationOnGoing>
 8005074:	1e03      	subs	r3, r0, #0
 8005076:	d1e3      	bne.n	8005040 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	0018      	movs	r0, r3
 800507e:	f7ff ff32 	bl	8004ee6 <LL_ADC_GetCalibrationFactor>
 8005082:	0002      	movs	r2, r0
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	189b      	adds	r3, r3, r2
 8005088:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	3301      	adds	r3, #1
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	2b07      	cmp	r3, #7
 8005094:	d9ce      	bls.n	8005034 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8005096:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005098:	6a38      	ldr	r0, [r7, #32]
 800509a:	f7fb f84f 	bl	800013c <__udivsi3>
 800509e:	0003      	movs	r3, r0
 80050a0:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	0018      	movs	r0, r3
 80050a8:	f7ff ff2a 	bl	8004f00 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	0018      	movs	r0, r3
 80050b2:	f7ff fef8 	bl	8004ea6 <LL_ADC_GetClock>
 80050b6:	1e03      	subs	r3, r0, #0
 80050b8:	d11b      	bne.n	80050f2 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050ba:	4b3d      	ldr	r3, [pc, #244]	@ (80051b0 <HAL_ADCEx_Calibration_Start+0x1f4>)
 80050bc:	0018      	movs	r0, r3
 80050be:	f7ff fee5 	bl	8004e8c <LL_ADC_GetCommonClock>
 80050c2:	0003      	movs	r3, r0
 80050c4:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	23e0      	movs	r3, #224	@ 0xe0
 80050ca:	035b      	lsls	r3, r3, #13
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d310      	bcc.n	80050f2 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	0c9b      	lsrs	r3, r3, #18
 80050d4:	3b03      	subs	r3, #3
 80050d6:	2201      	movs	r2, #1
 80050d8:	409a      	lsls	r2, r3
 80050da:	0013      	movs	r3, r2
 80050dc:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	085b      	lsrs	r3, r3, #1
 80050e2:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80050e4:	e002      	b.n	80050ec <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f9      	bne.n	80050e6 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	0011      	movs	r1, r2
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7ff fedf 	bl	8004ebe <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	0018      	movs	r0, r3
 8005106:	f7ff ff0d 	bl	8004f24 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800510a:	f7fe ff7b 	bl	8004004 <HAL_GetTick>
 800510e:	0003      	movs	r3, r0
 8005110:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005112:	e01b      	b.n	800514c <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005114:	f7fe ff76 	bl	8004004 <HAL_GetTick>
 8005118:	0002      	movs	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d914      	bls.n	800514c <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	0018      	movs	r0, r3
 8005128:	f7ff ff0e 	bl	8004f48 <LL_ADC_IsEnabled>
 800512c:	1e03      	subs	r3, r0, #0
 800512e:	d00d      	beq.n	800514c <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005134:	2210      	movs	r2, #16
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005140:	2201      	movs	r2, #1
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e024      	b.n	8005196 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	0018      	movs	r0, r3
 8005152:	f7ff fef9 	bl	8004f48 <LL_ADC_IsEnabled>
 8005156:	1e03      	subs	r3, r0, #0
 8005158:	d1dc      	bne.n	8005114 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68d9      	ldr	r1, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	430a      	orrs	r2, r1
 8005168:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516e:	2203      	movs	r2, #3
 8005170:	4393      	bics	r3, r2
 8005172:	2201      	movs	r2, #1
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	659a      	str	r2, [r3, #88]	@ 0x58
 800517a:	e005      	b.n	8005188 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005180:	2210      	movs	r2, #16
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2254      	movs	r2, #84	@ 0x54
 800518c:	2100      	movs	r1, #0
 800518e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005190:	231f      	movs	r3, #31
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	781b      	ldrb	r3, [r3, #0]
}
 8005196:	0018      	movs	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	b00b      	add	sp, #44	@ 0x2c
 800519c:	bd90      	pop	{r4, r7, pc}
 800519e:	46c0      	nop			@ (mov r8, r8)
 80051a0:	fffffefd 	.word	0xfffffefd
 80051a4:	00008003 	.word	0x00008003
 80051a8:	ffff7ffc 	.word	0xffff7ffc
 80051ac:	0002f1ff 	.word	0x0002f1ff
 80051b0:	40012708 	.word	0x40012708

080051b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	0002      	movs	r2, r0
 80051bc:	1dfb      	adds	r3, r7, #7
 80051be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80051c0:	1dfb      	adds	r3, r7, #7
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80051c6:	d809      	bhi.n	80051dc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051c8:	1dfb      	adds	r3, r7, #7
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	001a      	movs	r2, r3
 80051ce:	231f      	movs	r3, #31
 80051d0:	401a      	ands	r2, r3
 80051d2:	4b04      	ldr	r3, [pc, #16]	@ (80051e4 <__NVIC_EnableIRQ+0x30>)
 80051d4:	2101      	movs	r1, #1
 80051d6:	4091      	lsls	r1, r2
 80051d8:	000a      	movs	r2, r1
 80051da:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80051dc:	46c0      	nop			@ (mov r8, r8)
 80051de:	46bd      	mov	sp, r7
 80051e0:	b002      	add	sp, #8
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	e000e100 	.word	0xe000e100

080051e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	0002      	movs	r2, r0
 80051f0:	6039      	str	r1, [r7, #0]
 80051f2:	1dfb      	adds	r3, r7, #7
 80051f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80051f6:	1dfb      	adds	r3, r7, #7
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80051fc:	d828      	bhi.n	8005250 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051fe:	4a2f      	ldr	r2, [pc, #188]	@ (80052bc <__NVIC_SetPriority+0xd4>)
 8005200:	1dfb      	adds	r3, r7, #7
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	b25b      	sxtb	r3, r3
 8005206:	089b      	lsrs	r3, r3, #2
 8005208:	33c0      	adds	r3, #192	@ 0xc0
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	589b      	ldr	r3, [r3, r2]
 800520e:	1dfa      	adds	r2, r7, #7
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	0011      	movs	r1, r2
 8005214:	2203      	movs	r2, #3
 8005216:	400a      	ands	r2, r1
 8005218:	00d2      	lsls	r2, r2, #3
 800521a:	21ff      	movs	r1, #255	@ 0xff
 800521c:	4091      	lsls	r1, r2
 800521e:	000a      	movs	r2, r1
 8005220:	43d2      	mvns	r2, r2
 8005222:	401a      	ands	r2, r3
 8005224:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	019b      	lsls	r3, r3, #6
 800522a:	22ff      	movs	r2, #255	@ 0xff
 800522c:	401a      	ands	r2, r3
 800522e:	1dfb      	adds	r3, r7, #7
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	0018      	movs	r0, r3
 8005234:	2303      	movs	r3, #3
 8005236:	4003      	ands	r3, r0
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800523c:	481f      	ldr	r0, [pc, #124]	@ (80052bc <__NVIC_SetPriority+0xd4>)
 800523e:	1dfb      	adds	r3, r7, #7
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	b25b      	sxtb	r3, r3
 8005244:	089b      	lsrs	r3, r3, #2
 8005246:	430a      	orrs	r2, r1
 8005248:	33c0      	adds	r3, #192	@ 0xc0
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800524e:	e031      	b.n	80052b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005250:	4a1b      	ldr	r2, [pc, #108]	@ (80052c0 <__NVIC_SetPriority+0xd8>)
 8005252:	1dfb      	adds	r3, r7, #7
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	0019      	movs	r1, r3
 8005258:	230f      	movs	r3, #15
 800525a:	400b      	ands	r3, r1
 800525c:	3b08      	subs	r3, #8
 800525e:	089b      	lsrs	r3, r3, #2
 8005260:	3306      	adds	r3, #6
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	18d3      	adds	r3, r2, r3
 8005266:	3304      	adds	r3, #4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	1dfa      	adds	r2, r7, #7
 800526c:	7812      	ldrb	r2, [r2, #0]
 800526e:	0011      	movs	r1, r2
 8005270:	2203      	movs	r2, #3
 8005272:	400a      	ands	r2, r1
 8005274:	00d2      	lsls	r2, r2, #3
 8005276:	21ff      	movs	r1, #255	@ 0xff
 8005278:	4091      	lsls	r1, r2
 800527a:	000a      	movs	r2, r1
 800527c:	43d2      	mvns	r2, r2
 800527e:	401a      	ands	r2, r3
 8005280:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	019b      	lsls	r3, r3, #6
 8005286:	22ff      	movs	r2, #255	@ 0xff
 8005288:	401a      	ands	r2, r3
 800528a:	1dfb      	adds	r3, r7, #7
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	0018      	movs	r0, r3
 8005290:	2303      	movs	r3, #3
 8005292:	4003      	ands	r3, r0
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005298:	4809      	ldr	r0, [pc, #36]	@ (80052c0 <__NVIC_SetPriority+0xd8>)
 800529a:	1dfb      	adds	r3, r7, #7
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	001c      	movs	r4, r3
 80052a0:	230f      	movs	r3, #15
 80052a2:	4023      	ands	r3, r4
 80052a4:	3b08      	subs	r3, #8
 80052a6:	089b      	lsrs	r3, r3, #2
 80052a8:	430a      	orrs	r2, r1
 80052aa:	3306      	adds	r3, #6
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	18c3      	adds	r3, r0, r3
 80052b0:	3304      	adds	r3, #4
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	46c0      	nop			@ (mov r8, r8)
 80052b6:	46bd      	mov	sp, r7
 80052b8:	b003      	add	sp, #12
 80052ba:	bd90      	pop	{r4, r7, pc}
 80052bc:	e000e100 	.word	0xe000e100
 80052c0:	e000ed00 	.word	0xe000ed00

080052c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	1e5a      	subs	r2, r3, #1
 80052d0:	2380      	movs	r3, #128	@ 0x80
 80052d2:	045b      	lsls	r3, r3, #17
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d301      	bcc.n	80052dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052d8:	2301      	movs	r3, #1
 80052da:	e010      	b.n	80052fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <SysTick_Config+0x44>)
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	3a01      	subs	r2, #1
 80052e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052e4:	2301      	movs	r3, #1
 80052e6:	425b      	negs	r3, r3
 80052e8:	2103      	movs	r1, #3
 80052ea:	0018      	movs	r0, r3
 80052ec:	f7ff ff7c 	bl	80051e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052f0:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <SysTick_Config+0x44>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052f6:	4b04      	ldr	r3, [pc, #16]	@ (8005308 <SysTick_Config+0x44>)
 80052f8:	2207      	movs	r2, #7
 80052fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	0018      	movs	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	b002      	add	sp, #8
 8005304:	bd80      	pop	{r7, pc}
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	e000e010 	.word	0xe000e010

0800530c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	210f      	movs	r1, #15
 8005318:	187b      	adds	r3, r7, r1
 800531a:	1c02      	adds	r2, r0, #0
 800531c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	187b      	adds	r3, r7, r1
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	b25b      	sxtb	r3, r3
 8005326:	0011      	movs	r1, r2
 8005328:	0018      	movs	r0, r3
 800532a:	f7ff ff5d 	bl	80051e8 <__NVIC_SetPriority>
}
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	46bd      	mov	sp, r7
 8005332:	b004      	add	sp, #16
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	0002      	movs	r2, r0
 800533e:	1dfb      	adds	r3, r7, #7
 8005340:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005342:	1dfb      	adds	r3, r7, #7
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	b25b      	sxtb	r3, r3
 8005348:	0018      	movs	r0, r3
 800534a:	f7ff ff33 	bl	80051b4 <__NVIC_EnableIRQ>
}
 800534e:	46c0      	nop			@ (mov r8, r8)
 8005350:	46bd      	mov	sp, r7
 8005352:	b002      	add	sp, #8
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	0018      	movs	r0, r3
 8005362:	f7ff ffaf 	bl	80052c4 <SysTick_Config>
 8005366:	0003      	movs	r3, r0
}
 8005368:	0018      	movs	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	b002      	add	sp, #8
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e050      	b.n	8005424 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2225      	movs	r2, #37	@ 0x25
 8005386:	5c9b      	ldrb	r3, [r3, r2]
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d008      	beq.n	80053a0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2204      	movs	r2, #4
 8005392:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	@ 0x24
 8005398:	2100      	movs	r1, #0
 800539a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e041      	b.n	8005424 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	210e      	movs	r1, #14
 80053ac:	438a      	bics	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ba:	491c      	ldr	r1, [pc, #112]	@ (800542c <HAL_DMA_Abort+0xbc>)
 80053bc:	400a      	ands	r2, r1
 80053be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2101      	movs	r1, #1
 80053cc:	438a      	bics	r2, r1
 80053ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80053d0:	4b17      	ldr	r3, [pc, #92]	@ (8005430 <HAL_DMA_Abort+0xc0>)
 80053d2:	6859      	ldr	r1, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	221c      	movs	r2, #28
 80053da:	4013      	ands	r3, r2
 80053dc:	2201      	movs	r2, #1
 80053de:	409a      	lsls	r2, r3
 80053e0:	4b13      	ldr	r3, [pc, #76]	@ (8005430 <HAL_DMA_Abort+0xc0>)
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80053ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00c      	beq.n	8005412 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005402:	490a      	ldr	r1, [pc, #40]	@ (800542c <HAL_DMA_Abort+0xbc>)
 8005404:	400a      	ands	r2, r1
 8005406:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005410:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2225      	movs	r2, #37	@ 0x25
 8005416:	2101      	movs	r1, #1
 8005418:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2224      	movs	r2, #36	@ 0x24
 800541e:	2100      	movs	r1, #0
 8005420:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	0018      	movs	r0, r3
 8005426:	46bd      	mov	sp, r7
 8005428:	b002      	add	sp, #8
 800542a:	bd80      	pop	{r7, pc}
 800542c:	fffffeff 	.word	0xfffffeff
 8005430:	40020000 	.word	0x40020000

08005434 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800543c:	210f      	movs	r1, #15
 800543e:	187b      	adds	r3, r7, r1
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2225      	movs	r2, #37	@ 0x25
 8005448:	5c9b      	ldrb	r3, [r3, r2]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d006      	beq.n	800545e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2204      	movs	r2, #4
 8005454:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005456:	187b      	adds	r3, r7, r1
 8005458:	2201      	movs	r2, #1
 800545a:	701a      	strb	r2, [r3, #0]
 800545c:	e049      	b.n	80054f2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	210e      	movs	r1, #14
 800546a:	438a      	bics	r2, r1
 800546c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2101      	movs	r1, #1
 800547a:	438a      	bics	r2, r1
 800547c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005488:	491d      	ldr	r1, [pc, #116]	@ (8005500 <HAL_DMA_Abort_IT+0xcc>)
 800548a:	400a      	ands	r2, r1
 800548c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800548e:	4b1d      	ldr	r3, [pc, #116]	@ (8005504 <HAL_DMA_Abort_IT+0xd0>)
 8005490:	6859      	ldr	r1, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	221c      	movs	r2, #28
 8005498:	4013      	ands	r3, r2
 800549a:	2201      	movs	r2, #1
 800549c:	409a      	lsls	r2, r3
 800549e:	4b19      	ldr	r3, [pc, #100]	@ (8005504 <HAL_DMA_Abort_IT+0xd0>)
 80054a0:	430a      	orrs	r2, r1
 80054a2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80054ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00c      	beq.n	80054d0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c0:	490f      	ldr	r1, [pc, #60]	@ (8005500 <HAL_DMA_Abort_IT+0xcc>)
 80054c2:	400a      	ands	r2, r1
 80054c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80054ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2225      	movs	r2, #37	@ 0x25
 80054d4:	2101      	movs	r1, #1
 80054d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2224      	movs	r2, #36	@ 0x24
 80054dc:	2100      	movs	r1, #0
 80054de:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	0010      	movs	r0, r2
 80054f0:	4798      	blx	r3
    }
  }
  return status;
 80054f2:	230f      	movs	r3, #15
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	781b      	ldrb	r3, [r3, #0]
}
 80054f8:	0018      	movs	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	b004      	add	sp, #16
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	fffffeff 	.word	0xfffffeff
 8005504:	40020000 	.word	0x40020000

08005508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005516:	e147      	b.n	80057a8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2101      	movs	r1, #1
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4091      	lsls	r1, r2
 8005522:	000a      	movs	r2, r1
 8005524:	4013      	ands	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d100      	bne.n	8005530 <HAL_GPIO_Init+0x28>
 800552e:	e138      	b.n	80057a2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2203      	movs	r2, #3
 8005536:	4013      	ands	r3, r2
 8005538:	2b01      	cmp	r3, #1
 800553a:	d005      	beq.n	8005548 <HAL_GPIO_Init+0x40>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2203      	movs	r2, #3
 8005542:	4013      	ands	r3, r2
 8005544:	2b02      	cmp	r3, #2
 8005546:	d130      	bne.n	80055aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	2203      	movs	r2, #3
 8005554:	409a      	lsls	r2, r3
 8005556:	0013      	movs	r3, r2
 8005558:	43da      	mvns	r2, r3
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4013      	ands	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	409a      	lsls	r2, r3
 800556a:	0013      	movs	r3, r2
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800557e:	2201      	movs	r2, #1
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	409a      	lsls	r2, r3
 8005584:	0013      	movs	r3, r2
 8005586:	43da      	mvns	r2, r3
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	4013      	ands	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	091b      	lsrs	r3, r3, #4
 8005594:	2201      	movs	r2, #1
 8005596:	401a      	ands	r2, r3
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	409a      	lsls	r2, r3
 800559c:	0013      	movs	r3, r2
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2203      	movs	r2, #3
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d017      	beq.n	80055e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	2203      	movs	r2, #3
 80055c2:	409a      	lsls	r2, r3
 80055c4:	0013      	movs	r3, r2
 80055c6:	43da      	mvns	r2, r3
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4013      	ands	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	409a      	lsls	r2, r3
 80055d8:	0013      	movs	r3, r2
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2203      	movs	r2, #3
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d123      	bne.n	800563a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	08da      	lsrs	r2, r3, #3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3208      	adds	r2, #8
 80055fa:	0092      	lsls	r2, r2, #2
 80055fc:	58d3      	ldr	r3, [r2, r3]
 80055fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2207      	movs	r2, #7
 8005604:	4013      	ands	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	220f      	movs	r2, #15
 800560a:	409a      	lsls	r2, r3
 800560c:	0013      	movs	r3, r2
 800560e:	43da      	mvns	r2, r3
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4013      	ands	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2107      	movs	r1, #7
 800561e:	400b      	ands	r3, r1
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	409a      	lsls	r2, r3
 8005624:	0013      	movs	r3, r2
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	08da      	lsrs	r2, r3, #3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3208      	adds	r2, #8
 8005634:	0092      	lsls	r2, r2, #2
 8005636:	6939      	ldr	r1, [r7, #16]
 8005638:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	2203      	movs	r2, #3
 8005646:	409a      	lsls	r2, r3
 8005648:	0013      	movs	r3, r2
 800564a:	43da      	mvns	r2, r3
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	4013      	ands	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2203      	movs	r2, #3
 8005658:	401a      	ands	r2, r3
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	409a      	lsls	r2, r3
 8005660:	0013      	movs	r3, r2
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	23c0      	movs	r3, #192	@ 0xc0
 8005674:	029b      	lsls	r3, r3, #10
 8005676:	4013      	ands	r3, r2
 8005678:	d100      	bne.n	800567c <HAL_GPIO_Init+0x174>
 800567a:	e092      	b.n	80057a2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800567c:	4a50      	ldr	r2, [pc, #320]	@ (80057c0 <HAL_GPIO_Init+0x2b8>)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	089b      	lsrs	r3, r3, #2
 8005682:	3318      	adds	r3, #24
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	589b      	ldr	r3, [r3, r2]
 8005688:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2203      	movs	r2, #3
 800568e:	4013      	ands	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	220f      	movs	r2, #15
 8005694:	409a      	lsls	r2, r3
 8005696:	0013      	movs	r3, r2
 8005698:	43da      	mvns	r2, r3
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4013      	ands	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	23a0      	movs	r3, #160	@ 0xa0
 80056a4:	05db      	lsls	r3, r3, #23
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d013      	beq.n	80056d2 <HAL_GPIO_Init+0x1ca>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a45      	ldr	r2, [pc, #276]	@ (80057c4 <HAL_GPIO_Init+0x2bc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00d      	beq.n	80056ce <HAL_GPIO_Init+0x1c6>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a44      	ldr	r2, [pc, #272]	@ (80057c8 <HAL_GPIO_Init+0x2c0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d007      	beq.n	80056ca <HAL_GPIO_Init+0x1c2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a43      	ldr	r2, [pc, #268]	@ (80057cc <HAL_GPIO_Init+0x2c4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d101      	bne.n	80056c6 <HAL_GPIO_Init+0x1be>
 80056c2:	2303      	movs	r3, #3
 80056c4:	e006      	b.n	80056d4 <HAL_GPIO_Init+0x1cc>
 80056c6:	2305      	movs	r3, #5
 80056c8:	e004      	b.n	80056d4 <HAL_GPIO_Init+0x1cc>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e002      	b.n	80056d4 <HAL_GPIO_Init+0x1cc>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <HAL_GPIO_Init+0x1cc>
 80056d2:	2300      	movs	r3, #0
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	2103      	movs	r1, #3
 80056d8:	400a      	ands	r2, r1
 80056da:	00d2      	lsls	r2, r2, #3
 80056dc:	4093      	lsls	r3, r2
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80056e4:	4936      	ldr	r1, [pc, #216]	@ (80057c0 <HAL_GPIO_Init+0x2b8>)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	089b      	lsrs	r3, r3, #2
 80056ea:	3318      	adds	r3, #24
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056f2:	4b33      	ldr	r3, [pc, #204]	@ (80057c0 <HAL_GPIO_Init+0x2b8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	43da      	mvns	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4013      	ands	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	2380      	movs	r3, #128	@ 0x80
 8005708:	035b      	lsls	r3, r3, #13
 800570a:	4013      	ands	r3, r2
 800570c:	d003      	beq.n	8005716 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005716:	4b2a      	ldr	r3, [pc, #168]	@ (80057c0 <HAL_GPIO_Init+0x2b8>)
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800571c:	4b28      	ldr	r3, [pc, #160]	@ (80057c0 <HAL_GPIO_Init+0x2b8>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	43da      	mvns	r2, r3
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4013      	ands	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	2380      	movs	r3, #128	@ 0x80
 8005732:	039b      	lsls	r3, r3, #14
 8005734:	4013      	ands	r3, r2
 8005736:	d003      	beq.n	8005740 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005740:	4b1f      	ldr	r3, [pc, #124]	@ (80057c0 <HAL_GPIO_Init+0x2b8>)
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005746:	4a1e      	ldr	r2, [pc, #120]	@ (80057c0 <HAL_GPIO_Init+0x2b8>)
 8005748:	2384      	movs	r3, #132	@ 0x84
 800574a:	58d3      	ldr	r3, [r2, r3]
 800574c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	43da      	mvns	r2, r3
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4013      	ands	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	2380      	movs	r3, #128	@ 0x80
 800575e:	029b      	lsls	r3, r3, #10
 8005760:	4013      	ands	r3, r2
 8005762:	d003      	beq.n	800576c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800576c:	4914      	ldr	r1, [pc, #80]	@ (80057c0 <HAL_GPIO_Init+0x2b8>)
 800576e:	2284      	movs	r2, #132	@ 0x84
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005774:	4a12      	ldr	r2, [pc, #72]	@ (80057c0 <HAL_GPIO_Init+0x2b8>)
 8005776:	2380      	movs	r3, #128	@ 0x80
 8005778:	58d3      	ldr	r3, [r2, r3]
 800577a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	43da      	mvns	r2, r3
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4013      	ands	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	2380      	movs	r3, #128	@ 0x80
 800578c:	025b      	lsls	r3, r3, #9
 800578e:	4013      	ands	r3, r2
 8005790:	d003      	beq.n	800579a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800579a:	4909      	ldr	r1, [pc, #36]	@ (80057c0 <HAL_GPIO_Init+0x2b8>)
 800579c:	2280      	movs	r2, #128	@ 0x80
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	3301      	adds	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	40da      	lsrs	r2, r3
 80057b0:	1e13      	subs	r3, r2, #0
 80057b2:	d000      	beq.n	80057b6 <HAL_GPIO_Init+0x2ae>
 80057b4:	e6b0      	b.n	8005518 <HAL_GPIO_Init+0x10>
  }
}
 80057b6:	46c0      	nop			@ (mov r8, r8)
 80057b8:	46c0      	nop			@ (mov r8, r8)
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b006      	add	sp, #24
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40021800 	.word	0x40021800
 80057c4:	50000400 	.word	0x50000400
 80057c8:	50000800 	.word	0x50000800
 80057cc:	50000c00 	.word	0x50000c00

080057d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	0008      	movs	r0, r1
 80057da:	0011      	movs	r1, r2
 80057dc:	1cbb      	adds	r3, r7, #2
 80057de:	1c02      	adds	r2, r0, #0
 80057e0:	801a      	strh	r2, [r3, #0]
 80057e2:	1c7b      	adds	r3, r7, #1
 80057e4:	1c0a      	adds	r2, r1, #0
 80057e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057e8:	1c7b      	adds	r3, r7, #1
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057f0:	1cbb      	adds	r3, r7, #2
 80057f2:	881a      	ldrh	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057f8:	e003      	b.n	8005802 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057fa:	1cbb      	adds	r3, r7, #2
 80057fc:	881a      	ldrh	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	46bd      	mov	sp, r7
 8005806:	b002      	add	sp, #8
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005814:	4b19      	ldr	r3, [pc, #100]	@ (800587c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a19      	ldr	r2, [pc, #100]	@ (8005880 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800581a:	4013      	ands	r3, r2
 800581c:	0019      	movs	r1, r3
 800581e:	4b17      	ldr	r3, [pc, #92]	@ (800587c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	430a      	orrs	r2, r1
 8005824:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	2380      	movs	r3, #128	@ 0x80
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	429a      	cmp	r2, r3
 800582e:	d11f      	bne.n	8005870 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005830:	4b14      	ldr	r3, [pc, #80]	@ (8005884 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	0013      	movs	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	189b      	adds	r3, r3, r2
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	4912      	ldr	r1, [pc, #72]	@ (8005888 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800583e:	0018      	movs	r0, r3
 8005840:	f7fa fc7c 	bl	800013c <__udivsi3>
 8005844:	0003      	movs	r3, r0
 8005846:	3301      	adds	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800584a:	e008      	b.n	800585e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3b01      	subs	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	e001      	b.n	800585e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e009      	b.n	8005872 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800585e:	4b07      	ldr	r3, [pc, #28]	@ (800587c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	2380      	movs	r3, #128	@ 0x80
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	401a      	ands	r2, r3
 8005868:	2380      	movs	r3, #128	@ 0x80
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	429a      	cmp	r2, r3
 800586e:	d0ed      	beq.n	800584c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	0018      	movs	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	b004      	add	sp, #16
 8005878:	bd80      	pop	{r7, pc}
 800587a:	46c0      	nop			@ (mov r8, r8)
 800587c:	40007000 	.word	0x40007000
 8005880:	fffff9ff 	.word	0xfffff9ff
 8005884:	20000000 	.word	0x20000000
 8005888:	000f4240 	.word	0x000f4240

0800588c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005890:	4b03      	ldr	r3, [pc, #12]	@ (80058a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	23e0      	movs	r3, #224	@ 0xe0
 8005896:	01db      	lsls	r3, r3, #7
 8005898:	4013      	ands	r3, r2
}
 800589a:	0018      	movs	r0, r3
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40021000 	.word	0x40021000

080058a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e2fe      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2201      	movs	r2, #1
 80058bc:	4013      	ands	r3, r2
 80058be:	d100      	bne.n	80058c2 <HAL_RCC_OscConfig+0x1e>
 80058c0:	e07c      	b.n	80059bc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058c2:	4bc3      	ldr	r3, [pc, #780]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2238      	movs	r2, #56	@ 0x38
 80058c8:	4013      	ands	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058cc:	4bc0      	ldr	r3, [pc, #768]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2203      	movs	r2, #3
 80058d2:	4013      	ands	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b10      	cmp	r3, #16
 80058da:	d102      	bne.n	80058e2 <HAL_RCC_OscConfig+0x3e>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d002      	beq.n	80058e8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d10b      	bne.n	8005900 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e8:	4bb9      	ldr	r3, [pc, #740]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	2380      	movs	r3, #128	@ 0x80
 80058ee:	029b      	lsls	r3, r3, #10
 80058f0:	4013      	ands	r3, r2
 80058f2:	d062      	beq.n	80059ba <HAL_RCC_OscConfig+0x116>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d15e      	bne.n	80059ba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e2d9      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	2380      	movs	r3, #128	@ 0x80
 8005906:	025b      	lsls	r3, r3, #9
 8005908:	429a      	cmp	r2, r3
 800590a:	d107      	bne.n	800591c <HAL_RCC_OscConfig+0x78>
 800590c:	4bb0      	ldr	r3, [pc, #704]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	4baf      	ldr	r3, [pc, #700]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005912:	2180      	movs	r1, #128	@ 0x80
 8005914:	0249      	lsls	r1, r1, #9
 8005916:	430a      	orrs	r2, r1
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	e020      	b.n	800595e <HAL_RCC_OscConfig+0xba>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	23a0      	movs	r3, #160	@ 0xa0
 8005922:	02db      	lsls	r3, r3, #11
 8005924:	429a      	cmp	r2, r3
 8005926:	d10e      	bne.n	8005946 <HAL_RCC_OscConfig+0xa2>
 8005928:	4ba9      	ldr	r3, [pc, #676]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4ba8      	ldr	r3, [pc, #672]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 800592e:	2180      	movs	r1, #128	@ 0x80
 8005930:	02c9      	lsls	r1, r1, #11
 8005932:	430a      	orrs	r2, r1
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	4ba6      	ldr	r3, [pc, #664]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4ba5      	ldr	r3, [pc, #660]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 800593c:	2180      	movs	r1, #128	@ 0x80
 800593e:	0249      	lsls	r1, r1, #9
 8005940:	430a      	orrs	r2, r1
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	e00b      	b.n	800595e <HAL_RCC_OscConfig+0xba>
 8005946:	4ba2      	ldr	r3, [pc, #648]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	4ba1      	ldr	r3, [pc, #644]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 800594c:	49a1      	ldr	r1, [pc, #644]	@ (8005bd4 <HAL_RCC_OscConfig+0x330>)
 800594e:	400a      	ands	r2, r1
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	4b9f      	ldr	r3, [pc, #636]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b9e      	ldr	r3, [pc, #632]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005958:	499f      	ldr	r1, [pc, #636]	@ (8005bd8 <HAL_RCC_OscConfig+0x334>)
 800595a:	400a      	ands	r2, r1
 800595c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d014      	beq.n	8005990 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005966:	f7fe fb4d 	bl	8004004 <HAL_GetTick>
 800596a:	0003      	movs	r3, r0
 800596c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005970:	f7fe fb48 	bl	8004004 <HAL_GetTick>
 8005974:	0002      	movs	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b64      	cmp	r3, #100	@ 0x64
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e298      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005982:	4b93      	ldr	r3, [pc, #588]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	2380      	movs	r3, #128	@ 0x80
 8005988:	029b      	lsls	r3, r3, #10
 800598a:	4013      	ands	r3, r2
 800598c:	d0f0      	beq.n	8005970 <HAL_RCC_OscConfig+0xcc>
 800598e:	e015      	b.n	80059bc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fe fb38 	bl	8004004 <HAL_GetTick>
 8005994:	0003      	movs	r3, r0
 8005996:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800599a:	f7fe fb33 	bl	8004004 <HAL_GetTick>
 800599e:	0002      	movs	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b64      	cmp	r3, #100	@ 0x64
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e283      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059ac:	4b88      	ldr	r3, [pc, #544]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	2380      	movs	r3, #128	@ 0x80
 80059b2:	029b      	lsls	r3, r3, #10
 80059b4:	4013      	ands	r3, r2
 80059b6:	d1f0      	bne.n	800599a <HAL_RCC_OscConfig+0xf6>
 80059b8:	e000      	b.n	80059bc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ba:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2202      	movs	r2, #2
 80059c2:	4013      	ands	r3, r2
 80059c4:	d100      	bne.n	80059c8 <HAL_RCC_OscConfig+0x124>
 80059c6:	e099      	b.n	8005afc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059c8:	4b81      	ldr	r3, [pc, #516]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2238      	movs	r2, #56	@ 0x38
 80059ce:	4013      	ands	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059d2:	4b7f      	ldr	r3, [pc, #508]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	2203      	movs	r2, #3
 80059d8:	4013      	ands	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b10      	cmp	r3, #16
 80059e0:	d102      	bne.n	80059e8 <HAL_RCC_OscConfig+0x144>
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d002      	beq.n	80059ee <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d135      	bne.n	8005a5a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059ee:	4b78      	ldr	r3, [pc, #480]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	2380      	movs	r3, #128	@ 0x80
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4013      	ands	r3, r2
 80059f8:	d005      	beq.n	8005a06 <HAL_RCC_OscConfig+0x162>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e256      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a06:	4b72      	ldr	r3, [pc, #456]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	4a74      	ldr	r2, [pc, #464]	@ (8005bdc <HAL_RCC_OscConfig+0x338>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	0019      	movs	r1, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	021a      	lsls	r2, r3, #8
 8005a16:	4b6e      	ldr	r3, [pc, #440]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d112      	bne.n	8005a48 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005a22:	4b6b      	ldr	r3, [pc, #428]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a6e      	ldr	r2, [pc, #440]	@ (8005be0 <HAL_RCC_OscConfig+0x33c>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	0019      	movs	r1, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	4b67      	ldr	r3, [pc, #412]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005a32:	430a      	orrs	r2, r1
 8005a34:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005a36:	4b66      	ldr	r3, [pc, #408]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	0adb      	lsrs	r3, r3, #11
 8005a3c:	2207      	movs	r2, #7
 8005a3e:	4013      	ands	r3, r2
 8005a40:	4a68      	ldr	r2, [pc, #416]	@ (8005be4 <HAL_RCC_OscConfig+0x340>)
 8005a42:	40da      	lsrs	r2, r3
 8005a44:	4b68      	ldr	r3, [pc, #416]	@ (8005be8 <HAL_RCC_OscConfig+0x344>)
 8005a46:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a48:	4b68      	ldr	r3, [pc, #416]	@ (8005bec <HAL_RCC_OscConfig+0x348>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7fe fa7d 	bl	8003f4c <HAL_InitTick>
 8005a52:	1e03      	subs	r3, r0, #0
 8005a54:	d051      	beq.n	8005afa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e22c      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d030      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005a62:	4b5b      	ldr	r3, [pc, #364]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a5e      	ldr	r2, [pc, #376]	@ (8005be0 <HAL_RCC_OscConfig+0x33c>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	0019      	movs	r1, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	4b57      	ldr	r3, [pc, #348]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005a72:	430a      	orrs	r2, r1
 8005a74:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005a76:	4b56      	ldr	r3, [pc, #344]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b55      	ldr	r3, [pc, #340]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005a7c:	2180      	movs	r1, #128	@ 0x80
 8005a7e:	0049      	lsls	r1, r1, #1
 8005a80:	430a      	orrs	r2, r1
 8005a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fe fabe 	bl	8004004 <HAL_GetTick>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a8e:	f7fe fab9 	bl	8004004 <HAL_GetTick>
 8005a92:	0002      	movs	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e209      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	2380      	movs	r3, #128	@ 0x80
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	d0f0      	beq.n	8005a8e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aac:	4b48      	ldr	r3, [pc, #288]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	4a4a      	ldr	r2, [pc, #296]	@ (8005bdc <HAL_RCC_OscConfig+0x338>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	0019      	movs	r1, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	021a      	lsls	r2, r3, #8
 8005abc:	4b44      	ldr	r3, [pc, #272]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]
 8005ac2:	e01b      	b.n	8005afc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005ac4:	4b42      	ldr	r3, [pc, #264]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	4b41      	ldr	r3, [pc, #260]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005aca:	4949      	ldr	r1, [pc, #292]	@ (8005bf0 <HAL_RCC_OscConfig+0x34c>)
 8005acc:	400a      	ands	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fe fa98 	bl	8004004 <HAL_GetTick>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ad8:	e008      	b.n	8005aec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ada:	f7fe fa93 	bl	8004004 <HAL_GetTick>
 8005ade:	0002      	movs	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e1e3      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005aec:	4b38      	ldr	r3, [pc, #224]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	2380      	movs	r3, #128	@ 0x80
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4013      	ands	r3, r2
 8005af6:	d1f0      	bne.n	8005ada <HAL_RCC_OscConfig+0x236>
 8005af8:	e000      	b.n	8005afc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005afa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2208      	movs	r2, #8
 8005b02:	4013      	ands	r3, r2
 8005b04:	d047      	beq.n	8005b96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005b06:	4b32      	ldr	r3, [pc, #200]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2238      	movs	r2, #56	@ 0x38
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b18      	cmp	r3, #24
 8005b10:	d10a      	bne.n	8005b28 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005b12:	4b2f      	ldr	r3, [pc, #188]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b16:	2202      	movs	r2, #2
 8005b18:	4013      	ands	r3, r2
 8005b1a:	d03c      	beq.n	8005b96 <HAL_RCC_OscConfig+0x2f2>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d138      	bne.n	8005b96 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e1c5      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d019      	beq.n	8005b64 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005b30:	4b27      	ldr	r3, [pc, #156]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005b32:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b34:	4b26      	ldr	r3, [pc, #152]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005b36:	2101      	movs	r1, #1
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3c:	f7fe fa62 	bl	8004004 <HAL_GetTick>
 8005b40:	0003      	movs	r3, r0
 8005b42:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b46:	f7fe fa5d 	bl	8004004 <HAL_GetTick>
 8005b4a:	0002      	movs	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e1ad      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b58:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d0f1      	beq.n	8005b46 <HAL_RCC_OscConfig+0x2a2>
 8005b62:	e018      	b.n	8005b96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005b64:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005b66:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b68:	4b19      	ldr	r3, [pc, #100]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	438a      	bics	r2, r1
 8005b6e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b70:	f7fe fa48 	bl	8004004 <HAL_GetTick>
 8005b74:	0003      	movs	r3, r0
 8005b76:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b7a:	f7fe fa43 	bl	8004004 <HAL_GetTick>
 8005b7e:	0002      	movs	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e193      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b8c:	4b10      	ldr	r3, [pc, #64]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b90:	2202      	movs	r2, #2
 8005b92:	4013      	ands	r3, r2
 8005b94:	d1f1      	bne.n	8005b7a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d100      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x2fe>
 8005ba0:	e0c6      	b.n	8005d30 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba2:	231f      	movs	r3, #31
 8005ba4:	18fb      	adds	r3, r7, r3
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005baa:	4b09      	ldr	r3, [pc, #36]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2238      	movs	r2, #56	@ 0x38
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d11e      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005bb6:	4b06      	ldr	r3, [pc, #24]	@ (8005bd0 <HAL_RCC_OscConfig+0x32c>)
 8005bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bba:	2202      	movs	r2, #2
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	d100      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x31e>
 8005bc0:	e0b6      	b.n	8005d30 <HAL_RCC_OscConfig+0x48c>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d000      	beq.n	8005bcc <HAL_RCC_OscConfig+0x328>
 8005bca:	e0b1      	b.n	8005d30 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e171      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	fffeffff 	.word	0xfffeffff
 8005bd8:	fffbffff 	.word	0xfffbffff
 8005bdc:	ffff80ff 	.word	0xffff80ff
 8005be0:	ffffc7ff 	.word	0xffffc7ff
 8005be4:	00f42400 	.word	0x00f42400
 8005be8:	20000000 	.word	0x20000000
 8005bec:	20000004 	.word	0x20000004
 8005bf0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bf4:	4bb1      	ldr	r3, [pc, #708]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005bf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bf8:	2380      	movs	r3, #128	@ 0x80
 8005bfa:	055b      	lsls	r3, r3, #21
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d101      	bne.n	8005c04 <HAL_RCC_OscConfig+0x360>
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <HAL_RCC_OscConfig+0x362>
 8005c04:	2300      	movs	r3, #0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d011      	beq.n	8005c2e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005c0a:	4bac      	ldr	r3, [pc, #688]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005c0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c0e:	4bab      	ldr	r3, [pc, #684]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005c10:	2180      	movs	r1, #128	@ 0x80
 8005c12:	0549      	lsls	r1, r1, #21
 8005c14:	430a      	orrs	r2, r1
 8005c16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c18:	4ba8      	ldr	r3, [pc, #672]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005c1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c1c:	2380      	movs	r3, #128	@ 0x80
 8005c1e:	055b      	lsls	r3, r3, #21
 8005c20:	4013      	ands	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005c26:	231f      	movs	r3, #31
 8005c28:	18fb      	adds	r3, r7, r3
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c2e:	4ba4      	ldr	r3, [pc, #656]	@ (8005ec0 <HAL_RCC_OscConfig+0x61c>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	2380      	movs	r3, #128	@ 0x80
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	4013      	ands	r3, r2
 8005c38:	d11a      	bne.n	8005c70 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c3a:	4ba1      	ldr	r3, [pc, #644]	@ (8005ec0 <HAL_RCC_OscConfig+0x61c>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4ba0      	ldr	r3, [pc, #640]	@ (8005ec0 <HAL_RCC_OscConfig+0x61c>)
 8005c40:	2180      	movs	r1, #128	@ 0x80
 8005c42:	0049      	lsls	r1, r1, #1
 8005c44:	430a      	orrs	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005c48:	f7fe f9dc 	bl	8004004 <HAL_GetTick>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c52:	f7fe f9d7 	bl	8004004 <HAL_GetTick>
 8005c56:	0002      	movs	r2, r0
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e127      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c64:	4b96      	ldr	r3, [pc, #600]	@ (8005ec0 <HAL_RCC_OscConfig+0x61c>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	2380      	movs	r3, #128	@ 0x80
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d0f0      	beq.n	8005c52 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d106      	bne.n	8005c86 <HAL_RCC_OscConfig+0x3e2>
 8005c78:	4b90      	ldr	r3, [pc, #576]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005c7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c7c:	4b8f      	ldr	r3, [pc, #572]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005c7e:	2101      	movs	r1, #1
 8005c80:	430a      	orrs	r2, r1
 8005c82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c84:	e01c      	b.n	8005cc0 <HAL_RCC_OscConfig+0x41c>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b05      	cmp	r3, #5
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x404>
 8005c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005c90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c92:	4b8a      	ldr	r3, [pc, #552]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005c94:	2104      	movs	r1, #4
 8005c96:	430a      	orrs	r2, r1
 8005c98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c9a:	4b88      	ldr	r3, [pc, #544]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005c9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c9e:	4b87      	ldr	r3, [pc, #540]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ca6:	e00b      	b.n	8005cc0 <HAL_RCC_OscConfig+0x41c>
 8005ca8:	4b84      	ldr	r3, [pc, #528]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005caa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005cac:	4b83      	ldr	r3, [pc, #524]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005cae:	2101      	movs	r1, #1
 8005cb0:	438a      	bics	r2, r1
 8005cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005cb4:	4b81      	ldr	r3, [pc, #516]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005cb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005cb8:	4b80      	ldr	r3, [pc, #512]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005cba:	2104      	movs	r1, #4
 8005cbc:	438a      	bics	r2, r1
 8005cbe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d014      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc8:	f7fe f99c 	bl	8004004 <HAL_GetTick>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cd0:	e009      	b.n	8005ce6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd2:	f7fe f997 	bl	8004004 <HAL_GetTick>
 8005cd6:	0002      	movs	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	4a79      	ldr	r2, [pc, #484]	@ (8005ec4 <HAL_RCC_OscConfig+0x620>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e0e6      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ce6:	4b75      	ldr	r3, [pc, #468]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cea:	2202      	movs	r2, #2
 8005cec:	4013      	ands	r3, r2
 8005cee:	d0f0      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x42e>
 8005cf0:	e013      	b.n	8005d1a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf2:	f7fe f987 	bl	8004004 <HAL_GetTick>
 8005cf6:	0003      	movs	r3, r0
 8005cf8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cfa:	e009      	b.n	8005d10 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cfc:	f7fe f982 	bl	8004004 <HAL_GetTick>
 8005d00:	0002      	movs	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	4a6f      	ldr	r2, [pc, #444]	@ (8005ec4 <HAL_RCC_OscConfig+0x620>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e0d1      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d10:	4b6a      	ldr	r3, [pc, #424]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d14:	2202      	movs	r2, #2
 8005d16:	4013      	ands	r3, r2
 8005d18:	d1f0      	bne.n	8005cfc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005d1a:	231f      	movs	r3, #31
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d105      	bne.n	8005d30 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005d24:	4b65      	ldr	r3, [pc, #404]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d28:	4b64      	ldr	r3, [pc, #400]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005d2a:	4967      	ldr	r1, [pc, #412]	@ (8005ec8 <HAL_RCC_OscConfig+0x624>)
 8005d2c:	400a      	ands	r2, r1
 8005d2e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d100      	bne.n	8005d3a <HAL_RCC_OscConfig+0x496>
 8005d38:	e0bb      	b.n	8005eb2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d3a:	4b60      	ldr	r3, [pc, #384]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2238      	movs	r2, #56	@ 0x38
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b10      	cmp	r3, #16
 8005d44:	d100      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4a4>
 8005d46:	e07b      	b.n	8005e40 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d156      	bne.n	8005dfe <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d50:	4b5a      	ldr	r3, [pc, #360]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	4b59      	ldr	r3, [pc, #356]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005d56:	495d      	ldr	r1, [pc, #372]	@ (8005ecc <HAL_RCC_OscConfig+0x628>)
 8005d58:	400a      	ands	r2, r1
 8005d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5c:	f7fe f952 	bl	8004004 <HAL_GetTick>
 8005d60:	0003      	movs	r3, r0
 8005d62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d64:	e008      	b.n	8005d78 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d66:	f7fe f94d 	bl	8004004 <HAL_GetTick>
 8005d6a:	0002      	movs	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e09d      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d78:	4b50      	ldr	r3, [pc, #320]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	2380      	movs	r3, #128	@ 0x80
 8005d7e:	049b      	lsls	r3, r3, #18
 8005d80:	4013      	ands	r3, r2
 8005d82:	d1f0      	bne.n	8005d66 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d84:	4b4d      	ldr	r3, [pc, #308]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4a51      	ldr	r2, [pc, #324]	@ (8005ed0 <HAL_RCC_OscConfig+0x62c>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	0019      	movs	r1, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1a      	ldr	r2, [r3, #32]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db0:	431a      	orrs	r2, r3
 8005db2:	4b42      	ldr	r3, [pc, #264]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005db4:	430a      	orrs	r2, r1
 8005db6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005db8:	4b40      	ldr	r3, [pc, #256]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	4b3f      	ldr	r3, [pc, #252]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005dbe:	2180      	movs	r1, #128	@ 0x80
 8005dc0:	0449      	lsls	r1, r1, #17
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	4b3c      	ldr	r3, [pc, #240]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005dcc:	2180      	movs	r1, #128	@ 0x80
 8005dce:	0549      	lsls	r1, r1, #21
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7fe f916 	bl	8004004 <HAL_GetTick>
 8005dd8:	0003      	movs	r3, r0
 8005dda:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dde:	f7fe f911 	bl	8004004 <HAL_GetTick>
 8005de2:	0002      	movs	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e061      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005df0:	4b32      	ldr	r3, [pc, #200]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	2380      	movs	r3, #128	@ 0x80
 8005df6:	049b      	lsls	r3, r3, #18
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d0f0      	beq.n	8005dde <HAL_RCC_OscConfig+0x53a>
 8005dfc:	e059      	b.n	8005eb2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4b2e      	ldr	r3, [pc, #184]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005e04:	4931      	ldr	r1, [pc, #196]	@ (8005ecc <HAL_RCC_OscConfig+0x628>)
 8005e06:	400a      	ands	r2, r1
 8005e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0a:	f7fe f8fb 	bl	8004004 <HAL_GetTick>
 8005e0e:	0003      	movs	r3, r0
 8005e10:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e14:	f7fe f8f6 	bl	8004004 <HAL_GetTick>
 8005e18:	0002      	movs	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e046      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e26:	4b25      	ldr	r3, [pc, #148]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	2380      	movs	r3, #128	@ 0x80
 8005e2c:	049b      	lsls	r3, r3, #18
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d1f0      	bne.n	8005e14 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005e32:	4b22      	ldr	r3, [pc, #136]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	4b21      	ldr	r3, [pc, #132]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005e38:	4926      	ldr	r1, [pc, #152]	@ (8005ed4 <HAL_RCC_OscConfig+0x630>)
 8005e3a:	400a      	ands	r2, r1
 8005e3c:	60da      	str	r2, [r3, #12]
 8005e3e:	e038      	b.n	8005eb2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e033      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ebc <HAL_RCC_OscConfig+0x618>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2203      	movs	r2, #3
 8005e56:	401a      	ands	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d126      	bne.n	8005eae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2270      	movs	r2, #112	@ 0x70
 8005e64:	401a      	ands	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d11f      	bne.n	8005eae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	23fe      	movs	r3, #254	@ 0xfe
 8005e72:	01db      	lsls	r3, r3, #7
 8005e74:	401a      	ands	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d116      	bne.n	8005eae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	23f8      	movs	r3, #248	@ 0xf8
 8005e84:	039b      	lsls	r3, r3, #14
 8005e86:	401a      	ands	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d10e      	bne.n	8005eae <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	23e0      	movs	r3, #224	@ 0xe0
 8005e94:	051b      	lsls	r3, r3, #20
 8005e96:	401a      	ands	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d106      	bne.n	8005eae <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	0f5b      	lsrs	r3, r3, #29
 8005ea4:	075a      	lsls	r2, r3, #29
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d001      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	b008      	add	sp, #32
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	40007000 	.word	0x40007000
 8005ec4:	00001388 	.word	0x00001388
 8005ec8:	efffffff 	.word	0xefffffff
 8005ecc:	feffffff 	.word	0xfeffffff
 8005ed0:	11c1808c 	.word	0x11c1808c
 8005ed4:	eefefffc 	.word	0xeefefffc

08005ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e0e9      	b.n	80060c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005eec:	4b76      	ldr	r3, [pc, #472]	@ (80060c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2207      	movs	r2, #7
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d91e      	bls.n	8005f38 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efa:	4b73      	ldr	r3, [pc, #460]	@ (80060c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2207      	movs	r2, #7
 8005f00:	4393      	bics	r3, r2
 8005f02:	0019      	movs	r1, r3
 8005f04:	4b70      	ldr	r3, [pc, #448]	@ (80060c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f0c:	f7fe f87a 	bl	8004004 <HAL_GetTick>
 8005f10:	0003      	movs	r3, r0
 8005f12:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f14:	e009      	b.n	8005f2a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f16:	f7fe f875 	bl	8004004 <HAL_GetTick>
 8005f1a:	0002      	movs	r2, r0
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	4a6a      	ldr	r2, [pc, #424]	@ (80060cc <HAL_RCC_ClockConfig+0x1f4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e0ca      	b.n	80060c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f2a:	4b67      	ldr	r3, [pc, #412]	@ (80060c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2207      	movs	r2, #7
 8005f30:	4013      	ands	r3, r2
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d1ee      	bne.n	8005f16 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d015      	beq.n	8005f6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2204      	movs	r2, #4
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d006      	beq.n	8005f5a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005f4c:	4b60      	ldr	r3, [pc, #384]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	4b5f      	ldr	r3, [pc, #380]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f52:	21e0      	movs	r1, #224	@ 0xe0
 8005f54:	01c9      	lsls	r1, r1, #7
 8005f56:	430a      	orrs	r2, r1
 8005f58:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	4a5d      	ldr	r2, [pc, #372]	@ (80060d4 <HAL_RCC_ClockConfig+0x1fc>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	0019      	movs	r1, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	4b59      	ldr	r3, [pc, #356]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2201      	movs	r2, #1
 8005f74:	4013      	ands	r3, r2
 8005f76:	d057      	beq.n	8006028 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d107      	bne.n	8005f90 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f80:	4b53      	ldr	r3, [pc, #332]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	2380      	movs	r3, #128	@ 0x80
 8005f86:	029b      	lsls	r3, r3, #10
 8005f88:	4013      	ands	r3, r2
 8005f8a:	d12b      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e097      	b.n	80060c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d107      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f98:	4b4d      	ldr	r3, [pc, #308]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	2380      	movs	r3, #128	@ 0x80
 8005f9e:	049b      	lsls	r3, r3, #18
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d11f      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e08b      	b.n	80060c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d107      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fb0:	4b47      	ldr	r3, [pc, #284]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	2380      	movs	r3, #128	@ 0x80
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	4013      	ands	r3, r2
 8005fba:	d113      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e07f      	b.n	80060c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d106      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fc8:	4b41      	ldr	r3, [pc, #260]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fcc:	2202      	movs	r2, #2
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d108      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e074      	b.n	80060c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fda:	2202      	movs	r2, #2
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d101      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e06d      	b.n	80060c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fe4:	4b3a      	ldr	r3, [pc, #232]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2207      	movs	r2, #7
 8005fea:	4393      	bics	r3, r2
 8005fec:	0019      	movs	r1, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	4b37      	ldr	r3, [pc, #220]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff8:	f7fe f804 	bl	8004004 <HAL_GetTick>
 8005ffc:	0003      	movs	r3, r0
 8005ffe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006000:	e009      	b.n	8006016 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006002:	f7fd ffff 	bl	8004004 <HAL_GetTick>
 8006006:	0002      	movs	r2, r0
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	4a2f      	ldr	r2, [pc, #188]	@ (80060cc <HAL_RCC_ClockConfig+0x1f4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e054      	b.n	80060c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006016:	4b2e      	ldr	r3, [pc, #184]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2238      	movs	r2, #56	@ 0x38
 800601c:	401a      	ands	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	429a      	cmp	r2, r3
 8006026:	d1ec      	bne.n	8006002 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006028:	4b27      	ldr	r3, [pc, #156]	@ (80060c8 <HAL_RCC_ClockConfig+0x1f0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2207      	movs	r2, #7
 800602e:	4013      	ands	r3, r2
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d21e      	bcs.n	8006074 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006036:	4b24      	ldr	r3, [pc, #144]	@ (80060c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2207      	movs	r2, #7
 800603c:	4393      	bics	r3, r2
 800603e:	0019      	movs	r1, r3
 8006040:	4b21      	ldr	r3, [pc, #132]	@ (80060c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006048:	f7fd ffdc 	bl	8004004 <HAL_GetTick>
 800604c:	0003      	movs	r3, r0
 800604e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006050:	e009      	b.n	8006066 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006052:	f7fd ffd7 	bl	8004004 <HAL_GetTick>
 8006056:	0002      	movs	r2, r0
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	4a1b      	ldr	r2, [pc, #108]	@ (80060cc <HAL_RCC_ClockConfig+0x1f4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e02c      	b.n	80060c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006066:	4b18      	ldr	r3, [pc, #96]	@ (80060c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2207      	movs	r2, #7
 800606c:	4013      	ands	r3, r2
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d1ee      	bne.n	8006052 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2204      	movs	r2, #4
 800607a:	4013      	ands	r3, r2
 800607c:	d009      	beq.n	8006092 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800607e:	4b14      	ldr	r3, [pc, #80]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	4a15      	ldr	r2, [pc, #84]	@ (80060d8 <HAL_RCC_ClockConfig+0x200>)
 8006084:	4013      	ands	r3, r2
 8006086:	0019      	movs	r1, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	4b10      	ldr	r3, [pc, #64]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 800608e:	430a      	orrs	r2, r1
 8006090:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006092:	f000 f829 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 8006096:	0001      	movs	r1, r0
 8006098:	4b0d      	ldr	r3, [pc, #52]	@ (80060d0 <HAL_RCC_ClockConfig+0x1f8>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	0a1b      	lsrs	r3, r3, #8
 800609e:	220f      	movs	r2, #15
 80060a0:	401a      	ands	r2, r3
 80060a2:	4b0e      	ldr	r3, [pc, #56]	@ (80060dc <HAL_RCC_ClockConfig+0x204>)
 80060a4:	0092      	lsls	r2, r2, #2
 80060a6:	58d3      	ldr	r3, [r2, r3]
 80060a8:	221f      	movs	r2, #31
 80060aa:	4013      	ands	r3, r2
 80060ac:	000a      	movs	r2, r1
 80060ae:	40da      	lsrs	r2, r3
 80060b0:	4b0b      	ldr	r3, [pc, #44]	@ (80060e0 <HAL_RCC_ClockConfig+0x208>)
 80060b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80060b4:	4b0b      	ldr	r3, [pc, #44]	@ (80060e4 <HAL_RCC_ClockConfig+0x20c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	0018      	movs	r0, r3
 80060ba:	f7fd ff47 	bl	8003f4c <HAL_InitTick>
 80060be:	0003      	movs	r3, r0
}
 80060c0:	0018      	movs	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	b004      	add	sp, #16
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40022000 	.word	0x40022000
 80060cc:	00001388 	.word	0x00001388
 80060d0:	40021000 	.word	0x40021000
 80060d4:	fffff0ff 	.word	0xfffff0ff
 80060d8:	ffff8fff 	.word	0xffff8fff
 80060dc:	0800b8b0 	.word	0x0800b8b0
 80060e0:	20000000 	.word	0x20000000
 80060e4:	20000004 	.word	0x20000004

080060e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060ee:	4b3c      	ldr	r3, [pc, #240]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2238      	movs	r2, #56	@ 0x38
 80060f4:	4013      	ands	r3, r2
 80060f6:	d10f      	bne.n	8006118 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80060f8:	4b39      	ldr	r3, [pc, #228]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	0adb      	lsrs	r3, r3, #11
 80060fe:	2207      	movs	r2, #7
 8006100:	4013      	ands	r3, r2
 8006102:	2201      	movs	r2, #1
 8006104:	409a      	lsls	r2, r3
 8006106:	0013      	movs	r3, r2
 8006108:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	4835      	ldr	r0, [pc, #212]	@ (80061e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800610e:	f7fa f815 	bl	800013c <__udivsi3>
 8006112:	0003      	movs	r3, r0
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	e05d      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006118:	4b31      	ldr	r3, [pc, #196]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2238      	movs	r2, #56	@ 0x38
 800611e:	4013      	ands	r3, r2
 8006120:	2b08      	cmp	r3, #8
 8006122:	d102      	bne.n	800612a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006124:	4b30      	ldr	r3, [pc, #192]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	e054      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800612a:	4b2d      	ldr	r3, [pc, #180]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2238      	movs	r2, #56	@ 0x38
 8006130:	4013      	ands	r3, r2
 8006132:	2b10      	cmp	r3, #16
 8006134:	d138      	bne.n	80061a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006136:	4b2a      	ldr	r3, [pc, #168]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	2203      	movs	r2, #3
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006140:	4b27      	ldr	r3, [pc, #156]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	091b      	lsrs	r3, r3, #4
 8006146:	2207      	movs	r2, #7
 8006148:	4013      	ands	r3, r2
 800614a:	3301      	adds	r3, #1
 800614c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b03      	cmp	r3, #3
 8006152:	d10d      	bne.n	8006170 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	4824      	ldr	r0, [pc, #144]	@ (80061e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006158:	f7f9 fff0 	bl	800013c <__udivsi3>
 800615c:	0003      	movs	r3, r0
 800615e:	0019      	movs	r1, r3
 8006160:	4b1f      	ldr	r3, [pc, #124]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	0a1b      	lsrs	r3, r3, #8
 8006166:	227f      	movs	r2, #127	@ 0x7f
 8006168:	4013      	ands	r3, r2
 800616a:	434b      	muls	r3, r1
 800616c:	617b      	str	r3, [r7, #20]
        break;
 800616e:	e00d      	b.n	800618c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006170:	68b9      	ldr	r1, [r7, #8]
 8006172:	481c      	ldr	r0, [pc, #112]	@ (80061e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006174:	f7f9 ffe2 	bl	800013c <__udivsi3>
 8006178:	0003      	movs	r3, r0
 800617a:	0019      	movs	r1, r3
 800617c:	4b18      	ldr	r3, [pc, #96]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	0a1b      	lsrs	r3, r3, #8
 8006182:	227f      	movs	r2, #127	@ 0x7f
 8006184:	4013      	ands	r3, r2
 8006186:	434b      	muls	r3, r1
 8006188:	617b      	str	r3, [r7, #20]
        break;
 800618a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800618c:	4b14      	ldr	r3, [pc, #80]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	0f5b      	lsrs	r3, r3, #29
 8006192:	2207      	movs	r2, #7
 8006194:	4013      	ands	r3, r2
 8006196:	3301      	adds	r3, #1
 8006198:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	6978      	ldr	r0, [r7, #20]
 800619e:	f7f9 ffcd 	bl	800013c <__udivsi3>
 80061a2:	0003      	movs	r3, r0
 80061a4:	613b      	str	r3, [r7, #16]
 80061a6:	e015      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80061a8:	4b0d      	ldr	r3, [pc, #52]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2238      	movs	r2, #56	@ 0x38
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d103      	bne.n	80061bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80061b4:	2380      	movs	r3, #128	@ 0x80
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	e00b      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80061bc:	4b08      	ldr	r3, [pc, #32]	@ (80061e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	2238      	movs	r2, #56	@ 0x38
 80061c2:	4013      	ands	r3, r2
 80061c4:	2b18      	cmp	r3, #24
 80061c6:	d103      	bne.n	80061d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80061c8:	23fa      	movs	r3, #250	@ 0xfa
 80061ca:	01db      	lsls	r3, r3, #7
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	e001      	b.n	80061d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80061d4:	693b      	ldr	r3, [r7, #16]
}
 80061d6:	0018      	movs	r0, r3
 80061d8:	46bd      	mov	sp, r7
 80061da:	b006      	add	sp, #24
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	46c0      	nop			@ (mov r8, r8)
 80061e0:	40021000 	.word	0x40021000
 80061e4:	00f42400 	.word	0x00f42400
 80061e8:	007a1200 	.word	0x007a1200

080061ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061f0:	4b02      	ldr	r3, [pc, #8]	@ (80061fc <HAL_RCC_GetHCLKFreq+0x10>)
 80061f2:	681b      	ldr	r3, [r3, #0]
}
 80061f4:	0018      	movs	r0, r3
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	46c0      	nop			@ (mov r8, r8)
 80061fc:	20000000 	.word	0x20000000

08006200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006200:	b5b0      	push	{r4, r5, r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006204:	f7ff fff2 	bl	80061ec <HAL_RCC_GetHCLKFreq>
 8006208:	0004      	movs	r4, r0
 800620a:	f7ff fb3f 	bl	800588c <LL_RCC_GetAPB1Prescaler>
 800620e:	0003      	movs	r3, r0
 8006210:	0b1a      	lsrs	r2, r3, #12
 8006212:	4b05      	ldr	r3, [pc, #20]	@ (8006228 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006214:	0092      	lsls	r2, r2, #2
 8006216:	58d3      	ldr	r3, [r2, r3]
 8006218:	221f      	movs	r2, #31
 800621a:	4013      	ands	r3, r2
 800621c:	40dc      	lsrs	r4, r3
 800621e:	0023      	movs	r3, r4
}
 8006220:	0018      	movs	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	bdb0      	pop	{r4, r5, r7, pc}
 8006226:	46c0      	nop			@ (mov r8, r8)
 8006228:	0800b8f0 	.word	0x0800b8f0

0800622c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006234:	2313      	movs	r3, #19
 8006236:	18fb      	adds	r3, r7, r3
 8006238:	2200      	movs	r2, #0
 800623a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800623c:	2312      	movs	r3, #18
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	2200      	movs	r2, #0
 8006242:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	2380      	movs	r3, #128	@ 0x80
 800624a:	029b      	lsls	r3, r3, #10
 800624c:	4013      	ands	r3, r2
 800624e:	d100      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006250:	e0a3      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006252:	2011      	movs	r0, #17
 8006254:	183b      	adds	r3, r7, r0
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800625a:	4ba5      	ldr	r3, [pc, #660]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800625c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800625e:	2380      	movs	r3, #128	@ 0x80
 8006260:	055b      	lsls	r3, r3, #21
 8006262:	4013      	ands	r3, r2
 8006264:	d110      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006266:	4ba2      	ldr	r3, [pc, #648]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006268:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800626a:	4ba1      	ldr	r3, [pc, #644]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800626c:	2180      	movs	r1, #128	@ 0x80
 800626e:	0549      	lsls	r1, r1, #21
 8006270:	430a      	orrs	r2, r1
 8006272:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006274:	4b9e      	ldr	r3, [pc, #632]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006276:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006278:	2380      	movs	r3, #128	@ 0x80
 800627a:	055b      	lsls	r3, r3, #21
 800627c:	4013      	ands	r3, r2
 800627e:	60bb      	str	r3, [r7, #8]
 8006280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006282:	183b      	adds	r3, r7, r0
 8006284:	2201      	movs	r2, #1
 8006286:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006288:	4b9a      	ldr	r3, [pc, #616]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	4b99      	ldr	r3, [pc, #612]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800628e:	2180      	movs	r1, #128	@ 0x80
 8006290:	0049      	lsls	r1, r1, #1
 8006292:	430a      	orrs	r2, r1
 8006294:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006296:	f7fd feb5 	bl	8004004 <HAL_GetTick>
 800629a:	0003      	movs	r3, r0
 800629c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800629e:	e00b      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062a0:	f7fd feb0 	bl	8004004 <HAL_GetTick>
 80062a4:	0002      	movs	r2, r0
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d904      	bls.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80062ae:	2313      	movs	r3, #19
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	2203      	movs	r2, #3
 80062b4:	701a      	strb	r2, [r3, #0]
        break;
 80062b6:	e005      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062b8:	4b8e      	ldr	r3, [pc, #568]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	2380      	movs	r3, #128	@ 0x80
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	4013      	ands	r3, r2
 80062c2:	d0ed      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80062c4:	2313      	movs	r3, #19
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d154      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062ce:	4b88      	ldr	r3, [pc, #544]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80062d2:	23c0      	movs	r3, #192	@ 0xc0
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4013      	ands	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d019      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d014      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062ea:	4b81      	ldr	r3, [pc, #516]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ee:	4a82      	ldr	r2, [pc, #520]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062f4:	4b7e      	ldr	r3, [pc, #504]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80062f8:	4b7d      	ldr	r3, [pc, #500]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80062fa:	2180      	movs	r1, #128	@ 0x80
 80062fc:	0249      	lsls	r1, r1, #9
 80062fe:	430a      	orrs	r2, r1
 8006300:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006302:	4b7b      	ldr	r3, [pc, #492]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006304:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006306:	4b7a      	ldr	r3, [pc, #488]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006308:	497c      	ldr	r1, [pc, #496]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800630a:	400a      	ands	r2, r1
 800630c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800630e:	4b78      	ldr	r3, [pc, #480]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2201      	movs	r2, #1
 8006318:	4013      	ands	r3, r2
 800631a:	d016      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631c:	f7fd fe72 	bl	8004004 <HAL_GetTick>
 8006320:	0003      	movs	r3, r0
 8006322:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006324:	e00c      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006326:	f7fd fe6d 	bl	8004004 <HAL_GetTick>
 800632a:	0002      	movs	r2, r0
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	4a73      	ldr	r2, [pc, #460]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d904      	bls.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006336:	2313      	movs	r3, #19
 8006338:	18fb      	adds	r3, r7, r3
 800633a:	2203      	movs	r2, #3
 800633c:	701a      	strb	r2, [r3, #0]
            break;
 800633e:	e004      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006340:	4b6b      	ldr	r3, [pc, #428]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006344:	2202      	movs	r2, #2
 8006346:	4013      	ands	r3, r2
 8006348:	d0ed      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800634a:	2313      	movs	r3, #19
 800634c:	18fb      	adds	r3, r7, r3
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006354:	4b66      	ldr	r3, [pc, #408]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006358:	4a67      	ldr	r2, [pc, #412]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800635a:	4013      	ands	r3, r2
 800635c:	0019      	movs	r1, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006362:	4b63      	ldr	r3, [pc, #396]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006364:	430a      	orrs	r2, r1
 8006366:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006368:	e00c      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800636a:	2312      	movs	r3, #18
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	2213      	movs	r2, #19
 8006370:	18ba      	adds	r2, r7, r2
 8006372:	7812      	ldrb	r2, [r2, #0]
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	e005      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006378:	2312      	movs	r3, #18
 800637a:	18fb      	adds	r3, r7, r3
 800637c:	2213      	movs	r2, #19
 800637e:	18ba      	adds	r2, r7, r2
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006384:	2311      	movs	r3, #17
 8006386:	18fb      	adds	r3, r7, r3
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d105      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800638e:	4b58      	ldr	r3, [pc, #352]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006392:	4b57      	ldr	r3, [pc, #348]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006394:	495b      	ldr	r1, [pc, #364]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006396:	400a      	ands	r2, r1
 8006398:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2201      	movs	r2, #1
 80063a0:	4013      	ands	r3, r2
 80063a2:	d009      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063a4:	4b52      	ldr	r3, [pc, #328]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a8:	2203      	movs	r2, #3
 80063aa:	4393      	bics	r3, r2
 80063ac:	0019      	movs	r1, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	4b4f      	ldr	r3, [pc, #316]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063b4:	430a      	orrs	r2, r1
 80063b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2210      	movs	r2, #16
 80063be:	4013      	ands	r3, r2
 80063c0:	d009      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063c2:	4b4b      	ldr	r3, [pc, #300]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c6:	4a50      	ldr	r2, [pc, #320]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	0019      	movs	r1, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	4b47      	ldr	r3, [pc, #284]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063d2:	430a      	orrs	r2, r1
 80063d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	2380      	movs	r3, #128	@ 0x80
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4013      	ands	r3, r2
 80063e0:	d009      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063e2:	4b43      	ldr	r3, [pc, #268]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063e6:	4a49      	ldr	r2, [pc, #292]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	0019      	movs	r1, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	695a      	ldr	r2, [r3, #20]
 80063f0:	4b3f      	ldr	r3, [pc, #252]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063f2:	430a      	orrs	r2, r1
 80063f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	2380      	movs	r3, #128	@ 0x80
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4013      	ands	r3, r2
 8006400:	d009      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006402:	4b3b      	ldr	r3, [pc, #236]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006406:	4a42      	ldr	r2, [pc, #264]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006408:	4013      	ands	r3, r2
 800640a:	0019      	movs	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	4b37      	ldr	r3, [pc, #220]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006412:	430a      	orrs	r2, r1
 8006414:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2220      	movs	r2, #32
 800641c:	4013      	ands	r3, r2
 800641e:	d009      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006420:	4b33      	ldr	r3, [pc, #204]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006424:	4a3b      	ldr	r2, [pc, #236]	@ (8006514 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006426:	4013      	ands	r3, r2
 8006428:	0019      	movs	r1, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	4b30      	ldr	r3, [pc, #192]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006430:	430a      	orrs	r2, r1
 8006432:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	2380      	movs	r3, #128	@ 0x80
 800643a:	01db      	lsls	r3, r3, #7
 800643c:	4013      	ands	r3, r2
 800643e:	d015      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006440:	4b2b      	ldr	r3, [pc, #172]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	0899      	lsrs	r1, r3, #2
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	4b28      	ldr	r3, [pc, #160]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800644e:	430a      	orrs	r2, r1
 8006450:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69da      	ldr	r2, [r3, #28]
 8006456:	2380      	movs	r3, #128	@ 0x80
 8006458:	05db      	lsls	r3, r3, #23
 800645a:	429a      	cmp	r2, r3
 800645c:	d106      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800645e:	4b24      	ldr	r3, [pc, #144]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	4b23      	ldr	r3, [pc, #140]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006464:	2180      	movs	r1, #128	@ 0x80
 8006466:	0249      	lsls	r1, r1, #9
 8006468:	430a      	orrs	r2, r1
 800646a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	2380      	movs	r3, #128	@ 0x80
 8006472:	039b      	lsls	r3, r3, #14
 8006474:	4013      	ands	r3, r2
 8006476:	d016      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006478:	4b1d      	ldr	r3, [pc, #116]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800647a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647c:	4a26      	ldr	r2, [pc, #152]	@ (8006518 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800647e:	4013      	ands	r3, r2
 8006480:	0019      	movs	r1, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1a      	ldr	r2, [r3, #32]
 8006486:	4b1a      	ldr	r3, [pc, #104]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006488:	430a      	orrs	r2, r1
 800648a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1a      	ldr	r2, [r3, #32]
 8006490:	2380      	movs	r3, #128	@ 0x80
 8006492:	03db      	lsls	r3, r3, #15
 8006494:	429a      	cmp	r2, r3
 8006496:	d106      	bne.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006498:	4b15      	ldr	r3, [pc, #84]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	4b14      	ldr	r3, [pc, #80]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800649e:	2180      	movs	r1, #128	@ 0x80
 80064a0:	0449      	lsls	r1, r1, #17
 80064a2:	430a      	orrs	r2, r1
 80064a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	2380      	movs	r3, #128	@ 0x80
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	4013      	ands	r3, r2
 80064b0:	d016      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80064b2:	4b0f      	ldr	r3, [pc, #60]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80064b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b6:	4a19      	ldr	r2, [pc, #100]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80064b8:	4013      	ands	r3, r2
 80064ba:	0019      	movs	r1, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	4b0b      	ldr	r3, [pc, #44]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80064c2:	430a      	orrs	r2, r1
 80064c4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	2380      	movs	r3, #128	@ 0x80
 80064cc:	01db      	lsls	r3, r3, #7
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d106      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80064d2:	4b07      	ldr	r3, [pc, #28]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	4b06      	ldr	r3, [pc, #24]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80064d8:	2180      	movs	r1, #128	@ 0x80
 80064da:	0249      	lsls	r1, r1, #9
 80064dc:	430a      	orrs	r2, r1
 80064de:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80064e0:	2312      	movs	r3, #18
 80064e2:	18fb      	adds	r3, r7, r3
 80064e4:	781b      	ldrb	r3, [r3, #0]
}
 80064e6:	0018      	movs	r0, r3
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b006      	add	sp, #24
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	46c0      	nop			@ (mov r8, r8)
 80064f0:	40021000 	.word	0x40021000
 80064f4:	40007000 	.word	0x40007000
 80064f8:	fffffcff 	.word	0xfffffcff
 80064fc:	fffeffff 	.word	0xfffeffff
 8006500:	00001388 	.word	0x00001388
 8006504:	efffffff 	.word	0xefffffff
 8006508:	fffff3ff 	.word	0xfffff3ff
 800650c:	fff3ffff 	.word	0xfff3ffff
 8006510:	ffcfffff 	.word	0xffcfffff
 8006514:	ffffcfff 	.word	0xffffcfff
 8006518:	ffbfffff 	.word	0xffbfffff
 800651c:	ffff3fff 	.word	0xffff3fff

08006520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e04a      	b.n	80065c8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	223d      	movs	r2, #61	@ 0x3d
 8006536:	5c9b      	ldrb	r3, [r3, r2]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d107      	bne.n	800654e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	223c      	movs	r2, #60	@ 0x3c
 8006542:	2100      	movs	r1, #0
 8006544:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	0018      	movs	r0, r3
 800654a:	f7fd fae5 	bl	8003b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	223d      	movs	r2, #61	@ 0x3d
 8006552:	2102      	movs	r1, #2
 8006554:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3304      	adds	r3, #4
 800655e:	0019      	movs	r1, r3
 8006560:	0010      	movs	r0, r2
 8006562:	f000 fa87 	bl	8006a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2248      	movs	r2, #72	@ 0x48
 800656a:	2101      	movs	r1, #1
 800656c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	223e      	movs	r2, #62	@ 0x3e
 8006572:	2101      	movs	r1, #1
 8006574:	5499      	strb	r1, [r3, r2]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	223f      	movs	r2, #63	@ 0x3f
 800657a:	2101      	movs	r1, #1
 800657c:	5499      	strb	r1, [r3, r2]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2240      	movs	r2, #64	@ 0x40
 8006582:	2101      	movs	r1, #1
 8006584:	5499      	strb	r1, [r3, r2]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2241      	movs	r2, #65	@ 0x41
 800658a:	2101      	movs	r1, #1
 800658c:	5499      	strb	r1, [r3, r2]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2242      	movs	r2, #66	@ 0x42
 8006592:	2101      	movs	r1, #1
 8006594:	5499      	strb	r1, [r3, r2]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2243      	movs	r2, #67	@ 0x43
 800659a:	2101      	movs	r1, #1
 800659c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2244      	movs	r2, #68	@ 0x44
 80065a2:	2101      	movs	r1, #1
 80065a4:	5499      	strb	r1, [r3, r2]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2245      	movs	r2, #69	@ 0x45
 80065aa:	2101      	movs	r1, #1
 80065ac:	5499      	strb	r1, [r3, r2]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2246      	movs	r2, #70	@ 0x46
 80065b2:	2101      	movs	r1, #1
 80065b4:	5499      	strb	r1, [r3, r2]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2247      	movs	r2, #71	@ 0x47
 80065ba:	2101      	movs	r1, #1
 80065bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	223d      	movs	r2, #61	@ 0x3d
 80065c2:	2101      	movs	r1, #1
 80065c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	0018      	movs	r0, r3
 80065ca:	46bd      	mov	sp, r7
 80065cc:	b002      	add	sp, #8
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	223d      	movs	r2, #61	@ 0x3d
 80065dc:	5c9b      	ldrb	r3, [r3, r2]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d001      	beq.n	80065e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e03d      	b.n	8006664 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	223d      	movs	r2, #61	@ 0x3d
 80065ec:	2102      	movs	r1, #2
 80065ee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2101      	movs	r1, #1
 80065fc:	430a      	orrs	r2, r1
 80065fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a19      	ldr	r2, [pc, #100]	@ (800666c <HAL_TIM_Base_Start_IT+0x9c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00a      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0x50>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	2380      	movs	r3, #128	@ 0x80
 8006610:	05db      	lsls	r3, r3, #23
 8006612:	429a      	cmp	r2, r3
 8006614:	d004      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0x50>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a15      	ldr	r2, [pc, #84]	@ (8006670 <HAL_TIM_Base_Start_IT+0xa0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d116      	bne.n	800664e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	4a13      	ldr	r2, [pc, #76]	@ (8006674 <HAL_TIM_Base_Start_IT+0xa4>)
 8006628:	4013      	ands	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b06      	cmp	r3, #6
 8006630:	d016      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x90>
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	2380      	movs	r3, #128	@ 0x80
 8006636:	025b      	lsls	r3, r3, #9
 8006638:	429a      	cmp	r2, r3
 800663a:	d011      	beq.n	8006660 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2101      	movs	r1, #1
 8006648:	430a      	orrs	r2, r1
 800664a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800664c:	e008      	b.n	8006660 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2101      	movs	r1, #1
 800665a:	430a      	orrs	r2, r1
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e000      	b.n	8006662 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006660:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	0018      	movs	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	b004      	add	sp, #16
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40012c00 	.word	0x40012c00
 8006670:	40000400 	.word	0x40000400
 8006674:	00010007 	.word	0x00010007

08006678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2202      	movs	r2, #2
 8006694:	4013      	ands	r3, r2
 8006696:	d021      	beq.n	80066dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2202      	movs	r2, #2
 800669c:	4013      	ands	r3, r2
 800669e:	d01d      	beq.n	80066dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2203      	movs	r2, #3
 80066a6:	4252      	negs	r2, r2
 80066a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	2203      	movs	r2, #3
 80066b8:	4013      	ands	r3, r2
 80066ba:	d004      	beq.n	80066c6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	0018      	movs	r0, r3
 80066c0:	f000 f9c0 	bl	8006a44 <HAL_TIM_IC_CaptureCallback>
 80066c4:	e007      	b.n	80066d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	0018      	movs	r0, r3
 80066ca:	f000 f9b3 	bl	8006a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	0018      	movs	r0, r3
 80066d2:	f000 f9bf 	bl	8006a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2204      	movs	r2, #4
 80066e0:	4013      	ands	r3, r2
 80066e2:	d022      	beq.n	800672a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2204      	movs	r2, #4
 80066e8:	4013      	ands	r3, r2
 80066ea:	d01e      	beq.n	800672a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2205      	movs	r2, #5
 80066f2:	4252      	negs	r2, r2
 80066f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2202      	movs	r2, #2
 80066fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	23c0      	movs	r3, #192	@ 0xc0
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4013      	ands	r3, r2
 8006708:	d004      	beq.n	8006714 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	0018      	movs	r0, r3
 800670e:	f000 f999 	bl	8006a44 <HAL_TIM_IC_CaptureCallback>
 8006712:	e007      	b.n	8006724 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	0018      	movs	r0, r3
 8006718:	f000 f98c 	bl	8006a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	0018      	movs	r0, r3
 8006720:	f000 f998 	bl	8006a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2208      	movs	r2, #8
 800672e:	4013      	ands	r3, r2
 8006730:	d021      	beq.n	8006776 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2208      	movs	r2, #8
 8006736:	4013      	ands	r3, r2
 8006738:	d01d      	beq.n	8006776 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2209      	movs	r2, #9
 8006740:	4252      	negs	r2, r2
 8006742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2204      	movs	r2, #4
 8006748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	2203      	movs	r2, #3
 8006752:	4013      	ands	r3, r2
 8006754:	d004      	beq.n	8006760 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	0018      	movs	r0, r3
 800675a:	f000 f973 	bl	8006a44 <HAL_TIM_IC_CaptureCallback>
 800675e:	e007      	b.n	8006770 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	0018      	movs	r0, r3
 8006764:	f000 f966 	bl	8006a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	0018      	movs	r0, r3
 800676c:	f000 f972 	bl	8006a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2210      	movs	r2, #16
 800677a:	4013      	ands	r3, r2
 800677c:	d022      	beq.n	80067c4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2210      	movs	r2, #16
 8006782:	4013      	ands	r3, r2
 8006784:	d01e      	beq.n	80067c4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2211      	movs	r2, #17
 800678c:	4252      	negs	r2, r2
 800678e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2208      	movs	r2, #8
 8006794:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	23c0      	movs	r3, #192	@ 0xc0
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4013      	ands	r3, r2
 80067a2:	d004      	beq.n	80067ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	0018      	movs	r0, r3
 80067a8:	f000 f94c 	bl	8006a44 <HAL_TIM_IC_CaptureCallback>
 80067ac:	e007      	b.n	80067be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	0018      	movs	r0, r3
 80067b2:	f000 f93f 	bl	8006a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	0018      	movs	r0, r3
 80067ba:	f000 f94b 	bl	8006a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2201      	movs	r2, #1
 80067c8:	4013      	ands	r3, r2
 80067ca:	d00c      	beq.n	80067e6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	4013      	ands	r3, r2
 80067d2:	d008      	beq.n	80067e6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2202      	movs	r2, #2
 80067da:	4252      	negs	r2, r2
 80067dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	0018      	movs	r0, r3
 80067e2:	f7fd f849 	bl	8003878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2280      	movs	r2, #128	@ 0x80
 80067ea:	4013      	ands	r3, r2
 80067ec:	d104      	bne.n	80067f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	2380      	movs	r3, #128	@ 0x80
 80067f2:	019b      	lsls	r3, r3, #6
 80067f4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067f6:	d00b      	beq.n	8006810 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2280      	movs	r2, #128	@ 0x80
 80067fc:	4013      	ands	r3, r2
 80067fe:	d007      	beq.n	8006810 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a1e      	ldr	r2, [pc, #120]	@ (8006880 <HAL_TIM_IRQHandler+0x208>)
 8006806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	0018      	movs	r0, r3
 800680c:	f000 fac2 	bl	8006d94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	2380      	movs	r3, #128	@ 0x80
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	4013      	ands	r3, r2
 8006818:	d00b      	beq.n	8006832 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2280      	movs	r2, #128	@ 0x80
 800681e:	4013      	ands	r3, r2
 8006820:	d007      	beq.n	8006832 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a17      	ldr	r2, [pc, #92]	@ (8006884 <HAL_TIM_IRQHandler+0x20c>)
 8006828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	0018      	movs	r0, r3
 800682e:	f000 fab9 	bl	8006da4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2240      	movs	r2, #64	@ 0x40
 8006836:	4013      	ands	r3, r2
 8006838:	d00c      	beq.n	8006854 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2240      	movs	r2, #64	@ 0x40
 800683e:	4013      	ands	r3, r2
 8006840:	d008      	beq.n	8006854 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2241      	movs	r2, #65	@ 0x41
 8006848:	4252      	negs	r2, r2
 800684a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	0018      	movs	r0, r3
 8006850:	f000 f908 	bl	8006a64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2220      	movs	r2, #32
 8006858:	4013      	ands	r3, r2
 800685a:	d00c      	beq.n	8006876 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2220      	movs	r2, #32
 8006860:	4013      	ands	r3, r2
 8006862:	d008      	beq.n	8006876 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2221      	movs	r2, #33	@ 0x21
 800686a:	4252      	negs	r2, r2
 800686c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	0018      	movs	r0, r3
 8006872:	f000 fa87 	bl	8006d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006876:	46c0      	nop			@ (mov r8, r8)
 8006878:	46bd      	mov	sp, r7
 800687a:	b004      	add	sp, #16
 800687c:	bd80      	pop	{r7, pc}
 800687e:	46c0      	nop			@ (mov r8, r8)
 8006880:	ffffdf7f 	.word	0xffffdf7f
 8006884:	fffffeff 	.word	0xfffffeff

08006888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006892:	230f      	movs	r3, #15
 8006894:	18fb      	adds	r3, r7, r3
 8006896:	2200      	movs	r2, #0
 8006898:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	223c      	movs	r2, #60	@ 0x3c
 800689e:	5c9b      	ldrb	r3, [r3, r2]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d101      	bne.n	80068a8 <HAL_TIM_ConfigClockSource+0x20>
 80068a4:	2302      	movs	r3, #2
 80068a6:	e0bc      	b.n	8006a22 <HAL_TIM_ConfigClockSource+0x19a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	223c      	movs	r2, #60	@ 0x3c
 80068ac:	2101      	movs	r1, #1
 80068ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	223d      	movs	r2, #61	@ 0x3d
 80068b4:	2102      	movs	r1, #2
 80068b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4a5a      	ldr	r2, [pc, #360]	@ (8006a2c <HAL_TIM_ConfigClockSource+0x1a4>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4a59      	ldr	r2, [pc, #356]	@ (8006a30 <HAL_TIM_ConfigClockSource+0x1a8>)
 80068cc:	4013      	ands	r3, r2
 80068ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2280      	movs	r2, #128	@ 0x80
 80068de:	0192      	lsls	r2, r2, #6
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d040      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0xde>
 80068e4:	2280      	movs	r2, #128	@ 0x80
 80068e6:	0192      	lsls	r2, r2, #6
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d900      	bls.n	80068ee <HAL_TIM_ConfigClockSource+0x66>
 80068ec:	e088      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>
 80068ee:	2280      	movs	r2, #128	@ 0x80
 80068f0:	0152      	lsls	r2, r2, #5
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d100      	bne.n	80068f8 <HAL_TIM_ConfigClockSource+0x70>
 80068f6:	e088      	b.n	8006a0a <HAL_TIM_ConfigClockSource+0x182>
 80068f8:	2280      	movs	r2, #128	@ 0x80
 80068fa:	0152      	lsls	r2, r2, #5
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d900      	bls.n	8006902 <HAL_TIM_ConfigClockSource+0x7a>
 8006900:	e07e      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>
 8006902:	2b70      	cmp	r3, #112	@ 0x70
 8006904:	d018      	beq.n	8006938 <HAL_TIM_ConfigClockSource+0xb0>
 8006906:	d900      	bls.n	800690a <HAL_TIM_ConfigClockSource+0x82>
 8006908:	e07a      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>
 800690a:	2b60      	cmp	r3, #96	@ 0x60
 800690c:	d04f      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x126>
 800690e:	d900      	bls.n	8006912 <HAL_TIM_ConfigClockSource+0x8a>
 8006910:	e076      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>
 8006912:	2b50      	cmp	r3, #80	@ 0x50
 8006914:	d03b      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x106>
 8006916:	d900      	bls.n	800691a <HAL_TIM_ConfigClockSource+0x92>
 8006918:	e072      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>
 800691a:	2b40      	cmp	r3, #64	@ 0x40
 800691c:	d057      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x146>
 800691e:	d900      	bls.n	8006922 <HAL_TIM_ConfigClockSource+0x9a>
 8006920:	e06e      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>
 8006922:	2b30      	cmp	r3, #48	@ 0x30
 8006924:	d063      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x166>
 8006926:	d86b      	bhi.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>
 8006928:	2b20      	cmp	r3, #32
 800692a:	d060      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x166>
 800692c:	d868      	bhi.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d05d      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x166>
 8006932:	2b10      	cmp	r3, #16
 8006934:	d05b      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x166>
 8006936:	e063      	b.n	8006a00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006948:	f000 f994 	bl	8006c74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2277      	movs	r2, #119	@ 0x77
 8006958:	4313      	orrs	r3, r2
 800695a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	609a      	str	r2, [r3, #8]
      break;
 8006964:	e052      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006976:	f000 f97d 	bl	8006c74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2180      	movs	r1, #128	@ 0x80
 8006986:	01c9      	lsls	r1, r1, #7
 8006988:	430a      	orrs	r2, r1
 800698a:	609a      	str	r2, [r3, #8]
      break;
 800698c:	e03e      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800699a:	001a      	movs	r2, r3
 800699c:	f000 f8ee 	bl	8006b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2150      	movs	r1, #80	@ 0x50
 80069a6:	0018      	movs	r0, r3
 80069a8:	f000 f948 	bl	8006c3c <TIM_ITRx_SetConfig>
      break;
 80069ac:	e02e      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ba:	001a      	movs	r2, r3
 80069bc:	f000 f90c 	bl	8006bd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2160      	movs	r1, #96	@ 0x60
 80069c6:	0018      	movs	r0, r3
 80069c8:	f000 f938 	bl	8006c3c <TIM_ITRx_SetConfig>
      break;
 80069cc:	e01e      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069da:	001a      	movs	r2, r3
 80069dc:	f000 f8ce 	bl	8006b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2140      	movs	r1, #64	@ 0x40
 80069e6:	0018      	movs	r0, r3
 80069e8:	f000 f928 	bl	8006c3c <TIM_ITRx_SetConfig>
      break;
 80069ec:	e00e      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	0019      	movs	r1, r3
 80069f8:	0010      	movs	r0, r2
 80069fa:	f000 f91f 	bl	8006c3c <TIM_ITRx_SetConfig>
      break;
 80069fe:	e005      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006a00:	230f      	movs	r3, #15
 8006a02:	18fb      	adds	r3, r7, r3
 8006a04:	2201      	movs	r2, #1
 8006a06:	701a      	strb	r2, [r3, #0]
      break;
 8006a08:	e000      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006a0a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	223d      	movs	r2, #61	@ 0x3d
 8006a10:	2101      	movs	r1, #1
 8006a12:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	223c      	movs	r2, #60	@ 0x3c
 8006a18:	2100      	movs	r1, #0
 8006a1a:	5499      	strb	r1, [r3, r2]

  return status;
 8006a1c:	230f      	movs	r3, #15
 8006a1e:	18fb      	adds	r3, r7, r3
 8006a20:	781b      	ldrb	r3, [r3, #0]
}
 8006a22:	0018      	movs	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b004      	add	sp, #16
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	46c0      	nop			@ (mov r8, r8)
 8006a2c:	ffceff88 	.word	0xffceff88
 8006a30:	ffff00ff 	.word	0xffff00ff

08006a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a3c:	46c0      	nop			@ (mov r8, r8)
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	b002      	add	sp, #8
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a4c:	46c0      	nop			@ (mov r8, r8)
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	b002      	add	sp, #8
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a5c:	46c0      	nop			@ (mov r8, r8)
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	b002      	add	sp, #8
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a6c:	46c0      	nop			@ (mov r8, r8)
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b002      	add	sp, #8
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a37      	ldr	r2, [pc, #220]	@ (8006b64 <TIM_Base_SetConfig+0xf0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d008      	beq.n	8006a9e <TIM_Base_SetConfig+0x2a>
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	2380      	movs	r3, #128	@ 0x80
 8006a90:	05db      	lsls	r3, r3, #23
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d003      	beq.n	8006a9e <TIM_Base_SetConfig+0x2a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a33      	ldr	r2, [pc, #204]	@ (8006b68 <TIM_Base_SetConfig+0xf4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d108      	bne.n	8006ab0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2270      	movs	r2, #112	@ 0x70
 8006aa2:	4393      	bics	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8006b64 <TIM_Base_SetConfig+0xf0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d014      	beq.n	8006ae2 <TIM_Base_SetConfig+0x6e>
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	2380      	movs	r3, #128	@ 0x80
 8006abc:	05db      	lsls	r3, r3, #23
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d00f      	beq.n	8006ae2 <TIM_Base_SetConfig+0x6e>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a28      	ldr	r2, [pc, #160]	@ (8006b68 <TIM_Base_SetConfig+0xf4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00b      	beq.n	8006ae2 <TIM_Base_SetConfig+0x6e>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a27      	ldr	r2, [pc, #156]	@ (8006b6c <TIM_Base_SetConfig+0xf8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d007      	beq.n	8006ae2 <TIM_Base_SetConfig+0x6e>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a26      	ldr	r2, [pc, #152]	@ (8006b70 <TIM_Base_SetConfig+0xfc>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d003      	beq.n	8006ae2 <TIM_Base_SetConfig+0x6e>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a25      	ldr	r2, [pc, #148]	@ (8006b74 <TIM_Base_SetConfig+0x100>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d108      	bne.n	8006af4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a24      	ldr	r2, [pc, #144]	@ (8006b78 <TIM_Base_SetConfig+0x104>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2280      	movs	r2, #128	@ 0x80
 8006af8:	4393      	bics	r3, r2
 8006afa:	001a      	movs	r2, r3
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a11      	ldr	r2, [pc, #68]	@ (8006b64 <TIM_Base_SetConfig+0xf0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d007      	beq.n	8006b32 <TIM_Base_SetConfig+0xbe>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a12      	ldr	r2, [pc, #72]	@ (8006b70 <TIM_Base_SetConfig+0xfc>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d003      	beq.n	8006b32 <TIM_Base_SetConfig+0xbe>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a11      	ldr	r2, [pc, #68]	@ (8006b74 <TIM_Base_SetConfig+0x100>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d103      	bne.n	8006b3a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2201      	movs	r2, #1
 8006b46:	4013      	ands	r3, r2
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d106      	bne.n	8006b5a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	2201      	movs	r2, #1
 8006b52:	4393      	bics	r3, r2
 8006b54:	001a      	movs	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	611a      	str	r2, [r3, #16]
  }
}
 8006b5a:	46c0      	nop			@ (mov r8, r8)
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	b004      	add	sp, #16
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	46c0      	nop			@ (mov r8, r8)
 8006b64:	40012c00 	.word	0x40012c00
 8006b68:	40000400 	.word	0x40000400
 8006b6c:	40002000 	.word	0x40002000
 8006b70:	40014400 	.word	0x40014400
 8006b74:	40014800 	.word	0x40014800
 8006b78:	fffffcff 	.word	0xfffffcff

08006b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	2201      	movs	r2, #1
 8006b94:	4393      	bics	r3, r2
 8006b96:	001a      	movs	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	22f0      	movs	r2, #240	@ 0xf0
 8006ba6:	4393      	bics	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	220a      	movs	r2, #10
 8006bb8:	4393      	bics	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	621a      	str	r2, [r3, #32]
}
 8006bd0:	46c0      	nop			@ (mov r8, r8)
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	b006      	add	sp, #24
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	2210      	movs	r2, #16
 8006bf0:	4393      	bics	r3, r2
 8006bf2:	001a      	movs	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	4a0d      	ldr	r2, [pc, #52]	@ (8006c38 <TIM_TI2_ConfigInputStage+0x60>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	031b      	lsls	r3, r3, #12
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	22a0      	movs	r2, #160	@ 0xa0
 8006c14:	4393      	bics	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	46c0      	nop			@ (mov r8, r8)
 8006c30:	46bd      	mov	sp, r7
 8006c32:	b006      	add	sp, #24
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	46c0      	nop			@ (mov r8, r8)
 8006c38:	ffff0fff 	.word	0xffff0fff

08006c3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4a08      	ldr	r2, [pc, #32]	@ (8006c70 <TIM_ITRx_SetConfig+0x34>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	2207      	movs	r2, #7
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	609a      	str	r2, [r3, #8]
}
 8006c66:	46c0      	nop			@ (mov r8, r8)
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	b004      	add	sp, #16
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	46c0      	nop			@ (mov r8, r8)
 8006c70:	ffcfff8f 	.word	0xffcfff8f

08006c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	4a09      	ldr	r2, [pc, #36]	@ (8006cb0 <TIM_ETR_SetConfig+0x3c>)
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	021a      	lsls	r2, r3, #8
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	609a      	str	r2, [r3, #8]
}
 8006ca8:	46c0      	nop			@ (mov r8, r8)
 8006caa:	46bd      	mov	sp, r7
 8006cac:	b006      	add	sp, #24
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	ffff00ff 	.word	0xffff00ff

08006cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	223c      	movs	r2, #60	@ 0x3c
 8006cc2:	5c9b      	ldrb	r3, [r3, r2]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e050      	b.n	8006d6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	223c      	movs	r2, #60	@ 0x3c
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	223d      	movs	r2, #61	@ 0x3d
 8006cd8:	2102      	movs	r1, #2
 8006cda:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a21      	ldr	r2, [pc, #132]	@ (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d108      	bne.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4a20      	ldr	r2, [pc, #128]	@ (8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2270      	movs	r2, #112	@ 0x70
 8006d0c:	4393      	bics	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a14      	ldr	r2, [pc, #80]	@ (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00a      	beq.n	8006d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	2380      	movs	r3, #128	@ 0x80
 8006d32:	05db      	lsls	r3, r3, #23
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d004      	beq.n	8006d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a10      	ldr	r2, [pc, #64]	@ (8006d80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d10c      	bne.n	8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2280      	movs	r2, #128	@ 0x80
 8006d46:	4393      	bics	r3, r2
 8006d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	223d      	movs	r2, #61	@ 0x3d
 8006d60:	2101      	movs	r1, #1
 8006d62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	223c      	movs	r2, #60	@ 0x3c
 8006d68:	2100      	movs	r1, #0
 8006d6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	0018      	movs	r0, r3
 8006d70:	46bd      	mov	sp, r7
 8006d72:	b004      	add	sp, #16
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	46c0      	nop			@ (mov r8, r8)
 8006d78:	40012c00 	.word	0x40012c00
 8006d7c:	ff0fffff 	.word	0xff0fffff
 8006d80:	40000400 	.word	0x40000400

08006d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d8c:	46c0      	nop			@ (mov r8, r8)
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	b002      	add	sp, #8
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d9c:	46c0      	nop			@ (mov r8, r8)
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b002      	add	sp, #8
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dac:	46c0      	nop			@ (mov r8, r8)
 8006dae:	46bd      	mov	sp, r7
 8006db0:	b002      	add	sp, #8
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e046      	b.n	8006e54 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2288      	movs	r2, #136	@ 0x88
 8006dca:	589b      	ldr	r3, [r3, r2]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d107      	bne.n	8006de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2284      	movs	r2, #132	@ 0x84
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	0018      	movs	r0, r3
 8006ddc:	f7fc fec0 	bl	8003b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2288      	movs	r2, #136	@ 0x88
 8006de4:	2124      	movs	r1, #36	@ 0x24
 8006de6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2101      	movs	r1, #1
 8006df4:	438a      	bics	r2, r1
 8006df6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	0018      	movs	r0, r3
 8006e04:	f000 fe8e 	bl	8007b24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f000 fc12 	bl	8007634 <UART_SetConfig>
 8006e10:	0003      	movs	r3, r0
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e01c      	b.n	8006e54 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	490d      	ldr	r1, [pc, #52]	@ (8006e5c <HAL_UART_Init+0xa8>)
 8006e26:	400a      	ands	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	212a      	movs	r1, #42	@ 0x2a
 8006e36:	438a      	bics	r2, r1
 8006e38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2101      	movs	r1, #1
 8006e46:	430a      	orrs	r2, r1
 8006e48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f000 ff1d 	bl	8007c8c <UART_CheckIdleState>
 8006e52:	0003      	movs	r3, r0
}
 8006e54:	0018      	movs	r0, r3
 8006e56:	46bd      	mov	sp, r7
 8006e58:	b002      	add	sp, #8
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	ffffb7ff 	.word	0xffffb7ff

08006e60 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08c      	sub	sp, #48	@ 0x30
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	1dbb      	adds	r3, r7, #6
 8006e6c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2288      	movs	r2, #136	@ 0x88
 8006e72:	589b      	ldr	r3, [r3, r2]
 8006e74:	2b20      	cmp	r3, #32
 8006e76:	d000      	beq.n	8006e7a <HAL_UART_Transmit_IT+0x1a>
 8006e78:	e08d      	b.n	8006f96 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_UART_Transmit_IT+0x28>
 8006e80:	1dbb      	adds	r3, r7, #6
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e085      	b.n	8006f98 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	2380      	movs	r3, #128	@ 0x80
 8006e92:	015b      	lsls	r3, r3, #5
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d109      	bne.n	8006eac <HAL_UART_Transmit_IT+0x4c>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d105      	bne.n	8006eac <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	d001      	beq.n	8006eac <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e075      	b.n	8006f98 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	1dba      	adds	r2, r7, #6
 8006eb6:	2154      	movs	r1, #84	@ 0x54
 8006eb8:	8812      	ldrh	r2, [r2, #0]
 8006eba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	1dba      	adds	r2, r7, #6
 8006ec0:	2156      	movs	r1, #86	@ 0x56
 8006ec2:	8812      	ldrh	r2, [r2, #0]
 8006ec4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2290      	movs	r2, #144	@ 0x90
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2288      	movs	r2, #136	@ 0x88
 8006ed8:	2121      	movs	r1, #33	@ 0x21
 8006eda:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006ee0:	2380      	movs	r3, #128	@ 0x80
 8006ee2:	059b      	lsls	r3, r3, #22
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d12a      	bne.n	8006f3e <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	2380      	movs	r3, #128	@ 0x80
 8006eee:	015b      	lsls	r3, r3, #5
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d107      	bne.n	8006f04 <HAL_UART_Transmit_IT+0xa4>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d103      	bne.n	8006f04 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4a28      	ldr	r2, [pc, #160]	@ (8006fa0 <HAL_UART_Transmit_IT+0x140>)
 8006f00:	679a      	str	r2, [r3, #120]	@ 0x78
 8006f02:	e002      	b.n	8006f0a <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a27      	ldr	r2, [pc, #156]	@ (8006fa4 <HAL_UART_Transmit_IT+0x144>)
 8006f08:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f0e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f10:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006f12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f14:	2301      	movs	r3, #1
 8006f16:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	f383 8810 	msr	PRIMASK, r3
}
 8006f1e:	46c0      	nop			@ (mov r8, r8)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2180      	movs	r1, #128	@ 0x80
 8006f2c:	0409      	lsls	r1, r1, #16
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	609a      	str	r2, [r3, #8]
 8006f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f34:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	f383 8810 	msr	PRIMASK, r3
}
 8006f3c:	e029      	b.n	8006f92 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	2380      	movs	r3, #128	@ 0x80
 8006f44:	015b      	lsls	r3, r3, #5
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d107      	bne.n	8006f5a <HAL_UART_Transmit_IT+0xfa>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d103      	bne.n	8006f5a <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4a14      	ldr	r2, [pc, #80]	@ (8006fa8 <HAL_UART_Transmit_IT+0x148>)
 8006f56:	679a      	str	r2, [r3, #120]	@ 0x78
 8006f58:	e002      	b.n	8006f60 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4a13      	ldr	r2, [pc, #76]	@ (8006fac <HAL_UART_Transmit_IT+0x14c>)
 8006f5e:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f60:	f3ef 8310 	mrs	r3, PRIMASK
 8006f64:	613b      	str	r3, [r7, #16]
  return(result);
 8006f66:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f383 8810 	msr	PRIMASK, r3
}
 8006f74:	46c0      	nop			@ (mov r8, r8)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2180      	movs	r1, #128	@ 0x80
 8006f82:	430a      	orrs	r2, r1
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	f383 8810 	msr	PRIMASK, r3
}
 8006f90:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	e000      	b.n	8006f98 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8006f96:	2302      	movs	r3, #2
  }
}
 8006f98:	0018      	movs	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b00c      	add	sp, #48	@ 0x30
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	08008219 	.word	0x08008219
 8006fa4:	0800812d 	.word	0x0800812d
 8006fa8:	0800806f 	.word	0x0800806f
 8006fac:	08007fbb 	.word	0x08007fbb

08006fb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fb0:	b5b0      	push	{r4, r5, r7, lr}
 8006fb2:	b0aa      	sub	sp, #168	@ 0xa8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	22a4      	movs	r2, #164	@ 0xa4
 8006fc0:	18b9      	adds	r1, r7, r2
 8006fc2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	20a0      	movs	r0, #160	@ 0xa0
 8006fcc:	1839      	adds	r1, r7, r0
 8006fce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	249c      	movs	r4, #156	@ 0x9c
 8006fd8:	1939      	adds	r1, r7, r4
 8006fda:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006fdc:	0011      	movs	r1, r2
 8006fde:	18bb      	adds	r3, r7, r2
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4aa2      	ldr	r2, [pc, #648]	@ (800726c <HAL_UART_IRQHandler+0x2bc>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	2298      	movs	r2, #152	@ 0x98
 8006fe8:	18bd      	adds	r5, r7, r2
 8006fea:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006fec:	18bb      	adds	r3, r7, r2
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d11a      	bne.n	800702a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ff4:	187b      	adds	r3, r7, r1
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	d015      	beq.n	800702a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ffe:	183b      	adds	r3, r7, r0
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2220      	movs	r2, #32
 8007004:	4013      	ands	r3, r2
 8007006:	d105      	bne.n	8007014 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007008:	193b      	adds	r3, r7, r4
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	2380      	movs	r3, #128	@ 0x80
 800700e:	055b      	lsls	r3, r3, #21
 8007010:	4013      	ands	r3, r2
 8007012:	d00a      	beq.n	800702a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007018:	2b00      	cmp	r3, #0
 800701a:	d100      	bne.n	800701e <HAL_UART_IRQHandler+0x6e>
 800701c:	e2dc      	b.n	80075d8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	0010      	movs	r0, r2
 8007026:	4798      	blx	r3
      }
      return;
 8007028:	e2d6      	b.n	80075d8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800702a:	2398      	movs	r3, #152	@ 0x98
 800702c:	18fb      	adds	r3, r7, r3
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d100      	bne.n	8007036 <HAL_UART_IRQHandler+0x86>
 8007034:	e122      	b.n	800727c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007036:	239c      	movs	r3, #156	@ 0x9c
 8007038:	18fb      	adds	r3, r7, r3
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a8c      	ldr	r2, [pc, #560]	@ (8007270 <HAL_UART_IRQHandler+0x2c0>)
 800703e:	4013      	ands	r3, r2
 8007040:	d106      	bne.n	8007050 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007042:	23a0      	movs	r3, #160	@ 0xa0
 8007044:	18fb      	adds	r3, r7, r3
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a8a      	ldr	r2, [pc, #552]	@ (8007274 <HAL_UART_IRQHandler+0x2c4>)
 800704a:	4013      	ands	r3, r2
 800704c:	d100      	bne.n	8007050 <HAL_UART_IRQHandler+0xa0>
 800704e:	e115      	b.n	800727c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007050:	23a4      	movs	r3, #164	@ 0xa4
 8007052:	18fb      	adds	r3, r7, r3
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2201      	movs	r2, #1
 8007058:	4013      	ands	r3, r2
 800705a:	d012      	beq.n	8007082 <HAL_UART_IRQHandler+0xd2>
 800705c:	23a0      	movs	r3, #160	@ 0xa0
 800705e:	18fb      	adds	r3, r7, r3
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	2380      	movs	r3, #128	@ 0x80
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	4013      	ands	r3, r2
 8007068:	d00b      	beq.n	8007082 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2201      	movs	r2, #1
 8007070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2290      	movs	r2, #144	@ 0x90
 8007076:	589b      	ldr	r3, [r3, r2]
 8007078:	2201      	movs	r2, #1
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2190      	movs	r1, #144	@ 0x90
 8007080:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007082:	23a4      	movs	r3, #164	@ 0xa4
 8007084:	18fb      	adds	r3, r7, r3
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2202      	movs	r2, #2
 800708a:	4013      	ands	r3, r2
 800708c:	d011      	beq.n	80070b2 <HAL_UART_IRQHandler+0x102>
 800708e:	239c      	movs	r3, #156	@ 0x9c
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2201      	movs	r2, #1
 8007096:	4013      	ands	r3, r2
 8007098:	d00b      	beq.n	80070b2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2202      	movs	r2, #2
 80070a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2290      	movs	r2, #144	@ 0x90
 80070a6:	589b      	ldr	r3, [r3, r2]
 80070a8:	2204      	movs	r2, #4
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2190      	movs	r1, #144	@ 0x90
 80070b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070b2:	23a4      	movs	r3, #164	@ 0xa4
 80070b4:	18fb      	adds	r3, r7, r3
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2204      	movs	r2, #4
 80070ba:	4013      	ands	r3, r2
 80070bc:	d011      	beq.n	80070e2 <HAL_UART_IRQHandler+0x132>
 80070be:	239c      	movs	r3, #156	@ 0x9c
 80070c0:	18fb      	adds	r3, r7, r3
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2201      	movs	r2, #1
 80070c6:	4013      	ands	r3, r2
 80070c8:	d00b      	beq.n	80070e2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2204      	movs	r2, #4
 80070d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2290      	movs	r2, #144	@ 0x90
 80070d6:	589b      	ldr	r3, [r3, r2]
 80070d8:	2202      	movs	r2, #2
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2190      	movs	r1, #144	@ 0x90
 80070e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070e2:	23a4      	movs	r3, #164	@ 0xa4
 80070e4:	18fb      	adds	r3, r7, r3
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2208      	movs	r2, #8
 80070ea:	4013      	ands	r3, r2
 80070ec:	d017      	beq.n	800711e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80070ee:	23a0      	movs	r3, #160	@ 0xa0
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2220      	movs	r2, #32
 80070f6:	4013      	ands	r3, r2
 80070f8:	d105      	bne.n	8007106 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80070fa:	239c      	movs	r3, #156	@ 0x9c
 80070fc:	18fb      	adds	r3, r7, r3
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a5b      	ldr	r2, [pc, #364]	@ (8007270 <HAL_UART_IRQHandler+0x2c0>)
 8007102:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007104:	d00b      	beq.n	800711e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2208      	movs	r2, #8
 800710c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2290      	movs	r2, #144	@ 0x90
 8007112:	589b      	ldr	r3, [r3, r2]
 8007114:	2208      	movs	r2, #8
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2190      	movs	r1, #144	@ 0x90
 800711c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800711e:	23a4      	movs	r3, #164	@ 0xa4
 8007120:	18fb      	adds	r3, r7, r3
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	2380      	movs	r3, #128	@ 0x80
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	4013      	ands	r3, r2
 800712a:	d013      	beq.n	8007154 <HAL_UART_IRQHandler+0x1a4>
 800712c:	23a0      	movs	r3, #160	@ 0xa0
 800712e:	18fb      	adds	r3, r7, r3
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	2380      	movs	r3, #128	@ 0x80
 8007134:	04db      	lsls	r3, r3, #19
 8007136:	4013      	ands	r3, r2
 8007138:	d00c      	beq.n	8007154 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2280      	movs	r2, #128	@ 0x80
 8007140:	0112      	lsls	r2, r2, #4
 8007142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2290      	movs	r2, #144	@ 0x90
 8007148:	589b      	ldr	r3, [r3, r2]
 800714a:	2220      	movs	r2, #32
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2190      	movs	r1, #144	@ 0x90
 8007152:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2290      	movs	r2, #144	@ 0x90
 8007158:	589b      	ldr	r3, [r3, r2]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d100      	bne.n	8007160 <HAL_UART_IRQHandler+0x1b0>
 800715e:	e23d      	b.n	80075dc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007160:	23a4      	movs	r3, #164	@ 0xa4
 8007162:	18fb      	adds	r3, r7, r3
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2220      	movs	r2, #32
 8007168:	4013      	ands	r3, r2
 800716a:	d015      	beq.n	8007198 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800716c:	23a0      	movs	r3, #160	@ 0xa0
 800716e:	18fb      	adds	r3, r7, r3
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2220      	movs	r2, #32
 8007174:	4013      	ands	r3, r2
 8007176:	d106      	bne.n	8007186 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007178:	239c      	movs	r3, #156	@ 0x9c
 800717a:	18fb      	adds	r3, r7, r3
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	2380      	movs	r3, #128	@ 0x80
 8007180:	055b      	lsls	r3, r3, #21
 8007182:	4013      	ands	r3, r2
 8007184:	d008      	beq.n	8007198 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800718a:	2b00      	cmp	r3, #0
 800718c:	d004      	beq.n	8007198 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	0010      	movs	r0, r2
 8007196:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2290      	movs	r2, #144	@ 0x90
 800719c:	589b      	ldr	r3, [r3, r2]
 800719e:	2194      	movs	r1, #148	@ 0x94
 80071a0:	187a      	adds	r2, r7, r1
 80071a2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	2240      	movs	r2, #64	@ 0x40
 80071ac:	4013      	ands	r3, r2
 80071ae:	2b40      	cmp	r3, #64	@ 0x40
 80071b0:	d004      	beq.n	80071bc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071b2:	187b      	adds	r3, r7, r1
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2228      	movs	r2, #40	@ 0x28
 80071b8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071ba:	d04c      	beq.n	8007256 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	0018      	movs	r0, r3
 80071c0:	f000 fe7e 	bl	8007ec0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	2240      	movs	r2, #64	@ 0x40
 80071cc:	4013      	ands	r3, r2
 80071ce:	2b40      	cmp	r3, #64	@ 0x40
 80071d0:	d13c      	bne.n	800724c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071d2:	f3ef 8310 	mrs	r3, PRIMASK
 80071d6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80071d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071da:	2090      	movs	r0, #144	@ 0x90
 80071dc:	183a      	adds	r2, r7, r0
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	2301      	movs	r3, #1
 80071e2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071e6:	f383 8810 	msr	PRIMASK, r3
}
 80071ea:	46c0      	nop			@ (mov r8, r8)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689a      	ldr	r2, [r3, #8]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2140      	movs	r1, #64	@ 0x40
 80071f8:	438a      	bics	r2, r1
 80071fa:	609a      	str	r2, [r3, #8]
 80071fc:	183b      	adds	r3, r7, r0
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007202:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007204:	f383 8810 	msr	PRIMASK, r3
}
 8007208:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2280      	movs	r2, #128	@ 0x80
 800720e:	589b      	ldr	r3, [r3, r2]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d016      	beq.n	8007242 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2280      	movs	r2, #128	@ 0x80
 8007218:	589b      	ldr	r3, [r3, r2]
 800721a:	4a17      	ldr	r2, [pc, #92]	@ (8007278 <HAL_UART_IRQHandler+0x2c8>)
 800721c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2280      	movs	r2, #128	@ 0x80
 8007222:	589b      	ldr	r3, [r3, r2]
 8007224:	0018      	movs	r0, r3
 8007226:	f7fe f905 	bl	8005434 <HAL_DMA_Abort_IT>
 800722a:	1e03      	subs	r3, r0, #0
 800722c:	d01c      	beq.n	8007268 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2280      	movs	r2, #128	@ 0x80
 8007232:	589b      	ldr	r3, [r3, r2]
 8007234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	2180      	movs	r1, #128	@ 0x80
 800723a:	5852      	ldr	r2, [r2, r1]
 800723c:	0010      	movs	r0, r2
 800723e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007240:	e012      	b.n	8007268 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	0018      	movs	r0, r3
 8007246:	f000 f9e1 	bl	800760c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724a:	e00d      	b.n	8007268 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	0018      	movs	r0, r3
 8007250:	f000 f9dc 	bl	800760c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007254:	e008      	b.n	8007268 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	0018      	movs	r0, r3
 800725a:	f000 f9d7 	bl	800760c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2290      	movs	r2, #144	@ 0x90
 8007262:	2100      	movs	r1, #0
 8007264:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007266:	e1b9      	b.n	80075dc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007268:	46c0      	nop			@ (mov r8, r8)
    return;
 800726a:	e1b7      	b.n	80075dc <HAL_UART_IRQHandler+0x62c>
 800726c:	0000080f 	.word	0x0000080f
 8007270:	10000001 	.word	0x10000001
 8007274:	04000120 	.word	0x04000120
 8007278:	08007f8d 	.word	0x08007f8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007280:	2b01      	cmp	r3, #1
 8007282:	d000      	beq.n	8007286 <HAL_UART_IRQHandler+0x2d6>
 8007284:	e13e      	b.n	8007504 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007286:	23a4      	movs	r3, #164	@ 0xa4
 8007288:	18fb      	adds	r3, r7, r3
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2210      	movs	r2, #16
 800728e:	4013      	ands	r3, r2
 8007290:	d100      	bne.n	8007294 <HAL_UART_IRQHandler+0x2e4>
 8007292:	e137      	b.n	8007504 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007294:	23a0      	movs	r3, #160	@ 0xa0
 8007296:	18fb      	adds	r3, r7, r3
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2210      	movs	r2, #16
 800729c:	4013      	ands	r3, r2
 800729e:	d100      	bne.n	80072a2 <HAL_UART_IRQHandler+0x2f2>
 80072a0:	e130      	b.n	8007504 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2210      	movs	r2, #16
 80072a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	2240      	movs	r2, #64	@ 0x40
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b40      	cmp	r3, #64	@ 0x40
 80072b6:	d000      	beq.n	80072ba <HAL_UART_IRQHandler+0x30a>
 80072b8:	e0a4      	b.n	8007404 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2280      	movs	r2, #128	@ 0x80
 80072be:	589b      	ldr	r3, [r3, r2]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	217e      	movs	r1, #126	@ 0x7e
 80072c6:	187b      	adds	r3, r7, r1
 80072c8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80072ca:	187b      	adds	r3, r7, r1
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d100      	bne.n	80072d4 <HAL_UART_IRQHandler+0x324>
 80072d2:	e185      	b.n	80075e0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	225c      	movs	r2, #92	@ 0x5c
 80072d8:	5a9b      	ldrh	r3, [r3, r2]
 80072da:	187a      	adds	r2, r7, r1
 80072dc:	8812      	ldrh	r2, [r2, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d300      	bcc.n	80072e4 <HAL_UART_IRQHandler+0x334>
 80072e2:	e17d      	b.n	80075e0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	187a      	adds	r2, r7, r1
 80072e8:	215e      	movs	r1, #94	@ 0x5e
 80072ea:	8812      	ldrh	r2, [r2, #0]
 80072ec:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2280      	movs	r2, #128	@ 0x80
 80072f2:	589b      	ldr	r3, [r3, r2]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2220      	movs	r2, #32
 80072fa:	4013      	ands	r3, r2
 80072fc:	d170      	bne.n	80073e0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007302:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007306:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007308:	2301      	movs	r3, #1
 800730a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800730c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800730e:	f383 8810 	msr	PRIMASK, r3
}
 8007312:	46c0      	nop			@ (mov r8, r8)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	49b4      	ldr	r1, [pc, #720]	@ (80075f0 <HAL_UART_IRQHandler+0x640>)
 8007320:	400a      	ands	r2, r1
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007326:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732a:	f383 8810 	msr	PRIMASK, r3
}
 800732e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007330:	f3ef 8310 	mrs	r3, PRIMASK
 8007334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8007336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007338:	677b      	str	r3, [r7, #116]	@ 0x74
 800733a:	2301      	movs	r3, #1
 800733c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800733e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007340:	f383 8810 	msr	PRIMASK, r3
}
 8007344:	46c0      	nop			@ (mov r8, r8)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2101      	movs	r1, #1
 8007352:	438a      	bics	r2, r1
 8007354:	609a      	str	r2, [r3, #8]
 8007356:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007358:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800735a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800735c:	f383 8810 	msr	PRIMASK, r3
}
 8007360:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007362:	f3ef 8310 	mrs	r3, PRIMASK
 8007366:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8007368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800736a:	673b      	str	r3, [r7, #112]	@ 0x70
 800736c:	2301      	movs	r3, #1
 800736e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007372:	f383 8810 	msr	PRIMASK, r3
}
 8007376:	46c0      	nop			@ (mov r8, r8)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689a      	ldr	r2, [r3, #8]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2140      	movs	r1, #64	@ 0x40
 8007384:	438a      	bics	r2, r1
 8007386:	609a      	str	r2, [r3, #8]
 8007388:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800738a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800738e:	f383 8810 	msr	PRIMASK, r3
}
 8007392:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	228c      	movs	r2, #140	@ 0x8c
 8007398:	2120      	movs	r1, #32
 800739a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073a2:	f3ef 8310 	mrs	r3, PRIMASK
 80073a6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80073a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073ac:	2301      	movs	r3, #1
 80073ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073b2:	f383 8810 	msr	PRIMASK, r3
}
 80073b6:	46c0      	nop			@ (mov r8, r8)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2110      	movs	r1, #16
 80073c4:	438a      	bics	r2, r1
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073ce:	f383 8810 	msr	PRIMASK, r3
}
 80073d2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2280      	movs	r2, #128	@ 0x80
 80073d8:	589b      	ldr	r3, [r3, r2]
 80073da:	0018      	movs	r0, r3
 80073dc:	f7fd ffc8 	bl	8005370 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	225c      	movs	r2, #92	@ 0x5c
 80073ea:	5a9a      	ldrh	r2, [r3, r2]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	215e      	movs	r1, #94	@ 0x5e
 80073f0:	5a5b      	ldrh	r3, [r3, r1]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	0011      	movs	r1, r2
 80073fc:	0018      	movs	r0, r3
 80073fe:	f000 f90d 	bl	800761c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007402:	e0ed      	b.n	80075e0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	225c      	movs	r2, #92	@ 0x5c
 8007408:	5a99      	ldrh	r1, [r3, r2]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	225e      	movs	r2, #94	@ 0x5e
 800740e:	5a9b      	ldrh	r3, [r3, r2]
 8007410:	b29a      	uxth	r2, r3
 8007412:	208e      	movs	r0, #142	@ 0x8e
 8007414:	183b      	adds	r3, r7, r0
 8007416:	1a8a      	subs	r2, r1, r2
 8007418:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	225e      	movs	r2, #94	@ 0x5e
 800741e:	5a9b      	ldrh	r3, [r3, r2]
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d100      	bne.n	8007428 <HAL_UART_IRQHandler+0x478>
 8007426:	e0dd      	b.n	80075e4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8007428:	183b      	adds	r3, r7, r0
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d100      	bne.n	8007432 <HAL_UART_IRQHandler+0x482>
 8007430:	e0d8      	b.n	80075e4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007432:	f3ef 8310 	mrs	r3, PRIMASK
 8007436:	60fb      	str	r3, [r7, #12]
  return(result);
 8007438:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800743a:	2488      	movs	r4, #136	@ 0x88
 800743c:	193a      	adds	r2, r7, r4
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	2301      	movs	r3, #1
 8007442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f383 8810 	msr	PRIMASK, r3
}
 800744a:	46c0      	nop			@ (mov r8, r8)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4967      	ldr	r1, [pc, #412]	@ (80075f4 <HAL_UART_IRQHandler+0x644>)
 8007458:	400a      	ands	r2, r1
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	193b      	adds	r3, r7, r4
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f383 8810 	msr	PRIMASK, r3
}
 8007468:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800746a:	f3ef 8310 	mrs	r3, PRIMASK
 800746e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007470:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007472:	2484      	movs	r4, #132	@ 0x84
 8007474:	193a      	adds	r2, r7, r4
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	2301      	movs	r3, #1
 800747a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	f383 8810 	msr	PRIMASK, r3
}
 8007482:	46c0      	nop			@ (mov r8, r8)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	495a      	ldr	r1, [pc, #360]	@ (80075f8 <HAL_UART_IRQHandler+0x648>)
 8007490:	400a      	ands	r2, r1
 8007492:	609a      	str	r2, [r3, #8]
 8007494:	193b      	adds	r3, r7, r4
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	f383 8810 	msr	PRIMASK, r3
}
 80074a0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	228c      	movs	r2, #140	@ 0x8c
 80074a6:	2120      	movs	r1, #32
 80074a8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b6:	f3ef 8310 	mrs	r3, PRIMASK
 80074ba:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80074bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074be:	2480      	movs	r4, #128	@ 0x80
 80074c0:	193a      	adds	r2, r7, r4
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	2301      	movs	r3, #1
 80074c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ca:	f383 8810 	msr	PRIMASK, r3
}
 80074ce:	46c0      	nop			@ (mov r8, r8)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2110      	movs	r1, #16
 80074dc:	438a      	bics	r2, r1
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	193b      	adds	r3, r7, r4
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e8:	f383 8810 	msr	PRIMASK, r3
}
 80074ec:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2202      	movs	r2, #2
 80074f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074f4:	183b      	adds	r3, r7, r0
 80074f6:	881a      	ldrh	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	0011      	movs	r1, r2
 80074fc:	0018      	movs	r0, r3
 80074fe:	f000 f88d 	bl	800761c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007502:	e06f      	b.n	80075e4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007504:	23a4      	movs	r3, #164	@ 0xa4
 8007506:	18fb      	adds	r3, r7, r3
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	2380      	movs	r3, #128	@ 0x80
 800750c:	035b      	lsls	r3, r3, #13
 800750e:	4013      	ands	r3, r2
 8007510:	d010      	beq.n	8007534 <HAL_UART_IRQHandler+0x584>
 8007512:	239c      	movs	r3, #156	@ 0x9c
 8007514:	18fb      	adds	r3, r7, r3
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	2380      	movs	r3, #128	@ 0x80
 800751a:	03db      	lsls	r3, r3, #15
 800751c:	4013      	ands	r3, r2
 800751e:	d009      	beq.n	8007534 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2280      	movs	r2, #128	@ 0x80
 8007526:	0352      	lsls	r2, r2, #13
 8007528:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	0018      	movs	r0, r3
 800752e:	f000 ff19 	bl	8008364 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007532:	e05a      	b.n	80075ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007534:	23a4      	movs	r3, #164	@ 0xa4
 8007536:	18fb      	adds	r3, r7, r3
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2280      	movs	r2, #128	@ 0x80
 800753c:	4013      	ands	r3, r2
 800753e:	d016      	beq.n	800756e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007540:	23a0      	movs	r3, #160	@ 0xa0
 8007542:	18fb      	adds	r3, r7, r3
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2280      	movs	r2, #128	@ 0x80
 8007548:	4013      	ands	r3, r2
 800754a:	d106      	bne.n	800755a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800754c:	239c      	movs	r3, #156	@ 0x9c
 800754e:	18fb      	adds	r3, r7, r3
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	2380      	movs	r3, #128	@ 0x80
 8007554:	041b      	lsls	r3, r3, #16
 8007556:	4013      	ands	r3, r2
 8007558:	d009      	beq.n	800756e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800755e:	2b00      	cmp	r3, #0
 8007560:	d042      	beq.n	80075e8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	0010      	movs	r0, r2
 800756a:	4798      	blx	r3
    }
    return;
 800756c:	e03c      	b.n	80075e8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800756e:	23a4      	movs	r3, #164	@ 0xa4
 8007570:	18fb      	adds	r3, r7, r3
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2240      	movs	r2, #64	@ 0x40
 8007576:	4013      	ands	r3, r2
 8007578:	d00a      	beq.n	8007590 <HAL_UART_IRQHandler+0x5e0>
 800757a:	23a0      	movs	r3, #160	@ 0xa0
 800757c:	18fb      	adds	r3, r7, r3
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2240      	movs	r2, #64	@ 0x40
 8007582:	4013      	ands	r3, r2
 8007584:	d004      	beq.n	8007590 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	0018      	movs	r0, r3
 800758a:	f000 febf 	bl	800830c <UART_EndTransmit_IT>
    return;
 800758e:	e02c      	b.n	80075ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007590:	23a4      	movs	r3, #164	@ 0xa4
 8007592:	18fb      	adds	r3, r7, r3
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	2380      	movs	r3, #128	@ 0x80
 8007598:	041b      	lsls	r3, r3, #16
 800759a:	4013      	ands	r3, r2
 800759c:	d00b      	beq.n	80075b6 <HAL_UART_IRQHandler+0x606>
 800759e:	23a0      	movs	r3, #160	@ 0xa0
 80075a0:	18fb      	adds	r3, r7, r3
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	2380      	movs	r3, #128	@ 0x80
 80075a6:	05db      	lsls	r3, r3, #23
 80075a8:	4013      	ands	r3, r2
 80075aa:	d004      	beq.n	80075b6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	0018      	movs	r0, r3
 80075b0:	f000 fee8 	bl	8008384 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075b4:	e019      	b.n	80075ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80075b6:	23a4      	movs	r3, #164	@ 0xa4
 80075b8:	18fb      	adds	r3, r7, r3
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	2380      	movs	r3, #128	@ 0x80
 80075be:	045b      	lsls	r3, r3, #17
 80075c0:	4013      	ands	r3, r2
 80075c2:	d012      	beq.n	80075ea <HAL_UART_IRQHandler+0x63a>
 80075c4:	23a0      	movs	r3, #160	@ 0xa0
 80075c6:	18fb      	adds	r3, r7, r3
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	da0d      	bge.n	80075ea <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	0018      	movs	r0, r3
 80075d2:	f000 fecf 	bl	8008374 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075d6:	e008      	b.n	80075ea <HAL_UART_IRQHandler+0x63a>
      return;
 80075d8:	46c0      	nop			@ (mov r8, r8)
 80075da:	e006      	b.n	80075ea <HAL_UART_IRQHandler+0x63a>
    return;
 80075dc:	46c0      	nop			@ (mov r8, r8)
 80075de:	e004      	b.n	80075ea <HAL_UART_IRQHandler+0x63a>
      return;
 80075e0:	46c0      	nop			@ (mov r8, r8)
 80075e2:	e002      	b.n	80075ea <HAL_UART_IRQHandler+0x63a>
      return;
 80075e4:	46c0      	nop			@ (mov r8, r8)
 80075e6:	e000      	b.n	80075ea <HAL_UART_IRQHandler+0x63a>
    return;
 80075e8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80075ea:	46bd      	mov	sp, r7
 80075ec:	b02a      	add	sp, #168	@ 0xa8
 80075ee:	bdb0      	pop	{r4, r5, r7, pc}
 80075f0:	fffffeff 	.word	0xfffffeff
 80075f4:	fffffedf 	.word	0xfffffedf
 80075f8:	effffffe 	.word	0xeffffffe

080075fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007604:	46c0      	nop			@ (mov r8, r8)
 8007606:	46bd      	mov	sp, r7
 8007608:	b002      	add	sp, #8
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007614:	46c0      	nop			@ (mov r8, r8)
 8007616:	46bd      	mov	sp, r7
 8007618:	b002      	add	sp, #8
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	000a      	movs	r2, r1
 8007626:	1cbb      	adds	r3, r7, #2
 8007628:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800762a:	46c0      	nop			@ (mov r8, r8)
 800762c:	46bd      	mov	sp, r7
 800762e:	b002      	add	sp, #8
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007634:	b5b0      	push	{r4, r5, r7, lr}
 8007636:	b090      	sub	sp, #64	@ 0x40
 8007638:	af00      	add	r7, sp, #0
 800763a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800763c:	231a      	movs	r3, #26
 800763e:	2220      	movs	r2, #32
 8007640:	189b      	adds	r3, r3, r2
 8007642:	19db      	adds	r3, r3, r7
 8007644:	2200      	movs	r2, #0
 8007646:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	431a      	orrs	r2, r3
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	431a      	orrs	r2, r3
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	4313      	orrs	r3, r2
 800765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4ac4      	ldr	r2, [pc, #784]	@ (8007978 <UART_SetConfig+0x344>)
 8007668:	4013      	ands	r3, r2
 800766a:	0019      	movs	r1, r3
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007672:	430b      	orrs	r3, r1
 8007674:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	4abf      	ldr	r2, [pc, #764]	@ (800797c <UART_SetConfig+0x348>)
 800767e:	4013      	ands	r3, r2
 8007680:	0018      	movs	r0, r3
 8007682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007684:	68d9      	ldr	r1, [r3, #12]
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	0003      	movs	r3, r0
 800768c:	430b      	orrs	r3, r1
 800768e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4ab9      	ldr	r2, [pc, #740]	@ (8007980 <UART_SetConfig+0x34c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d004      	beq.n	80076aa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80076a6:	4313      	orrs	r3, r2
 80076a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	4ab4      	ldr	r2, [pc, #720]	@ (8007984 <UART_SetConfig+0x350>)
 80076b2:	4013      	ands	r3, r2
 80076b4:	0019      	movs	r1, r3
 80076b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076bc:	430b      	orrs	r3, r1
 80076be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c6:	220f      	movs	r2, #15
 80076c8:	4393      	bics	r3, r2
 80076ca:	0018      	movs	r0, r3
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	0003      	movs	r3, r0
 80076d6:	430b      	orrs	r3, r1
 80076d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4aaa      	ldr	r2, [pc, #680]	@ (8007988 <UART_SetConfig+0x354>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d131      	bne.n	8007748 <UART_SetConfig+0x114>
 80076e4:	4ba9      	ldr	r3, [pc, #676]	@ (800798c <UART_SetConfig+0x358>)
 80076e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076e8:	2203      	movs	r2, #3
 80076ea:	4013      	ands	r3, r2
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d01d      	beq.n	800772c <UART_SetConfig+0xf8>
 80076f0:	d823      	bhi.n	800773a <UART_SetConfig+0x106>
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d00c      	beq.n	8007710 <UART_SetConfig+0xdc>
 80076f6:	d820      	bhi.n	800773a <UART_SetConfig+0x106>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <UART_SetConfig+0xce>
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d00e      	beq.n	800771e <UART_SetConfig+0xea>
 8007700:	e01b      	b.n	800773a <UART_SetConfig+0x106>
 8007702:	231b      	movs	r3, #27
 8007704:	2220      	movs	r2, #32
 8007706:	189b      	adds	r3, r3, r2
 8007708:	19db      	adds	r3, r3, r7
 800770a:	2200      	movs	r2, #0
 800770c:	701a      	strb	r2, [r3, #0]
 800770e:	e071      	b.n	80077f4 <UART_SetConfig+0x1c0>
 8007710:	231b      	movs	r3, #27
 8007712:	2220      	movs	r2, #32
 8007714:	189b      	adds	r3, r3, r2
 8007716:	19db      	adds	r3, r3, r7
 8007718:	2202      	movs	r2, #2
 800771a:	701a      	strb	r2, [r3, #0]
 800771c:	e06a      	b.n	80077f4 <UART_SetConfig+0x1c0>
 800771e:	231b      	movs	r3, #27
 8007720:	2220      	movs	r2, #32
 8007722:	189b      	adds	r3, r3, r2
 8007724:	19db      	adds	r3, r3, r7
 8007726:	2204      	movs	r2, #4
 8007728:	701a      	strb	r2, [r3, #0]
 800772a:	e063      	b.n	80077f4 <UART_SetConfig+0x1c0>
 800772c:	231b      	movs	r3, #27
 800772e:	2220      	movs	r2, #32
 8007730:	189b      	adds	r3, r3, r2
 8007732:	19db      	adds	r3, r3, r7
 8007734:	2208      	movs	r2, #8
 8007736:	701a      	strb	r2, [r3, #0]
 8007738:	e05c      	b.n	80077f4 <UART_SetConfig+0x1c0>
 800773a:	231b      	movs	r3, #27
 800773c:	2220      	movs	r2, #32
 800773e:	189b      	adds	r3, r3, r2
 8007740:	19db      	adds	r3, r3, r7
 8007742:	2210      	movs	r2, #16
 8007744:	701a      	strb	r2, [r3, #0]
 8007746:	e055      	b.n	80077f4 <UART_SetConfig+0x1c0>
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a90      	ldr	r2, [pc, #576]	@ (8007990 <UART_SetConfig+0x35c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d106      	bne.n	8007760 <UART_SetConfig+0x12c>
 8007752:	231b      	movs	r3, #27
 8007754:	2220      	movs	r2, #32
 8007756:	189b      	adds	r3, r3, r2
 8007758:	19db      	adds	r3, r3, r7
 800775a:	2200      	movs	r2, #0
 800775c:	701a      	strb	r2, [r3, #0]
 800775e:	e049      	b.n	80077f4 <UART_SetConfig+0x1c0>
 8007760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a86      	ldr	r2, [pc, #536]	@ (8007980 <UART_SetConfig+0x34c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d13e      	bne.n	80077e8 <UART_SetConfig+0x1b4>
 800776a:	4b88      	ldr	r3, [pc, #544]	@ (800798c <UART_SetConfig+0x358>)
 800776c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800776e:	23c0      	movs	r3, #192	@ 0xc0
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	4013      	ands	r3, r2
 8007774:	22c0      	movs	r2, #192	@ 0xc0
 8007776:	0112      	lsls	r2, r2, #4
 8007778:	4293      	cmp	r3, r2
 800777a:	d027      	beq.n	80077cc <UART_SetConfig+0x198>
 800777c:	22c0      	movs	r2, #192	@ 0xc0
 800777e:	0112      	lsls	r2, r2, #4
 8007780:	4293      	cmp	r3, r2
 8007782:	d82a      	bhi.n	80077da <UART_SetConfig+0x1a6>
 8007784:	2280      	movs	r2, #128	@ 0x80
 8007786:	0112      	lsls	r2, r2, #4
 8007788:	4293      	cmp	r3, r2
 800778a:	d011      	beq.n	80077b0 <UART_SetConfig+0x17c>
 800778c:	2280      	movs	r2, #128	@ 0x80
 800778e:	0112      	lsls	r2, r2, #4
 8007790:	4293      	cmp	r3, r2
 8007792:	d822      	bhi.n	80077da <UART_SetConfig+0x1a6>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d004      	beq.n	80077a2 <UART_SetConfig+0x16e>
 8007798:	2280      	movs	r2, #128	@ 0x80
 800779a:	00d2      	lsls	r2, r2, #3
 800779c:	4293      	cmp	r3, r2
 800779e:	d00e      	beq.n	80077be <UART_SetConfig+0x18a>
 80077a0:	e01b      	b.n	80077da <UART_SetConfig+0x1a6>
 80077a2:	231b      	movs	r3, #27
 80077a4:	2220      	movs	r2, #32
 80077a6:	189b      	adds	r3, r3, r2
 80077a8:	19db      	adds	r3, r3, r7
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	e021      	b.n	80077f4 <UART_SetConfig+0x1c0>
 80077b0:	231b      	movs	r3, #27
 80077b2:	2220      	movs	r2, #32
 80077b4:	189b      	adds	r3, r3, r2
 80077b6:	19db      	adds	r3, r3, r7
 80077b8:	2202      	movs	r2, #2
 80077ba:	701a      	strb	r2, [r3, #0]
 80077bc:	e01a      	b.n	80077f4 <UART_SetConfig+0x1c0>
 80077be:	231b      	movs	r3, #27
 80077c0:	2220      	movs	r2, #32
 80077c2:	189b      	adds	r3, r3, r2
 80077c4:	19db      	adds	r3, r3, r7
 80077c6:	2204      	movs	r2, #4
 80077c8:	701a      	strb	r2, [r3, #0]
 80077ca:	e013      	b.n	80077f4 <UART_SetConfig+0x1c0>
 80077cc:	231b      	movs	r3, #27
 80077ce:	2220      	movs	r2, #32
 80077d0:	189b      	adds	r3, r3, r2
 80077d2:	19db      	adds	r3, r3, r7
 80077d4:	2208      	movs	r2, #8
 80077d6:	701a      	strb	r2, [r3, #0]
 80077d8:	e00c      	b.n	80077f4 <UART_SetConfig+0x1c0>
 80077da:	231b      	movs	r3, #27
 80077dc:	2220      	movs	r2, #32
 80077de:	189b      	adds	r3, r3, r2
 80077e0:	19db      	adds	r3, r3, r7
 80077e2:	2210      	movs	r2, #16
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	e005      	b.n	80077f4 <UART_SetConfig+0x1c0>
 80077e8:	231b      	movs	r3, #27
 80077ea:	2220      	movs	r2, #32
 80077ec:	189b      	adds	r3, r3, r2
 80077ee:	19db      	adds	r3, r3, r7
 80077f0:	2210      	movs	r2, #16
 80077f2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a61      	ldr	r2, [pc, #388]	@ (8007980 <UART_SetConfig+0x34c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d000      	beq.n	8007800 <UART_SetConfig+0x1cc>
 80077fe:	e092      	b.n	8007926 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007800:	231b      	movs	r3, #27
 8007802:	2220      	movs	r2, #32
 8007804:	189b      	adds	r3, r3, r2
 8007806:	19db      	adds	r3, r3, r7
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b08      	cmp	r3, #8
 800780c:	d015      	beq.n	800783a <UART_SetConfig+0x206>
 800780e:	dc18      	bgt.n	8007842 <UART_SetConfig+0x20e>
 8007810:	2b04      	cmp	r3, #4
 8007812:	d00d      	beq.n	8007830 <UART_SetConfig+0x1fc>
 8007814:	dc15      	bgt.n	8007842 <UART_SetConfig+0x20e>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <UART_SetConfig+0x1ec>
 800781a:	2b02      	cmp	r3, #2
 800781c:	d005      	beq.n	800782a <UART_SetConfig+0x1f6>
 800781e:	e010      	b.n	8007842 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007820:	f7fe fcee 	bl	8006200 <HAL_RCC_GetPCLK1Freq>
 8007824:	0003      	movs	r3, r0
 8007826:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007828:	e014      	b.n	8007854 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800782a:	4b5a      	ldr	r3, [pc, #360]	@ (8007994 <UART_SetConfig+0x360>)
 800782c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800782e:	e011      	b.n	8007854 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007830:	f7fe fc5a 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 8007834:	0003      	movs	r3, r0
 8007836:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007838:	e00c      	b.n	8007854 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800783a:	2380      	movs	r3, #128	@ 0x80
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007840:	e008      	b.n	8007854 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007846:	231a      	movs	r3, #26
 8007848:	2220      	movs	r2, #32
 800784a:	189b      	adds	r3, r3, r2
 800784c:	19db      	adds	r3, r3, r7
 800784e:	2201      	movs	r2, #1
 8007850:	701a      	strb	r2, [r3, #0]
        break;
 8007852:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007856:	2b00      	cmp	r3, #0
 8007858:	d100      	bne.n	800785c <UART_SetConfig+0x228>
 800785a:	e147      	b.n	8007aec <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800785c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007860:	4b4d      	ldr	r3, [pc, #308]	@ (8007998 <UART_SetConfig+0x364>)
 8007862:	0052      	lsls	r2, r2, #1
 8007864:	5ad3      	ldrh	r3, [r2, r3]
 8007866:	0019      	movs	r1, r3
 8007868:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800786a:	f7f8 fc67 	bl	800013c <__udivsi3>
 800786e:	0003      	movs	r3, r0
 8007870:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	0013      	movs	r3, r2
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	189b      	adds	r3, r3, r2
 800787c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800787e:	429a      	cmp	r2, r3
 8007880:	d305      	bcc.n	800788e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007888:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800788a:	429a      	cmp	r2, r3
 800788c:	d906      	bls.n	800789c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800788e:	231a      	movs	r3, #26
 8007890:	2220      	movs	r2, #32
 8007892:	189b      	adds	r3, r3, r2
 8007894:	19db      	adds	r3, r3, r7
 8007896:	2201      	movs	r2, #1
 8007898:	701a      	strb	r2, [r3, #0]
 800789a:	e127      	b.n	8007aec <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800789c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800789e:	61bb      	str	r3, [r7, #24]
 80078a0:	2300      	movs	r3, #0
 80078a2:	61fb      	str	r3, [r7, #28]
 80078a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078a8:	4b3b      	ldr	r3, [pc, #236]	@ (8007998 <UART_SetConfig+0x364>)
 80078aa:	0052      	lsls	r2, r2, #1
 80078ac:	5ad3      	ldrh	r3, [r2, r3]
 80078ae:	613b      	str	r3, [r7, #16]
 80078b0:	2300      	movs	r3, #0
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	69b8      	ldr	r0, [r7, #24]
 80078ba:	69f9      	ldr	r1, [r7, #28]
 80078bc:	f7f8 fdf2 	bl	80004a4 <__aeabi_uldivmod>
 80078c0:	0002      	movs	r2, r0
 80078c2:	000b      	movs	r3, r1
 80078c4:	0e11      	lsrs	r1, r2, #24
 80078c6:	021d      	lsls	r5, r3, #8
 80078c8:	430d      	orrs	r5, r1
 80078ca:	0214      	lsls	r4, r2, #8
 80078cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	085b      	lsrs	r3, r3, #1
 80078d2:	60bb      	str	r3, [r7, #8]
 80078d4:	2300      	movs	r3, #0
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	68b8      	ldr	r0, [r7, #8]
 80078da:	68f9      	ldr	r1, [r7, #12]
 80078dc:	1900      	adds	r0, r0, r4
 80078de:	4169      	adcs	r1, r5
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	603b      	str	r3, [r7, #0]
 80078e6:	2300      	movs	r3, #0
 80078e8:	607b      	str	r3, [r7, #4]
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f7f8 fdd9 	bl	80004a4 <__aeabi_uldivmod>
 80078f2:	0002      	movs	r2, r0
 80078f4:	000b      	movs	r3, r1
 80078f6:	0013      	movs	r3, r2
 80078f8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078fc:	23c0      	movs	r3, #192	@ 0xc0
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	429a      	cmp	r2, r3
 8007902:	d309      	bcc.n	8007918 <UART_SetConfig+0x2e4>
 8007904:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007906:	2380      	movs	r3, #128	@ 0x80
 8007908:	035b      	lsls	r3, r3, #13
 800790a:	429a      	cmp	r2, r3
 800790c:	d204      	bcs.n	8007918 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800790e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007914:	60da      	str	r2, [r3, #12]
 8007916:	e0e9      	b.n	8007aec <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8007918:	231a      	movs	r3, #26
 800791a:	2220      	movs	r2, #32
 800791c:	189b      	adds	r3, r3, r2
 800791e:	19db      	adds	r3, r3, r7
 8007920:	2201      	movs	r2, #1
 8007922:	701a      	strb	r2, [r3, #0]
 8007924:	e0e2      	b.n	8007aec <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	69da      	ldr	r2, [r3, #28]
 800792a:	2380      	movs	r3, #128	@ 0x80
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	429a      	cmp	r2, r3
 8007930:	d000      	beq.n	8007934 <UART_SetConfig+0x300>
 8007932:	e083      	b.n	8007a3c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007934:	231b      	movs	r3, #27
 8007936:	2220      	movs	r2, #32
 8007938:	189b      	adds	r3, r3, r2
 800793a:	19db      	adds	r3, r3, r7
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b08      	cmp	r3, #8
 8007940:	d015      	beq.n	800796e <UART_SetConfig+0x33a>
 8007942:	dc2b      	bgt.n	800799c <UART_SetConfig+0x368>
 8007944:	2b04      	cmp	r3, #4
 8007946:	d00d      	beq.n	8007964 <UART_SetConfig+0x330>
 8007948:	dc28      	bgt.n	800799c <UART_SetConfig+0x368>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <UART_SetConfig+0x320>
 800794e:	2b02      	cmp	r3, #2
 8007950:	d005      	beq.n	800795e <UART_SetConfig+0x32a>
 8007952:	e023      	b.n	800799c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007954:	f7fe fc54 	bl	8006200 <HAL_RCC_GetPCLK1Freq>
 8007958:	0003      	movs	r3, r0
 800795a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800795c:	e027      	b.n	80079ae <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800795e:	4b0d      	ldr	r3, [pc, #52]	@ (8007994 <UART_SetConfig+0x360>)
 8007960:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007962:	e024      	b.n	80079ae <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007964:	f7fe fbc0 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 8007968:	0003      	movs	r3, r0
 800796a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800796c:	e01f      	b.n	80079ae <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800796e:	2380      	movs	r3, #128	@ 0x80
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007974:	e01b      	b.n	80079ae <UART_SetConfig+0x37a>
 8007976:	46c0      	nop			@ (mov r8, r8)
 8007978:	cfff69f3 	.word	0xcfff69f3
 800797c:	ffffcfff 	.word	0xffffcfff
 8007980:	40008000 	.word	0x40008000
 8007984:	11fff4ff 	.word	0x11fff4ff
 8007988:	40013800 	.word	0x40013800
 800798c:	40021000 	.word	0x40021000
 8007990:	40004400 	.word	0x40004400
 8007994:	00f42400 	.word	0x00f42400
 8007998:	0800b910 	.word	0x0800b910
      default:
        pclk = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80079a0:	231a      	movs	r3, #26
 80079a2:	2220      	movs	r2, #32
 80079a4:	189b      	adds	r3, r3, r2
 80079a6:	19db      	adds	r3, r3, r7
 80079a8:	2201      	movs	r2, #1
 80079aa:	701a      	strb	r2, [r3, #0]
        break;
 80079ac:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d100      	bne.n	80079b6 <UART_SetConfig+0x382>
 80079b4:	e09a      	b.n	8007aec <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079ba:	4b58      	ldr	r3, [pc, #352]	@ (8007b1c <UART_SetConfig+0x4e8>)
 80079bc:	0052      	lsls	r2, r2, #1
 80079be:	5ad3      	ldrh	r3, [r2, r3]
 80079c0:	0019      	movs	r1, r3
 80079c2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80079c4:	f7f8 fbba 	bl	800013c <__udivsi3>
 80079c8:	0003      	movs	r3, r0
 80079ca:	005a      	lsls	r2, r3, #1
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	18d2      	adds	r2, r2, r3
 80079d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	0019      	movs	r1, r3
 80079da:	0010      	movs	r0, r2
 80079dc:	f7f8 fbae 	bl	800013c <__udivsi3>
 80079e0:	0003      	movs	r3, r0
 80079e2:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e6:	2b0f      	cmp	r3, #15
 80079e8:	d921      	bls.n	8007a2e <UART_SetConfig+0x3fa>
 80079ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ec:	2380      	movs	r3, #128	@ 0x80
 80079ee:	025b      	lsls	r3, r3, #9
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d21c      	bcs.n	8007a2e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	200e      	movs	r0, #14
 80079fa:	2420      	movs	r4, #32
 80079fc:	1903      	adds	r3, r0, r4
 80079fe:	19db      	adds	r3, r3, r7
 8007a00:	210f      	movs	r1, #15
 8007a02:	438a      	bics	r2, r1
 8007a04:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	085b      	lsrs	r3, r3, #1
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	2207      	movs	r2, #7
 8007a0e:	4013      	ands	r3, r2
 8007a10:	b299      	uxth	r1, r3
 8007a12:	1903      	adds	r3, r0, r4
 8007a14:	19db      	adds	r3, r3, r7
 8007a16:	1902      	adds	r2, r0, r4
 8007a18:	19d2      	adds	r2, r2, r7
 8007a1a:	8812      	ldrh	r2, [r2, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	1902      	adds	r2, r0, r4
 8007a26:	19d2      	adds	r2, r2, r7
 8007a28:	8812      	ldrh	r2, [r2, #0]
 8007a2a:	60da      	str	r2, [r3, #12]
 8007a2c:	e05e      	b.n	8007aec <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8007a2e:	231a      	movs	r3, #26
 8007a30:	2220      	movs	r2, #32
 8007a32:	189b      	adds	r3, r3, r2
 8007a34:	19db      	adds	r3, r3, r7
 8007a36:	2201      	movs	r2, #1
 8007a38:	701a      	strb	r2, [r3, #0]
 8007a3a:	e057      	b.n	8007aec <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a3c:	231b      	movs	r3, #27
 8007a3e:	2220      	movs	r2, #32
 8007a40:	189b      	adds	r3, r3, r2
 8007a42:	19db      	adds	r3, r3, r7
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b08      	cmp	r3, #8
 8007a48:	d015      	beq.n	8007a76 <UART_SetConfig+0x442>
 8007a4a:	dc18      	bgt.n	8007a7e <UART_SetConfig+0x44a>
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d00d      	beq.n	8007a6c <UART_SetConfig+0x438>
 8007a50:	dc15      	bgt.n	8007a7e <UART_SetConfig+0x44a>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <UART_SetConfig+0x428>
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d005      	beq.n	8007a66 <UART_SetConfig+0x432>
 8007a5a:	e010      	b.n	8007a7e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a5c:	f7fe fbd0 	bl	8006200 <HAL_RCC_GetPCLK1Freq>
 8007a60:	0003      	movs	r3, r0
 8007a62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a64:	e014      	b.n	8007a90 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a66:	4b2e      	ldr	r3, [pc, #184]	@ (8007b20 <UART_SetConfig+0x4ec>)
 8007a68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a6a:	e011      	b.n	8007a90 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a6c:	f7fe fb3c 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 8007a70:	0003      	movs	r3, r0
 8007a72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a74:	e00c      	b.n	8007a90 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a76:	2380      	movs	r3, #128	@ 0x80
 8007a78:	021b      	lsls	r3, r3, #8
 8007a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a7c:	e008      	b.n	8007a90 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007a82:	231a      	movs	r3, #26
 8007a84:	2220      	movs	r2, #32
 8007a86:	189b      	adds	r3, r3, r2
 8007a88:	19db      	adds	r3, r3, r7
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	701a      	strb	r2, [r3, #0]
        break;
 8007a8e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d02a      	beq.n	8007aec <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a9a:	4b20      	ldr	r3, [pc, #128]	@ (8007b1c <UART_SetConfig+0x4e8>)
 8007a9c:	0052      	lsls	r2, r2, #1
 8007a9e:	5ad3      	ldrh	r3, [r2, r3]
 8007aa0:	0019      	movs	r1, r3
 8007aa2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007aa4:	f7f8 fb4a 	bl	800013c <__udivsi3>
 8007aa8:	0003      	movs	r3, r0
 8007aaa:	001a      	movs	r2, r3
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	085b      	lsrs	r3, r3, #1
 8007ab2:	18d2      	adds	r2, r2, r3
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	0019      	movs	r1, r3
 8007aba:	0010      	movs	r0, r2
 8007abc:	f7f8 fb3e 	bl	800013c <__udivsi3>
 8007ac0:	0003      	movs	r3, r0
 8007ac2:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac6:	2b0f      	cmp	r3, #15
 8007ac8:	d90a      	bls.n	8007ae0 <UART_SetConfig+0x4ac>
 8007aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007acc:	2380      	movs	r3, #128	@ 0x80
 8007ace:	025b      	lsls	r3, r3, #9
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d205      	bcs.n	8007ae0 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	60da      	str	r2, [r3, #12]
 8007ade:	e005      	b.n	8007aec <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8007ae0:	231a      	movs	r3, #26
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	189b      	adds	r3, r3, r2
 8007ae6:	19db      	adds	r3, r3, r7
 8007ae8:	2201      	movs	r2, #1
 8007aea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aee:	226a      	movs	r2, #106	@ 0x6a
 8007af0:	2101      	movs	r1, #1
 8007af2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af6:	2268      	movs	r2, #104	@ 0x68
 8007af8:	2101      	movs	r1, #1
 8007afa:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afe:	2200      	movs	r2, #0
 8007b00:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b04:	2200      	movs	r2, #0
 8007b06:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b08:	231a      	movs	r3, #26
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	189b      	adds	r3, r3, r2
 8007b0e:	19db      	adds	r3, r3, r7
 8007b10:	781b      	ldrb	r3, [r3, #0]
}
 8007b12:	0018      	movs	r0, r3
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b010      	add	sp, #64	@ 0x40
 8007b18:	bdb0      	pop	{r4, r5, r7, pc}
 8007b1a:	46c0      	nop			@ (mov r8, r8)
 8007b1c:	0800b910 	.word	0x0800b910
 8007b20:	00f42400 	.word	0x00f42400

08007b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b30:	2208      	movs	r2, #8
 8007b32:	4013      	ands	r3, r2
 8007b34:	d00b      	beq.n	8007b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8007c68 <UART_AdvFeatureConfig+0x144>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	0019      	movs	r1, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b52:	2201      	movs	r2, #1
 8007b54:	4013      	ands	r3, r2
 8007b56:	d00b      	beq.n	8007b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	4a43      	ldr	r2, [pc, #268]	@ (8007c6c <UART_AdvFeatureConfig+0x148>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	0019      	movs	r1, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b74:	2202      	movs	r2, #2
 8007b76:	4013      	ands	r3, r2
 8007b78:	d00b      	beq.n	8007b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4a3b      	ldr	r2, [pc, #236]	@ (8007c70 <UART_AdvFeatureConfig+0x14c>)
 8007b82:	4013      	ands	r3, r2
 8007b84:	0019      	movs	r1, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b96:	2204      	movs	r2, #4
 8007b98:	4013      	ands	r3, r2
 8007b9a:	d00b      	beq.n	8007bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	4a34      	ldr	r2, [pc, #208]	@ (8007c74 <UART_AdvFeatureConfig+0x150>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	0019      	movs	r1, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb8:	2210      	movs	r2, #16
 8007bba:	4013      	ands	r3, r2
 8007bbc:	d00b      	beq.n	8007bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8007c78 <UART_AdvFeatureConfig+0x154>)
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	0019      	movs	r1, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bda:	2220      	movs	r2, #32
 8007bdc:	4013      	ands	r3, r2
 8007bde:	d00b      	beq.n	8007bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	4a25      	ldr	r2, [pc, #148]	@ (8007c7c <UART_AdvFeatureConfig+0x158>)
 8007be8:	4013      	ands	r3, r2
 8007bea:	0019      	movs	r1, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfc:	2240      	movs	r2, #64	@ 0x40
 8007bfe:	4013      	ands	r3, r2
 8007c00:	d01d      	beq.n	8007c3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4a1d      	ldr	r2, [pc, #116]	@ (8007c80 <UART_AdvFeatureConfig+0x15c>)
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	0019      	movs	r1, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c1e:	2380      	movs	r3, #128	@ 0x80
 8007c20:	035b      	lsls	r3, r3, #13
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d10b      	bne.n	8007c3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	4a15      	ldr	r2, [pc, #84]	@ (8007c84 <UART_AdvFeatureConfig+0x160>)
 8007c2e:	4013      	ands	r3, r2
 8007c30:	0019      	movs	r1, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c42:	2280      	movs	r2, #128	@ 0x80
 8007c44:	4013      	ands	r3, r2
 8007c46:	d00b      	beq.n	8007c60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8007c88 <UART_AdvFeatureConfig+0x164>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	0019      	movs	r1, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	605a      	str	r2, [r3, #4]
  }
}
 8007c60:	46c0      	nop			@ (mov r8, r8)
 8007c62:	46bd      	mov	sp, r7
 8007c64:	b002      	add	sp, #8
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	ffff7fff 	.word	0xffff7fff
 8007c6c:	fffdffff 	.word	0xfffdffff
 8007c70:	fffeffff 	.word	0xfffeffff
 8007c74:	fffbffff 	.word	0xfffbffff
 8007c78:	ffffefff 	.word	0xffffefff
 8007c7c:	ffffdfff 	.word	0xffffdfff
 8007c80:	ffefffff 	.word	0xffefffff
 8007c84:	ff9fffff 	.word	0xff9fffff
 8007c88:	fff7ffff 	.word	0xfff7ffff

08007c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b092      	sub	sp, #72	@ 0x48
 8007c90:	af02      	add	r7, sp, #8
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2290      	movs	r2, #144	@ 0x90
 8007c98:	2100      	movs	r1, #0
 8007c9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c9c:	f7fc f9b2 	bl	8004004 <HAL_GetTick>
 8007ca0:	0003      	movs	r3, r0
 8007ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2208      	movs	r2, #8
 8007cac:	4013      	ands	r3, r2
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d12d      	bne.n	8007d0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cb4:	2280      	movs	r2, #128	@ 0x80
 8007cb6:	0391      	lsls	r1, r2, #14
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	4a47      	ldr	r2, [pc, #284]	@ (8007dd8 <UART_CheckIdleState+0x14c>)
 8007cbc:	9200      	str	r2, [sp, #0]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f000 f88e 	bl	8007de0 <UART_WaitOnFlagUntilTimeout>
 8007cc4:	1e03      	subs	r3, r0, #0
 8007cc6:	d022      	beq.n	8007d0e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd8:	f383 8810 	msr	PRIMASK, r3
}
 8007cdc:	46c0      	nop			@ (mov r8, r8)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2180      	movs	r1, #128	@ 0x80
 8007cea:	438a      	bics	r2, r1
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf4:	f383 8810 	msr	PRIMASK, r3
}
 8007cf8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2288      	movs	r2, #136	@ 0x88
 8007cfe:	2120      	movs	r1, #32
 8007d00:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2284      	movs	r2, #132	@ 0x84
 8007d06:	2100      	movs	r1, #0
 8007d08:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e060      	b.n	8007dd0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2204      	movs	r2, #4
 8007d16:	4013      	ands	r3, r2
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d146      	bne.n	8007daa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d1e:	2280      	movs	r2, #128	@ 0x80
 8007d20:	03d1      	lsls	r1, r2, #15
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	4a2c      	ldr	r2, [pc, #176]	@ (8007dd8 <UART_CheckIdleState+0x14c>)
 8007d26:	9200      	str	r2, [sp, #0]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f000 f859 	bl	8007de0 <UART_WaitOnFlagUntilTimeout>
 8007d2e:	1e03      	subs	r3, r0, #0
 8007d30:	d03b      	beq.n	8007daa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d32:	f3ef 8310 	mrs	r3, PRIMASK
 8007d36:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d38:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f383 8810 	msr	PRIMASK, r3
}
 8007d46:	46c0      	nop			@ (mov r8, r8)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4922      	ldr	r1, [pc, #136]	@ (8007ddc <UART_CheckIdleState+0x150>)
 8007d54:	400a      	ands	r2, r1
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f383 8810 	msr	PRIMASK, r3
}
 8007d62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d64:	f3ef 8310 	mrs	r3, PRIMASK
 8007d68:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d6a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d6e:	2301      	movs	r3, #1
 8007d70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	f383 8810 	msr	PRIMASK, r3
}
 8007d78:	46c0      	nop			@ (mov r8, r8)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2101      	movs	r1, #1
 8007d86:	438a      	bics	r2, r1
 8007d88:	609a      	str	r2, [r3, #8]
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	f383 8810 	msr	PRIMASK, r3
}
 8007d94:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	228c      	movs	r2, #140	@ 0x8c
 8007d9a:	2120      	movs	r1, #32
 8007d9c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2284      	movs	r2, #132	@ 0x84
 8007da2:	2100      	movs	r1, #0
 8007da4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e012      	b.n	8007dd0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2288      	movs	r2, #136	@ 0x88
 8007dae:	2120      	movs	r1, #32
 8007db0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	228c      	movs	r2, #140	@ 0x8c
 8007db6:	2120      	movs	r1, #32
 8007db8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2284      	movs	r2, #132	@ 0x84
 8007dca:	2100      	movs	r1, #0
 8007dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	b010      	add	sp, #64	@ 0x40
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	01ffffff 	.word	0x01ffffff
 8007ddc:	fffffedf 	.word	0xfffffedf

08007de0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	1dfb      	adds	r3, r7, #7
 8007dee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df0:	e051      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	3301      	adds	r3, #1
 8007df6:	d04e      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007df8:	f7fc f904 	bl	8004004 <HAL_GetTick>
 8007dfc:	0002      	movs	r2, r0
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d302      	bcc.n	8007e0e <UART_WaitOnFlagUntilTimeout+0x2e>
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e051      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2204      	movs	r2, #4
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	d03b      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b80      	cmp	r3, #128	@ 0x80
 8007e22:	d038      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b40      	cmp	r3, #64	@ 0x40
 8007e28:	d035      	beq.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	2208      	movs	r2, #8
 8007e32:	4013      	ands	r3, r2
 8007e34:	2b08      	cmp	r3, #8
 8007e36:	d111      	bne.n	8007e5c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2208      	movs	r2, #8
 8007e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	0018      	movs	r0, r3
 8007e44:	f000 f83c 	bl	8007ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2290      	movs	r2, #144	@ 0x90
 8007e4c:	2108      	movs	r1, #8
 8007e4e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2284      	movs	r2, #132	@ 0x84
 8007e54:	2100      	movs	r1, #0
 8007e56:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e02c      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	69da      	ldr	r2, [r3, #28]
 8007e62:	2380      	movs	r3, #128	@ 0x80
 8007e64:	011b      	lsls	r3, r3, #4
 8007e66:	401a      	ands	r2, r3
 8007e68:	2380      	movs	r3, #128	@ 0x80
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d112      	bne.n	8007e96 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2280      	movs	r2, #128	@ 0x80
 8007e76:	0112      	lsls	r2, r2, #4
 8007e78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f000 f81f 	bl	8007ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2290      	movs	r2, #144	@ 0x90
 8007e86:	2120      	movs	r1, #32
 8007e88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2284      	movs	r2, #132	@ 0x84
 8007e8e:	2100      	movs	r1, #0
 8007e90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e00f      	b.n	8007eb6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69db      	ldr	r3, [r3, #28]
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	425a      	negs	r2, r3
 8007ea6:	4153      	adcs	r3, r2
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	001a      	movs	r2, r3
 8007eac:	1dfb      	adds	r3, r7, #7
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d09e      	beq.n	8007df2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	b004      	add	sp, #16
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08e      	sub	sp, #56	@ 0x38
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8007ece:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	f383 8810 	msr	PRIMASK, r3
}
 8007edc:	46c0      	nop			@ (mov r8, r8)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4926      	ldr	r1, [pc, #152]	@ (8007f84 <UART_EndRxTransfer+0xc4>)
 8007eea:	400a      	ands	r2, r1
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	f383 8810 	msr	PRIMASK, r3
}
 8007ef8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007efa:	f3ef 8310 	mrs	r3, PRIMASK
 8007efe:	623b      	str	r3, [r7, #32]
  return(result);
 8007f00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f04:	2301      	movs	r3, #1
 8007f06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	f383 8810 	msr	PRIMASK, r3
}
 8007f0e:	46c0      	nop			@ (mov r8, r8)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	491b      	ldr	r1, [pc, #108]	@ (8007f88 <UART_EndRxTransfer+0xc8>)
 8007f1c:	400a      	ands	r2, r1
 8007f1e:	609a      	str	r2, [r3, #8]
 8007f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f26:	f383 8810 	msr	PRIMASK, r3
}
 8007f2a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d118      	bne.n	8007f66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f34:	f3ef 8310 	mrs	r3, PRIMASK
 8007f38:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f3e:	2301      	movs	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f383 8810 	msr	PRIMASK, r3
}
 8007f48:	46c0      	nop			@ (mov r8, r8)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2110      	movs	r1, #16
 8007f56:	438a      	bics	r2, r1
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f383 8810 	msr	PRIMASK, r3
}
 8007f64:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	228c      	movs	r2, #140	@ 0x8c
 8007f6a:	2120      	movs	r1, #32
 8007f6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f7a:	46c0      	nop			@ (mov r8, r8)
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b00e      	add	sp, #56	@ 0x38
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	fffffedf 	.word	0xfffffedf
 8007f88:	effffffe 	.word	0xeffffffe

08007f8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	225e      	movs	r2, #94	@ 0x5e
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2256      	movs	r2, #86	@ 0x56
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	0018      	movs	r0, r3
 8007fae:	f7ff fb2d 	bl	800760c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fb2:	46c0      	nop			@ (mov r8, r8)
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	b004      	add	sp, #16
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b08a      	sub	sp, #40	@ 0x28
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2288      	movs	r2, #136	@ 0x88
 8007fc6:	589b      	ldr	r3, [r3, r2]
 8007fc8:	2b21      	cmp	r3, #33	@ 0x21
 8007fca:	d14c      	bne.n	8008066 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2256      	movs	r2, #86	@ 0x56
 8007fd0:	5a9b      	ldrh	r3, [r3, r2]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d132      	bne.n	800803e <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8007fdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fde:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f383 8810 	msr	PRIMASK, r3
}
 8007fec:	46c0      	nop			@ (mov r8, r8)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2180      	movs	r1, #128	@ 0x80
 8007ffa:	438a      	bics	r2, r1
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f383 8810 	msr	PRIMASK, r3
}
 8008008:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800800a:	f3ef 8310 	mrs	r3, PRIMASK
 800800e:	617b      	str	r3, [r7, #20]
  return(result);
 8008010:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008012:	623b      	str	r3, [r7, #32]
 8008014:	2301      	movs	r3, #1
 8008016:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	f383 8810 	msr	PRIMASK, r3
}
 800801e:	46c0      	nop			@ (mov r8, r8)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2140      	movs	r1, #64	@ 0x40
 800802c:	430a      	orrs	r2, r1
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f383 8810 	msr	PRIMASK, r3
}
 800803a:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800803c:	e013      	b.n	8008066 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008042:	781a      	ldrb	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2256      	movs	r2, #86	@ 0x56
 8008058:	5a9b      	ldrh	r3, [r3, r2]
 800805a:	b29b      	uxth	r3, r3
 800805c:	3b01      	subs	r3, #1
 800805e:	b299      	uxth	r1, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2256      	movs	r2, #86	@ 0x56
 8008064:	5299      	strh	r1, [r3, r2]
}
 8008066:	46c0      	nop			@ (mov r8, r8)
 8008068:	46bd      	mov	sp, r7
 800806a:	b00a      	add	sp, #40	@ 0x28
 800806c:	bd80      	pop	{r7, pc}

0800806e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b08c      	sub	sp, #48	@ 0x30
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2288      	movs	r2, #136	@ 0x88
 800807a:	589b      	ldr	r3, [r3, r2]
 800807c:	2b21      	cmp	r3, #33	@ 0x21
 800807e:	d151      	bne.n	8008124 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2256      	movs	r2, #86	@ 0x56
 8008084:	5a9b      	ldrh	r3, [r3, r2]
 8008086:	b29b      	uxth	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	d132      	bne.n	80080f2 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800808c:	f3ef 8310 	mrs	r3, PRIMASK
 8008090:	60fb      	str	r3, [r7, #12]
  return(result);
 8008092:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008096:	2301      	movs	r3, #1
 8008098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f383 8810 	msr	PRIMASK, r3
}
 80080a0:	46c0      	nop			@ (mov r8, r8)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2180      	movs	r1, #128	@ 0x80
 80080ae:	438a      	bics	r2, r1
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f383 8810 	msr	PRIMASK, r3
}
 80080bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080be:	f3ef 8310 	mrs	r3, PRIMASK
 80080c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80080c4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c8:	2301      	movs	r3, #1
 80080ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	f383 8810 	msr	PRIMASK, r3
}
 80080d2:	46c0      	nop			@ (mov r8, r8)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2140      	movs	r1, #64	@ 0x40
 80080e0:	430a      	orrs	r2, r1
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	f383 8810 	msr	PRIMASK, r3
}
 80080ee:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80080f0:	e018      	b.n	8008124 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80080f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	001a      	movs	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	05d2      	lsls	r2, r2, #23
 8008104:	0dd2      	lsrs	r2, r2, #23
 8008106:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800810c:	1c9a      	adds	r2, r3, #2
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2256      	movs	r2, #86	@ 0x56
 8008116:	5a9b      	ldrh	r3, [r3, r2]
 8008118:	b29b      	uxth	r3, r3
 800811a:	3b01      	subs	r3, #1
 800811c:	b299      	uxth	r1, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2256      	movs	r2, #86	@ 0x56
 8008122:	5299      	strh	r1, [r3, r2]
}
 8008124:	46c0      	nop			@ (mov r8, r8)
 8008126:	46bd      	mov	sp, r7
 8008128:	b00c      	add	sp, #48	@ 0x30
 800812a:	bd80      	pop	{r7, pc}

0800812c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08c      	sub	sp, #48	@ 0x30
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2288      	movs	r2, #136	@ 0x88
 8008138:	589b      	ldr	r3, [r3, r2]
 800813a:	2b21      	cmp	r3, #33	@ 0x21
 800813c:	d165      	bne.n	800820a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800813e:	232e      	movs	r3, #46	@ 0x2e
 8008140:	18fb      	adds	r3, r7, r3
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	216a      	movs	r1, #106	@ 0x6a
 8008146:	5a52      	ldrh	r2, [r2, r1]
 8008148:	801a      	strh	r2, [r3, #0]
 800814a:	e059      	b.n	8008200 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2256      	movs	r2, #86	@ 0x56
 8008150:	5a9b      	ldrh	r3, [r3, r2]
 8008152:	b29b      	uxth	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	d133      	bne.n	80081c0 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008158:	f3ef 8310 	mrs	r3, PRIMASK
 800815c:	60fb      	str	r3, [r7, #12]
  return(result);
 800815e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008160:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008162:	2301      	movs	r3, #1
 8008164:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f383 8810 	msr	PRIMASK, r3
}
 800816c:	46c0      	nop			@ (mov r8, r8)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4926      	ldr	r1, [pc, #152]	@ (8008214 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800817a:	400a      	ands	r2, r1
 800817c:	609a      	str	r2, [r3, #8]
 800817e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008180:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f383 8810 	msr	PRIMASK, r3
}
 8008188:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800818a:	f3ef 8310 	mrs	r3, PRIMASK
 800818e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008190:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008192:	627b      	str	r3, [r7, #36]	@ 0x24
 8008194:	2301      	movs	r3, #1
 8008196:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	f383 8810 	msr	PRIMASK, r3
}
 800819e:	46c0      	nop			@ (mov r8, r8)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2140      	movs	r1, #64	@ 0x40
 80081ac:	430a      	orrs	r2, r1
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	f383 8810 	msr	PRIMASK, r3
}
 80081ba:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80081bc:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80081be:	e024      	b.n	800820a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	2280      	movs	r2, #128	@ 0x80
 80081c8:	4013      	ands	r3, r2
 80081ca:	d013      	beq.n	80081f4 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d0:	781a      	ldrb	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2256      	movs	r2, #86	@ 0x56
 80081e6:	5a9b      	ldrh	r3, [r3, r2]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b299      	uxth	r1, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2256      	movs	r2, #86	@ 0x56
 80081f2:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80081f4:	212e      	movs	r1, #46	@ 0x2e
 80081f6:	187b      	adds	r3, r7, r1
 80081f8:	881a      	ldrh	r2, [r3, #0]
 80081fa:	187b      	adds	r3, r7, r1
 80081fc:	3a01      	subs	r2, #1
 80081fe:	801a      	strh	r2, [r3, #0]
 8008200:	232e      	movs	r3, #46	@ 0x2e
 8008202:	18fb      	adds	r3, r7, r3
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1a0      	bne.n	800814c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800820a:	46c0      	nop			@ (mov r8, r8)
 800820c:	46bd      	mov	sp, r7
 800820e:	b00c      	add	sp, #48	@ 0x30
 8008210:	bd80      	pop	{r7, pc}
 8008212:	46c0      	nop			@ (mov r8, r8)
 8008214:	ff7fffff 	.word	0xff7fffff

08008218 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08c      	sub	sp, #48	@ 0x30
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2288      	movs	r2, #136	@ 0x88
 8008224:	589b      	ldr	r3, [r3, r2]
 8008226:	2b21      	cmp	r3, #33	@ 0x21
 8008228:	d16a      	bne.n	8008300 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800822a:	232e      	movs	r3, #46	@ 0x2e
 800822c:	18fb      	adds	r3, r7, r3
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	216a      	movs	r1, #106	@ 0x6a
 8008232:	5a52      	ldrh	r2, [r2, r1]
 8008234:	801a      	strh	r2, [r3, #0]
 8008236:	e05e      	b.n	80082f6 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2256      	movs	r2, #86	@ 0x56
 800823c:	5a9b      	ldrh	r3, [r3, r2]
 800823e:	b29b      	uxth	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	d133      	bne.n	80082ac <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008244:	f3ef 8310 	mrs	r3, PRIMASK
 8008248:	60bb      	str	r3, [r7, #8]
  return(result);
 800824a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800824c:	627b      	str	r3, [r7, #36]	@ 0x24
 800824e:	2301      	movs	r3, #1
 8008250:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f383 8810 	msr	PRIMASK, r3
}
 8008258:	46c0      	nop			@ (mov r8, r8)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4928      	ldr	r1, [pc, #160]	@ (8008308 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8008266:	400a      	ands	r2, r1
 8008268:	609a      	str	r2, [r3, #8]
 800826a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f383 8810 	msr	PRIMASK, r3
}
 8008274:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008276:	f3ef 8310 	mrs	r3, PRIMASK
 800827a:	617b      	str	r3, [r7, #20]
  return(result);
 800827c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800827e:	623b      	str	r3, [r7, #32]
 8008280:	2301      	movs	r3, #1
 8008282:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	f383 8810 	msr	PRIMASK, r3
}
 800828a:	46c0      	nop			@ (mov r8, r8)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2140      	movs	r1, #64	@ 0x40
 8008298:	430a      	orrs	r2, r1
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	f383 8810 	msr	PRIMASK, r3
}
 80082a6:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80082a8:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80082aa:	e029      	b.n	8008300 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	2280      	movs	r2, #128	@ 0x80
 80082b4:	4013      	ands	r3, r2
 80082b6:	d018      	beq.n	80082ea <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082bc:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80082be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	001a      	movs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	05d2      	lsls	r2, r2, #23
 80082ca:	0dd2      	lsrs	r2, r2, #23
 80082cc:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082d2:	1c9a      	adds	r2, r3, #2
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2256      	movs	r2, #86	@ 0x56
 80082dc:	5a9b      	ldrh	r3, [r3, r2]
 80082de:	b29b      	uxth	r3, r3
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b299      	uxth	r1, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2256      	movs	r2, #86	@ 0x56
 80082e8:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80082ea:	212e      	movs	r1, #46	@ 0x2e
 80082ec:	187b      	adds	r3, r7, r1
 80082ee:	881a      	ldrh	r2, [r3, #0]
 80082f0:	187b      	adds	r3, r7, r1
 80082f2:	3a01      	subs	r2, #1
 80082f4:	801a      	strh	r2, [r3, #0]
 80082f6:	232e      	movs	r3, #46	@ 0x2e
 80082f8:	18fb      	adds	r3, r7, r3
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d19b      	bne.n	8008238 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8008300:	46c0      	nop			@ (mov r8, r8)
 8008302:	46bd      	mov	sp, r7
 8008304:	b00c      	add	sp, #48	@ 0x30
 8008306:	bd80      	pop	{r7, pc}
 8008308:	ff7fffff 	.word	0xff7fffff

0800830c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008314:	f3ef 8310 	mrs	r3, PRIMASK
 8008318:	60bb      	str	r3, [r7, #8]
  return(result);
 800831a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800831c:	617b      	str	r3, [r7, #20]
 800831e:	2301      	movs	r3, #1
 8008320:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f383 8810 	msr	PRIMASK, r3
}
 8008328:	46c0      	nop			@ (mov r8, r8)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2140      	movs	r1, #64	@ 0x40
 8008336:	438a      	bics	r2, r1
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f383 8810 	msr	PRIMASK, r3
}
 8008344:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2288      	movs	r2, #136	@ 0x88
 800834a:	2120      	movs	r1, #32
 800834c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	0018      	movs	r0, r3
 8008358:	f7ff f950 	bl	80075fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800835c:	46c0      	nop			@ (mov r8, r8)
 800835e:	46bd      	mov	sp, r7
 8008360:	b006      	add	sp, #24
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800836c:	46c0      	nop			@ (mov r8, r8)
 800836e:	46bd      	mov	sp, r7
 8008370:	b002      	add	sp, #8
 8008372:	bd80      	pop	{r7, pc}

08008374 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800837c:	46c0      	nop			@ (mov r8, r8)
 800837e:	46bd      	mov	sp, r7
 8008380:	b002      	add	sp, #8
 8008382:	bd80      	pop	{r7, pc}

08008384 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800838c:	46c0      	nop			@ (mov r8, r8)
 800838e:	46bd      	mov	sp, r7
 8008390:	b002      	add	sp, #8
 8008392:	bd80      	pop	{r7, pc}

08008394 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2284      	movs	r2, #132	@ 0x84
 80083a0:	5c9b      	ldrb	r3, [r3, r2]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <HAL_UARTEx_DisableFifoMode+0x16>
 80083a6:	2302      	movs	r3, #2
 80083a8:	e027      	b.n	80083fa <HAL_UARTEx_DisableFifoMode+0x66>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2284      	movs	r2, #132	@ 0x84
 80083ae:	2101      	movs	r1, #1
 80083b0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2288      	movs	r2, #136	@ 0x88
 80083b6:	2124      	movs	r1, #36	@ 0x24
 80083b8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2101      	movs	r1, #1
 80083ce:	438a      	bics	r2, r1
 80083d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	4a0b      	ldr	r2, [pc, #44]	@ (8008404 <HAL_UARTEx_DisableFifoMode+0x70>)
 80083d6:	4013      	ands	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2288      	movs	r2, #136	@ 0x88
 80083ec:	2120      	movs	r1, #32
 80083ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2284      	movs	r2, #132	@ 0x84
 80083f4:	2100      	movs	r1, #0
 80083f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	0018      	movs	r0, r3
 80083fc:	46bd      	mov	sp, r7
 80083fe:	b004      	add	sp, #16
 8008400:	bd80      	pop	{r7, pc}
 8008402:	46c0      	nop			@ (mov r8, r8)
 8008404:	dfffffff 	.word	0xdfffffff

08008408 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2284      	movs	r2, #132	@ 0x84
 8008416:	5c9b      	ldrb	r3, [r3, r2]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d101      	bne.n	8008420 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800841c:	2302      	movs	r3, #2
 800841e:	e02e      	b.n	800847e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2284      	movs	r2, #132	@ 0x84
 8008424:	2101      	movs	r1, #1
 8008426:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2288      	movs	r2, #136	@ 0x88
 800842c:	2124      	movs	r1, #36	@ 0x24
 800842e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2101      	movs	r1, #1
 8008444:	438a      	bics	r2, r1
 8008446:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	08d9      	lsrs	r1, r3, #3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	0018      	movs	r0, r3
 8008460:	f000 f854 	bl	800850c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2288      	movs	r2, #136	@ 0x88
 8008470:	2120      	movs	r1, #32
 8008472:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2284      	movs	r2, #132	@ 0x84
 8008478:	2100      	movs	r1, #0
 800847a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	0018      	movs	r0, r3
 8008480:	46bd      	mov	sp, r7
 8008482:	b004      	add	sp, #16
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2284      	movs	r2, #132	@ 0x84
 8008496:	5c9b      	ldrb	r3, [r3, r2]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800849c:	2302      	movs	r3, #2
 800849e:	e02f      	b.n	8008500 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2284      	movs	r2, #132	@ 0x84
 80084a4:	2101      	movs	r1, #1
 80084a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2288      	movs	r2, #136	@ 0x88
 80084ac:	2124      	movs	r1, #36	@ 0x24
 80084ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2101      	movs	r1, #1
 80084c4:	438a      	bics	r2, r1
 80084c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	4a0e      	ldr	r2, [pc, #56]	@ (8008508 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	0019      	movs	r1, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	0018      	movs	r0, r3
 80084e2:	f000 f813 	bl	800850c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2288      	movs	r2, #136	@ 0x88
 80084f2:	2120      	movs	r1, #32
 80084f4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2284      	movs	r2, #132	@ 0x84
 80084fa:	2100      	movs	r1, #0
 80084fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	0018      	movs	r0, r3
 8008502:	46bd      	mov	sp, r7
 8008504:	b004      	add	sp, #16
 8008506:	bd80      	pop	{r7, pc}
 8008508:	f1ffffff 	.word	0xf1ffffff

0800850c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800850c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008518:	2b00      	cmp	r3, #0
 800851a:	d108      	bne.n	800852e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	226a      	movs	r2, #106	@ 0x6a
 8008520:	2101      	movs	r1, #1
 8008522:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2268      	movs	r2, #104	@ 0x68
 8008528:	2101      	movs	r1, #1
 800852a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800852c:	e043      	b.n	80085b6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800852e:	260f      	movs	r6, #15
 8008530:	19bb      	adds	r3, r7, r6
 8008532:	2208      	movs	r2, #8
 8008534:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008536:	200e      	movs	r0, #14
 8008538:	183b      	adds	r3, r7, r0
 800853a:	2208      	movs	r2, #8
 800853c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	0e5b      	lsrs	r3, r3, #25
 8008546:	b2da      	uxtb	r2, r3
 8008548:	240d      	movs	r4, #13
 800854a:	193b      	adds	r3, r7, r4
 800854c:	2107      	movs	r1, #7
 800854e:	400a      	ands	r2, r1
 8008550:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	0f5b      	lsrs	r3, r3, #29
 800855a:	b2da      	uxtb	r2, r3
 800855c:	250c      	movs	r5, #12
 800855e:	197b      	adds	r3, r7, r5
 8008560:	2107      	movs	r1, #7
 8008562:	400a      	ands	r2, r1
 8008564:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008566:	183b      	adds	r3, r7, r0
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	197a      	adds	r2, r7, r5
 800856c:	7812      	ldrb	r2, [r2, #0]
 800856e:	4914      	ldr	r1, [pc, #80]	@ (80085c0 <UARTEx_SetNbDataToProcess+0xb4>)
 8008570:	5c8a      	ldrb	r2, [r1, r2]
 8008572:	435a      	muls	r2, r3
 8008574:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008576:	197b      	adds	r3, r7, r5
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	4a12      	ldr	r2, [pc, #72]	@ (80085c4 <UARTEx_SetNbDataToProcess+0xb8>)
 800857c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800857e:	0019      	movs	r1, r3
 8008580:	f7f7 fe66 	bl	8000250 <__divsi3>
 8008584:	0003      	movs	r3, r0
 8008586:	b299      	uxth	r1, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	226a      	movs	r2, #106	@ 0x6a
 800858c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800858e:	19bb      	adds	r3, r7, r6
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	193a      	adds	r2, r7, r4
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	490a      	ldr	r1, [pc, #40]	@ (80085c0 <UARTEx_SetNbDataToProcess+0xb4>)
 8008598:	5c8a      	ldrb	r2, [r1, r2]
 800859a:	435a      	muls	r2, r3
 800859c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800859e:	193b      	adds	r3, r7, r4
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	4a08      	ldr	r2, [pc, #32]	@ (80085c4 <UARTEx_SetNbDataToProcess+0xb8>)
 80085a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085a6:	0019      	movs	r1, r3
 80085a8:	f7f7 fe52 	bl	8000250 <__divsi3>
 80085ac:	0003      	movs	r3, r0
 80085ae:	b299      	uxth	r1, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2268      	movs	r2, #104	@ 0x68
 80085b4:	5299      	strh	r1, [r3, r2]
}
 80085b6:	46c0      	nop			@ (mov r8, r8)
 80085b8:	46bd      	mov	sp, r7
 80085ba:	b005      	add	sp, #20
 80085bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085be:	46c0      	nop			@ (mov r8, r8)
 80085c0:	0800b928 	.word	0x0800b928
 80085c4:	0800b930 	.word	0x0800b930

080085c8 <__cvt>:
 80085c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ca:	001f      	movs	r7, r3
 80085cc:	2300      	movs	r3, #0
 80085ce:	0016      	movs	r6, r2
 80085d0:	b08b      	sub	sp, #44	@ 0x2c
 80085d2:	429f      	cmp	r7, r3
 80085d4:	da04      	bge.n	80085e0 <__cvt+0x18>
 80085d6:	2180      	movs	r1, #128	@ 0x80
 80085d8:	0609      	lsls	r1, r1, #24
 80085da:	187b      	adds	r3, r7, r1
 80085dc:	001f      	movs	r7, r3
 80085de:	232d      	movs	r3, #45	@ 0x2d
 80085e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80085e2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80085e4:	7013      	strb	r3, [r2, #0]
 80085e6:	2320      	movs	r3, #32
 80085e8:	2203      	movs	r2, #3
 80085ea:	439d      	bics	r5, r3
 80085ec:	2d46      	cmp	r5, #70	@ 0x46
 80085ee:	d007      	beq.n	8008600 <__cvt+0x38>
 80085f0:	002b      	movs	r3, r5
 80085f2:	3b45      	subs	r3, #69	@ 0x45
 80085f4:	4259      	negs	r1, r3
 80085f6:	414b      	adcs	r3, r1
 80085f8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80085fa:	3a01      	subs	r2, #1
 80085fc:	18cb      	adds	r3, r1, r3
 80085fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8008600:	ab09      	add	r3, sp, #36	@ 0x24
 8008602:	9304      	str	r3, [sp, #16]
 8008604:	ab08      	add	r3, sp, #32
 8008606:	9303      	str	r3, [sp, #12]
 8008608:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800860a:	9200      	str	r2, [sp, #0]
 800860c:	9302      	str	r3, [sp, #8]
 800860e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008610:	0032      	movs	r2, r6
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	003b      	movs	r3, r7
 8008616:	f000 fe9d 	bl	8009354 <_dtoa_r>
 800861a:	0004      	movs	r4, r0
 800861c:	2d47      	cmp	r5, #71	@ 0x47
 800861e:	d11b      	bne.n	8008658 <__cvt+0x90>
 8008620:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008622:	07db      	lsls	r3, r3, #31
 8008624:	d511      	bpl.n	800864a <__cvt+0x82>
 8008626:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008628:	18c3      	adds	r3, r0, r3
 800862a:	9307      	str	r3, [sp, #28]
 800862c:	2200      	movs	r2, #0
 800862e:	2300      	movs	r3, #0
 8008630:	0030      	movs	r0, r6
 8008632:	0039      	movs	r1, r7
 8008634:	f7f7 ff08 	bl	8000448 <__aeabi_dcmpeq>
 8008638:	2800      	cmp	r0, #0
 800863a:	d001      	beq.n	8008640 <__cvt+0x78>
 800863c:	9b07      	ldr	r3, [sp, #28]
 800863e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008640:	2230      	movs	r2, #48	@ 0x30
 8008642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008644:	9907      	ldr	r1, [sp, #28]
 8008646:	428b      	cmp	r3, r1
 8008648:	d320      	bcc.n	800868c <__cvt+0xc4>
 800864a:	0020      	movs	r0, r4
 800864c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800864e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008650:	1b1b      	subs	r3, r3, r4
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	b00b      	add	sp, #44	@ 0x2c
 8008656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008658:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800865a:	18c3      	adds	r3, r0, r3
 800865c:	9307      	str	r3, [sp, #28]
 800865e:	2d46      	cmp	r5, #70	@ 0x46
 8008660:	d1e4      	bne.n	800862c <__cvt+0x64>
 8008662:	7803      	ldrb	r3, [r0, #0]
 8008664:	2b30      	cmp	r3, #48	@ 0x30
 8008666:	d10c      	bne.n	8008682 <__cvt+0xba>
 8008668:	2200      	movs	r2, #0
 800866a:	2300      	movs	r3, #0
 800866c:	0030      	movs	r0, r6
 800866e:	0039      	movs	r1, r7
 8008670:	f7f7 feea 	bl	8000448 <__aeabi_dcmpeq>
 8008674:	2800      	cmp	r0, #0
 8008676:	d104      	bne.n	8008682 <__cvt+0xba>
 8008678:	2301      	movs	r3, #1
 800867a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800867c:	1a9b      	subs	r3, r3, r2
 800867e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008684:	9a07      	ldr	r2, [sp, #28]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	18d3      	adds	r3, r2, r3
 800868a:	e7ce      	b.n	800862a <__cvt+0x62>
 800868c:	1c59      	adds	r1, r3, #1
 800868e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008690:	701a      	strb	r2, [r3, #0]
 8008692:	e7d6      	b.n	8008642 <__cvt+0x7a>

08008694 <__exponent>:
 8008694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008696:	232b      	movs	r3, #43	@ 0x2b
 8008698:	0005      	movs	r5, r0
 800869a:	000c      	movs	r4, r1
 800869c:	b085      	sub	sp, #20
 800869e:	7002      	strb	r2, [r0, #0]
 80086a0:	2900      	cmp	r1, #0
 80086a2:	da01      	bge.n	80086a8 <__exponent+0x14>
 80086a4:	424c      	negs	r4, r1
 80086a6:	3302      	adds	r3, #2
 80086a8:	706b      	strb	r3, [r5, #1]
 80086aa:	2c09      	cmp	r4, #9
 80086ac:	dd2c      	ble.n	8008708 <__exponent+0x74>
 80086ae:	ab02      	add	r3, sp, #8
 80086b0:	1dde      	adds	r6, r3, #7
 80086b2:	0020      	movs	r0, r4
 80086b4:	210a      	movs	r1, #10
 80086b6:	f7f7 feb1 	bl	800041c <__aeabi_idivmod>
 80086ba:	0037      	movs	r7, r6
 80086bc:	3130      	adds	r1, #48	@ 0x30
 80086be:	3e01      	subs	r6, #1
 80086c0:	0020      	movs	r0, r4
 80086c2:	7031      	strb	r1, [r6, #0]
 80086c4:	210a      	movs	r1, #10
 80086c6:	9401      	str	r4, [sp, #4]
 80086c8:	f7f7 fdc2 	bl	8000250 <__divsi3>
 80086cc:	9b01      	ldr	r3, [sp, #4]
 80086ce:	0004      	movs	r4, r0
 80086d0:	2b63      	cmp	r3, #99	@ 0x63
 80086d2:	dcee      	bgt.n	80086b2 <__exponent+0x1e>
 80086d4:	1eba      	subs	r2, r7, #2
 80086d6:	1ca8      	adds	r0, r5, #2
 80086d8:	0001      	movs	r1, r0
 80086da:	0013      	movs	r3, r2
 80086dc:	3430      	adds	r4, #48	@ 0x30
 80086de:	7014      	strb	r4, [r2, #0]
 80086e0:	ac02      	add	r4, sp, #8
 80086e2:	3407      	adds	r4, #7
 80086e4:	429c      	cmp	r4, r3
 80086e6:	d80a      	bhi.n	80086fe <__exponent+0x6a>
 80086e8:	2300      	movs	r3, #0
 80086ea:	42a2      	cmp	r2, r4
 80086ec:	d803      	bhi.n	80086f6 <__exponent+0x62>
 80086ee:	3309      	adds	r3, #9
 80086f0:	aa02      	add	r2, sp, #8
 80086f2:	189b      	adds	r3, r3, r2
 80086f4:	1bdb      	subs	r3, r3, r7
 80086f6:	18c0      	adds	r0, r0, r3
 80086f8:	1b40      	subs	r0, r0, r5
 80086fa:	b005      	add	sp, #20
 80086fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086fe:	781c      	ldrb	r4, [r3, #0]
 8008700:	3301      	adds	r3, #1
 8008702:	700c      	strb	r4, [r1, #0]
 8008704:	3101      	adds	r1, #1
 8008706:	e7eb      	b.n	80086e0 <__exponent+0x4c>
 8008708:	2330      	movs	r3, #48	@ 0x30
 800870a:	18e4      	adds	r4, r4, r3
 800870c:	70ab      	strb	r3, [r5, #2]
 800870e:	1d28      	adds	r0, r5, #4
 8008710:	70ec      	strb	r4, [r5, #3]
 8008712:	e7f1      	b.n	80086f8 <__exponent+0x64>

08008714 <_printf_float>:
 8008714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008716:	b097      	sub	sp, #92	@ 0x5c
 8008718:	000d      	movs	r5, r1
 800871a:	920a      	str	r2, [sp, #40]	@ 0x28
 800871c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800871e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008720:	9009      	str	r0, [sp, #36]	@ 0x24
 8008722:	f000 fcff 	bl	8009124 <_localeconv_r>
 8008726:	6803      	ldr	r3, [r0, #0]
 8008728:	0018      	movs	r0, r3
 800872a:	930d      	str	r3, [sp, #52]	@ 0x34
 800872c:	f7f7 fcea 	bl	8000104 <strlen>
 8008730:	2300      	movs	r3, #0
 8008732:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008734:	9314      	str	r3, [sp, #80]	@ 0x50
 8008736:	7e2b      	ldrb	r3, [r5, #24]
 8008738:	2207      	movs	r2, #7
 800873a:	930c      	str	r3, [sp, #48]	@ 0x30
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008740:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	05c9      	lsls	r1, r1, #23
 8008746:	d545      	bpl.n	80087d4 <_printf_float+0xc0>
 8008748:	189b      	adds	r3, r3, r2
 800874a:	4393      	bics	r3, r2
 800874c:	001a      	movs	r2, r3
 800874e:	3208      	adds	r2, #8
 8008750:	6022      	str	r2, [r4, #0]
 8008752:	2201      	movs	r2, #1
 8008754:	681e      	ldr	r6, [r3, #0]
 8008756:	685f      	ldr	r7, [r3, #4]
 8008758:	007b      	lsls	r3, r7, #1
 800875a:	085b      	lsrs	r3, r3, #1
 800875c:	9311      	str	r3, [sp, #68]	@ 0x44
 800875e:	9610      	str	r6, [sp, #64]	@ 0x40
 8008760:	64ae      	str	r6, [r5, #72]	@ 0x48
 8008762:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8008764:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008766:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008768:	4ba7      	ldr	r3, [pc, #668]	@ (8008a08 <_printf_float+0x2f4>)
 800876a:	4252      	negs	r2, r2
 800876c:	f7fa fb60 	bl	8002e30 <__aeabi_dcmpun>
 8008770:	2800      	cmp	r0, #0
 8008772:	d131      	bne.n	80087d8 <_printf_float+0xc4>
 8008774:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008776:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008778:	2201      	movs	r2, #1
 800877a:	4ba3      	ldr	r3, [pc, #652]	@ (8008a08 <_printf_float+0x2f4>)
 800877c:	4252      	negs	r2, r2
 800877e:	f7f7 fe73 	bl	8000468 <__aeabi_dcmple>
 8008782:	2800      	cmp	r0, #0
 8008784:	d128      	bne.n	80087d8 <_printf_float+0xc4>
 8008786:	2200      	movs	r2, #0
 8008788:	2300      	movs	r3, #0
 800878a:	0030      	movs	r0, r6
 800878c:	0039      	movs	r1, r7
 800878e:	f7f7 fe61 	bl	8000454 <__aeabi_dcmplt>
 8008792:	2800      	cmp	r0, #0
 8008794:	d003      	beq.n	800879e <_printf_float+0x8a>
 8008796:	002b      	movs	r3, r5
 8008798:	222d      	movs	r2, #45	@ 0x2d
 800879a:	3343      	adds	r3, #67	@ 0x43
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087a0:	4f9a      	ldr	r7, [pc, #616]	@ (8008a0c <_printf_float+0x2f8>)
 80087a2:	2b47      	cmp	r3, #71	@ 0x47
 80087a4:	d900      	bls.n	80087a8 <_printf_float+0x94>
 80087a6:	4f9a      	ldr	r7, [pc, #616]	@ (8008a10 <_printf_float+0x2fc>)
 80087a8:	2303      	movs	r3, #3
 80087aa:	2400      	movs	r4, #0
 80087ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087ae:	612b      	str	r3, [r5, #16]
 80087b0:	3301      	adds	r3, #1
 80087b2:	439a      	bics	r2, r3
 80087b4:	602a      	str	r2, [r5, #0]
 80087b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087b8:	0029      	movs	r1, r5
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087c0:	aa15      	add	r2, sp, #84	@ 0x54
 80087c2:	f000 f9e5 	bl	8008b90 <_printf_common>
 80087c6:	3001      	adds	r0, #1
 80087c8:	d000      	beq.n	80087cc <_printf_float+0xb8>
 80087ca:	e09f      	b.n	800890c <_printf_float+0x1f8>
 80087cc:	2001      	movs	r0, #1
 80087ce:	4240      	negs	r0, r0
 80087d0:	b017      	add	sp, #92	@ 0x5c
 80087d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d4:	3307      	adds	r3, #7
 80087d6:	e7b8      	b.n	800874a <_printf_float+0x36>
 80087d8:	0032      	movs	r2, r6
 80087da:	003b      	movs	r3, r7
 80087dc:	0030      	movs	r0, r6
 80087de:	0039      	movs	r1, r7
 80087e0:	f7fa fb26 	bl	8002e30 <__aeabi_dcmpun>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d00b      	beq.n	8008800 <_printf_float+0xec>
 80087e8:	2f00      	cmp	r7, #0
 80087ea:	da03      	bge.n	80087f4 <_printf_float+0xe0>
 80087ec:	002b      	movs	r3, r5
 80087ee:	222d      	movs	r2, #45	@ 0x2d
 80087f0:	3343      	adds	r3, #67	@ 0x43
 80087f2:	701a      	strb	r2, [r3, #0]
 80087f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087f6:	4f87      	ldr	r7, [pc, #540]	@ (8008a14 <_printf_float+0x300>)
 80087f8:	2b47      	cmp	r3, #71	@ 0x47
 80087fa:	d9d5      	bls.n	80087a8 <_printf_float+0x94>
 80087fc:	4f86      	ldr	r7, [pc, #536]	@ (8008a18 <_printf_float+0x304>)
 80087fe:	e7d3      	b.n	80087a8 <_printf_float+0x94>
 8008800:	2220      	movs	r2, #32
 8008802:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008804:	686b      	ldr	r3, [r5, #4]
 8008806:	4394      	bics	r4, r2
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	d146      	bne.n	800889a <_printf_float+0x186>
 800880c:	3307      	adds	r3, #7
 800880e:	606b      	str	r3, [r5, #4]
 8008810:	2380      	movs	r3, #128	@ 0x80
 8008812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008814:	00db      	lsls	r3, r3, #3
 8008816:	4313      	orrs	r3, r2
 8008818:	2200      	movs	r2, #0
 800881a:	602b      	str	r3, [r5, #0]
 800881c:	9206      	str	r2, [sp, #24]
 800881e:	aa14      	add	r2, sp, #80	@ 0x50
 8008820:	9205      	str	r2, [sp, #20]
 8008822:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008824:	a90a      	add	r1, sp, #40	@ 0x28
 8008826:	9204      	str	r2, [sp, #16]
 8008828:	aa13      	add	r2, sp, #76	@ 0x4c
 800882a:	9203      	str	r2, [sp, #12]
 800882c:	2223      	movs	r2, #35	@ 0x23
 800882e:	1852      	adds	r2, r2, r1
 8008830:	9202      	str	r2, [sp, #8]
 8008832:	9301      	str	r3, [sp, #4]
 8008834:	686b      	ldr	r3, [r5, #4]
 8008836:	0032      	movs	r2, r6
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800883c:	003b      	movs	r3, r7
 800883e:	f7ff fec3 	bl	80085c8 <__cvt>
 8008842:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008844:	0007      	movs	r7, r0
 8008846:	2c47      	cmp	r4, #71	@ 0x47
 8008848:	d12d      	bne.n	80088a6 <_printf_float+0x192>
 800884a:	1cd3      	adds	r3, r2, #3
 800884c:	db02      	blt.n	8008854 <_printf_float+0x140>
 800884e:	686b      	ldr	r3, [r5, #4]
 8008850:	429a      	cmp	r2, r3
 8008852:	dd48      	ble.n	80088e6 <_printf_float+0x1d2>
 8008854:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008856:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008858:	3b02      	subs	r3, #2
 800885a:	b2db      	uxtb	r3, r3
 800885c:	930c      	str	r3, [sp, #48]	@ 0x30
 800885e:	0028      	movs	r0, r5
 8008860:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008862:	3901      	subs	r1, #1
 8008864:	3050      	adds	r0, #80	@ 0x50
 8008866:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008868:	f7ff ff14 	bl	8008694 <__exponent>
 800886c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800886e:	0004      	movs	r4, r0
 8008870:	1813      	adds	r3, r2, r0
 8008872:	612b      	str	r3, [r5, #16]
 8008874:	2a01      	cmp	r2, #1
 8008876:	dc02      	bgt.n	800887e <_printf_float+0x16a>
 8008878:	682a      	ldr	r2, [r5, #0]
 800887a:	07d2      	lsls	r2, r2, #31
 800887c:	d501      	bpl.n	8008882 <_printf_float+0x16e>
 800887e:	3301      	adds	r3, #1
 8008880:	612b      	str	r3, [r5, #16]
 8008882:	2323      	movs	r3, #35	@ 0x23
 8008884:	aa0a      	add	r2, sp, #40	@ 0x28
 8008886:	189b      	adds	r3, r3, r2
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d100      	bne.n	8008890 <_printf_float+0x17c>
 800888e:	e792      	b.n	80087b6 <_printf_float+0xa2>
 8008890:	002b      	movs	r3, r5
 8008892:	222d      	movs	r2, #45	@ 0x2d
 8008894:	3343      	adds	r3, #67	@ 0x43
 8008896:	701a      	strb	r2, [r3, #0]
 8008898:	e78d      	b.n	80087b6 <_printf_float+0xa2>
 800889a:	2c47      	cmp	r4, #71	@ 0x47
 800889c:	d1b8      	bne.n	8008810 <_printf_float+0xfc>
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1b6      	bne.n	8008810 <_printf_float+0xfc>
 80088a2:	3301      	adds	r3, #1
 80088a4:	e7b3      	b.n	800880e <_printf_float+0xfa>
 80088a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088a8:	0011      	movs	r1, r2
 80088aa:	2b65      	cmp	r3, #101	@ 0x65
 80088ac:	d9d7      	bls.n	800885e <_printf_float+0x14a>
 80088ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088b0:	2b66      	cmp	r3, #102	@ 0x66
 80088b2:	d11a      	bne.n	80088ea <_printf_float+0x1d6>
 80088b4:	686b      	ldr	r3, [r5, #4]
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	dd09      	ble.n	80088ce <_printf_float+0x1ba>
 80088ba:	612a      	str	r2, [r5, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d102      	bne.n	80088c6 <_printf_float+0x1b2>
 80088c0:	6829      	ldr	r1, [r5, #0]
 80088c2:	07c9      	lsls	r1, r1, #31
 80088c4:	d50b      	bpl.n	80088de <_printf_float+0x1ca>
 80088c6:	3301      	adds	r3, #1
 80088c8:	189b      	adds	r3, r3, r2
 80088ca:	612b      	str	r3, [r5, #16]
 80088cc:	e007      	b.n	80088de <_printf_float+0x1ca>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d103      	bne.n	80088da <_printf_float+0x1c6>
 80088d2:	2201      	movs	r2, #1
 80088d4:	6829      	ldr	r1, [r5, #0]
 80088d6:	4211      	tst	r1, r2
 80088d8:	d000      	beq.n	80088dc <_printf_float+0x1c8>
 80088da:	1c9a      	adds	r2, r3, #2
 80088dc:	612a      	str	r2, [r5, #16]
 80088de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80088e0:	2400      	movs	r4, #0
 80088e2:	65ab      	str	r3, [r5, #88]	@ 0x58
 80088e4:	e7cd      	b.n	8008882 <_printf_float+0x16e>
 80088e6:	2367      	movs	r3, #103	@ 0x67
 80088e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80088ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80088ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088ee:	4299      	cmp	r1, r3
 80088f0:	db06      	blt.n	8008900 <_printf_float+0x1ec>
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	6129      	str	r1, [r5, #16]
 80088f6:	07db      	lsls	r3, r3, #31
 80088f8:	d5f1      	bpl.n	80088de <_printf_float+0x1ca>
 80088fa:	3101      	adds	r1, #1
 80088fc:	6129      	str	r1, [r5, #16]
 80088fe:	e7ee      	b.n	80088de <_printf_float+0x1ca>
 8008900:	2201      	movs	r2, #1
 8008902:	2900      	cmp	r1, #0
 8008904:	dce0      	bgt.n	80088c8 <_printf_float+0x1b4>
 8008906:	1892      	adds	r2, r2, r2
 8008908:	1a52      	subs	r2, r2, r1
 800890a:	e7dd      	b.n	80088c8 <_printf_float+0x1b4>
 800890c:	682a      	ldr	r2, [r5, #0]
 800890e:	0553      	lsls	r3, r2, #21
 8008910:	d408      	bmi.n	8008924 <_printf_float+0x210>
 8008912:	692b      	ldr	r3, [r5, #16]
 8008914:	003a      	movs	r2, r7
 8008916:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008918:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800891a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800891c:	47a0      	blx	r4
 800891e:	3001      	adds	r0, #1
 8008920:	d129      	bne.n	8008976 <_printf_float+0x262>
 8008922:	e753      	b.n	80087cc <_printf_float+0xb8>
 8008924:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008926:	2b65      	cmp	r3, #101	@ 0x65
 8008928:	d800      	bhi.n	800892c <_printf_float+0x218>
 800892a:	e0da      	b.n	8008ae2 <_printf_float+0x3ce>
 800892c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800892e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008930:	2200      	movs	r2, #0
 8008932:	2300      	movs	r3, #0
 8008934:	f7f7 fd88 	bl	8000448 <__aeabi_dcmpeq>
 8008938:	2800      	cmp	r0, #0
 800893a:	d033      	beq.n	80089a4 <_printf_float+0x290>
 800893c:	2301      	movs	r3, #1
 800893e:	4a37      	ldr	r2, [pc, #220]	@ (8008a1c <_printf_float+0x308>)
 8008940:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008944:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008946:	47a0      	blx	r4
 8008948:	3001      	adds	r0, #1
 800894a:	d100      	bne.n	800894e <_printf_float+0x23a>
 800894c:	e73e      	b.n	80087cc <_printf_float+0xb8>
 800894e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008950:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008952:	42b3      	cmp	r3, r6
 8008954:	db02      	blt.n	800895c <_printf_float+0x248>
 8008956:	682b      	ldr	r3, [r5, #0]
 8008958:	07db      	lsls	r3, r3, #31
 800895a:	d50c      	bpl.n	8008976 <_printf_float+0x262>
 800895c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800895e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008960:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008962:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008964:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008966:	47a0      	blx	r4
 8008968:	2400      	movs	r4, #0
 800896a:	3001      	adds	r0, #1
 800896c:	d100      	bne.n	8008970 <_printf_float+0x25c>
 800896e:	e72d      	b.n	80087cc <_printf_float+0xb8>
 8008970:	1e73      	subs	r3, r6, #1
 8008972:	42a3      	cmp	r3, r4
 8008974:	dc0a      	bgt.n	800898c <_printf_float+0x278>
 8008976:	682b      	ldr	r3, [r5, #0]
 8008978:	079b      	lsls	r3, r3, #30
 800897a:	d500      	bpl.n	800897e <_printf_float+0x26a>
 800897c:	e105      	b.n	8008b8a <_printf_float+0x476>
 800897e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008980:	68e8      	ldr	r0, [r5, #12]
 8008982:	4298      	cmp	r0, r3
 8008984:	db00      	blt.n	8008988 <_printf_float+0x274>
 8008986:	e723      	b.n	80087d0 <_printf_float+0xbc>
 8008988:	0018      	movs	r0, r3
 800898a:	e721      	b.n	80087d0 <_printf_float+0xbc>
 800898c:	002a      	movs	r2, r5
 800898e:	2301      	movs	r3, #1
 8008990:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008994:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008996:	321a      	adds	r2, #26
 8008998:	47b8      	blx	r7
 800899a:	3001      	adds	r0, #1
 800899c:	d100      	bne.n	80089a0 <_printf_float+0x28c>
 800899e:	e715      	b.n	80087cc <_printf_float+0xb8>
 80089a0:	3401      	adds	r4, #1
 80089a2:	e7e5      	b.n	8008970 <_printf_float+0x25c>
 80089a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	dc3a      	bgt.n	8008a20 <_printf_float+0x30c>
 80089aa:	2301      	movs	r3, #1
 80089ac:	4a1b      	ldr	r2, [pc, #108]	@ (8008a1c <_printf_float+0x308>)
 80089ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089b2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80089b4:	47a0      	blx	r4
 80089b6:	3001      	adds	r0, #1
 80089b8:	d100      	bne.n	80089bc <_printf_float+0x2a8>
 80089ba:	e707      	b.n	80087cc <_printf_float+0xb8>
 80089bc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80089be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089c0:	4333      	orrs	r3, r6
 80089c2:	d102      	bne.n	80089ca <_printf_float+0x2b6>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	07db      	lsls	r3, r3, #31
 80089c8:	d5d5      	bpl.n	8008976 <_printf_float+0x262>
 80089ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80089d4:	47a0      	blx	r4
 80089d6:	2300      	movs	r3, #0
 80089d8:	3001      	adds	r0, #1
 80089da:	d100      	bne.n	80089de <_printf_float+0x2ca>
 80089dc:	e6f6      	b.n	80087cc <_printf_float+0xb8>
 80089de:	930c      	str	r3, [sp, #48]	@ 0x30
 80089e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80089e4:	425b      	negs	r3, r3
 80089e6:	4293      	cmp	r3, r2
 80089e8:	dc01      	bgt.n	80089ee <_printf_float+0x2da>
 80089ea:	0033      	movs	r3, r6
 80089ec:	e792      	b.n	8008914 <_printf_float+0x200>
 80089ee:	002a      	movs	r2, r5
 80089f0:	2301      	movs	r3, #1
 80089f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089f6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80089f8:	321a      	adds	r2, #26
 80089fa:	47a0      	blx	r4
 80089fc:	3001      	adds	r0, #1
 80089fe:	d100      	bne.n	8008a02 <_printf_float+0x2ee>
 8008a00:	e6e4      	b.n	80087cc <_printf_float+0xb8>
 8008a02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a04:	3301      	adds	r3, #1
 8008a06:	e7ea      	b.n	80089de <_printf_float+0x2ca>
 8008a08:	7fefffff 	.word	0x7fefffff
 8008a0c:	0800b938 	.word	0x0800b938
 8008a10:	0800b93c 	.word	0x0800b93c
 8008a14:	0800b940 	.word	0x0800b940
 8008a18:	0800b944 	.word	0x0800b944
 8008a1c:	0800b948 	.word	0x0800b948
 8008a20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008a22:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008a24:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a26:	429e      	cmp	r6, r3
 8008a28:	dd00      	ble.n	8008a2c <_printf_float+0x318>
 8008a2a:	001e      	movs	r6, r3
 8008a2c:	2e00      	cmp	r6, #0
 8008a2e:	dc31      	bgt.n	8008a94 <_printf_float+0x380>
 8008a30:	43f3      	mvns	r3, r6
 8008a32:	2400      	movs	r4, #0
 8008a34:	17db      	asrs	r3, r3, #31
 8008a36:	4033      	ands	r3, r6
 8008a38:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a3a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a3e:	1af3      	subs	r3, r6, r3
 8008a40:	42a3      	cmp	r3, r4
 8008a42:	dc30      	bgt.n	8008aa6 <_printf_float+0x392>
 8008a44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	dc38      	bgt.n	8008abe <_printf_float+0x3aa>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	07db      	lsls	r3, r3, #31
 8008a50:	d435      	bmi.n	8008abe <_printf_float+0x3aa>
 8008a52:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008a54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a58:	1b9b      	subs	r3, r3, r6
 8008a5a:	1b14      	subs	r4, r2, r4
 8008a5c:	429c      	cmp	r4, r3
 8008a5e:	dd00      	ble.n	8008a62 <_printf_float+0x34e>
 8008a60:	001c      	movs	r4, r3
 8008a62:	2c00      	cmp	r4, #0
 8008a64:	dc34      	bgt.n	8008ad0 <_printf_float+0x3bc>
 8008a66:	43e3      	mvns	r3, r4
 8008a68:	2600      	movs	r6, #0
 8008a6a:	17db      	asrs	r3, r3, #31
 8008a6c:	401c      	ands	r4, r3
 8008a6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	1b1b      	subs	r3, r3, r4
 8008a76:	42b3      	cmp	r3, r6
 8008a78:	dc00      	bgt.n	8008a7c <_printf_float+0x368>
 8008a7a:	e77c      	b.n	8008976 <_printf_float+0x262>
 8008a7c:	002a      	movs	r2, r5
 8008a7e:	2301      	movs	r3, #1
 8008a80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a84:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008a86:	321a      	adds	r2, #26
 8008a88:	47b8      	blx	r7
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	d100      	bne.n	8008a90 <_printf_float+0x37c>
 8008a8e:	e69d      	b.n	80087cc <_printf_float+0xb8>
 8008a90:	3601      	adds	r6, #1
 8008a92:	e7ec      	b.n	8008a6e <_printf_float+0x35a>
 8008a94:	0033      	movs	r3, r6
 8008a96:	003a      	movs	r2, r7
 8008a98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008a9e:	47a0      	blx	r4
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d1c5      	bne.n	8008a30 <_printf_float+0x31c>
 8008aa4:	e692      	b.n	80087cc <_printf_float+0xb8>
 8008aa6:	002a      	movs	r2, r5
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008aac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008aae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008ab0:	321a      	adds	r2, #26
 8008ab2:	47b0      	blx	r6
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d100      	bne.n	8008aba <_printf_float+0x3a6>
 8008ab8:	e688      	b.n	80087cc <_printf_float+0xb8>
 8008aba:	3401      	adds	r4, #1
 8008abc:	e7bd      	b.n	8008a3a <_printf_float+0x326>
 8008abe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ac0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ac2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ac4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ac6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008ac8:	47a0      	blx	r4
 8008aca:	3001      	adds	r0, #1
 8008acc:	d1c1      	bne.n	8008a52 <_printf_float+0x33e>
 8008ace:	e67d      	b.n	80087cc <_printf_float+0xb8>
 8008ad0:	19ba      	adds	r2, r7, r6
 8008ad2:	0023      	movs	r3, r4
 8008ad4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ad8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008ada:	47b0      	blx	r6
 8008adc:	3001      	adds	r0, #1
 8008ade:	d1c2      	bne.n	8008a66 <_printf_float+0x352>
 8008ae0:	e674      	b.n	80087cc <_printf_float+0xb8>
 8008ae2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ae4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	dc02      	bgt.n	8008af0 <_printf_float+0x3dc>
 8008aea:	2301      	movs	r3, #1
 8008aec:	421a      	tst	r2, r3
 8008aee:	d039      	beq.n	8008b64 <_printf_float+0x450>
 8008af0:	2301      	movs	r3, #1
 8008af2:	003a      	movs	r2, r7
 8008af4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008af6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008af8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008afa:	47b0      	blx	r6
 8008afc:	3001      	adds	r0, #1
 8008afe:	d100      	bne.n	8008b02 <_printf_float+0x3ee>
 8008b00:	e664      	b.n	80087cc <_printf_float+0xb8>
 8008b02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b08:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b0a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008b0c:	47b0      	blx	r6
 8008b0e:	3001      	adds	r0, #1
 8008b10:	d100      	bne.n	8008b14 <_printf_float+0x400>
 8008b12:	e65b      	b.n	80087cc <_printf_float+0xb8>
 8008b14:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008b16:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008b18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b20:	2300      	movs	r3, #0
 8008b22:	f7f7 fc91 	bl	8000448 <__aeabi_dcmpeq>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d11a      	bne.n	8008b60 <_printf_float+0x44c>
 8008b2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b2c:	1c7a      	adds	r2, r7, #1
 8008b2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b32:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008b34:	47b0      	blx	r6
 8008b36:	3001      	adds	r0, #1
 8008b38:	d10e      	bne.n	8008b58 <_printf_float+0x444>
 8008b3a:	e647      	b.n	80087cc <_printf_float+0xb8>
 8008b3c:	002a      	movs	r2, r5
 8008b3e:	2301      	movs	r3, #1
 8008b40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b44:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008b46:	321a      	adds	r2, #26
 8008b48:	47b8      	blx	r7
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	d100      	bne.n	8008b50 <_printf_float+0x43c>
 8008b4e:	e63d      	b.n	80087cc <_printf_float+0xb8>
 8008b50:	3601      	adds	r6, #1
 8008b52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b54:	429e      	cmp	r6, r3
 8008b56:	dbf1      	blt.n	8008b3c <_printf_float+0x428>
 8008b58:	002a      	movs	r2, r5
 8008b5a:	0023      	movs	r3, r4
 8008b5c:	3250      	adds	r2, #80	@ 0x50
 8008b5e:	e6da      	b.n	8008916 <_printf_float+0x202>
 8008b60:	2600      	movs	r6, #0
 8008b62:	e7f6      	b.n	8008b52 <_printf_float+0x43e>
 8008b64:	003a      	movs	r2, r7
 8008b66:	e7e2      	b.n	8008b2e <_printf_float+0x41a>
 8008b68:	002a      	movs	r2, r5
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b70:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008b72:	3219      	adds	r2, #25
 8008b74:	47b0      	blx	r6
 8008b76:	3001      	adds	r0, #1
 8008b78:	d100      	bne.n	8008b7c <_printf_float+0x468>
 8008b7a:	e627      	b.n	80087cc <_printf_float+0xb8>
 8008b7c:	3401      	adds	r4, #1
 8008b7e:	68eb      	ldr	r3, [r5, #12]
 8008b80:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	dcef      	bgt.n	8008b68 <_printf_float+0x454>
 8008b88:	e6f9      	b.n	800897e <_printf_float+0x26a>
 8008b8a:	2400      	movs	r4, #0
 8008b8c:	e7f7      	b.n	8008b7e <_printf_float+0x46a>
 8008b8e:	46c0      	nop			@ (mov r8, r8)

08008b90 <_printf_common>:
 8008b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b92:	0016      	movs	r6, r2
 8008b94:	9301      	str	r3, [sp, #4]
 8008b96:	688a      	ldr	r2, [r1, #8]
 8008b98:	690b      	ldr	r3, [r1, #16]
 8008b9a:	000c      	movs	r4, r1
 8008b9c:	9000      	str	r0, [sp, #0]
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	da00      	bge.n	8008ba4 <_printf_common+0x14>
 8008ba2:	0013      	movs	r3, r2
 8008ba4:	0022      	movs	r2, r4
 8008ba6:	6033      	str	r3, [r6, #0]
 8008ba8:	3243      	adds	r2, #67	@ 0x43
 8008baa:	7812      	ldrb	r2, [r2, #0]
 8008bac:	2a00      	cmp	r2, #0
 8008bae:	d001      	beq.n	8008bb4 <_printf_common+0x24>
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	6033      	str	r3, [r6, #0]
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	069b      	lsls	r3, r3, #26
 8008bb8:	d502      	bpl.n	8008bc0 <_printf_common+0x30>
 8008bba:	6833      	ldr	r3, [r6, #0]
 8008bbc:	3302      	adds	r3, #2
 8008bbe:	6033      	str	r3, [r6, #0]
 8008bc0:	6822      	ldr	r2, [r4, #0]
 8008bc2:	2306      	movs	r3, #6
 8008bc4:	0015      	movs	r5, r2
 8008bc6:	401d      	ands	r5, r3
 8008bc8:	421a      	tst	r2, r3
 8008bca:	d027      	beq.n	8008c1c <_printf_common+0x8c>
 8008bcc:	0023      	movs	r3, r4
 8008bce:	3343      	adds	r3, #67	@ 0x43
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	1e5a      	subs	r2, r3, #1
 8008bd4:	4193      	sbcs	r3, r2
 8008bd6:	6822      	ldr	r2, [r4, #0]
 8008bd8:	0692      	lsls	r2, r2, #26
 8008bda:	d430      	bmi.n	8008c3e <_printf_common+0xae>
 8008bdc:	0022      	movs	r2, r4
 8008bde:	9901      	ldr	r1, [sp, #4]
 8008be0:	9800      	ldr	r0, [sp, #0]
 8008be2:	9d08      	ldr	r5, [sp, #32]
 8008be4:	3243      	adds	r2, #67	@ 0x43
 8008be6:	47a8      	blx	r5
 8008be8:	3001      	adds	r0, #1
 8008bea:	d025      	beq.n	8008c38 <_printf_common+0xa8>
 8008bec:	2206      	movs	r2, #6
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	2500      	movs	r5, #0
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d105      	bne.n	8008c04 <_printf_common+0x74>
 8008bf8:	6833      	ldr	r3, [r6, #0]
 8008bfa:	68e5      	ldr	r5, [r4, #12]
 8008bfc:	1aed      	subs	r5, r5, r3
 8008bfe:	43eb      	mvns	r3, r5
 8008c00:	17db      	asrs	r3, r3, #31
 8008c02:	401d      	ands	r5, r3
 8008c04:	68a3      	ldr	r3, [r4, #8]
 8008c06:	6922      	ldr	r2, [r4, #16]
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	dd01      	ble.n	8008c10 <_printf_common+0x80>
 8008c0c:	1a9b      	subs	r3, r3, r2
 8008c0e:	18ed      	adds	r5, r5, r3
 8008c10:	2600      	movs	r6, #0
 8008c12:	42b5      	cmp	r5, r6
 8008c14:	d120      	bne.n	8008c58 <_printf_common+0xc8>
 8008c16:	2000      	movs	r0, #0
 8008c18:	e010      	b.n	8008c3c <_printf_common+0xac>
 8008c1a:	3501      	adds	r5, #1
 8008c1c:	68e3      	ldr	r3, [r4, #12]
 8008c1e:	6832      	ldr	r2, [r6, #0]
 8008c20:	1a9b      	subs	r3, r3, r2
 8008c22:	42ab      	cmp	r3, r5
 8008c24:	ddd2      	ble.n	8008bcc <_printf_common+0x3c>
 8008c26:	0022      	movs	r2, r4
 8008c28:	2301      	movs	r3, #1
 8008c2a:	9901      	ldr	r1, [sp, #4]
 8008c2c:	9800      	ldr	r0, [sp, #0]
 8008c2e:	9f08      	ldr	r7, [sp, #32]
 8008c30:	3219      	adds	r2, #25
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	d1f0      	bne.n	8008c1a <_printf_common+0x8a>
 8008c38:	2001      	movs	r0, #1
 8008c3a:	4240      	negs	r0, r0
 8008c3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c3e:	2030      	movs	r0, #48	@ 0x30
 8008c40:	18e1      	adds	r1, r4, r3
 8008c42:	3143      	adds	r1, #67	@ 0x43
 8008c44:	7008      	strb	r0, [r1, #0]
 8008c46:	0021      	movs	r1, r4
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	3145      	adds	r1, #69	@ 0x45
 8008c4c:	7809      	ldrb	r1, [r1, #0]
 8008c4e:	18a2      	adds	r2, r4, r2
 8008c50:	3243      	adds	r2, #67	@ 0x43
 8008c52:	3302      	adds	r3, #2
 8008c54:	7011      	strb	r1, [r2, #0]
 8008c56:	e7c1      	b.n	8008bdc <_printf_common+0x4c>
 8008c58:	0022      	movs	r2, r4
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	9901      	ldr	r1, [sp, #4]
 8008c5e:	9800      	ldr	r0, [sp, #0]
 8008c60:	9f08      	ldr	r7, [sp, #32]
 8008c62:	321a      	adds	r2, #26
 8008c64:	47b8      	blx	r7
 8008c66:	3001      	adds	r0, #1
 8008c68:	d0e6      	beq.n	8008c38 <_printf_common+0xa8>
 8008c6a:	3601      	adds	r6, #1
 8008c6c:	e7d1      	b.n	8008c12 <_printf_common+0x82>
	...

08008c70 <_printf_i>:
 8008c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c72:	b08b      	sub	sp, #44	@ 0x2c
 8008c74:	9206      	str	r2, [sp, #24]
 8008c76:	000a      	movs	r2, r1
 8008c78:	3243      	adds	r2, #67	@ 0x43
 8008c7a:	9307      	str	r3, [sp, #28]
 8008c7c:	9005      	str	r0, [sp, #20]
 8008c7e:	9203      	str	r2, [sp, #12]
 8008c80:	7e0a      	ldrb	r2, [r1, #24]
 8008c82:	000c      	movs	r4, r1
 8008c84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c86:	2a78      	cmp	r2, #120	@ 0x78
 8008c88:	d809      	bhi.n	8008c9e <_printf_i+0x2e>
 8008c8a:	2a62      	cmp	r2, #98	@ 0x62
 8008c8c:	d80b      	bhi.n	8008ca6 <_printf_i+0x36>
 8008c8e:	2a00      	cmp	r2, #0
 8008c90:	d100      	bne.n	8008c94 <_printf_i+0x24>
 8008c92:	e0bc      	b.n	8008e0e <_printf_i+0x19e>
 8008c94:	497b      	ldr	r1, [pc, #492]	@ (8008e84 <_printf_i+0x214>)
 8008c96:	9104      	str	r1, [sp, #16]
 8008c98:	2a58      	cmp	r2, #88	@ 0x58
 8008c9a:	d100      	bne.n	8008c9e <_printf_i+0x2e>
 8008c9c:	e090      	b.n	8008dc0 <_printf_i+0x150>
 8008c9e:	0025      	movs	r5, r4
 8008ca0:	3542      	adds	r5, #66	@ 0x42
 8008ca2:	702a      	strb	r2, [r5, #0]
 8008ca4:	e022      	b.n	8008cec <_printf_i+0x7c>
 8008ca6:	0010      	movs	r0, r2
 8008ca8:	3863      	subs	r0, #99	@ 0x63
 8008caa:	2815      	cmp	r0, #21
 8008cac:	d8f7      	bhi.n	8008c9e <_printf_i+0x2e>
 8008cae:	f7f7 fa3b 	bl	8000128 <__gnu_thumb1_case_shi>
 8008cb2:	0016      	.short	0x0016
 8008cb4:	fff6001f 	.word	0xfff6001f
 8008cb8:	fff6fff6 	.word	0xfff6fff6
 8008cbc:	001ffff6 	.word	0x001ffff6
 8008cc0:	fff6fff6 	.word	0xfff6fff6
 8008cc4:	fff6fff6 	.word	0xfff6fff6
 8008cc8:	003600a1 	.word	0x003600a1
 8008ccc:	fff60080 	.word	0xfff60080
 8008cd0:	00b2fff6 	.word	0x00b2fff6
 8008cd4:	0036fff6 	.word	0x0036fff6
 8008cd8:	fff6fff6 	.word	0xfff6fff6
 8008cdc:	0084      	.short	0x0084
 8008cde:	0025      	movs	r5, r4
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	3542      	adds	r5, #66	@ 0x42
 8008ce4:	1d11      	adds	r1, r2, #4
 8008ce6:	6019      	str	r1, [r3, #0]
 8008ce8:	6813      	ldr	r3, [r2, #0]
 8008cea:	702b      	strb	r3, [r5, #0]
 8008cec:	2301      	movs	r3, #1
 8008cee:	e0a0      	b.n	8008e32 <_printf_i+0x1c2>
 8008cf0:	6818      	ldr	r0, [r3, #0]
 8008cf2:	6809      	ldr	r1, [r1, #0]
 8008cf4:	1d02      	adds	r2, r0, #4
 8008cf6:	060d      	lsls	r5, r1, #24
 8008cf8:	d50b      	bpl.n	8008d12 <_printf_i+0xa2>
 8008cfa:	6806      	ldr	r6, [r0, #0]
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	2e00      	cmp	r6, #0
 8008d00:	da03      	bge.n	8008d0a <_printf_i+0x9a>
 8008d02:	232d      	movs	r3, #45	@ 0x2d
 8008d04:	9a03      	ldr	r2, [sp, #12]
 8008d06:	4276      	negs	r6, r6
 8008d08:	7013      	strb	r3, [r2, #0]
 8008d0a:	4b5e      	ldr	r3, [pc, #376]	@ (8008e84 <_printf_i+0x214>)
 8008d0c:	270a      	movs	r7, #10
 8008d0e:	9304      	str	r3, [sp, #16]
 8008d10:	e018      	b.n	8008d44 <_printf_i+0xd4>
 8008d12:	6806      	ldr	r6, [r0, #0]
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	0649      	lsls	r1, r1, #25
 8008d18:	d5f1      	bpl.n	8008cfe <_printf_i+0x8e>
 8008d1a:	b236      	sxth	r6, r6
 8008d1c:	e7ef      	b.n	8008cfe <_printf_i+0x8e>
 8008d1e:	6808      	ldr	r0, [r1, #0]
 8008d20:	6819      	ldr	r1, [r3, #0]
 8008d22:	c940      	ldmia	r1!, {r6}
 8008d24:	0605      	lsls	r5, r0, #24
 8008d26:	d402      	bmi.n	8008d2e <_printf_i+0xbe>
 8008d28:	0640      	lsls	r0, r0, #25
 8008d2a:	d500      	bpl.n	8008d2e <_printf_i+0xbe>
 8008d2c:	b2b6      	uxth	r6, r6
 8008d2e:	6019      	str	r1, [r3, #0]
 8008d30:	4b54      	ldr	r3, [pc, #336]	@ (8008e84 <_printf_i+0x214>)
 8008d32:	270a      	movs	r7, #10
 8008d34:	9304      	str	r3, [sp, #16]
 8008d36:	2a6f      	cmp	r2, #111	@ 0x6f
 8008d38:	d100      	bne.n	8008d3c <_printf_i+0xcc>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	0023      	movs	r3, r4
 8008d3e:	2200      	movs	r2, #0
 8008d40:	3343      	adds	r3, #67	@ 0x43
 8008d42:	701a      	strb	r2, [r3, #0]
 8008d44:	6863      	ldr	r3, [r4, #4]
 8008d46:	60a3      	str	r3, [r4, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	db03      	blt.n	8008d54 <_printf_i+0xe4>
 8008d4c:	2104      	movs	r1, #4
 8008d4e:	6822      	ldr	r2, [r4, #0]
 8008d50:	438a      	bics	r2, r1
 8008d52:	6022      	str	r2, [r4, #0]
 8008d54:	2e00      	cmp	r6, #0
 8008d56:	d102      	bne.n	8008d5e <_printf_i+0xee>
 8008d58:	9d03      	ldr	r5, [sp, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00c      	beq.n	8008d78 <_printf_i+0x108>
 8008d5e:	9d03      	ldr	r5, [sp, #12]
 8008d60:	0030      	movs	r0, r6
 8008d62:	0039      	movs	r1, r7
 8008d64:	f7f7 fa70 	bl	8000248 <__aeabi_uidivmod>
 8008d68:	9b04      	ldr	r3, [sp, #16]
 8008d6a:	3d01      	subs	r5, #1
 8008d6c:	5c5b      	ldrb	r3, [r3, r1]
 8008d6e:	702b      	strb	r3, [r5, #0]
 8008d70:	0033      	movs	r3, r6
 8008d72:	0006      	movs	r6, r0
 8008d74:	429f      	cmp	r7, r3
 8008d76:	d9f3      	bls.n	8008d60 <_printf_i+0xf0>
 8008d78:	2f08      	cmp	r7, #8
 8008d7a:	d109      	bne.n	8008d90 <_printf_i+0x120>
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	07db      	lsls	r3, r3, #31
 8008d80:	d506      	bpl.n	8008d90 <_printf_i+0x120>
 8008d82:	6862      	ldr	r2, [r4, #4]
 8008d84:	6923      	ldr	r3, [r4, #16]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	dc02      	bgt.n	8008d90 <_printf_i+0x120>
 8008d8a:	2330      	movs	r3, #48	@ 0x30
 8008d8c:	3d01      	subs	r5, #1
 8008d8e:	702b      	strb	r3, [r5, #0]
 8008d90:	9b03      	ldr	r3, [sp, #12]
 8008d92:	1b5b      	subs	r3, r3, r5
 8008d94:	6123      	str	r3, [r4, #16]
 8008d96:	9b07      	ldr	r3, [sp, #28]
 8008d98:	0021      	movs	r1, r4
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	9805      	ldr	r0, [sp, #20]
 8008d9e:	9b06      	ldr	r3, [sp, #24]
 8008da0:	aa09      	add	r2, sp, #36	@ 0x24
 8008da2:	f7ff fef5 	bl	8008b90 <_printf_common>
 8008da6:	3001      	adds	r0, #1
 8008da8:	d148      	bne.n	8008e3c <_printf_i+0x1cc>
 8008daa:	2001      	movs	r0, #1
 8008dac:	4240      	negs	r0, r0
 8008dae:	b00b      	add	sp, #44	@ 0x2c
 8008db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db2:	2220      	movs	r2, #32
 8008db4:	6809      	ldr	r1, [r1, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	6022      	str	r2, [r4, #0]
 8008dba:	2278      	movs	r2, #120	@ 0x78
 8008dbc:	4932      	ldr	r1, [pc, #200]	@ (8008e88 <_printf_i+0x218>)
 8008dbe:	9104      	str	r1, [sp, #16]
 8008dc0:	0021      	movs	r1, r4
 8008dc2:	3145      	adds	r1, #69	@ 0x45
 8008dc4:	700a      	strb	r2, [r1, #0]
 8008dc6:	6819      	ldr	r1, [r3, #0]
 8008dc8:	6822      	ldr	r2, [r4, #0]
 8008dca:	c940      	ldmia	r1!, {r6}
 8008dcc:	0610      	lsls	r0, r2, #24
 8008dce:	d402      	bmi.n	8008dd6 <_printf_i+0x166>
 8008dd0:	0650      	lsls	r0, r2, #25
 8008dd2:	d500      	bpl.n	8008dd6 <_printf_i+0x166>
 8008dd4:	b2b6      	uxth	r6, r6
 8008dd6:	6019      	str	r1, [r3, #0]
 8008dd8:	07d3      	lsls	r3, r2, #31
 8008dda:	d502      	bpl.n	8008de2 <_printf_i+0x172>
 8008ddc:	2320      	movs	r3, #32
 8008dde:	4313      	orrs	r3, r2
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	2e00      	cmp	r6, #0
 8008de4:	d001      	beq.n	8008dea <_printf_i+0x17a>
 8008de6:	2710      	movs	r7, #16
 8008de8:	e7a8      	b.n	8008d3c <_printf_i+0xcc>
 8008dea:	2220      	movs	r2, #32
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	4393      	bics	r3, r2
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	e7f8      	b.n	8008de6 <_printf_i+0x176>
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	680d      	ldr	r5, [r1, #0]
 8008df8:	1d10      	adds	r0, r2, #4
 8008dfa:	6949      	ldr	r1, [r1, #20]
 8008dfc:	6018      	str	r0, [r3, #0]
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	062e      	lsls	r6, r5, #24
 8008e02:	d501      	bpl.n	8008e08 <_printf_i+0x198>
 8008e04:	6019      	str	r1, [r3, #0]
 8008e06:	e002      	b.n	8008e0e <_printf_i+0x19e>
 8008e08:	066d      	lsls	r5, r5, #25
 8008e0a:	d5fb      	bpl.n	8008e04 <_printf_i+0x194>
 8008e0c:	8019      	strh	r1, [r3, #0]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9d03      	ldr	r5, [sp, #12]
 8008e12:	6123      	str	r3, [r4, #16]
 8008e14:	e7bf      	b.n	8008d96 <_printf_i+0x126>
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	1d11      	adds	r1, r2, #4
 8008e1a:	6019      	str	r1, [r3, #0]
 8008e1c:	6815      	ldr	r5, [r2, #0]
 8008e1e:	2100      	movs	r1, #0
 8008e20:	0028      	movs	r0, r5
 8008e22:	6862      	ldr	r2, [r4, #4]
 8008e24:	f000 f9fd 	bl	8009222 <memchr>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d001      	beq.n	8008e30 <_printf_i+0x1c0>
 8008e2c:	1b40      	subs	r0, r0, r5
 8008e2e:	6060      	str	r0, [r4, #4]
 8008e30:	6863      	ldr	r3, [r4, #4]
 8008e32:	6123      	str	r3, [r4, #16]
 8008e34:	2300      	movs	r3, #0
 8008e36:	9a03      	ldr	r2, [sp, #12]
 8008e38:	7013      	strb	r3, [r2, #0]
 8008e3a:	e7ac      	b.n	8008d96 <_printf_i+0x126>
 8008e3c:	002a      	movs	r2, r5
 8008e3e:	6923      	ldr	r3, [r4, #16]
 8008e40:	9906      	ldr	r1, [sp, #24]
 8008e42:	9805      	ldr	r0, [sp, #20]
 8008e44:	9d07      	ldr	r5, [sp, #28]
 8008e46:	47a8      	blx	r5
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d0ae      	beq.n	8008daa <_printf_i+0x13a>
 8008e4c:	6823      	ldr	r3, [r4, #0]
 8008e4e:	079b      	lsls	r3, r3, #30
 8008e50:	d415      	bmi.n	8008e7e <_printf_i+0x20e>
 8008e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e54:	68e0      	ldr	r0, [r4, #12]
 8008e56:	4298      	cmp	r0, r3
 8008e58:	daa9      	bge.n	8008dae <_printf_i+0x13e>
 8008e5a:	0018      	movs	r0, r3
 8008e5c:	e7a7      	b.n	8008dae <_printf_i+0x13e>
 8008e5e:	0022      	movs	r2, r4
 8008e60:	2301      	movs	r3, #1
 8008e62:	9906      	ldr	r1, [sp, #24]
 8008e64:	9805      	ldr	r0, [sp, #20]
 8008e66:	9e07      	ldr	r6, [sp, #28]
 8008e68:	3219      	adds	r2, #25
 8008e6a:	47b0      	blx	r6
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d09c      	beq.n	8008daa <_printf_i+0x13a>
 8008e70:	3501      	adds	r5, #1
 8008e72:	68e3      	ldr	r3, [r4, #12]
 8008e74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	42ab      	cmp	r3, r5
 8008e7a:	dcf0      	bgt.n	8008e5e <_printf_i+0x1ee>
 8008e7c:	e7e9      	b.n	8008e52 <_printf_i+0x1e2>
 8008e7e:	2500      	movs	r5, #0
 8008e80:	e7f7      	b.n	8008e72 <_printf_i+0x202>
 8008e82:	46c0      	nop			@ (mov r8, r8)
 8008e84:	0800b94a 	.word	0x0800b94a
 8008e88:	0800b95b 	.word	0x0800b95b

08008e8c <std>:
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	b510      	push	{r4, lr}
 8008e90:	0004      	movs	r4, r0
 8008e92:	6003      	str	r3, [r0, #0]
 8008e94:	6043      	str	r3, [r0, #4]
 8008e96:	6083      	str	r3, [r0, #8]
 8008e98:	8181      	strh	r1, [r0, #12]
 8008e9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e9c:	81c2      	strh	r2, [r0, #14]
 8008e9e:	6103      	str	r3, [r0, #16]
 8008ea0:	6143      	str	r3, [r0, #20]
 8008ea2:	6183      	str	r3, [r0, #24]
 8008ea4:	0019      	movs	r1, r3
 8008ea6:	2208      	movs	r2, #8
 8008ea8:	305c      	adds	r0, #92	@ 0x5c
 8008eaa:	f000 f933 	bl	8009114 <memset>
 8008eae:	4b0b      	ldr	r3, [pc, #44]	@ (8008edc <std+0x50>)
 8008eb0:	6224      	str	r4, [r4, #32]
 8008eb2:	6263      	str	r3, [r4, #36]	@ 0x24
 8008eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee0 <std+0x54>)
 8008eb6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee4 <std+0x58>)
 8008eba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee8 <std+0x5c>)
 8008ebe:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8008eec <std+0x60>)
 8008ec2:	429c      	cmp	r4, r3
 8008ec4:	d005      	beq.n	8008ed2 <std+0x46>
 8008ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef0 <std+0x64>)
 8008ec8:	429c      	cmp	r4, r3
 8008eca:	d002      	beq.n	8008ed2 <std+0x46>
 8008ecc:	4b09      	ldr	r3, [pc, #36]	@ (8008ef4 <std+0x68>)
 8008ece:	429c      	cmp	r4, r3
 8008ed0:	d103      	bne.n	8008eda <std+0x4e>
 8008ed2:	0020      	movs	r0, r4
 8008ed4:	3058      	adds	r0, #88	@ 0x58
 8008ed6:	f000 f9a1 	bl	800921c <__retarget_lock_init_recursive>
 8008eda:	bd10      	pop	{r4, pc}
 8008edc:	0800907d 	.word	0x0800907d
 8008ee0:	080090a5 	.word	0x080090a5
 8008ee4:	080090dd 	.word	0x080090dd
 8008ee8:	08009109 	.word	0x08009109
 8008eec:	200003f8 	.word	0x200003f8
 8008ef0:	20000460 	.word	0x20000460
 8008ef4:	200004c8 	.word	0x200004c8

08008ef8 <stdio_exit_handler>:
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	4a03      	ldr	r2, [pc, #12]	@ (8008f08 <stdio_exit_handler+0x10>)
 8008efc:	4903      	ldr	r1, [pc, #12]	@ (8008f0c <stdio_exit_handler+0x14>)
 8008efe:	4804      	ldr	r0, [pc, #16]	@ (8008f10 <stdio_exit_handler+0x18>)
 8008f00:	f000 f86c 	bl	8008fdc <_fwalk_sglue>
 8008f04:	bd10      	pop	{r4, pc}
 8008f06:	46c0      	nop			@ (mov r8, r8)
 8008f08:	2000000c 	.word	0x2000000c
 8008f0c:	0800ac59 	.word	0x0800ac59
 8008f10:	2000001c 	.word	0x2000001c

08008f14 <cleanup_stdio>:
 8008f14:	6841      	ldr	r1, [r0, #4]
 8008f16:	4b0b      	ldr	r3, [pc, #44]	@ (8008f44 <cleanup_stdio+0x30>)
 8008f18:	b510      	push	{r4, lr}
 8008f1a:	0004      	movs	r4, r0
 8008f1c:	4299      	cmp	r1, r3
 8008f1e:	d001      	beq.n	8008f24 <cleanup_stdio+0x10>
 8008f20:	f001 fe9a 	bl	800ac58 <_fflush_r>
 8008f24:	68a1      	ldr	r1, [r4, #8]
 8008f26:	4b08      	ldr	r3, [pc, #32]	@ (8008f48 <cleanup_stdio+0x34>)
 8008f28:	4299      	cmp	r1, r3
 8008f2a:	d002      	beq.n	8008f32 <cleanup_stdio+0x1e>
 8008f2c:	0020      	movs	r0, r4
 8008f2e:	f001 fe93 	bl	800ac58 <_fflush_r>
 8008f32:	68e1      	ldr	r1, [r4, #12]
 8008f34:	4b05      	ldr	r3, [pc, #20]	@ (8008f4c <cleanup_stdio+0x38>)
 8008f36:	4299      	cmp	r1, r3
 8008f38:	d002      	beq.n	8008f40 <cleanup_stdio+0x2c>
 8008f3a:	0020      	movs	r0, r4
 8008f3c:	f001 fe8c 	bl	800ac58 <_fflush_r>
 8008f40:	bd10      	pop	{r4, pc}
 8008f42:	46c0      	nop			@ (mov r8, r8)
 8008f44:	200003f8 	.word	0x200003f8
 8008f48:	20000460 	.word	0x20000460
 8008f4c:	200004c8 	.word	0x200004c8

08008f50 <global_stdio_init.part.0>:
 8008f50:	b510      	push	{r4, lr}
 8008f52:	4b09      	ldr	r3, [pc, #36]	@ (8008f78 <global_stdio_init.part.0+0x28>)
 8008f54:	4a09      	ldr	r2, [pc, #36]	@ (8008f7c <global_stdio_init.part.0+0x2c>)
 8008f56:	2104      	movs	r1, #4
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	4809      	ldr	r0, [pc, #36]	@ (8008f80 <global_stdio_init.part.0+0x30>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f7ff ff95 	bl	8008e8c <std>
 8008f62:	2201      	movs	r2, #1
 8008f64:	2109      	movs	r1, #9
 8008f66:	4807      	ldr	r0, [pc, #28]	@ (8008f84 <global_stdio_init.part.0+0x34>)
 8008f68:	f7ff ff90 	bl	8008e8c <std>
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	2112      	movs	r1, #18
 8008f70:	4805      	ldr	r0, [pc, #20]	@ (8008f88 <global_stdio_init.part.0+0x38>)
 8008f72:	f7ff ff8b 	bl	8008e8c <std>
 8008f76:	bd10      	pop	{r4, pc}
 8008f78:	20000530 	.word	0x20000530
 8008f7c:	08008ef9 	.word	0x08008ef9
 8008f80:	200003f8 	.word	0x200003f8
 8008f84:	20000460 	.word	0x20000460
 8008f88:	200004c8 	.word	0x200004c8

08008f8c <__sfp_lock_acquire>:
 8008f8c:	b510      	push	{r4, lr}
 8008f8e:	4802      	ldr	r0, [pc, #8]	@ (8008f98 <__sfp_lock_acquire+0xc>)
 8008f90:	f000 f945 	bl	800921e <__retarget_lock_acquire_recursive>
 8008f94:	bd10      	pop	{r4, pc}
 8008f96:	46c0      	nop			@ (mov r8, r8)
 8008f98:	20000539 	.word	0x20000539

08008f9c <__sfp_lock_release>:
 8008f9c:	b510      	push	{r4, lr}
 8008f9e:	4802      	ldr	r0, [pc, #8]	@ (8008fa8 <__sfp_lock_release+0xc>)
 8008fa0:	f000 f93e 	bl	8009220 <__retarget_lock_release_recursive>
 8008fa4:	bd10      	pop	{r4, pc}
 8008fa6:	46c0      	nop			@ (mov r8, r8)
 8008fa8:	20000539 	.word	0x20000539

08008fac <__sinit>:
 8008fac:	b510      	push	{r4, lr}
 8008fae:	0004      	movs	r4, r0
 8008fb0:	f7ff ffec 	bl	8008f8c <__sfp_lock_acquire>
 8008fb4:	6a23      	ldr	r3, [r4, #32]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d002      	beq.n	8008fc0 <__sinit+0x14>
 8008fba:	f7ff ffef 	bl	8008f9c <__sfp_lock_release>
 8008fbe:	bd10      	pop	{r4, pc}
 8008fc0:	4b04      	ldr	r3, [pc, #16]	@ (8008fd4 <__sinit+0x28>)
 8008fc2:	6223      	str	r3, [r4, #32]
 8008fc4:	4b04      	ldr	r3, [pc, #16]	@ (8008fd8 <__sinit+0x2c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1f6      	bne.n	8008fba <__sinit+0xe>
 8008fcc:	f7ff ffc0 	bl	8008f50 <global_stdio_init.part.0>
 8008fd0:	e7f3      	b.n	8008fba <__sinit+0xe>
 8008fd2:	46c0      	nop			@ (mov r8, r8)
 8008fd4:	08008f15 	.word	0x08008f15
 8008fd8:	20000530 	.word	0x20000530

08008fdc <_fwalk_sglue>:
 8008fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fde:	0014      	movs	r4, r2
 8008fe0:	2600      	movs	r6, #0
 8008fe2:	9000      	str	r0, [sp, #0]
 8008fe4:	9101      	str	r1, [sp, #4]
 8008fe6:	68a5      	ldr	r5, [r4, #8]
 8008fe8:	6867      	ldr	r7, [r4, #4]
 8008fea:	3f01      	subs	r7, #1
 8008fec:	d504      	bpl.n	8008ff8 <_fwalk_sglue+0x1c>
 8008fee:	6824      	ldr	r4, [r4, #0]
 8008ff0:	2c00      	cmp	r4, #0
 8008ff2:	d1f8      	bne.n	8008fe6 <_fwalk_sglue+0xa>
 8008ff4:	0030      	movs	r0, r6
 8008ff6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ff8:	89ab      	ldrh	r3, [r5, #12]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d908      	bls.n	8009010 <_fwalk_sglue+0x34>
 8008ffe:	220e      	movs	r2, #14
 8009000:	5eab      	ldrsh	r3, [r5, r2]
 8009002:	3301      	adds	r3, #1
 8009004:	d004      	beq.n	8009010 <_fwalk_sglue+0x34>
 8009006:	0029      	movs	r1, r5
 8009008:	9800      	ldr	r0, [sp, #0]
 800900a:	9b01      	ldr	r3, [sp, #4]
 800900c:	4798      	blx	r3
 800900e:	4306      	orrs	r6, r0
 8009010:	3568      	adds	r5, #104	@ 0x68
 8009012:	e7ea      	b.n	8008fea <_fwalk_sglue+0xe>

08009014 <sniprintf>:
 8009014:	b40c      	push	{r2, r3}
 8009016:	b530      	push	{r4, r5, lr}
 8009018:	4b17      	ldr	r3, [pc, #92]	@ (8009078 <sniprintf+0x64>)
 800901a:	000c      	movs	r4, r1
 800901c:	681d      	ldr	r5, [r3, #0]
 800901e:	b09d      	sub	sp, #116	@ 0x74
 8009020:	2900      	cmp	r1, #0
 8009022:	da08      	bge.n	8009036 <sniprintf+0x22>
 8009024:	238b      	movs	r3, #139	@ 0x8b
 8009026:	2001      	movs	r0, #1
 8009028:	602b      	str	r3, [r5, #0]
 800902a:	4240      	negs	r0, r0
 800902c:	b01d      	add	sp, #116	@ 0x74
 800902e:	bc30      	pop	{r4, r5}
 8009030:	bc08      	pop	{r3}
 8009032:	b002      	add	sp, #8
 8009034:	4718      	bx	r3
 8009036:	2382      	movs	r3, #130	@ 0x82
 8009038:	466a      	mov	r2, sp
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	8293      	strh	r3, [r2, #20]
 800903e:	2300      	movs	r3, #0
 8009040:	9002      	str	r0, [sp, #8]
 8009042:	9006      	str	r0, [sp, #24]
 8009044:	4299      	cmp	r1, r3
 8009046:	d000      	beq.n	800904a <sniprintf+0x36>
 8009048:	1e4b      	subs	r3, r1, #1
 800904a:	9304      	str	r3, [sp, #16]
 800904c:	9307      	str	r3, [sp, #28]
 800904e:	2301      	movs	r3, #1
 8009050:	466a      	mov	r2, sp
 8009052:	425b      	negs	r3, r3
 8009054:	82d3      	strh	r3, [r2, #22]
 8009056:	0028      	movs	r0, r5
 8009058:	ab21      	add	r3, sp, #132	@ 0x84
 800905a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800905c:	a902      	add	r1, sp, #8
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	f001 fc76 	bl	800a950 <_svfiprintf_r>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	da01      	bge.n	800906c <sniprintf+0x58>
 8009068:	238b      	movs	r3, #139	@ 0x8b
 800906a:	602b      	str	r3, [r5, #0]
 800906c:	2c00      	cmp	r4, #0
 800906e:	d0dd      	beq.n	800902c <sniprintf+0x18>
 8009070:	2200      	movs	r2, #0
 8009072:	9b02      	ldr	r3, [sp, #8]
 8009074:	701a      	strb	r2, [r3, #0]
 8009076:	e7d9      	b.n	800902c <sniprintf+0x18>
 8009078:	20000018 	.word	0x20000018

0800907c <__sread>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	000c      	movs	r4, r1
 8009080:	250e      	movs	r5, #14
 8009082:	5f49      	ldrsh	r1, [r1, r5]
 8009084:	f000 f878 	bl	8009178 <_read_r>
 8009088:	2800      	cmp	r0, #0
 800908a:	db03      	blt.n	8009094 <__sread+0x18>
 800908c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800908e:	181b      	adds	r3, r3, r0
 8009090:	6563      	str	r3, [r4, #84]	@ 0x54
 8009092:	bd70      	pop	{r4, r5, r6, pc}
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	4a02      	ldr	r2, [pc, #8]	@ (80090a0 <__sread+0x24>)
 8009098:	4013      	ands	r3, r2
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	e7f9      	b.n	8009092 <__sread+0x16>
 800909e:	46c0      	nop			@ (mov r8, r8)
 80090a0:	ffffefff 	.word	0xffffefff

080090a4 <__swrite>:
 80090a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a6:	001f      	movs	r7, r3
 80090a8:	898b      	ldrh	r3, [r1, #12]
 80090aa:	0005      	movs	r5, r0
 80090ac:	000c      	movs	r4, r1
 80090ae:	0016      	movs	r6, r2
 80090b0:	05db      	lsls	r3, r3, #23
 80090b2:	d505      	bpl.n	80090c0 <__swrite+0x1c>
 80090b4:	230e      	movs	r3, #14
 80090b6:	5ec9      	ldrsh	r1, [r1, r3]
 80090b8:	2200      	movs	r2, #0
 80090ba:	2302      	movs	r3, #2
 80090bc:	f000 f848 	bl	8009150 <_lseek_r>
 80090c0:	89a3      	ldrh	r3, [r4, #12]
 80090c2:	4a05      	ldr	r2, [pc, #20]	@ (80090d8 <__swrite+0x34>)
 80090c4:	0028      	movs	r0, r5
 80090c6:	4013      	ands	r3, r2
 80090c8:	81a3      	strh	r3, [r4, #12]
 80090ca:	0032      	movs	r2, r6
 80090cc:	230e      	movs	r3, #14
 80090ce:	5ee1      	ldrsh	r1, [r4, r3]
 80090d0:	003b      	movs	r3, r7
 80090d2:	f000 f865 	bl	80091a0 <_write_r>
 80090d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090d8:	ffffefff 	.word	0xffffefff

080090dc <__sseek>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	000c      	movs	r4, r1
 80090e0:	250e      	movs	r5, #14
 80090e2:	5f49      	ldrsh	r1, [r1, r5]
 80090e4:	f000 f834 	bl	8009150 <_lseek_r>
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	1c42      	adds	r2, r0, #1
 80090ec:	d103      	bne.n	80090f6 <__sseek+0x1a>
 80090ee:	4a05      	ldr	r2, [pc, #20]	@ (8009104 <__sseek+0x28>)
 80090f0:	4013      	ands	r3, r2
 80090f2:	81a3      	strh	r3, [r4, #12]
 80090f4:	bd70      	pop	{r4, r5, r6, pc}
 80090f6:	2280      	movs	r2, #128	@ 0x80
 80090f8:	0152      	lsls	r2, r2, #5
 80090fa:	4313      	orrs	r3, r2
 80090fc:	81a3      	strh	r3, [r4, #12]
 80090fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8009100:	e7f8      	b.n	80090f4 <__sseek+0x18>
 8009102:	46c0      	nop			@ (mov r8, r8)
 8009104:	ffffefff 	.word	0xffffefff

08009108 <__sclose>:
 8009108:	b510      	push	{r4, lr}
 800910a:	230e      	movs	r3, #14
 800910c:	5ec9      	ldrsh	r1, [r1, r3]
 800910e:	f000 f80d 	bl	800912c <_close_r>
 8009112:	bd10      	pop	{r4, pc}

08009114 <memset>:
 8009114:	0003      	movs	r3, r0
 8009116:	1882      	adds	r2, r0, r2
 8009118:	4293      	cmp	r3, r2
 800911a:	d100      	bne.n	800911e <memset+0xa>
 800911c:	4770      	bx	lr
 800911e:	7019      	strb	r1, [r3, #0]
 8009120:	3301      	adds	r3, #1
 8009122:	e7f9      	b.n	8009118 <memset+0x4>

08009124 <_localeconv_r>:
 8009124:	4800      	ldr	r0, [pc, #0]	@ (8009128 <_localeconv_r+0x4>)
 8009126:	4770      	bx	lr
 8009128:	20000158 	.word	0x20000158

0800912c <_close_r>:
 800912c:	2300      	movs	r3, #0
 800912e:	b570      	push	{r4, r5, r6, lr}
 8009130:	4d06      	ldr	r5, [pc, #24]	@ (800914c <_close_r+0x20>)
 8009132:	0004      	movs	r4, r0
 8009134:	0008      	movs	r0, r1
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	f7fa fe56 	bl	8003de8 <_close>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d103      	bne.n	8009148 <_close_r+0x1c>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d000      	beq.n	8009148 <_close_r+0x1c>
 8009146:	6023      	str	r3, [r4, #0]
 8009148:	bd70      	pop	{r4, r5, r6, pc}
 800914a:	46c0      	nop			@ (mov r8, r8)
 800914c:	20000534 	.word	0x20000534

08009150 <_lseek_r>:
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	0004      	movs	r4, r0
 8009154:	0008      	movs	r0, r1
 8009156:	0011      	movs	r1, r2
 8009158:	001a      	movs	r2, r3
 800915a:	2300      	movs	r3, #0
 800915c:	4d05      	ldr	r5, [pc, #20]	@ (8009174 <_lseek_r+0x24>)
 800915e:	602b      	str	r3, [r5, #0]
 8009160:	f7fa fe63 	bl	8003e2a <_lseek>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	d103      	bne.n	8009170 <_lseek_r+0x20>
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d000      	beq.n	8009170 <_lseek_r+0x20>
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	bd70      	pop	{r4, r5, r6, pc}
 8009172:	46c0      	nop			@ (mov r8, r8)
 8009174:	20000534 	.word	0x20000534

08009178 <_read_r>:
 8009178:	b570      	push	{r4, r5, r6, lr}
 800917a:	0004      	movs	r4, r0
 800917c:	0008      	movs	r0, r1
 800917e:	0011      	movs	r1, r2
 8009180:	001a      	movs	r2, r3
 8009182:	2300      	movs	r3, #0
 8009184:	4d05      	ldr	r5, [pc, #20]	@ (800919c <_read_r+0x24>)
 8009186:	602b      	str	r3, [r5, #0]
 8009188:	f7fa fdf5 	bl	8003d76 <_read>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	d103      	bne.n	8009198 <_read_r+0x20>
 8009190:	682b      	ldr	r3, [r5, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d000      	beq.n	8009198 <_read_r+0x20>
 8009196:	6023      	str	r3, [r4, #0]
 8009198:	bd70      	pop	{r4, r5, r6, pc}
 800919a:	46c0      	nop			@ (mov r8, r8)
 800919c:	20000534 	.word	0x20000534

080091a0 <_write_r>:
 80091a0:	b570      	push	{r4, r5, r6, lr}
 80091a2:	0004      	movs	r4, r0
 80091a4:	0008      	movs	r0, r1
 80091a6:	0011      	movs	r1, r2
 80091a8:	001a      	movs	r2, r3
 80091aa:	2300      	movs	r3, #0
 80091ac:	4d05      	ldr	r5, [pc, #20]	@ (80091c4 <_write_r+0x24>)
 80091ae:	602b      	str	r3, [r5, #0]
 80091b0:	f7fa fdfe 	bl	8003db0 <_write>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d103      	bne.n	80091c0 <_write_r+0x20>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d000      	beq.n	80091c0 <_write_r+0x20>
 80091be:	6023      	str	r3, [r4, #0]
 80091c0:	bd70      	pop	{r4, r5, r6, pc}
 80091c2:	46c0      	nop			@ (mov r8, r8)
 80091c4:	20000534 	.word	0x20000534

080091c8 <__errno>:
 80091c8:	4b01      	ldr	r3, [pc, #4]	@ (80091d0 <__errno+0x8>)
 80091ca:	6818      	ldr	r0, [r3, #0]
 80091cc:	4770      	bx	lr
 80091ce:	46c0      	nop			@ (mov r8, r8)
 80091d0:	20000018 	.word	0x20000018

080091d4 <__libc_init_array>:
 80091d4:	b570      	push	{r4, r5, r6, lr}
 80091d6:	2600      	movs	r6, #0
 80091d8:	4c0c      	ldr	r4, [pc, #48]	@ (800920c <__libc_init_array+0x38>)
 80091da:	4d0d      	ldr	r5, [pc, #52]	@ (8009210 <__libc_init_array+0x3c>)
 80091dc:	1b64      	subs	r4, r4, r5
 80091de:	10a4      	asrs	r4, r4, #2
 80091e0:	42a6      	cmp	r6, r4
 80091e2:	d109      	bne.n	80091f8 <__libc_init_array+0x24>
 80091e4:	2600      	movs	r6, #0
 80091e6:	f002 faf5 	bl	800b7d4 <_init>
 80091ea:	4c0a      	ldr	r4, [pc, #40]	@ (8009214 <__libc_init_array+0x40>)
 80091ec:	4d0a      	ldr	r5, [pc, #40]	@ (8009218 <__libc_init_array+0x44>)
 80091ee:	1b64      	subs	r4, r4, r5
 80091f0:	10a4      	asrs	r4, r4, #2
 80091f2:	42a6      	cmp	r6, r4
 80091f4:	d105      	bne.n	8009202 <__libc_init_array+0x2e>
 80091f6:	bd70      	pop	{r4, r5, r6, pc}
 80091f8:	00b3      	lsls	r3, r6, #2
 80091fa:	58eb      	ldr	r3, [r5, r3]
 80091fc:	4798      	blx	r3
 80091fe:	3601      	adds	r6, #1
 8009200:	e7ee      	b.n	80091e0 <__libc_init_array+0xc>
 8009202:	00b3      	lsls	r3, r6, #2
 8009204:	58eb      	ldr	r3, [r5, r3]
 8009206:	4798      	blx	r3
 8009208:	3601      	adds	r6, #1
 800920a:	e7f2      	b.n	80091f2 <__libc_init_array+0x1e>
 800920c:	0800bcb0 	.word	0x0800bcb0
 8009210:	0800bcb0 	.word	0x0800bcb0
 8009214:	0800bcb4 	.word	0x0800bcb4
 8009218:	0800bcb0 	.word	0x0800bcb0

0800921c <__retarget_lock_init_recursive>:
 800921c:	4770      	bx	lr

0800921e <__retarget_lock_acquire_recursive>:
 800921e:	4770      	bx	lr

08009220 <__retarget_lock_release_recursive>:
 8009220:	4770      	bx	lr

08009222 <memchr>:
 8009222:	b2c9      	uxtb	r1, r1
 8009224:	1882      	adds	r2, r0, r2
 8009226:	4290      	cmp	r0, r2
 8009228:	d101      	bne.n	800922e <memchr+0xc>
 800922a:	2000      	movs	r0, #0
 800922c:	4770      	bx	lr
 800922e:	7803      	ldrb	r3, [r0, #0]
 8009230:	428b      	cmp	r3, r1
 8009232:	d0fb      	beq.n	800922c <memchr+0xa>
 8009234:	3001      	adds	r0, #1
 8009236:	e7f6      	b.n	8009226 <memchr+0x4>

08009238 <quorem>:
 8009238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800923a:	6902      	ldr	r2, [r0, #16]
 800923c:	690f      	ldr	r7, [r1, #16]
 800923e:	b087      	sub	sp, #28
 8009240:	0006      	movs	r6, r0
 8009242:	000b      	movs	r3, r1
 8009244:	2000      	movs	r0, #0
 8009246:	9102      	str	r1, [sp, #8]
 8009248:	42ba      	cmp	r2, r7
 800924a:	db6d      	blt.n	8009328 <quorem+0xf0>
 800924c:	3f01      	subs	r7, #1
 800924e:	00bc      	lsls	r4, r7, #2
 8009250:	3314      	adds	r3, #20
 8009252:	9305      	str	r3, [sp, #20]
 8009254:	191b      	adds	r3, r3, r4
 8009256:	9303      	str	r3, [sp, #12]
 8009258:	0033      	movs	r3, r6
 800925a:	3314      	adds	r3, #20
 800925c:	191c      	adds	r4, r3, r4
 800925e:	9301      	str	r3, [sp, #4]
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	9804      	ldr	r0, [sp, #16]
 8009268:	681d      	ldr	r5, [r3, #0]
 800926a:	3501      	adds	r5, #1
 800926c:	0029      	movs	r1, r5
 800926e:	f7f6 ff65 	bl	800013c <__udivsi3>
 8009272:	9b04      	ldr	r3, [sp, #16]
 8009274:	9000      	str	r0, [sp, #0]
 8009276:	42ab      	cmp	r3, r5
 8009278:	d32b      	bcc.n	80092d2 <quorem+0x9a>
 800927a:	9b05      	ldr	r3, [sp, #20]
 800927c:	9d01      	ldr	r5, [sp, #4]
 800927e:	469c      	mov	ip, r3
 8009280:	2300      	movs	r3, #0
 8009282:	9305      	str	r3, [sp, #20]
 8009284:	9304      	str	r3, [sp, #16]
 8009286:	4662      	mov	r2, ip
 8009288:	ca08      	ldmia	r2!, {r3}
 800928a:	6828      	ldr	r0, [r5, #0]
 800928c:	4694      	mov	ip, r2
 800928e:	9a00      	ldr	r2, [sp, #0]
 8009290:	b299      	uxth	r1, r3
 8009292:	4351      	muls	r1, r2
 8009294:	9a05      	ldr	r2, [sp, #20]
 8009296:	0c1b      	lsrs	r3, r3, #16
 8009298:	1889      	adds	r1, r1, r2
 800929a:	9a00      	ldr	r2, [sp, #0]
 800929c:	4353      	muls	r3, r2
 800929e:	0c0a      	lsrs	r2, r1, #16
 80092a0:	189b      	adds	r3, r3, r2
 80092a2:	0c1a      	lsrs	r2, r3, #16
 80092a4:	b289      	uxth	r1, r1
 80092a6:	9205      	str	r2, [sp, #20]
 80092a8:	b282      	uxth	r2, r0
 80092aa:	1a52      	subs	r2, r2, r1
 80092ac:	9904      	ldr	r1, [sp, #16]
 80092ae:	0c00      	lsrs	r0, r0, #16
 80092b0:	1852      	adds	r2, r2, r1
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	1411      	asrs	r1, r2, #16
 80092b6:	1ac3      	subs	r3, r0, r3
 80092b8:	185b      	adds	r3, r3, r1
 80092ba:	1419      	asrs	r1, r3, #16
 80092bc:	b292      	uxth	r2, r2
 80092be:	041b      	lsls	r3, r3, #16
 80092c0:	431a      	orrs	r2, r3
 80092c2:	9b03      	ldr	r3, [sp, #12]
 80092c4:	9104      	str	r1, [sp, #16]
 80092c6:	c504      	stmia	r5!, {r2}
 80092c8:	4563      	cmp	r3, ip
 80092ca:	d2dc      	bcs.n	8009286 <quorem+0x4e>
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d030      	beq.n	8009334 <quorem+0xfc>
 80092d2:	0030      	movs	r0, r6
 80092d4:	9902      	ldr	r1, [sp, #8]
 80092d6:	f001 f9c5 	bl	800a664 <__mcmp>
 80092da:	2800      	cmp	r0, #0
 80092dc:	db23      	blt.n	8009326 <quorem+0xee>
 80092de:	0034      	movs	r4, r6
 80092e0:	2500      	movs	r5, #0
 80092e2:	9902      	ldr	r1, [sp, #8]
 80092e4:	3414      	adds	r4, #20
 80092e6:	3114      	adds	r1, #20
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	c901      	ldmia	r1!, {r0}
 80092ec:	9302      	str	r3, [sp, #8]
 80092ee:	466b      	mov	r3, sp
 80092f0:	891b      	ldrh	r3, [r3, #8]
 80092f2:	b282      	uxth	r2, r0
 80092f4:	1a9a      	subs	r2, r3, r2
 80092f6:	9b02      	ldr	r3, [sp, #8]
 80092f8:	1952      	adds	r2, r2, r5
 80092fa:	0c00      	lsrs	r0, r0, #16
 80092fc:	0c1b      	lsrs	r3, r3, #16
 80092fe:	1a1b      	subs	r3, r3, r0
 8009300:	1410      	asrs	r0, r2, #16
 8009302:	181b      	adds	r3, r3, r0
 8009304:	141d      	asrs	r5, r3, #16
 8009306:	b292      	uxth	r2, r2
 8009308:	041b      	lsls	r3, r3, #16
 800930a:	431a      	orrs	r2, r3
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	c404      	stmia	r4!, {r2}
 8009310:	428b      	cmp	r3, r1
 8009312:	d2e9      	bcs.n	80092e8 <quorem+0xb0>
 8009314:	9a01      	ldr	r2, [sp, #4]
 8009316:	00bb      	lsls	r3, r7, #2
 8009318:	18d3      	adds	r3, r2, r3
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	2a00      	cmp	r2, #0
 800931e:	d013      	beq.n	8009348 <quorem+0x110>
 8009320:	9b00      	ldr	r3, [sp, #0]
 8009322:	3301      	adds	r3, #1
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	9800      	ldr	r0, [sp, #0]
 8009328:	b007      	add	sp, #28
 800932a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d104      	bne.n	800933c <quorem+0x104>
 8009332:	3f01      	subs	r7, #1
 8009334:	9b01      	ldr	r3, [sp, #4]
 8009336:	3c04      	subs	r4, #4
 8009338:	42a3      	cmp	r3, r4
 800933a:	d3f7      	bcc.n	800932c <quorem+0xf4>
 800933c:	6137      	str	r7, [r6, #16]
 800933e:	e7c8      	b.n	80092d2 <quorem+0x9a>
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	2a00      	cmp	r2, #0
 8009344:	d104      	bne.n	8009350 <quorem+0x118>
 8009346:	3f01      	subs	r7, #1
 8009348:	9a01      	ldr	r2, [sp, #4]
 800934a:	3b04      	subs	r3, #4
 800934c:	429a      	cmp	r2, r3
 800934e:	d3f7      	bcc.n	8009340 <quorem+0x108>
 8009350:	6137      	str	r7, [r6, #16]
 8009352:	e7e5      	b.n	8009320 <quorem+0xe8>

08009354 <_dtoa_r>:
 8009354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009356:	0014      	movs	r4, r2
 8009358:	001d      	movs	r5, r3
 800935a:	69c6      	ldr	r6, [r0, #28]
 800935c:	b09d      	sub	sp, #116	@ 0x74
 800935e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009360:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009362:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8009364:	9003      	str	r0, [sp, #12]
 8009366:	2e00      	cmp	r6, #0
 8009368:	d10f      	bne.n	800938a <_dtoa_r+0x36>
 800936a:	2010      	movs	r0, #16
 800936c:	f000 fe30 	bl	8009fd0 <malloc>
 8009370:	9b03      	ldr	r3, [sp, #12]
 8009372:	1e02      	subs	r2, r0, #0
 8009374:	61d8      	str	r0, [r3, #28]
 8009376:	d104      	bne.n	8009382 <_dtoa_r+0x2e>
 8009378:	21ef      	movs	r1, #239	@ 0xef
 800937a:	4bc7      	ldr	r3, [pc, #796]	@ (8009698 <_dtoa_r+0x344>)
 800937c:	48c7      	ldr	r0, [pc, #796]	@ (800969c <_dtoa_r+0x348>)
 800937e:	f001 fcc5 	bl	800ad0c <__assert_func>
 8009382:	6046      	str	r6, [r0, #4]
 8009384:	6086      	str	r6, [r0, #8]
 8009386:	6006      	str	r6, [r0, #0]
 8009388:	60c6      	str	r6, [r0, #12]
 800938a:	9b03      	ldr	r3, [sp, #12]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	6819      	ldr	r1, [r3, #0]
 8009390:	2900      	cmp	r1, #0
 8009392:	d00b      	beq.n	80093ac <_dtoa_r+0x58>
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	2301      	movs	r3, #1
 8009398:	4093      	lsls	r3, r2
 800939a:	604a      	str	r2, [r1, #4]
 800939c:	608b      	str	r3, [r1, #8]
 800939e:	9803      	ldr	r0, [sp, #12]
 80093a0:	f000 ff16 	bl	800a1d0 <_Bfree>
 80093a4:	2200      	movs	r2, #0
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	2d00      	cmp	r5, #0
 80093ae:	da1e      	bge.n	80093ee <_dtoa_r+0x9a>
 80093b0:	2301      	movs	r3, #1
 80093b2:	603b      	str	r3, [r7, #0]
 80093b4:	006b      	lsls	r3, r5, #1
 80093b6:	085b      	lsrs	r3, r3, #1
 80093b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093ba:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80093bc:	4bb8      	ldr	r3, [pc, #736]	@ (80096a0 <_dtoa_r+0x34c>)
 80093be:	4ab8      	ldr	r2, [pc, #736]	@ (80096a0 <_dtoa_r+0x34c>)
 80093c0:	403b      	ands	r3, r7
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d116      	bne.n	80093f4 <_dtoa_r+0xa0>
 80093c6:	4bb7      	ldr	r3, [pc, #732]	@ (80096a4 <_dtoa_r+0x350>)
 80093c8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80093ca:	6013      	str	r3, [r2, #0]
 80093cc:	033b      	lsls	r3, r7, #12
 80093ce:	0b1b      	lsrs	r3, r3, #12
 80093d0:	4323      	orrs	r3, r4
 80093d2:	d101      	bne.n	80093d8 <_dtoa_r+0x84>
 80093d4:	f000 fd83 	bl	8009ede <_dtoa_r+0xb8a>
 80093d8:	4bb3      	ldr	r3, [pc, #716]	@ (80096a8 <_dtoa_r+0x354>)
 80093da:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80093dc:	9308      	str	r3, [sp, #32]
 80093de:	2a00      	cmp	r2, #0
 80093e0:	d002      	beq.n	80093e8 <_dtoa_r+0x94>
 80093e2:	4bb2      	ldr	r3, [pc, #712]	@ (80096ac <_dtoa_r+0x358>)
 80093e4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80093e6:	6013      	str	r3, [r2, #0]
 80093e8:	9808      	ldr	r0, [sp, #32]
 80093ea:	b01d      	add	sp, #116	@ 0x74
 80093ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ee:	2300      	movs	r3, #0
 80093f0:	603b      	str	r3, [r7, #0]
 80093f2:	e7e2      	b.n	80093ba <_dtoa_r+0x66>
 80093f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093f8:	9212      	str	r2, [sp, #72]	@ 0x48
 80093fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80093fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009400:	2200      	movs	r2, #0
 8009402:	2300      	movs	r3, #0
 8009404:	f7f7 f820 	bl	8000448 <__aeabi_dcmpeq>
 8009408:	1e06      	subs	r6, r0, #0
 800940a:	d00b      	beq.n	8009424 <_dtoa_r+0xd0>
 800940c:	2301      	movs	r3, #1
 800940e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <_dtoa_r+0xca>
 8009418:	4ba5      	ldr	r3, [pc, #660]	@ (80096b0 <_dtoa_r+0x35c>)
 800941a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800941c:	6013      	str	r3, [r2, #0]
 800941e:	4ba5      	ldr	r3, [pc, #660]	@ (80096b4 <_dtoa_r+0x360>)
 8009420:	9308      	str	r3, [sp, #32]
 8009422:	e7e1      	b.n	80093e8 <_dtoa_r+0x94>
 8009424:	ab1a      	add	r3, sp, #104	@ 0x68
 8009426:	9301      	str	r3, [sp, #4]
 8009428:	ab1b      	add	r3, sp, #108	@ 0x6c
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	9803      	ldr	r0, [sp, #12]
 800942e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009430:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009432:	f001 f9cd 	bl	800a7d0 <__d2b>
 8009436:	007a      	lsls	r2, r7, #1
 8009438:	9005      	str	r0, [sp, #20]
 800943a:	0d52      	lsrs	r2, r2, #21
 800943c:	d100      	bne.n	8009440 <_dtoa_r+0xec>
 800943e:	e07b      	b.n	8009538 <_dtoa_r+0x1e4>
 8009440:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009442:	9618      	str	r6, [sp, #96]	@ 0x60
 8009444:	0319      	lsls	r1, r3, #12
 8009446:	4b9c      	ldr	r3, [pc, #624]	@ (80096b8 <_dtoa_r+0x364>)
 8009448:	0b09      	lsrs	r1, r1, #12
 800944a:	430b      	orrs	r3, r1
 800944c:	499b      	ldr	r1, [pc, #620]	@ (80096bc <_dtoa_r+0x368>)
 800944e:	1857      	adds	r7, r2, r1
 8009450:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009452:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009454:	0019      	movs	r1, r3
 8009456:	2200      	movs	r2, #0
 8009458:	4b99      	ldr	r3, [pc, #612]	@ (80096c0 <_dtoa_r+0x36c>)
 800945a:	f7f9 f94d 	bl	80026f8 <__aeabi_dsub>
 800945e:	4a99      	ldr	r2, [pc, #612]	@ (80096c4 <_dtoa_r+0x370>)
 8009460:	4b99      	ldr	r3, [pc, #612]	@ (80096c8 <_dtoa_r+0x374>)
 8009462:	f7f8 fe81 	bl	8002168 <__aeabi_dmul>
 8009466:	4a99      	ldr	r2, [pc, #612]	@ (80096cc <_dtoa_r+0x378>)
 8009468:	4b99      	ldr	r3, [pc, #612]	@ (80096d0 <_dtoa_r+0x37c>)
 800946a:	f7f7 fed5 	bl	8001218 <__aeabi_dadd>
 800946e:	0004      	movs	r4, r0
 8009470:	0038      	movs	r0, r7
 8009472:	000d      	movs	r5, r1
 8009474:	f7f9 fd3a 	bl	8002eec <__aeabi_i2d>
 8009478:	4a96      	ldr	r2, [pc, #600]	@ (80096d4 <_dtoa_r+0x380>)
 800947a:	4b97      	ldr	r3, [pc, #604]	@ (80096d8 <_dtoa_r+0x384>)
 800947c:	f7f8 fe74 	bl	8002168 <__aeabi_dmul>
 8009480:	0002      	movs	r2, r0
 8009482:	000b      	movs	r3, r1
 8009484:	0020      	movs	r0, r4
 8009486:	0029      	movs	r1, r5
 8009488:	f7f7 fec6 	bl	8001218 <__aeabi_dadd>
 800948c:	0004      	movs	r4, r0
 800948e:	000d      	movs	r5, r1
 8009490:	f7f9 fcf0 	bl	8002e74 <__aeabi_d2iz>
 8009494:	2200      	movs	r2, #0
 8009496:	9004      	str	r0, [sp, #16]
 8009498:	2300      	movs	r3, #0
 800949a:	0020      	movs	r0, r4
 800949c:	0029      	movs	r1, r5
 800949e:	f7f6 ffd9 	bl	8000454 <__aeabi_dcmplt>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d00b      	beq.n	80094be <_dtoa_r+0x16a>
 80094a6:	9804      	ldr	r0, [sp, #16]
 80094a8:	f7f9 fd20 	bl	8002eec <__aeabi_i2d>
 80094ac:	002b      	movs	r3, r5
 80094ae:	0022      	movs	r2, r4
 80094b0:	f7f6 ffca 	bl	8000448 <__aeabi_dcmpeq>
 80094b4:	4243      	negs	r3, r0
 80094b6:	4158      	adcs	r0, r3
 80094b8:	9b04      	ldr	r3, [sp, #16]
 80094ba:	1a1b      	subs	r3, r3, r0
 80094bc:	9304      	str	r3, [sp, #16]
 80094be:	2301      	movs	r3, #1
 80094c0:	9315      	str	r3, [sp, #84]	@ 0x54
 80094c2:	9b04      	ldr	r3, [sp, #16]
 80094c4:	2b16      	cmp	r3, #22
 80094c6:	d810      	bhi.n	80094ea <_dtoa_r+0x196>
 80094c8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80094ca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80094cc:	9a04      	ldr	r2, [sp, #16]
 80094ce:	4b83      	ldr	r3, [pc, #524]	@ (80096dc <_dtoa_r+0x388>)
 80094d0:	00d2      	lsls	r2, r2, #3
 80094d2:	189b      	adds	r3, r3, r2
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	f7f6 ffbc 	bl	8000454 <__aeabi_dcmplt>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d047      	beq.n	8009570 <_dtoa_r+0x21c>
 80094e0:	9b04      	ldr	r3, [sp, #16]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	9304      	str	r3, [sp, #16]
 80094e6:	2300      	movs	r3, #0
 80094e8:	9315      	str	r3, [sp, #84]	@ 0x54
 80094ea:	2200      	movs	r2, #0
 80094ec:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80094ee:	9206      	str	r2, [sp, #24]
 80094f0:	1bdb      	subs	r3, r3, r7
 80094f2:	1e5a      	subs	r2, r3, #1
 80094f4:	d53e      	bpl.n	8009574 <_dtoa_r+0x220>
 80094f6:	2201      	movs	r2, #1
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	9306      	str	r3, [sp, #24]
 80094fc:	2300      	movs	r3, #0
 80094fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8009500:	9b04      	ldr	r3, [sp, #16]
 8009502:	2b00      	cmp	r3, #0
 8009504:	db38      	blt.n	8009578 <_dtoa_r+0x224>
 8009506:	9a04      	ldr	r2, [sp, #16]
 8009508:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800950a:	4694      	mov	ip, r2
 800950c:	4463      	add	r3, ip
 800950e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009510:	2300      	movs	r3, #0
 8009512:	9214      	str	r2, [sp, #80]	@ 0x50
 8009514:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009516:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009518:	2401      	movs	r4, #1
 800951a:	2b09      	cmp	r3, #9
 800951c:	d867      	bhi.n	80095ee <_dtoa_r+0x29a>
 800951e:	2b05      	cmp	r3, #5
 8009520:	dd02      	ble.n	8009528 <_dtoa_r+0x1d4>
 8009522:	2400      	movs	r4, #0
 8009524:	3b04      	subs	r3, #4
 8009526:	9322      	str	r3, [sp, #136]	@ 0x88
 8009528:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800952a:	1e98      	subs	r0, r3, #2
 800952c:	2803      	cmp	r0, #3
 800952e:	d867      	bhi.n	8009600 <_dtoa_r+0x2ac>
 8009530:	f7f6 fdf0 	bl	8000114 <__gnu_thumb1_case_uqi>
 8009534:	5b383a2b 	.word	0x5b383a2b
 8009538:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800953a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800953c:	18f6      	adds	r6, r6, r3
 800953e:	4b68      	ldr	r3, [pc, #416]	@ (80096e0 <_dtoa_r+0x38c>)
 8009540:	18f2      	adds	r2, r6, r3
 8009542:	2a20      	cmp	r2, #32
 8009544:	dd0f      	ble.n	8009566 <_dtoa_r+0x212>
 8009546:	2340      	movs	r3, #64	@ 0x40
 8009548:	1a9b      	subs	r3, r3, r2
 800954a:	409f      	lsls	r7, r3
 800954c:	4b65      	ldr	r3, [pc, #404]	@ (80096e4 <_dtoa_r+0x390>)
 800954e:	0038      	movs	r0, r7
 8009550:	18f3      	adds	r3, r6, r3
 8009552:	40dc      	lsrs	r4, r3
 8009554:	4320      	orrs	r0, r4
 8009556:	f7f9 fcf7 	bl	8002f48 <__aeabi_ui2d>
 800955a:	2201      	movs	r2, #1
 800955c:	4b62      	ldr	r3, [pc, #392]	@ (80096e8 <_dtoa_r+0x394>)
 800955e:	1e77      	subs	r7, r6, #1
 8009560:	18cb      	adds	r3, r1, r3
 8009562:	9218      	str	r2, [sp, #96]	@ 0x60
 8009564:	e776      	b.n	8009454 <_dtoa_r+0x100>
 8009566:	2320      	movs	r3, #32
 8009568:	0020      	movs	r0, r4
 800956a:	1a9b      	subs	r3, r3, r2
 800956c:	4098      	lsls	r0, r3
 800956e:	e7f2      	b.n	8009556 <_dtoa_r+0x202>
 8009570:	9015      	str	r0, [sp, #84]	@ 0x54
 8009572:	e7ba      	b.n	80094ea <_dtoa_r+0x196>
 8009574:	920d      	str	r2, [sp, #52]	@ 0x34
 8009576:	e7c3      	b.n	8009500 <_dtoa_r+0x1ac>
 8009578:	9b06      	ldr	r3, [sp, #24]
 800957a:	9a04      	ldr	r2, [sp, #16]
 800957c:	1a9b      	subs	r3, r3, r2
 800957e:	9306      	str	r3, [sp, #24]
 8009580:	4253      	negs	r3, r2
 8009582:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009584:	2300      	movs	r3, #0
 8009586:	9314      	str	r3, [sp, #80]	@ 0x50
 8009588:	e7c5      	b.n	8009516 <_dtoa_r+0x1c2>
 800958a:	2300      	movs	r3, #0
 800958c:	9310      	str	r3, [sp, #64]	@ 0x40
 800958e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009590:	930e      	str	r3, [sp, #56]	@ 0x38
 8009592:	9309      	str	r3, [sp, #36]	@ 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	dc13      	bgt.n	80095c0 <_dtoa_r+0x26c>
 8009598:	2301      	movs	r3, #1
 800959a:	001a      	movs	r2, r3
 800959c:	930e      	str	r3, [sp, #56]	@ 0x38
 800959e:	9309      	str	r3, [sp, #36]	@ 0x24
 80095a0:	9223      	str	r2, [sp, #140]	@ 0x8c
 80095a2:	e00d      	b.n	80095c0 <_dtoa_r+0x26c>
 80095a4:	2301      	movs	r3, #1
 80095a6:	e7f1      	b.n	800958c <_dtoa_r+0x238>
 80095a8:	2300      	movs	r3, #0
 80095aa:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80095ac:	9310      	str	r3, [sp, #64]	@ 0x40
 80095ae:	4694      	mov	ip, r2
 80095b0:	9b04      	ldr	r3, [sp, #16]
 80095b2:	4463      	add	r3, ip
 80095b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80095b6:	3301      	adds	r3, #1
 80095b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	dc00      	bgt.n	80095c0 <_dtoa_r+0x26c>
 80095be:	2301      	movs	r3, #1
 80095c0:	9a03      	ldr	r2, [sp, #12]
 80095c2:	2100      	movs	r1, #0
 80095c4:	69d0      	ldr	r0, [r2, #28]
 80095c6:	2204      	movs	r2, #4
 80095c8:	0015      	movs	r5, r2
 80095ca:	3514      	adds	r5, #20
 80095cc:	429d      	cmp	r5, r3
 80095ce:	d91b      	bls.n	8009608 <_dtoa_r+0x2b4>
 80095d0:	6041      	str	r1, [r0, #4]
 80095d2:	9803      	ldr	r0, [sp, #12]
 80095d4:	f000 fdb8 	bl	800a148 <_Balloc>
 80095d8:	9008      	str	r0, [sp, #32]
 80095da:	2800      	cmp	r0, #0
 80095dc:	d117      	bne.n	800960e <_dtoa_r+0x2ba>
 80095de:	21b0      	movs	r1, #176	@ 0xb0
 80095e0:	4b42      	ldr	r3, [pc, #264]	@ (80096ec <_dtoa_r+0x398>)
 80095e2:	482e      	ldr	r0, [pc, #184]	@ (800969c <_dtoa_r+0x348>)
 80095e4:	9a08      	ldr	r2, [sp, #32]
 80095e6:	31ff      	adds	r1, #255	@ 0xff
 80095e8:	e6c9      	b.n	800937e <_dtoa_r+0x2a>
 80095ea:	2301      	movs	r3, #1
 80095ec:	e7dd      	b.n	80095aa <_dtoa_r+0x256>
 80095ee:	2300      	movs	r3, #0
 80095f0:	9410      	str	r4, [sp, #64]	@ 0x40
 80095f2:	9322      	str	r3, [sp, #136]	@ 0x88
 80095f4:	3b01      	subs	r3, #1
 80095f6:	930e      	str	r3, [sp, #56]	@ 0x38
 80095f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095fa:	2200      	movs	r2, #0
 80095fc:	3313      	adds	r3, #19
 80095fe:	e7cf      	b.n	80095a0 <_dtoa_r+0x24c>
 8009600:	2301      	movs	r3, #1
 8009602:	9310      	str	r3, [sp, #64]	@ 0x40
 8009604:	3b02      	subs	r3, #2
 8009606:	e7f6      	b.n	80095f6 <_dtoa_r+0x2a2>
 8009608:	3101      	adds	r1, #1
 800960a:	0052      	lsls	r2, r2, #1
 800960c:	e7dc      	b.n	80095c8 <_dtoa_r+0x274>
 800960e:	9b03      	ldr	r3, [sp, #12]
 8009610:	9a08      	ldr	r2, [sp, #32]
 8009612:	69db      	ldr	r3, [r3, #28]
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009618:	2b0e      	cmp	r3, #14
 800961a:	d900      	bls.n	800961e <_dtoa_r+0x2ca>
 800961c:	e0d9      	b.n	80097d2 <_dtoa_r+0x47e>
 800961e:	2c00      	cmp	r4, #0
 8009620:	d100      	bne.n	8009624 <_dtoa_r+0x2d0>
 8009622:	e0d6      	b.n	80097d2 <_dtoa_r+0x47e>
 8009624:	9b04      	ldr	r3, [sp, #16]
 8009626:	2b00      	cmp	r3, #0
 8009628:	dd64      	ble.n	80096f4 <_dtoa_r+0x3a0>
 800962a:	210f      	movs	r1, #15
 800962c:	9a04      	ldr	r2, [sp, #16]
 800962e:	4b2b      	ldr	r3, [pc, #172]	@ (80096dc <_dtoa_r+0x388>)
 8009630:	400a      	ands	r2, r1
 8009632:	00d2      	lsls	r2, r2, #3
 8009634:	189b      	adds	r3, r3, r2
 8009636:	681e      	ldr	r6, [r3, #0]
 8009638:	685f      	ldr	r7, [r3, #4]
 800963a:	9b04      	ldr	r3, [sp, #16]
 800963c:	2402      	movs	r4, #2
 800963e:	111d      	asrs	r5, r3, #4
 8009640:	05db      	lsls	r3, r3, #23
 8009642:	d50a      	bpl.n	800965a <_dtoa_r+0x306>
 8009644:	4b2a      	ldr	r3, [pc, #168]	@ (80096f0 <_dtoa_r+0x39c>)
 8009646:	400d      	ands	r5, r1
 8009648:	6a1a      	ldr	r2, [r3, #32]
 800964a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800964e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009650:	f7f8 f946 	bl	80018e0 <__aeabi_ddiv>
 8009654:	900a      	str	r0, [sp, #40]	@ 0x28
 8009656:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009658:	3401      	adds	r4, #1
 800965a:	4b25      	ldr	r3, [pc, #148]	@ (80096f0 <_dtoa_r+0x39c>)
 800965c:	930c      	str	r3, [sp, #48]	@ 0x30
 800965e:	2d00      	cmp	r5, #0
 8009660:	d108      	bne.n	8009674 <_dtoa_r+0x320>
 8009662:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009664:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009666:	0032      	movs	r2, r6
 8009668:	003b      	movs	r3, r7
 800966a:	f7f8 f939 	bl	80018e0 <__aeabi_ddiv>
 800966e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009670:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009672:	e05a      	b.n	800972a <_dtoa_r+0x3d6>
 8009674:	2301      	movs	r3, #1
 8009676:	421d      	tst	r5, r3
 8009678:	d009      	beq.n	800968e <_dtoa_r+0x33a>
 800967a:	18e4      	adds	r4, r4, r3
 800967c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800967e:	0030      	movs	r0, r6
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	0039      	movs	r1, r7
 8009686:	f7f8 fd6f 	bl	8002168 <__aeabi_dmul>
 800968a:	0006      	movs	r6, r0
 800968c:	000f      	movs	r7, r1
 800968e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009690:	106d      	asrs	r5, r5, #1
 8009692:	3308      	adds	r3, #8
 8009694:	e7e2      	b.n	800965c <_dtoa_r+0x308>
 8009696:	46c0      	nop			@ (mov r8, r8)
 8009698:	0800b979 	.word	0x0800b979
 800969c:	0800b990 	.word	0x0800b990
 80096a0:	7ff00000 	.word	0x7ff00000
 80096a4:	0000270f 	.word	0x0000270f
 80096a8:	0800b975 	.word	0x0800b975
 80096ac:	0800b978 	.word	0x0800b978
 80096b0:	0800b949 	.word	0x0800b949
 80096b4:	0800b948 	.word	0x0800b948
 80096b8:	3ff00000 	.word	0x3ff00000
 80096bc:	fffffc01 	.word	0xfffffc01
 80096c0:	3ff80000 	.word	0x3ff80000
 80096c4:	636f4361 	.word	0x636f4361
 80096c8:	3fd287a7 	.word	0x3fd287a7
 80096cc:	8b60c8b3 	.word	0x8b60c8b3
 80096d0:	3fc68a28 	.word	0x3fc68a28
 80096d4:	509f79fb 	.word	0x509f79fb
 80096d8:	3fd34413 	.word	0x3fd34413
 80096dc:	0800ba88 	.word	0x0800ba88
 80096e0:	00000432 	.word	0x00000432
 80096e4:	00000412 	.word	0x00000412
 80096e8:	fe100000 	.word	0xfe100000
 80096ec:	0800b9e8 	.word	0x0800b9e8
 80096f0:	0800ba60 	.word	0x0800ba60
 80096f4:	9b04      	ldr	r3, [sp, #16]
 80096f6:	2402      	movs	r4, #2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d016      	beq.n	800972a <_dtoa_r+0x3d6>
 80096fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80096fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009700:	220f      	movs	r2, #15
 8009702:	425d      	negs	r5, r3
 8009704:	402a      	ands	r2, r5
 8009706:	4bd7      	ldr	r3, [pc, #860]	@ (8009a64 <_dtoa_r+0x710>)
 8009708:	00d2      	lsls	r2, r2, #3
 800970a:	189b      	adds	r3, r3, r2
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f7f8 fd2a 	bl	8002168 <__aeabi_dmul>
 8009714:	2701      	movs	r7, #1
 8009716:	2300      	movs	r3, #0
 8009718:	900a      	str	r0, [sp, #40]	@ 0x28
 800971a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800971c:	4ed2      	ldr	r6, [pc, #840]	@ (8009a68 <_dtoa_r+0x714>)
 800971e:	112d      	asrs	r5, r5, #4
 8009720:	2d00      	cmp	r5, #0
 8009722:	d000      	beq.n	8009726 <_dtoa_r+0x3d2>
 8009724:	e0ba      	b.n	800989c <_dtoa_r+0x548>
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1a1      	bne.n	800966e <_dtoa_r+0x31a>
 800972a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800972c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800972e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009730:	2b00      	cmp	r3, #0
 8009732:	d100      	bne.n	8009736 <_dtoa_r+0x3e2>
 8009734:	e0bd      	b.n	80098b2 <_dtoa_r+0x55e>
 8009736:	2200      	movs	r2, #0
 8009738:	0030      	movs	r0, r6
 800973a:	0039      	movs	r1, r7
 800973c:	4bcb      	ldr	r3, [pc, #812]	@ (8009a6c <_dtoa_r+0x718>)
 800973e:	f7f6 fe89 	bl	8000454 <__aeabi_dcmplt>
 8009742:	2800      	cmp	r0, #0
 8009744:	d100      	bne.n	8009748 <_dtoa_r+0x3f4>
 8009746:	e0b4      	b.n	80098b2 <_dtoa_r+0x55e>
 8009748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800974a:	2b00      	cmp	r3, #0
 800974c:	d100      	bne.n	8009750 <_dtoa_r+0x3fc>
 800974e:	e0b0      	b.n	80098b2 <_dtoa_r+0x55e>
 8009750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009752:	2b00      	cmp	r3, #0
 8009754:	dd39      	ble.n	80097ca <_dtoa_r+0x476>
 8009756:	9b04      	ldr	r3, [sp, #16]
 8009758:	2200      	movs	r2, #0
 800975a:	3b01      	subs	r3, #1
 800975c:	930c      	str	r3, [sp, #48]	@ 0x30
 800975e:	0030      	movs	r0, r6
 8009760:	4bc3      	ldr	r3, [pc, #780]	@ (8009a70 <_dtoa_r+0x71c>)
 8009762:	0039      	movs	r1, r7
 8009764:	f7f8 fd00 	bl	8002168 <__aeabi_dmul>
 8009768:	900a      	str	r0, [sp, #40]	@ 0x28
 800976a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800976c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800976e:	3401      	adds	r4, #1
 8009770:	0020      	movs	r0, r4
 8009772:	9311      	str	r3, [sp, #68]	@ 0x44
 8009774:	f7f9 fbba 	bl	8002eec <__aeabi_i2d>
 8009778:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800977a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800977c:	f7f8 fcf4 	bl	8002168 <__aeabi_dmul>
 8009780:	4bbc      	ldr	r3, [pc, #752]	@ (8009a74 <_dtoa_r+0x720>)
 8009782:	2200      	movs	r2, #0
 8009784:	f7f7 fd48 	bl	8001218 <__aeabi_dadd>
 8009788:	4bbb      	ldr	r3, [pc, #748]	@ (8009a78 <_dtoa_r+0x724>)
 800978a:	0006      	movs	r6, r0
 800978c:	18cf      	adds	r7, r1, r3
 800978e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009790:	2b00      	cmp	r3, #0
 8009792:	d000      	beq.n	8009796 <_dtoa_r+0x442>
 8009794:	e091      	b.n	80098ba <_dtoa_r+0x566>
 8009796:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009798:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800979a:	2200      	movs	r2, #0
 800979c:	4bb7      	ldr	r3, [pc, #732]	@ (8009a7c <_dtoa_r+0x728>)
 800979e:	f7f8 ffab 	bl	80026f8 <__aeabi_dsub>
 80097a2:	0032      	movs	r2, r6
 80097a4:	003b      	movs	r3, r7
 80097a6:	0004      	movs	r4, r0
 80097a8:	000d      	movs	r5, r1
 80097aa:	f7f6 fe67 	bl	800047c <__aeabi_dcmpgt>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d000      	beq.n	80097b4 <_dtoa_r+0x460>
 80097b2:	e29d      	b.n	8009cf0 <_dtoa_r+0x99c>
 80097b4:	2180      	movs	r1, #128	@ 0x80
 80097b6:	0609      	lsls	r1, r1, #24
 80097b8:	187b      	adds	r3, r7, r1
 80097ba:	0032      	movs	r2, r6
 80097bc:	0020      	movs	r0, r4
 80097be:	0029      	movs	r1, r5
 80097c0:	f7f6 fe48 	bl	8000454 <__aeabi_dcmplt>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d000      	beq.n	80097ca <_dtoa_r+0x476>
 80097c8:	e130      	b.n	8009a2c <_dtoa_r+0x6d8>
 80097ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097cc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80097ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80097d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80097d2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	da00      	bge.n	80097da <_dtoa_r+0x486>
 80097d8:	e177      	b.n	8009aca <_dtoa_r+0x776>
 80097da:	9a04      	ldr	r2, [sp, #16]
 80097dc:	2a0e      	cmp	r2, #14
 80097de:	dd00      	ble.n	80097e2 <_dtoa_r+0x48e>
 80097e0:	e173      	b.n	8009aca <_dtoa_r+0x776>
 80097e2:	4ba0      	ldr	r3, [pc, #640]	@ (8009a64 <_dtoa_r+0x710>)
 80097e4:	00d2      	lsls	r2, r2, #3
 80097e6:	189b      	adds	r3, r3, r2
 80097e8:	685c      	ldr	r4, [r3, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	9306      	str	r3, [sp, #24]
 80097ee:	9407      	str	r4, [sp, #28]
 80097f0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	da03      	bge.n	80097fe <_dtoa_r+0x4aa>
 80097f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	dc00      	bgt.n	80097fe <_dtoa_r+0x4aa>
 80097fc:	e106      	b.n	8009a0c <_dtoa_r+0x6b8>
 80097fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009800:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009804:	9d08      	ldr	r5, [sp, #32]
 8009806:	3b01      	subs	r3, #1
 8009808:	195b      	adds	r3, r3, r5
 800980a:	930a      	str	r3, [sp, #40]	@ 0x28
 800980c:	9a06      	ldr	r2, [sp, #24]
 800980e:	9b07      	ldr	r3, [sp, #28]
 8009810:	0030      	movs	r0, r6
 8009812:	0039      	movs	r1, r7
 8009814:	f7f8 f864 	bl	80018e0 <__aeabi_ddiv>
 8009818:	f7f9 fb2c 	bl	8002e74 <__aeabi_d2iz>
 800981c:	9009      	str	r0, [sp, #36]	@ 0x24
 800981e:	f7f9 fb65 	bl	8002eec <__aeabi_i2d>
 8009822:	9a06      	ldr	r2, [sp, #24]
 8009824:	9b07      	ldr	r3, [sp, #28]
 8009826:	f7f8 fc9f 	bl	8002168 <__aeabi_dmul>
 800982a:	0002      	movs	r2, r0
 800982c:	000b      	movs	r3, r1
 800982e:	0030      	movs	r0, r6
 8009830:	0039      	movs	r1, r7
 8009832:	f7f8 ff61 	bl	80026f8 <__aeabi_dsub>
 8009836:	002b      	movs	r3, r5
 8009838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800983a:	3501      	adds	r5, #1
 800983c:	3230      	adds	r2, #48	@ 0x30
 800983e:	701a      	strb	r2, [r3, #0]
 8009840:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009842:	002c      	movs	r4, r5
 8009844:	429a      	cmp	r2, r3
 8009846:	d000      	beq.n	800984a <_dtoa_r+0x4f6>
 8009848:	e131      	b.n	8009aae <_dtoa_r+0x75a>
 800984a:	0002      	movs	r2, r0
 800984c:	000b      	movs	r3, r1
 800984e:	f7f7 fce3 	bl	8001218 <__aeabi_dadd>
 8009852:	9a06      	ldr	r2, [sp, #24]
 8009854:	9b07      	ldr	r3, [sp, #28]
 8009856:	0006      	movs	r6, r0
 8009858:	000f      	movs	r7, r1
 800985a:	f7f6 fe0f 	bl	800047c <__aeabi_dcmpgt>
 800985e:	2800      	cmp	r0, #0
 8009860:	d000      	beq.n	8009864 <_dtoa_r+0x510>
 8009862:	e10f      	b.n	8009a84 <_dtoa_r+0x730>
 8009864:	9a06      	ldr	r2, [sp, #24]
 8009866:	9b07      	ldr	r3, [sp, #28]
 8009868:	0030      	movs	r0, r6
 800986a:	0039      	movs	r1, r7
 800986c:	f7f6 fdec 	bl	8000448 <__aeabi_dcmpeq>
 8009870:	2800      	cmp	r0, #0
 8009872:	d003      	beq.n	800987c <_dtoa_r+0x528>
 8009874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009876:	07dd      	lsls	r5, r3, #31
 8009878:	d500      	bpl.n	800987c <_dtoa_r+0x528>
 800987a:	e103      	b.n	8009a84 <_dtoa_r+0x730>
 800987c:	9905      	ldr	r1, [sp, #20]
 800987e:	9803      	ldr	r0, [sp, #12]
 8009880:	f000 fca6 	bl	800a1d0 <_Bfree>
 8009884:	2300      	movs	r3, #0
 8009886:	7023      	strb	r3, [r4, #0]
 8009888:	9b04      	ldr	r3, [sp, #16]
 800988a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800988c:	3301      	adds	r3, #1
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009892:	2b00      	cmp	r3, #0
 8009894:	d100      	bne.n	8009898 <_dtoa_r+0x544>
 8009896:	e5a7      	b.n	80093e8 <_dtoa_r+0x94>
 8009898:	601c      	str	r4, [r3, #0]
 800989a:	e5a5      	b.n	80093e8 <_dtoa_r+0x94>
 800989c:	423d      	tst	r5, r7
 800989e:	d005      	beq.n	80098ac <_dtoa_r+0x558>
 80098a0:	6832      	ldr	r2, [r6, #0]
 80098a2:	6873      	ldr	r3, [r6, #4]
 80098a4:	f7f8 fc60 	bl	8002168 <__aeabi_dmul>
 80098a8:	003b      	movs	r3, r7
 80098aa:	3401      	adds	r4, #1
 80098ac:	106d      	asrs	r5, r5, #1
 80098ae:	3608      	adds	r6, #8
 80098b0:	e736      	b.n	8009720 <_dtoa_r+0x3cc>
 80098b2:	9b04      	ldr	r3, [sp, #16]
 80098b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80098b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b8:	e75a      	b.n	8009770 <_dtoa_r+0x41c>
 80098ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80098bc:	4b69      	ldr	r3, [pc, #420]	@ (8009a64 <_dtoa_r+0x710>)
 80098be:	3a01      	subs	r2, #1
 80098c0:	00d2      	lsls	r2, r2, #3
 80098c2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80098c4:	189b      	adds	r3, r3, r2
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	2900      	cmp	r1, #0
 80098cc:	d04c      	beq.n	8009968 <_dtoa_r+0x614>
 80098ce:	2000      	movs	r0, #0
 80098d0:	496b      	ldr	r1, [pc, #428]	@ (8009a80 <_dtoa_r+0x72c>)
 80098d2:	f7f8 f805 	bl	80018e0 <__aeabi_ddiv>
 80098d6:	0032      	movs	r2, r6
 80098d8:	003b      	movs	r3, r7
 80098da:	f7f8 ff0d 	bl	80026f8 <__aeabi_dsub>
 80098de:	9a08      	ldr	r2, [sp, #32]
 80098e0:	0006      	movs	r6, r0
 80098e2:	4694      	mov	ip, r2
 80098e4:	000f      	movs	r7, r1
 80098e6:	9b08      	ldr	r3, [sp, #32]
 80098e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80098ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80098ec:	4463      	add	r3, ip
 80098ee:	9311      	str	r3, [sp, #68]	@ 0x44
 80098f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80098f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80098f4:	f7f9 fabe 	bl	8002e74 <__aeabi_d2iz>
 80098f8:	0005      	movs	r5, r0
 80098fa:	f7f9 faf7 	bl	8002eec <__aeabi_i2d>
 80098fe:	0002      	movs	r2, r0
 8009900:	000b      	movs	r3, r1
 8009902:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009904:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009906:	f7f8 fef7 	bl	80026f8 <__aeabi_dsub>
 800990a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800990c:	3530      	adds	r5, #48	@ 0x30
 800990e:	1c5c      	adds	r4, r3, #1
 8009910:	701d      	strb	r5, [r3, #0]
 8009912:	0032      	movs	r2, r6
 8009914:	003b      	movs	r3, r7
 8009916:	900a      	str	r0, [sp, #40]	@ 0x28
 8009918:	910b      	str	r1, [sp, #44]	@ 0x2c
 800991a:	f7f6 fd9b 	bl	8000454 <__aeabi_dcmplt>
 800991e:	2800      	cmp	r0, #0
 8009920:	d16a      	bne.n	80099f8 <_dtoa_r+0x6a4>
 8009922:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009924:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009926:	2000      	movs	r0, #0
 8009928:	4950      	ldr	r1, [pc, #320]	@ (8009a6c <_dtoa_r+0x718>)
 800992a:	f7f8 fee5 	bl	80026f8 <__aeabi_dsub>
 800992e:	0032      	movs	r2, r6
 8009930:	003b      	movs	r3, r7
 8009932:	f7f6 fd8f 	bl	8000454 <__aeabi_dcmplt>
 8009936:	2800      	cmp	r0, #0
 8009938:	d000      	beq.n	800993c <_dtoa_r+0x5e8>
 800993a:	e0a5      	b.n	8009a88 <_dtoa_r+0x734>
 800993c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800993e:	42a3      	cmp	r3, r4
 8009940:	d100      	bne.n	8009944 <_dtoa_r+0x5f0>
 8009942:	e742      	b.n	80097ca <_dtoa_r+0x476>
 8009944:	2200      	movs	r2, #0
 8009946:	0030      	movs	r0, r6
 8009948:	0039      	movs	r1, r7
 800994a:	4b49      	ldr	r3, [pc, #292]	@ (8009a70 <_dtoa_r+0x71c>)
 800994c:	f7f8 fc0c 	bl	8002168 <__aeabi_dmul>
 8009950:	2200      	movs	r2, #0
 8009952:	0006      	movs	r6, r0
 8009954:	000f      	movs	r7, r1
 8009956:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009958:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800995a:	4b45      	ldr	r3, [pc, #276]	@ (8009a70 <_dtoa_r+0x71c>)
 800995c:	f7f8 fc04 	bl	8002168 <__aeabi_dmul>
 8009960:	9416      	str	r4, [sp, #88]	@ 0x58
 8009962:	900a      	str	r0, [sp, #40]	@ 0x28
 8009964:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009966:	e7c3      	b.n	80098f0 <_dtoa_r+0x59c>
 8009968:	0030      	movs	r0, r6
 800996a:	0039      	movs	r1, r7
 800996c:	f7f8 fbfc 	bl	8002168 <__aeabi_dmul>
 8009970:	9d08      	ldr	r5, [sp, #32]
 8009972:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009974:	002b      	movs	r3, r5
 8009976:	4694      	mov	ip, r2
 8009978:	9016      	str	r0, [sp, #88]	@ 0x58
 800997a:	9117      	str	r1, [sp, #92]	@ 0x5c
 800997c:	4463      	add	r3, ip
 800997e:	9319      	str	r3, [sp, #100]	@ 0x64
 8009980:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009982:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009984:	f7f9 fa76 	bl	8002e74 <__aeabi_d2iz>
 8009988:	0004      	movs	r4, r0
 800998a:	f7f9 faaf 	bl	8002eec <__aeabi_i2d>
 800998e:	000b      	movs	r3, r1
 8009990:	0002      	movs	r2, r0
 8009992:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009994:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009996:	f7f8 feaf 	bl	80026f8 <__aeabi_dsub>
 800999a:	3430      	adds	r4, #48	@ 0x30
 800999c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800999e:	702c      	strb	r4, [r5, #0]
 80099a0:	3501      	adds	r5, #1
 80099a2:	0006      	movs	r6, r0
 80099a4:	000f      	movs	r7, r1
 80099a6:	42ab      	cmp	r3, r5
 80099a8:	d129      	bne.n	80099fe <_dtoa_r+0x6aa>
 80099aa:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80099ac:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80099ae:	9b08      	ldr	r3, [sp, #32]
 80099b0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80099b2:	469c      	mov	ip, r3
 80099b4:	2200      	movs	r2, #0
 80099b6:	4b32      	ldr	r3, [pc, #200]	@ (8009a80 <_dtoa_r+0x72c>)
 80099b8:	4464      	add	r4, ip
 80099ba:	f7f7 fc2d 	bl	8001218 <__aeabi_dadd>
 80099be:	0002      	movs	r2, r0
 80099c0:	000b      	movs	r3, r1
 80099c2:	0030      	movs	r0, r6
 80099c4:	0039      	movs	r1, r7
 80099c6:	f7f6 fd59 	bl	800047c <__aeabi_dcmpgt>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d15c      	bne.n	8009a88 <_dtoa_r+0x734>
 80099ce:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80099d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80099d2:	2000      	movs	r0, #0
 80099d4:	492a      	ldr	r1, [pc, #168]	@ (8009a80 <_dtoa_r+0x72c>)
 80099d6:	f7f8 fe8f 	bl	80026f8 <__aeabi_dsub>
 80099da:	0002      	movs	r2, r0
 80099dc:	000b      	movs	r3, r1
 80099de:	0030      	movs	r0, r6
 80099e0:	0039      	movs	r1, r7
 80099e2:	f7f6 fd37 	bl	8000454 <__aeabi_dcmplt>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d100      	bne.n	80099ec <_dtoa_r+0x698>
 80099ea:	e6ee      	b.n	80097ca <_dtoa_r+0x476>
 80099ec:	0023      	movs	r3, r4
 80099ee:	3c01      	subs	r4, #1
 80099f0:	7822      	ldrb	r2, [r4, #0]
 80099f2:	2a30      	cmp	r2, #48	@ 0x30
 80099f4:	d0fa      	beq.n	80099ec <_dtoa_r+0x698>
 80099f6:	001c      	movs	r4, r3
 80099f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099fa:	9304      	str	r3, [sp, #16]
 80099fc:	e73e      	b.n	800987c <_dtoa_r+0x528>
 80099fe:	2200      	movs	r2, #0
 8009a00:	4b1b      	ldr	r3, [pc, #108]	@ (8009a70 <_dtoa_r+0x71c>)
 8009a02:	f7f8 fbb1 	bl	8002168 <__aeabi_dmul>
 8009a06:	900a      	str	r0, [sp, #40]	@ 0x28
 8009a08:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009a0a:	e7b9      	b.n	8009980 <_dtoa_r+0x62c>
 8009a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10c      	bne.n	8009a2c <_dtoa_r+0x6d8>
 8009a12:	9806      	ldr	r0, [sp, #24]
 8009a14:	9907      	ldr	r1, [sp, #28]
 8009a16:	2200      	movs	r2, #0
 8009a18:	4b18      	ldr	r3, [pc, #96]	@ (8009a7c <_dtoa_r+0x728>)
 8009a1a:	f7f8 fba5 	bl	8002168 <__aeabi_dmul>
 8009a1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a22:	f7f6 fd35 	bl	8000490 <__aeabi_dcmpge>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d100      	bne.n	8009a2c <_dtoa_r+0x6d8>
 8009a2a:	e164      	b.n	8009cf6 <_dtoa_r+0x9a2>
 8009a2c:	2600      	movs	r6, #0
 8009a2e:	0037      	movs	r7, r6
 8009a30:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a32:	9c08      	ldr	r4, [sp, #32]
 8009a34:	43db      	mvns	r3, r3
 8009a36:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a38:	2300      	movs	r3, #0
 8009a3a:	9304      	str	r3, [sp, #16]
 8009a3c:	0031      	movs	r1, r6
 8009a3e:	9803      	ldr	r0, [sp, #12]
 8009a40:	f000 fbc6 	bl	800a1d0 <_Bfree>
 8009a44:	2f00      	cmp	r7, #0
 8009a46:	d0d7      	beq.n	80099f8 <_dtoa_r+0x6a4>
 8009a48:	9b04      	ldr	r3, [sp, #16]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <_dtoa_r+0x706>
 8009a4e:	42bb      	cmp	r3, r7
 8009a50:	d003      	beq.n	8009a5a <_dtoa_r+0x706>
 8009a52:	0019      	movs	r1, r3
 8009a54:	9803      	ldr	r0, [sp, #12]
 8009a56:	f000 fbbb 	bl	800a1d0 <_Bfree>
 8009a5a:	0039      	movs	r1, r7
 8009a5c:	9803      	ldr	r0, [sp, #12]
 8009a5e:	f000 fbb7 	bl	800a1d0 <_Bfree>
 8009a62:	e7c9      	b.n	80099f8 <_dtoa_r+0x6a4>
 8009a64:	0800ba88 	.word	0x0800ba88
 8009a68:	0800ba60 	.word	0x0800ba60
 8009a6c:	3ff00000 	.word	0x3ff00000
 8009a70:	40240000 	.word	0x40240000
 8009a74:	401c0000 	.word	0x401c0000
 8009a78:	fcc00000 	.word	0xfcc00000
 8009a7c:	40140000 	.word	0x40140000
 8009a80:	3fe00000 	.word	0x3fe00000
 8009a84:	9b04      	ldr	r3, [sp, #16]
 8009a86:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a88:	0023      	movs	r3, r4
 8009a8a:	001c      	movs	r4, r3
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	781a      	ldrb	r2, [r3, #0]
 8009a90:	2a39      	cmp	r2, #57	@ 0x39
 8009a92:	d108      	bne.n	8009aa6 <_dtoa_r+0x752>
 8009a94:	9a08      	ldr	r2, [sp, #32]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d1f7      	bne.n	8009a8a <_dtoa_r+0x736>
 8009a9a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009a9c:	9908      	ldr	r1, [sp, #32]
 8009a9e:	3201      	adds	r2, #1
 8009aa0:	920c      	str	r2, [sp, #48]	@ 0x30
 8009aa2:	2230      	movs	r2, #48	@ 0x30
 8009aa4:	700a      	strb	r2, [r1, #0]
 8009aa6:	781a      	ldrb	r2, [r3, #0]
 8009aa8:	3201      	adds	r2, #1
 8009aaa:	701a      	strb	r2, [r3, #0]
 8009aac:	e7a4      	b.n	80099f8 <_dtoa_r+0x6a4>
 8009aae:	2200      	movs	r2, #0
 8009ab0:	4bc6      	ldr	r3, [pc, #792]	@ (8009dcc <_dtoa_r+0xa78>)
 8009ab2:	f7f8 fb59 	bl	8002168 <__aeabi_dmul>
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	2300      	movs	r3, #0
 8009aba:	0006      	movs	r6, r0
 8009abc:	000f      	movs	r7, r1
 8009abe:	f7f6 fcc3 	bl	8000448 <__aeabi_dcmpeq>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d100      	bne.n	8009ac8 <_dtoa_r+0x774>
 8009ac6:	e6a1      	b.n	800980c <_dtoa_r+0x4b8>
 8009ac8:	e6d8      	b.n	800987c <_dtoa_r+0x528>
 8009aca:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8009acc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009ace:	9c06      	ldr	r4, [sp, #24]
 8009ad0:	2f00      	cmp	r7, #0
 8009ad2:	d014      	beq.n	8009afe <_dtoa_r+0x7aa>
 8009ad4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009ad6:	2a01      	cmp	r2, #1
 8009ad8:	dd00      	ble.n	8009adc <_dtoa_r+0x788>
 8009ada:	e0c8      	b.n	8009c6e <_dtoa_r+0x91a>
 8009adc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009ade:	2a00      	cmp	r2, #0
 8009ae0:	d100      	bne.n	8009ae4 <_dtoa_r+0x790>
 8009ae2:	e0be      	b.n	8009c62 <_dtoa_r+0x90e>
 8009ae4:	4aba      	ldr	r2, [pc, #744]	@ (8009dd0 <_dtoa_r+0xa7c>)
 8009ae6:	189b      	adds	r3, r3, r2
 8009ae8:	9a06      	ldr	r2, [sp, #24]
 8009aea:	2101      	movs	r1, #1
 8009aec:	18d2      	adds	r2, r2, r3
 8009aee:	9206      	str	r2, [sp, #24]
 8009af0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009af2:	9803      	ldr	r0, [sp, #12]
 8009af4:	18d3      	adds	r3, r2, r3
 8009af6:	930d      	str	r3, [sp, #52]	@ 0x34
 8009af8:	f000 fc22 	bl	800a340 <__i2b>
 8009afc:	0007      	movs	r7, r0
 8009afe:	2c00      	cmp	r4, #0
 8009b00:	d00e      	beq.n	8009b20 <_dtoa_r+0x7cc>
 8009b02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	dd0b      	ble.n	8009b20 <_dtoa_r+0x7cc>
 8009b08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b0a:	0023      	movs	r3, r4
 8009b0c:	4294      	cmp	r4, r2
 8009b0e:	dd00      	ble.n	8009b12 <_dtoa_r+0x7be>
 8009b10:	0013      	movs	r3, r2
 8009b12:	9a06      	ldr	r2, [sp, #24]
 8009b14:	1ae4      	subs	r4, r4, r3
 8009b16:	1ad2      	subs	r2, r2, r3
 8009b18:	9206      	str	r2, [sp, #24]
 8009b1a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009b20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d01f      	beq.n	8009b66 <_dtoa_r+0x812>
 8009b26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d100      	bne.n	8009b2e <_dtoa_r+0x7da>
 8009b2c:	e0b5      	b.n	8009c9a <_dtoa_r+0x946>
 8009b2e:	2d00      	cmp	r5, #0
 8009b30:	d010      	beq.n	8009b54 <_dtoa_r+0x800>
 8009b32:	0039      	movs	r1, r7
 8009b34:	002a      	movs	r2, r5
 8009b36:	9803      	ldr	r0, [sp, #12]
 8009b38:	f000 fccc 	bl	800a4d4 <__pow5mult>
 8009b3c:	9a05      	ldr	r2, [sp, #20]
 8009b3e:	0001      	movs	r1, r0
 8009b40:	0007      	movs	r7, r0
 8009b42:	9803      	ldr	r0, [sp, #12]
 8009b44:	f000 fc14 	bl	800a370 <__multiply>
 8009b48:	0006      	movs	r6, r0
 8009b4a:	9905      	ldr	r1, [sp, #20]
 8009b4c:	9803      	ldr	r0, [sp, #12]
 8009b4e:	f000 fb3f 	bl	800a1d0 <_Bfree>
 8009b52:	9605      	str	r6, [sp, #20]
 8009b54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b56:	1b5a      	subs	r2, r3, r5
 8009b58:	42ab      	cmp	r3, r5
 8009b5a:	d004      	beq.n	8009b66 <_dtoa_r+0x812>
 8009b5c:	9905      	ldr	r1, [sp, #20]
 8009b5e:	9803      	ldr	r0, [sp, #12]
 8009b60:	f000 fcb8 	bl	800a4d4 <__pow5mult>
 8009b64:	9005      	str	r0, [sp, #20]
 8009b66:	2101      	movs	r1, #1
 8009b68:	9803      	ldr	r0, [sp, #12]
 8009b6a:	f000 fbe9 	bl	800a340 <__i2b>
 8009b6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b70:	0006      	movs	r6, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d100      	bne.n	8009b78 <_dtoa_r+0x824>
 8009b76:	e1bc      	b.n	8009ef2 <_dtoa_r+0xb9e>
 8009b78:	001a      	movs	r2, r3
 8009b7a:	0001      	movs	r1, r0
 8009b7c:	9803      	ldr	r0, [sp, #12]
 8009b7e:	f000 fca9 	bl	800a4d4 <__pow5mult>
 8009b82:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009b84:	0006      	movs	r6, r0
 8009b86:	2500      	movs	r5, #0
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	dc16      	bgt.n	8009bba <_dtoa_r+0x866>
 8009b8c:	2500      	movs	r5, #0
 8009b8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b90:	42ab      	cmp	r3, r5
 8009b92:	d10e      	bne.n	8009bb2 <_dtoa_r+0x85e>
 8009b94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b96:	031b      	lsls	r3, r3, #12
 8009b98:	42ab      	cmp	r3, r5
 8009b9a:	d10a      	bne.n	8009bb2 <_dtoa_r+0x85e>
 8009b9c:	4b8d      	ldr	r3, [pc, #564]	@ (8009dd4 <_dtoa_r+0xa80>)
 8009b9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009ba0:	4213      	tst	r3, r2
 8009ba2:	d006      	beq.n	8009bb2 <_dtoa_r+0x85e>
 8009ba4:	9b06      	ldr	r3, [sp, #24]
 8009ba6:	3501      	adds	r5, #1
 8009ba8:	3301      	adds	r3, #1
 8009baa:	9306      	str	r3, [sp, #24]
 8009bac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bae:	3301      	adds	r3, #1
 8009bb0:	930d      	str	r3, [sp, #52]	@ 0x34
 8009bb2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009bb4:	2001      	movs	r0, #1
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d008      	beq.n	8009bcc <_dtoa_r+0x878>
 8009bba:	6933      	ldr	r3, [r6, #16]
 8009bbc:	3303      	adds	r3, #3
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	18f3      	adds	r3, r6, r3
 8009bc2:	6858      	ldr	r0, [r3, #4]
 8009bc4:	f000 fb6c 	bl	800a2a0 <__hi0bits>
 8009bc8:	2320      	movs	r3, #32
 8009bca:	1a18      	subs	r0, r3, r0
 8009bcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bce:	1818      	adds	r0, r3, r0
 8009bd0:	0002      	movs	r2, r0
 8009bd2:	231f      	movs	r3, #31
 8009bd4:	401a      	ands	r2, r3
 8009bd6:	4218      	tst	r0, r3
 8009bd8:	d065      	beq.n	8009ca6 <_dtoa_r+0x952>
 8009bda:	3301      	adds	r3, #1
 8009bdc:	1a9b      	subs	r3, r3, r2
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	dd5d      	ble.n	8009c9e <_dtoa_r+0x94a>
 8009be2:	231c      	movs	r3, #28
 8009be4:	1a9b      	subs	r3, r3, r2
 8009be6:	9a06      	ldr	r2, [sp, #24]
 8009be8:	18e4      	adds	r4, r4, r3
 8009bea:	18d2      	adds	r2, r2, r3
 8009bec:	9206      	str	r2, [sp, #24]
 8009bee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009bf0:	18d3      	adds	r3, r2, r3
 8009bf2:	930d      	str	r3, [sp, #52]	@ 0x34
 8009bf4:	9b06      	ldr	r3, [sp, #24]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	dd05      	ble.n	8009c06 <_dtoa_r+0x8b2>
 8009bfa:	001a      	movs	r2, r3
 8009bfc:	9905      	ldr	r1, [sp, #20]
 8009bfe:	9803      	ldr	r0, [sp, #12]
 8009c00:	f000 fcc4 	bl	800a58c <__lshift>
 8009c04:	9005      	str	r0, [sp, #20]
 8009c06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	dd05      	ble.n	8009c18 <_dtoa_r+0x8c4>
 8009c0c:	0031      	movs	r1, r6
 8009c0e:	001a      	movs	r2, r3
 8009c10:	9803      	ldr	r0, [sp, #12]
 8009c12:	f000 fcbb 	bl	800a58c <__lshift>
 8009c16:	0006      	movs	r6, r0
 8009c18:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d045      	beq.n	8009caa <_dtoa_r+0x956>
 8009c1e:	0031      	movs	r1, r6
 8009c20:	9805      	ldr	r0, [sp, #20]
 8009c22:	f000 fd1f 	bl	800a664 <__mcmp>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	da3f      	bge.n	8009caa <_dtoa_r+0x956>
 8009c2a:	9b04      	ldr	r3, [sp, #16]
 8009c2c:	220a      	movs	r2, #10
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c32:	9905      	ldr	r1, [sp, #20]
 8009c34:	2300      	movs	r3, #0
 8009c36:	9803      	ldr	r0, [sp, #12]
 8009c38:	f000 faee 	bl	800a218 <__multadd>
 8009c3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c3e:	9005      	str	r0, [sp, #20]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d100      	bne.n	8009c46 <_dtoa_r+0x8f2>
 8009c44:	e15c      	b.n	8009f00 <_dtoa_r+0xbac>
 8009c46:	2300      	movs	r3, #0
 8009c48:	0039      	movs	r1, r7
 8009c4a:	220a      	movs	r2, #10
 8009c4c:	9803      	ldr	r0, [sp, #12]
 8009c4e:	f000 fae3 	bl	800a218 <__multadd>
 8009c52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c54:	0007      	movs	r7, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	dc55      	bgt.n	8009d06 <_dtoa_r+0x9b2>
 8009c5a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	dc2d      	bgt.n	8009cbc <_dtoa_r+0x968>
 8009c60:	e051      	b.n	8009d06 <_dtoa_r+0x9b2>
 8009c62:	2336      	movs	r3, #54	@ 0x36
 8009c64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c66:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009c68:	9c06      	ldr	r4, [sp, #24]
 8009c6a:	1a9b      	subs	r3, r3, r2
 8009c6c:	e73c      	b.n	8009ae8 <_dtoa_r+0x794>
 8009c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c70:	1e5d      	subs	r5, r3, #1
 8009c72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c74:	42ab      	cmp	r3, r5
 8009c76:	db08      	blt.n	8009c8a <_dtoa_r+0x936>
 8009c78:	1b5d      	subs	r5, r3, r5
 8009c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c7c:	9c06      	ldr	r4, [sp, #24]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	db00      	blt.n	8009c84 <_dtoa_r+0x930>
 8009c82:	e731      	b.n	8009ae8 <_dtoa_r+0x794>
 8009c84:	1ae4      	subs	r4, r4, r3
 8009c86:	2300      	movs	r3, #0
 8009c88:	e72e      	b.n	8009ae8 <_dtoa_r+0x794>
 8009c8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c8c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009c8e:	1aeb      	subs	r3, r5, r3
 8009c90:	18d3      	adds	r3, r2, r3
 8009c92:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009c94:	9314      	str	r3, [sp, #80]	@ 0x50
 8009c96:	2500      	movs	r5, #0
 8009c98:	e7ef      	b.n	8009c7a <_dtoa_r+0x926>
 8009c9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c9c:	e75e      	b.n	8009b5c <_dtoa_r+0x808>
 8009c9e:	2b04      	cmp	r3, #4
 8009ca0:	d0a8      	beq.n	8009bf4 <_dtoa_r+0x8a0>
 8009ca2:	331c      	adds	r3, #28
 8009ca4:	e79f      	b.n	8009be6 <_dtoa_r+0x892>
 8009ca6:	0013      	movs	r3, r2
 8009ca8:	e7fb      	b.n	8009ca2 <_dtoa_r+0x94e>
 8009caa:	9b04      	ldr	r3, [sp, #16]
 8009cac:	930c      	str	r3, [sp, #48]	@ 0x30
 8009cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb0:	930e      	str	r3, [sp, #56]	@ 0x38
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	dc23      	bgt.n	8009cfe <_dtoa_r+0x9aa>
 8009cb6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	dd20      	ble.n	8009cfe <_dtoa_r+0x9aa>
 8009cbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d000      	beq.n	8009cc4 <_dtoa_r+0x970>
 8009cc2:	e6b5      	b.n	8009a30 <_dtoa_r+0x6dc>
 8009cc4:	0031      	movs	r1, r6
 8009cc6:	2205      	movs	r2, #5
 8009cc8:	9803      	ldr	r0, [sp, #12]
 8009cca:	f000 faa5 	bl	800a218 <__multadd>
 8009cce:	0006      	movs	r6, r0
 8009cd0:	0001      	movs	r1, r0
 8009cd2:	9805      	ldr	r0, [sp, #20]
 8009cd4:	f000 fcc6 	bl	800a664 <__mcmp>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	dc00      	bgt.n	8009cde <_dtoa_r+0x98a>
 8009cdc:	e6a8      	b.n	8009a30 <_dtoa_r+0x6dc>
 8009cde:	9b08      	ldr	r3, [sp, #32]
 8009ce0:	9a08      	ldr	r2, [sp, #32]
 8009ce2:	1c5c      	adds	r4, r3, #1
 8009ce4:	2331      	movs	r3, #49	@ 0x31
 8009ce6:	7013      	strb	r3, [r2, #0]
 8009ce8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009cea:	3301      	adds	r3, #1
 8009cec:	930c      	str	r3, [sp, #48]	@ 0x30
 8009cee:	e6a3      	b.n	8009a38 <_dtoa_r+0x6e4>
 8009cf0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009cf2:	0037      	movs	r7, r6
 8009cf4:	e7f3      	b.n	8009cde <_dtoa_r+0x98a>
 8009cf6:	9b04      	ldr	r3, [sp, #16]
 8009cf8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009cfa:	930c      	str	r3, [sp, #48]	@ 0x30
 8009cfc:	e7f9      	b.n	8009cf2 <_dtoa_r+0x99e>
 8009cfe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d100      	bne.n	8009d06 <_dtoa_r+0x9b2>
 8009d04:	e100      	b.n	8009f08 <_dtoa_r+0xbb4>
 8009d06:	2c00      	cmp	r4, #0
 8009d08:	dd05      	ble.n	8009d16 <_dtoa_r+0x9c2>
 8009d0a:	0039      	movs	r1, r7
 8009d0c:	0022      	movs	r2, r4
 8009d0e:	9803      	ldr	r0, [sp, #12]
 8009d10:	f000 fc3c 	bl	800a58c <__lshift>
 8009d14:	0007      	movs	r7, r0
 8009d16:	0038      	movs	r0, r7
 8009d18:	2d00      	cmp	r5, #0
 8009d1a:	d018      	beq.n	8009d4e <_dtoa_r+0x9fa>
 8009d1c:	6879      	ldr	r1, [r7, #4]
 8009d1e:	9803      	ldr	r0, [sp, #12]
 8009d20:	f000 fa12 	bl	800a148 <_Balloc>
 8009d24:	1e04      	subs	r4, r0, #0
 8009d26:	d105      	bne.n	8009d34 <_dtoa_r+0x9e0>
 8009d28:	0022      	movs	r2, r4
 8009d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8009dd8 <_dtoa_r+0xa84>)
 8009d2c:	482b      	ldr	r0, [pc, #172]	@ (8009ddc <_dtoa_r+0xa88>)
 8009d2e:	492c      	ldr	r1, [pc, #176]	@ (8009de0 <_dtoa_r+0xa8c>)
 8009d30:	f7ff fb25 	bl	800937e <_dtoa_r+0x2a>
 8009d34:	0039      	movs	r1, r7
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	310c      	adds	r1, #12
 8009d3a:	3202      	adds	r2, #2
 8009d3c:	0092      	lsls	r2, r2, #2
 8009d3e:	300c      	adds	r0, #12
 8009d40:	f000 ffda 	bl	800acf8 <memcpy>
 8009d44:	2201      	movs	r2, #1
 8009d46:	0021      	movs	r1, r4
 8009d48:	9803      	ldr	r0, [sp, #12]
 8009d4a:	f000 fc1f 	bl	800a58c <__lshift>
 8009d4e:	9b08      	ldr	r3, [sp, #32]
 8009d50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d52:	9306      	str	r3, [sp, #24]
 8009d54:	3b01      	subs	r3, #1
 8009d56:	189b      	adds	r3, r3, r2
 8009d58:	2201      	movs	r2, #1
 8009d5a:	9704      	str	r7, [sp, #16]
 8009d5c:	0007      	movs	r7, r0
 8009d5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d62:	4013      	ands	r3, r2
 8009d64:	930e      	str	r3, [sp, #56]	@ 0x38
 8009d66:	0031      	movs	r1, r6
 8009d68:	9805      	ldr	r0, [sp, #20]
 8009d6a:	f7ff fa65 	bl	8009238 <quorem>
 8009d6e:	9904      	ldr	r1, [sp, #16]
 8009d70:	0005      	movs	r5, r0
 8009d72:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d74:	9805      	ldr	r0, [sp, #20]
 8009d76:	f000 fc75 	bl	800a664 <__mcmp>
 8009d7a:	003a      	movs	r2, r7
 8009d7c:	900d      	str	r0, [sp, #52]	@ 0x34
 8009d7e:	0031      	movs	r1, r6
 8009d80:	9803      	ldr	r0, [sp, #12]
 8009d82:	f000 fc8b 	bl	800a69c <__mdiff>
 8009d86:	2201      	movs	r2, #1
 8009d88:	68c3      	ldr	r3, [r0, #12]
 8009d8a:	0004      	movs	r4, r0
 8009d8c:	3530      	adds	r5, #48	@ 0x30
 8009d8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d104      	bne.n	8009d9e <_dtoa_r+0xa4a>
 8009d94:	0001      	movs	r1, r0
 8009d96:	9805      	ldr	r0, [sp, #20]
 8009d98:	f000 fc64 	bl	800a664 <__mcmp>
 8009d9c:	9009      	str	r0, [sp, #36]	@ 0x24
 8009d9e:	0021      	movs	r1, r4
 8009da0:	9803      	ldr	r0, [sp, #12]
 8009da2:	f000 fa15 	bl	800a1d0 <_Bfree>
 8009da6:	9b06      	ldr	r3, [sp, #24]
 8009da8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009daa:	1c5c      	adds	r4, r3, #1
 8009dac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009dae:	4313      	orrs	r3, r2
 8009db0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009db2:	4313      	orrs	r3, r2
 8009db4:	d116      	bne.n	8009de4 <_dtoa_r+0xa90>
 8009db6:	2d39      	cmp	r5, #57	@ 0x39
 8009db8:	d02f      	beq.n	8009e1a <_dtoa_r+0xac6>
 8009dba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	dd01      	ble.n	8009dc4 <_dtoa_r+0xa70>
 8009dc0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009dc2:	3531      	adds	r5, #49	@ 0x31
 8009dc4:	9b06      	ldr	r3, [sp, #24]
 8009dc6:	701d      	strb	r5, [r3, #0]
 8009dc8:	e638      	b.n	8009a3c <_dtoa_r+0x6e8>
 8009dca:	46c0      	nop			@ (mov r8, r8)
 8009dcc:	40240000 	.word	0x40240000
 8009dd0:	00000433 	.word	0x00000433
 8009dd4:	7ff00000 	.word	0x7ff00000
 8009dd8:	0800b9e8 	.word	0x0800b9e8
 8009ddc:	0800b990 	.word	0x0800b990
 8009de0:	000002ef 	.word	0x000002ef
 8009de4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	db04      	blt.n	8009df4 <_dtoa_r+0xaa0>
 8009dea:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009dec:	4313      	orrs	r3, r2
 8009dee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009df0:	4313      	orrs	r3, r2
 8009df2:	d11e      	bne.n	8009e32 <_dtoa_r+0xade>
 8009df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	dde4      	ble.n	8009dc4 <_dtoa_r+0xa70>
 8009dfa:	9905      	ldr	r1, [sp, #20]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	9803      	ldr	r0, [sp, #12]
 8009e00:	f000 fbc4 	bl	800a58c <__lshift>
 8009e04:	0031      	movs	r1, r6
 8009e06:	9005      	str	r0, [sp, #20]
 8009e08:	f000 fc2c 	bl	800a664 <__mcmp>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	dc02      	bgt.n	8009e16 <_dtoa_r+0xac2>
 8009e10:	d1d8      	bne.n	8009dc4 <_dtoa_r+0xa70>
 8009e12:	07eb      	lsls	r3, r5, #31
 8009e14:	d5d6      	bpl.n	8009dc4 <_dtoa_r+0xa70>
 8009e16:	2d39      	cmp	r5, #57	@ 0x39
 8009e18:	d1d2      	bne.n	8009dc0 <_dtoa_r+0xa6c>
 8009e1a:	2339      	movs	r3, #57	@ 0x39
 8009e1c:	9a06      	ldr	r2, [sp, #24]
 8009e1e:	7013      	strb	r3, [r2, #0]
 8009e20:	0023      	movs	r3, r4
 8009e22:	001c      	movs	r4, r3
 8009e24:	3b01      	subs	r3, #1
 8009e26:	781a      	ldrb	r2, [r3, #0]
 8009e28:	2a39      	cmp	r2, #57	@ 0x39
 8009e2a:	d04f      	beq.n	8009ecc <_dtoa_r+0xb78>
 8009e2c:	3201      	adds	r2, #1
 8009e2e:	701a      	strb	r2, [r3, #0]
 8009e30:	e604      	b.n	8009a3c <_dtoa_r+0x6e8>
 8009e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	dd03      	ble.n	8009e40 <_dtoa_r+0xaec>
 8009e38:	2d39      	cmp	r5, #57	@ 0x39
 8009e3a:	d0ee      	beq.n	8009e1a <_dtoa_r+0xac6>
 8009e3c:	3501      	adds	r5, #1
 8009e3e:	e7c1      	b.n	8009dc4 <_dtoa_r+0xa70>
 8009e40:	9b06      	ldr	r3, [sp, #24]
 8009e42:	9a06      	ldr	r2, [sp, #24]
 8009e44:	701d      	strb	r5, [r3, #0]
 8009e46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d02a      	beq.n	8009ea2 <_dtoa_r+0xb4e>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	220a      	movs	r2, #10
 8009e50:	9905      	ldr	r1, [sp, #20]
 8009e52:	9803      	ldr	r0, [sp, #12]
 8009e54:	f000 f9e0 	bl	800a218 <__multadd>
 8009e58:	9b04      	ldr	r3, [sp, #16]
 8009e5a:	9005      	str	r0, [sp, #20]
 8009e5c:	42bb      	cmp	r3, r7
 8009e5e:	d109      	bne.n	8009e74 <_dtoa_r+0xb20>
 8009e60:	2300      	movs	r3, #0
 8009e62:	220a      	movs	r2, #10
 8009e64:	9904      	ldr	r1, [sp, #16]
 8009e66:	9803      	ldr	r0, [sp, #12]
 8009e68:	f000 f9d6 	bl	800a218 <__multadd>
 8009e6c:	9004      	str	r0, [sp, #16]
 8009e6e:	0007      	movs	r7, r0
 8009e70:	9406      	str	r4, [sp, #24]
 8009e72:	e778      	b.n	8009d66 <_dtoa_r+0xa12>
 8009e74:	9904      	ldr	r1, [sp, #16]
 8009e76:	2300      	movs	r3, #0
 8009e78:	220a      	movs	r2, #10
 8009e7a:	9803      	ldr	r0, [sp, #12]
 8009e7c:	f000 f9cc 	bl	800a218 <__multadd>
 8009e80:	2300      	movs	r3, #0
 8009e82:	9004      	str	r0, [sp, #16]
 8009e84:	220a      	movs	r2, #10
 8009e86:	0039      	movs	r1, r7
 8009e88:	9803      	ldr	r0, [sp, #12]
 8009e8a:	f000 f9c5 	bl	800a218 <__multadd>
 8009e8e:	e7ee      	b.n	8009e6e <_dtoa_r+0xb1a>
 8009e90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e92:	2401      	movs	r4, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	dd00      	ble.n	8009e9a <_dtoa_r+0xb46>
 8009e98:	001c      	movs	r4, r3
 8009e9a:	9b08      	ldr	r3, [sp, #32]
 8009e9c:	191c      	adds	r4, r3, r4
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	9304      	str	r3, [sp, #16]
 8009ea2:	9905      	ldr	r1, [sp, #20]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	9803      	ldr	r0, [sp, #12]
 8009ea8:	f000 fb70 	bl	800a58c <__lshift>
 8009eac:	0031      	movs	r1, r6
 8009eae:	9005      	str	r0, [sp, #20]
 8009eb0:	f000 fbd8 	bl	800a664 <__mcmp>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	dcb3      	bgt.n	8009e20 <_dtoa_r+0xacc>
 8009eb8:	d101      	bne.n	8009ebe <_dtoa_r+0xb6a>
 8009eba:	07ed      	lsls	r5, r5, #31
 8009ebc:	d4b0      	bmi.n	8009e20 <_dtoa_r+0xacc>
 8009ebe:	0023      	movs	r3, r4
 8009ec0:	001c      	movs	r4, r3
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	781a      	ldrb	r2, [r3, #0]
 8009ec6:	2a30      	cmp	r2, #48	@ 0x30
 8009ec8:	d0fa      	beq.n	8009ec0 <_dtoa_r+0xb6c>
 8009eca:	e5b7      	b.n	8009a3c <_dtoa_r+0x6e8>
 8009ecc:	9a08      	ldr	r2, [sp, #32]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d1a7      	bne.n	8009e22 <_dtoa_r+0xace>
 8009ed2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ed8:	2331      	movs	r3, #49	@ 0x31
 8009eda:	7013      	strb	r3, [r2, #0]
 8009edc:	e5ae      	b.n	8009a3c <_dtoa_r+0x6e8>
 8009ede:	4b15      	ldr	r3, [pc, #84]	@ (8009f34 <_dtoa_r+0xbe0>)
 8009ee0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009ee2:	9308      	str	r3, [sp, #32]
 8009ee4:	4b14      	ldr	r3, [pc, #80]	@ (8009f38 <_dtoa_r+0xbe4>)
 8009ee6:	2a00      	cmp	r2, #0
 8009ee8:	d001      	beq.n	8009eee <_dtoa_r+0xb9a>
 8009eea:	f7ff fa7b 	bl	80093e4 <_dtoa_r+0x90>
 8009eee:	f7ff fa7b 	bl	80093e8 <_dtoa_r+0x94>
 8009ef2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	dc00      	bgt.n	8009efa <_dtoa_r+0xba6>
 8009ef8:	e648      	b.n	8009b8c <_dtoa_r+0x838>
 8009efa:	2001      	movs	r0, #1
 8009efc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009efe:	e665      	b.n	8009bcc <_dtoa_r+0x878>
 8009f00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	dc00      	bgt.n	8009f08 <_dtoa_r+0xbb4>
 8009f06:	e6d6      	b.n	8009cb6 <_dtoa_r+0x962>
 8009f08:	2400      	movs	r4, #0
 8009f0a:	0031      	movs	r1, r6
 8009f0c:	9805      	ldr	r0, [sp, #20]
 8009f0e:	f7ff f993 	bl	8009238 <quorem>
 8009f12:	9b08      	ldr	r3, [sp, #32]
 8009f14:	3030      	adds	r0, #48	@ 0x30
 8009f16:	5518      	strb	r0, [r3, r4]
 8009f18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f1a:	3401      	adds	r4, #1
 8009f1c:	0005      	movs	r5, r0
 8009f1e:	429c      	cmp	r4, r3
 8009f20:	dab6      	bge.n	8009e90 <_dtoa_r+0xb3c>
 8009f22:	2300      	movs	r3, #0
 8009f24:	220a      	movs	r2, #10
 8009f26:	9905      	ldr	r1, [sp, #20]
 8009f28:	9803      	ldr	r0, [sp, #12]
 8009f2a:	f000 f975 	bl	800a218 <__multadd>
 8009f2e:	9005      	str	r0, [sp, #20]
 8009f30:	e7eb      	b.n	8009f0a <_dtoa_r+0xbb6>
 8009f32:	46c0      	nop			@ (mov r8, r8)
 8009f34:	0800b96c 	.word	0x0800b96c
 8009f38:	0800b974 	.word	0x0800b974

08009f3c <_free_r>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	0005      	movs	r5, r0
 8009f40:	1e0c      	subs	r4, r1, #0
 8009f42:	d010      	beq.n	8009f66 <_free_r+0x2a>
 8009f44:	3c04      	subs	r4, #4
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	da00      	bge.n	8009f4e <_free_r+0x12>
 8009f4c:	18e4      	adds	r4, r4, r3
 8009f4e:	0028      	movs	r0, r5
 8009f50:	f000 f8ea 	bl	800a128 <__malloc_lock>
 8009f54:	4a1d      	ldr	r2, [pc, #116]	@ (8009fcc <_free_r+0x90>)
 8009f56:	6813      	ldr	r3, [r2, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d105      	bne.n	8009f68 <_free_r+0x2c>
 8009f5c:	6063      	str	r3, [r4, #4]
 8009f5e:	6014      	str	r4, [r2, #0]
 8009f60:	0028      	movs	r0, r5
 8009f62:	f000 f8e9 	bl	800a138 <__malloc_unlock>
 8009f66:	bd70      	pop	{r4, r5, r6, pc}
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	d908      	bls.n	8009f7e <_free_r+0x42>
 8009f6c:	6820      	ldr	r0, [r4, #0]
 8009f6e:	1821      	adds	r1, r4, r0
 8009f70:	428b      	cmp	r3, r1
 8009f72:	d1f3      	bne.n	8009f5c <_free_r+0x20>
 8009f74:	6819      	ldr	r1, [r3, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	1809      	adds	r1, r1, r0
 8009f7a:	6021      	str	r1, [r4, #0]
 8009f7c:	e7ee      	b.n	8009f5c <_free_r+0x20>
 8009f7e:	001a      	movs	r2, r3
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <_free_r+0x4e>
 8009f86:	42a3      	cmp	r3, r4
 8009f88:	d9f9      	bls.n	8009f7e <_free_r+0x42>
 8009f8a:	6811      	ldr	r1, [r2, #0]
 8009f8c:	1850      	adds	r0, r2, r1
 8009f8e:	42a0      	cmp	r0, r4
 8009f90:	d10b      	bne.n	8009faa <_free_r+0x6e>
 8009f92:	6820      	ldr	r0, [r4, #0]
 8009f94:	1809      	adds	r1, r1, r0
 8009f96:	1850      	adds	r0, r2, r1
 8009f98:	6011      	str	r1, [r2, #0]
 8009f9a:	4283      	cmp	r3, r0
 8009f9c:	d1e0      	bne.n	8009f60 <_free_r+0x24>
 8009f9e:	6818      	ldr	r0, [r3, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	1841      	adds	r1, r0, r1
 8009fa4:	6011      	str	r1, [r2, #0]
 8009fa6:	6053      	str	r3, [r2, #4]
 8009fa8:	e7da      	b.n	8009f60 <_free_r+0x24>
 8009faa:	42a0      	cmp	r0, r4
 8009fac:	d902      	bls.n	8009fb4 <_free_r+0x78>
 8009fae:	230c      	movs	r3, #12
 8009fb0:	602b      	str	r3, [r5, #0]
 8009fb2:	e7d5      	b.n	8009f60 <_free_r+0x24>
 8009fb4:	6820      	ldr	r0, [r4, #0]
 8009fb6:	1821      	adds	r1, r4, r0
 8009fb8:	428b      	cmp	r3, r1
 8009fba:	d103      	bne.n	8009fc4 <_free_r+0x88>
 8009fbc:	6819      	ldr	r1, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	1809      	adds	r1, r1, r0
 8009fc2:	6021      	str	r1, [r4, #0]
 8009fc4:	6063      	str	r3, [r4, #4]
 8009fc6:	6054      	str	r4, [r2, #4]
 8009fc8:	e7ca      	b.n	8009f60 <_free_r+0x24>
 8009fca:	46c0      	nop			@ (mov r8, r8)
 8009fcc:	20000540 	.word	0x20000540

08009fd0 <malloc>:
 8009fd0:	b510      	push	{r4, lr}
 8009fd2:	4b03      	ldr	r3, [pc, #12]	@ (8009fe0 <malloc+0x10>)
 8009fd4:	0001      	movs	r1, r0
 8009fd6:	6818      	ldr	r0, [r3, #0]
 8009fd8:	f000 f826 	bl	800a028 <_malloc_r>
 8009fdc:	bd10      	pop	{r4, pc}
 8009fde:	46c0      	nop			@ (mov r8, r8)
 8009fe0:	20000018 	.word	0x20000018

08009fe4 <sbrk_aligned>:
 8009fe4:	b570      	push	{r4, r5, r6, lr}
 8009fe6:	4e0f      	ldr	r6, [pc, #60]	@ (800a024 <sbrk_aligned+0x40>)
 8009fe8:	000d      	movs	r5, r1
 8009fea:	6831      	ldr	r1, [r6, #0]
 8009fec:	0004      	movs	r4, r0
 8009fee:	2900      	cmp	r1, #0
 8009ff0:	d102      	bne.n	8009ff8 <sbrk_aligned+0x14>
 8009ff2:	f000 fe6f 	bl	800acd4 <_sbrk_r>
 8009ff6:	6030      	str	r0, [r6, #0]
 8009ff8:	0029      	movs	r1, r5
 8009ffa:	0020      	movs	r0, r4
 8009ffc:	f000 fe6a 	bl	800acd4 <_sbrk_r>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d103      	bne.n	800a00c <sbrk_aligned+0x28>
 800a004:	2501      	movs	r5, #1
 800a006:	426d      	negs	r5, r5
 800a008:	0028      	movs	r0, r5
 800a00a:	bd70      	pop	{r4, r5, r6, pc}
 800a00c:	2303      	movs	r3, #3
 800a00e:	1cc5      	adds	r5, r0, #3
 800a010:	439d      	bics	r5, r3
 800a012:	42a8      	cmp	r0, r5
 800a014:	d0f8      	beq.n	800a008 <sbrk_aligned+0x24>
 800a016:	1a29      	subs	r1, r5, r0
 800a018:	0020      	movs	r0, r4
 800a01a:	f000 fe5b 	bl	800acd4 <_sbrk_r>
 800a01e:	3001      	adds	r0, #1
 800a020:	d1f2      	bne.n	800a008 <sbrk_aligned+0x24>
 800a022:	e7ef      	b.n	800a004 <sbrk_aligned+0x20>
 800a024:	2000053c 	.word	0x2000053c

0800a028 <_malloc_r>:
 800a028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a02a:	2203      	movs	r2, #3
 800a02c:	1ccb      	adds	r3, r1, #3
 800a02e:	4393      	bics	r3, r2
 800a030:	3308      	adds	r3, #8
 800a032:	0005      	movs	r5, r0
 800a034:	001f      	movs	r7, r3
 800a036:	2b0c      	cmp	r3, #12
 800a038:	d234      	bcs.n	800a0a4 <_malloc_r+0x7c>
 800a03a:	270c      	movs	r7, #12
 800a03c:	42b9      	cmp	r1, r7
 800a03e:	d833      	bhi.n	800a0a8 <_malloc_r+0x80>
 800a040:	0028      	movs	r0, r5
 800a042:	f000 f871 	bl	800a128 <__malloc_lock>
 800a046:	4e37      	ldr	r6, [pc, #220]	@ (800a124 <_malloc_r+0xfc>)
 800a048:	6833      	ldr	r3, [r6, #0]
 800a04a:	001c      	movs	r4, r3
 800a04c:	2c00      	cmp	r4, #0
 800a04e:	d12f      	bne.n	800a0b0 <_malloc_r+0x88>
 800a050:	0039      	movs	r1, r7
 800a052:	0028      	movs	r0, r5
 800a054:	f7ff ffc6 	bl	8009fe4 <sbrk_aligned>
 800a058:	0004      	movs	r4, r0
 800a05a:	1c43      	adds	r3, r0, #1
 800a05c:	d15f      	bne.n	800a11e <_malloc_r+0xf6>
 800a05e:	6834      	ldr	r4, [r6, #0]
 800a060:	9400      	str	r4, [sp, #0]
 800a062:	9b00      	ldr	r3, [sp, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d14a      	bne.n	800a0fe <_malloc_r+0xd6>
 800a068:	2c00      	cmp	r4, #0
 800a06a:	d052      	beq.n	800a112 <_malloc_r+0xea>
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	0028      	movs	r0, r5
 800a070:	18e3      	adds	r3, r4, r3
 800a072:	9900      	ldr	r1, [sp, #0]
 800a074:	9301      	str	r3, [sp, #4]
 800a076:	f000 fe2d 	bl	800acd4 <_sbrk_r>
 800a07a:	9b01      	ldr	r3, [sp, #4]
 800a07c:	4283      	cmp	r3, r0
 800a07e:	d148      	bne.n	800a112 <_malloc_r+0xea>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	0028      	movs	r0, r5
 800a084:	1aff      	subs	r7, r7, r3
 800a086:	0039      	movs	r1, r7
 800a088:	f7ff ffac 	bl	8009fe4 <sbrk_aligned>
 800a08c:	3001      	adds	r0, #1
 800a08e:	d040      	beq.n	800a112 <_malloc_r+0xea>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	19db      	adds	r3, r3, r7
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	6833      	ldr	r3, [r6, #0]
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	2a00      	cmp	r2, #0
 800a09c:	d133      	bne.n	800a106 <_malloc_r+0xde>
 800a09e:	9b00      	ldr	r3, [sp, #0]
 800a0a0:	6033      	str	r3, [r6, #0]
 800a0a2:	e019      	b.n	800a0d8 <_malloc_r+0xb0>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	dac9      	bge.n	800a03c <_malloc_r+0x14>
 800a0a8:	230c      	movs	r3, #12
 800a0aa:	602b      	str	r3, [r5, #0]
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a0b0:	6821      	ldr	r1, [r4, #0]
 800a0b2:	1bc9      	subs	r1, r1, r7
 800a0b4:	d420      	bmi.n	800a0f8 <_malloc_r+0xd0>
 800a0b6:	290b      	cmp	r1, #11
 800a0b8:	d90a      	bls.n	800a0d0 <_malloc_r+0xa8>
 800a0ba:	19e2      	adds	r2, r4, r7
 800a0bc:	6027      	str	r7, [r4, #0]
 800a0be:	42a3      	cmp	r3, r4
 800a0c0:	d104      	bne.n	800a0cc <_malloc_r+0xa4>
 800a0c2:	6032      	str	r2, [r6, #0]
 800a0c4:	6863      	ldr	r3, [r4, #4]
 800a0c6:	6011      	str	r1, [r2, #0]
 800a0c8:	6053      	str	r3, [r2, #4]
 800a0ca:	e005      	b.n	800a0d8 <_malloc_r+0xb0>
 800a0cc:	605a      	str	r2, [r3, #4]
 800a0ce:	e7f9      	b.n	800a0c4 <_malloc_r+0x9c>
 800a0d0:	6862      	ldr	r2, [r4, #4]
 800a0d2:	42a3      	cmp	r3, r4
 800a0d4:	d10e      	bne.n	800a0f4 <_malloc_r+0xcc>
 800a0d6:	6032      	str	r2, [r6, #0]
 800a0d8:	0028      	movs	r0, r5
 800a0da:	f000 f82d 	bl	800a138 <__malloc_unlock>
 800a0de:	0020      	movs	r0, r4
 800a0e0:	2207      	movs	r2, #7
 800a0e2:	300b      	adds	r0, #11
 800a0e4:	1d23      	adds	r3, r4, #4
 800a0e6:	4390      	bics	r0, r2
 800a0e8:	1ac2      	subs	r2, r0, r3
 800a0ea:	4298      	cmp	r0, r3
 800a0ec:	d0df      	beq.n	800a0ae <_malloc_r+0x86>
 800a0ee:	1a1b      	subs	r3, r3, r0
 800a0f0:	50a3      	str	r3, [r4, r2]
 800a0f2:	e7dc      	b.n	800a0ae <_malloc_r+0x86>
 800a0f4:	605a      	str	r2, [r3, #4]
 800a0f6:	e7ef      	b.n	800a0d8 <_malloc_r+0xb0>
 800a0f8:	0023      	movs	r3, r4
 800a0fa:	6864      	ldr	r4, [r4, #4]
 800a0fc:	e7a6      	b.n	800a04c <_malloc_r+0x24>
 800a0fe:	9c00      	ldr	r4, [sp, #0]
 800a100:	6863      	ldr	r3, [r4, #4]
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	e7ad      	b.n	800a062 <_malloc_r+0x3a>
 800a106:	001a      	movs	r2, r3
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	42a3      	cmp	r3, r4
 800a10c:	d1fb      	bne.n	800a106 <_malloc_r+0xde>
 800a10e:	2300      	movs	r3, #0
 800a110:	e7da      	b.n	800a0c8 <_malloc_r+0xa0>
 800a112:	230c      	movs	r3, #12
 800a114:	0028      	movs	r0, r5
 800a116:	602b      	str	r3, [r5, #0]
 800a118:	f000 f80e 	bl	800a138 <__malloc_unlock>
 800a11c:	e7c6      	b.n	800a0ac <_malloc_r+0x84>
 800a11e:	6007      	str	r7, [r0, #0]
 800a120:	e7da      	b.n	800a0d8 <_malloc_r+0xb0>
 800a122:	46c0      	nop			@ (mov r8, r8)
 800a124:	20000540 	.word	0x20000540

0800a128 <__malloc_lock>:
 800a128:	b510      	push	{r4, lr}
 800a12a:	4802      	ldr	r0, [pc, #8]	@ (800a134 <__malloc_lock+0xc>)
 800a12c:	f7ff f877 	bl	800921e <__retarget_lock_acquire_recursive>
 800a130:	bd10      	pop	{r4, pc}
 800a132:	46c0      	nop			@ (mov r8, r8)
 800a134:	20000538 	.word	0x20000538

0800a138 <__malloc_unlock>:
 800a138:	b510      	push	{r4, lr}
 800a13a:	4802      	ldr	r0, [pc, #8]	@ (800a144 <__malloc_unlock+0xc>)
 800a13c:	f7ff f870 	bl	8009220 <__retarget_lock_release_recursive>
 800a140:	bd10      	pop	{r4, pc}
 800a142:	46c0      	nop			@ (mov r8, r8)
 800a144:	20000538 	.word	0x20000538

0800a148 <_Balloc>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	69c5      	ldr	r5, [r0, #28]
 800a14c:	0006      	movs	r6, r0
 800a14e:	000c      	movs	r4, r1
 800a150:	2d00      	cmp	r5, #0
 800a152:	d10e      	bne.n	800a172 <_Balloc+0x2a>
 800a154:	2010      	movs	r0, #16
 800a156:	f7ff ff3b 	bl	8009fd0 <malloc>
 800a15a:	1e02      	subs	r2, r0, #0
 800a15c:	61f0      	str	r0, [r6, #28]
 800a15e:	d104      	bne.n	800a16a <_Balloc+0x22>
 800a160:	216b      	movs	r1, #107	@ 0x6b
 800a162:	4b19      	ldr	r3, [pc, #100]	@ (800a1c8 <_Balloc+0x80>)
 800a164:	4819      	ldr	r0, [pc, #100]	@ (800a1cc <_Balloc+0x84>)
 800a166:	f000 fdd1 	bl	800ad0c <__assert_func>
 800a16a:	6045      	str	r5, [r0, #4]
 800a16c:	6085      	str	r5, [r0, #8]
 800a16e:	6005      	str	r5, [r0, #0]
 800a170:	60c5      	str	r5, [r0, #12]
 800a172:	69f5      	ldr	r5, [r6, #28]
 800a174:	68eb      	ldr	r3, [r5, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d013      	beq.n	800a1a2 <_Balloc+0x5a>
 800a17a:	69f3      	ldr	r3, [r6, #28]
 800a17c:	00a2      	lsls	r2, r4, #2
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	189b      	adds	r3, r3, r2
 800a182:	6818      	ldr	r0, [r3, #0]
 800a184:	2800      	cmp	r0, #0
 800a186:	d118      	bne.n	800a1ba <_Balloc+0x72>
 800a188:	2101      	movs	r1, #1
 800a18a:	000d      	movs	r5, r1
 800a18c:	40a5      	lsls	r5, r4
 800a18e:	1d6a      	adds	r2, r5, #5
 800a190:	0030      	movs	r0, r6
 800a192:	0092      	lsls	r2, r2, #2
 800a194:	f000 fdd8 	bl	800ad48 <_calloc_r>
 800a198:	2800      	cmp	r0, #0
 800a19a:	d00c      	beq.n	800a1b6 <_Balloc+0x6e>
 800a19c:	6044      	str	r4, [r0, #4]
 800a19e:	6085      	str	r5, [r0, #8]
 800a1a0:	e00d      	b.n	800a1be <_Balloc+0x76>
 800a1a2:	2221      	movs	r2, #33	@ 0x21
 800a1a4:	2104      	movs	r1, #4
 800a1a6:	0030      	movs	r0, r6
 800a1a8:	f000 fdce 	bl	800ad48 <_calloc_r>
 800a1ac:	69f3      	ldr	r3, [r6, #28]
 800a1ae:	60e8      	str	r0, [r5, #12]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1e1      	bne.n	800a17a <_Balloc+0x32>
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ba:	6802      	ldr	r2, [r0, #0]
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6103      	str	r3, [r0, #16]
 800a1c2:	60c3      	str	r3, [r0, #12]
 800a1c4:	e7f8      	b.n	800a1b8 <_Balloc+0x70>
 800a1c6:	46c0      	nop			@ (mov r8, r8)
 800a1c8:	0800b979 	.word	0x0800b979
 800a1cc:	0800b9f9 	.word	0x0800b9f9

0800a1d0 <_Bfree>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	69c6      	ldr	r6, [r0, #28]
 800a1d4:	0005      	movs	r5, r0
 800a1d6:	000c      	movs	r4, r1
 800a1d8:	2e00      	cmp	r6, #0
 800a1da:	d10e      	bne.n	800a1fa <_Bfree+0x2a>
 800a1dc:	2010      	movs	r0, #16
 800a1de:	f7ff fef7 	bl	8009fd0 <malloc>
 800a1e2:	1e02      	subs	r2, r0, #0
 800a1e4:	61e8      	str	r0, [r5, #28]
 800a1e6:	d104      	bne.n	800a1f2 <_Bfree+0x22>
 800a1e8:	218f      	movs	r1, #143	@ 0x8f
 800a1ea:	4b09      	ldr	r3, [pc, #36]	@ (800a210 <_Bfree+0x40>)
 800a1ec:	4809      	ldr	r0, [pc, #36]	@ (800a214 <_Bfree+0x44>)
 800a1ee:	f000 fd8d 	bl	800ad0c <__assert_func>
 800a1f2:	6046      	str	r6, [r0, #4]
 800a1f4:	6086      	str	r6, [r0, #8]
 800a1f6:	6006      	str	r6, [r0, #0]
 800a1f8:	60c6      	str	r6, [r0, #12]
 800a1fa:	2c00      	cmp	r4, #0
 800a1fc:	d007      	beq.n	800a20e <_Bfree+0x3e>
 800a1fe:	69eb      	ldr	r3, [r5, #28]
 800a200:	6862      	ldr	r2, [r4, #4]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	0092      	lsls	r2, r2, #2
 800a206:	189b      	adds	r3, r3, r2
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	6022      	str	r2, [r4, #0]
 800a20c:	601c      	str	r4, [r3, #0]
 800a20e:	bd70      	pop	{r4, r5, r6, pc}
 800a210:	0800b979 	.word	0x0800b979
 800a214:	0800b9f9 	.word	0x0800b9f9

0800a218 <__multadd>:
 800a218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a21a:	000f      	movs	r7, r1
 800a21c:	9001      	str	r0, [sp, #4]
 800a21e:	000c      	movs	r4, r1
 800a220:	001e      	movs	r6, r3
 800a222:	2000      	movs	r0, #0
 800a224:	690d      	ldr	r5, [r1, #16]
 800a226:	3714      	adds	r7, #20
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	3001      	adds	r0, #1
 800a22c:	b299      	uxth	r1, r3
 800a22e:	4351      	muls	r1, r2
 800a230:	0c1b      	lsrs	r3, r3, #16
 800a232:	4353      	muls	r3, r2
 800a234:	1989      	adds	r1, r1, r6
 800a236:	0c0e      	lsrs	r6, r1, #16
 800a238:	199b      	adds	r3, r3, r6
 800a23a:	0c1e      	lsrs	r6, r3, #16
 800a23c:	b289      	uxth	r1, r1
 800a23e:	041b      	lsls	r3, r3, #16
 800a240:	185b      	adds	r3, r3, r1
 800a242:	c708      	stmia	r7!, {r3}
 800a244:	4285      	cmp	r5, r0
 800a246:	dcef      	bgt.n	800a228 <__multadd+0x10>
 800a248:	2e00      	cmp	r6, #0
 800a24a:	d022      	beq.n	800a292 <__multadd+0x7a>
 800a24c:	68a3      	ldr	r3, [r4, #8]
 800a24e:	42ab      	cmp	r3, r5
 800a250:	dc19      	bgt.n	800a286 <__multadd+0x6e>
 800a252:	6861      	ldr	r1, [r4, #4]
 800a254:	9801      	ldr	r0, [sp, #4]
 800a256:	3101      	adds	r1, #1
 800a258:	f7ff ff76 	bl	800a148 <_Balloc>
 800a25c:	1e07      	subs	r7, r0, #0
 800a25e:	d105      	bne.n	800a26c <__multadd+0x54>
 800a260:	003a      	movs	r2, r7
 800a262:	21ba      	movs	r1, #186	@ 0xba
 800a264:	4b0c      	ldr	r3, [pc, #48]	@ (800a298 <__multadd+0x80>)
 800a266:	480d      	ldr	r0, [pc, #52]	@ (800a29c <__multadd+0x84>)
 800a268:	f000 fd50 	bl	800ad0c <__assert_func>
 800a26c:	0021      	movs	r1, r4
 800a26e:	6922      	ldr	r2, [r4, #16]
 800a270:	310c      	adds	r1, #12
 800a272:	3202      	adds	r2, #2
 800a274:	0092      	lsls	r2, r2, #2
 800a276:	300c      	adds	r0, #12
 800a278:	f000 fd3e 	bl	800acf8 <memcpy>
 800a27c:	0021      	movs	r1, r4
 800a27e:	9801      	ldr	r0, [sp, #4]
 800a280:	f7ff ffa6 	bl	800a1d0 <_Bfree>
 800a284:	003c      	movs	r4, r7
 800a286:	1d2b      	adds	r3, r5, #4
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	18e3      	adds	r3, r4, r3
 800a28c:	3501      	adds	r5, #1
 800a28e:	605e      	str	r6, [r3, #4]
 800a290:	6125      	str	r5, [r4, #16]
 800a292:	0020      	movs	r0, r4
 800a294:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a296:	46c0      	nop			@ (mov r8, r8)
 800a298:	0800b9e8 	.word	0x0800b9e8
 800a29c:	0800b9f9 	.word	0x0800b9f9

0800a2a0 <__hi0bits>:
 800a2a0:	2280      	movs	r2, #128	@ 0x80
 800a2a2:	0003      	movs	r3, r0
 800a2a4:	0252      	lsls	r2, r2, #9
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d201      	bcs.n	800a2b0 <__hi0bits+0x10>
 800a2ac:	041b      	lsls	r3, r3, #16
 800a2ae:	3010      	adds	r0, #16
 800a2b0:	2280      	movs	r2, #128	@ 0x80
 800a2b2:	0452      	lsls	r2, r2, #17
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d201      	bcs.n	800a2bc <__hi0bits+0x1c>
 800a2b8:	3008      	adds	r0, #8
 800a2ba:	021b      	lsls	r3, r3, #8
 800a2bc:	2280      	movs	r2, #128	@ 0x80
 800a2be:	0552      	lsls	r2, r2, #21
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d201      	bcs.n	800a2c8 <__hi0bits+0x28>
 800a2c4:	3004      	adds	r0, #4
 800a2c6:	011b      	lsls	r3, r3, #4
 800a2c8:	2280      	movs	r2, #128	@ 0x80
 800a2ca:	05d2      	lsls	r2, r2, #23
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d201      	bcs.n	800a2d4 <__hi0bits+0x34>
 800a2d0:	3002      	adds	r0, #2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	db03      	blt.n	800a2e0 <__hi0bits+0x40>
 800a2d8:	3001      	adds	r0, #1
 800a2da:	4213      	tst	r3, r2
 800a2dc:	d100      	bne.n	800a2e0 <__hi0bits+0x40>
 800a2de:	2020      	movs	r0, #32
 800a2e0:	4770      	bx	lr

0800a2e2 <__lo0bits>:
 800a2e2:	6803      	ldr	r3, [r0, #0]
 800a2e4:	0001      	movs	r1, r0
 800a2e6:	2207      	movs	r2, #7
 800a2e8:	0018      	movs	r0, r3
 800a2ea:	4010      	ands	r0, r2
 800a2ec:	4213      	tst	r3, r2
 800a2ee:	d00d      	beq.n	800a30c <__lo0bits+0x2a>
 800a2f0:	3a06      	subs	r2, #6
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	4213      	tst	r3, r2
 800a2f6:	d105      	bne.n	800a304 <__lo0bits+0x22>
 800a2f8:	3002      	adds	r0, #2
 800a2fa:	4203      	tst	r3, r0
 800a2fc:	d003      	beq.n	800a306 <__lo0bits+0x24>
 800a2fe:	40d3      	lsrs	r3, r2
 800a300:	0010      	movs	r0, r2
 800a302:	600b      	str	r3, [r1, #0]
 800a304:	4770      	bx	lr
 800a306:	089b      	lsrs	r3, r3, #2
 800a308:	600b      	str	r3, [r1, #0]
 800a30a:	e7fb      	b.n	800a304 <__lo0bits+0x22>
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	2a00      	cmp	r2, #0
 800a310:	d101      	bne.n	800a316 <__lo0bits+0x34>
 800a312:	2010      	movs	r0, #16
 800a314:	0c1b      	lsrs	r3, r3, #16
 800a316:	b2da      	uxtb	r2, r3
 800a318:	2a00      	cmp	r2, #0
 800a31a:	d101      	bne.n	800a320 <__lo0bits+0x3e>
 800a31c:	3008      	adds	r0, #8
 800a31e:	0a1b      	lsrs	r3, r3, #8
 800a320:	071a      	lsls	r2, r3, #28
 800a322:	d101      	bne.n	800a328 <__lo0bits+0x46>
 800a324:	3004      	adds	r0, #4
 800a326:	091b      	lsrs	r3, r3, #4
 800a328:	079a      	lsls	r2, r3, #30
 800a32a:	d101      	bne.n	800a330 <__lo0bits+0x4e>
 800a32c:	3002      	adds	r0, #2
 800a32e:	089b      	lsrs	r3, r3, #2
 800a330:	07da      	lsls	r2, r3, #31
 800a332:	d4e9      	bmi.n	800a308 <__lo0bits+0x26>
 800a334:	3001      	adds	r0, #1
 800a336:	085b      	lsrs	r3, r3, #1
 800a338:	d1e6      	bne.n	800a308 <__lo0bits+0x26>
 800a33a:	2020      	movs	r0, #32
 800a33c:	e7e2      	b.n	800a304 <__lo0bits+0x22>
	...

0800a340 <__i2b>:
 800a340:	b510      	push	{r4, lr}
 800a342:	000c      	movs	r4, r1
 800a344:	2101      	movs	r1, #1
 800a346:	f7ff feff 	bl	800a148 <_Balloc>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d107      	bne.n	800a35e <__i2b+0x1e>
 800a34e:	2146      	movs	r1, #70	@ 0x46
 800a350:	4c05      	ldr	r4, [pc, #20]	@ (800a368 <__i2b+0x28>)
 800a352:	0002      	movs	r2, r0
 800a354:	4b05      	ldr	r3, [pc, #20]	@ (800a36c <__i2b+0x2c>)
 800a356:	0020      	movs	r0, r4
 800a358:	31ff      	adds	r1, #255	@ 0xff
 800a35a:	f000 fcd7 	bl	800ad0c <__assert_func>
 800a35e:	2301      	movs	r3, #1
 800a360:	6144      	str	r4, [r0, #20]
 800a362:	6103      	str	r3, [r0, #16]
 800a364:	bd10      	pop	{r4, pc}
 800a366:	46c0      	nop			@ (mov r8, r8)
 800a368:	0800b9f9 	.word	0x0800b9f9
 800a36c:	0800b9e8 	.word	0x0800b9e8

0800a370 <__multiply>:
 800a370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a372:	0014      	movs	r4, r2
 800a374:	690a      	ldr	r2, [r1, #16]
 800a376:	6923      	ldr	r3, [r4, #16]
 800a378:	000d      	movs	r5, r1
 800a37a:	b08b      	sub	sp, #44	@ 0x2c
 800a37c:	429a      	cmp	r2, r3
 800a37e:	db02      	blt.n	800a386 <__multiply+0x16>
 800a380:	0023      	movs	r3, r4
 800a382:	000c      	movs	r4, r1
 800a384:	001d      	movs	r5, r3
 800a386:	6927      	ldr	r7, [r4, #16]
 800a388:	692e      	ldr	r6, [r5, #16]
 800a38a:	6861      	ldr	r1, [r4, #4]
 800a38c:	19bb      	adds	r3, r7, r6
 800a38e:	9303      	str	r3, [sp, #12]
 800a390:	68a3      	ldr	r3, [r4, #8]
 800a392:	19ba      	adds	r2, r7, r6
 800a394:	4293      	cmp	r3, r2
 800a396:	da00      	bge.n	800a39a <__multiply+0x2a>
 800a398:	3101      	adds	r1, #1
 800a39a:	f7ff fed5 	bl	800a148 <_Balloc>
 800a39e:	9002      	str	r0, [sp, #8]
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d106      	bne.n	800a3b2 <__multiply+0x42>
 800a3a4:	21b1      	movs	r1, #177	@ 0xb1
 800a3a6:	4b49      	ldr	r3, [pc, #292]	@ (800a4cc <__multiply+0x15c>)
 800a3a8:	4849      	ldr	r0, [pc, #292]	@ (800a4d0 <__multiply+0x160>)
 800a3aa:	9a02      	ldr	r2, [sp, #8]
 800a3ac:	0049      	lsls	r1, r1, #1
 800a3ae:	f000 fcad 	bl	800ad0c <__assert_func>
 800a3b2:	9b02      	ldr	r3, [sp, #8]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	3314      	adds	r3, #20
 800a3b8:	469c      	mov	ip, r3
 800a3ba:	19bb      	adds	r3, r7, r6
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4463      	add	r3, ip
 800a3c0:	9304      	str	r3, [sp, #16]
 800a3c2:	4663      	mov	r3, ip
 800a3c4:	9904      	ldr	r1, [sp, #16]
 800a3c6:	428b      	cmp	r3, r1
 800a3c8:	d32a      	bcc.n	800a420 <__multiply+0xb0>
 800a3ca:	0023      	movs	r3, r4
 800a3cc:	00bf      	lsls	r7, r7, #2
 800a3ce:	3314      	adds	r3, #20
 800a3d0:	3514      	adds	r5, #20
 800a3d2:	9308      	str	r3, [sp, #32]
 800a3d4:	00b6      	lsls	r6, r6, #2
 800a3d6:	19db      	adds	r3, r3, r7
 800a3d8:	9305      	str	r3, [sp, #20]
 800a3da:	19ab      	adds	r3, r5, r6
 800a3dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3de:	2304      	movs	r3, #4
 800a3e0:	9306      	str	r3, [sp, #24]
 800a3e2:	0023      	movs	r3, r4
 800a3e4:	9a05      	ldr	r2, [sp, #20]
 800a3e6:	3315      	adds	r3, #21
 800a3e8:	9501      	str	r5, [sp, #4]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d305      	bcc.n	800a3fa <__multiply+0x8a>
 800a3ee:	1b13      	subs	r3, r2, r4
 800a3f0:	3b15      	subs	r3, #21
 800a3f2:	089b      	lsrs	r3, r3, #2
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	9306      	str	r3, [sp, #24]
 800a3fa:	9b01      	ldr	r3, [sp, #4]
 800a3fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d310      	bcc.n	800a424 <__multiply+0xb4>
 800a402:	9b03      	ldr	r3, [sp, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	dd05      	ble.n	800a414 <__multiply+0xa4>
 800a408:	9b04      	ldr	r3, [sp, #16]
 800a40a:	3b04      	subs	r3, #4
 800a40c:	9304      	str	r3, [sp, #16]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d056      	beq.n	800a4c2 <__multiply+0x152>
 800a414:	9b02      	ldr	r3, [sp, #8]
 800a416:	9a03      	ldr	r2, [sp, #12]
 800a418:	0018      	movs	r0, r3
 800a41a:	611a      	str	r2, [r3, #16]
 800a41c:	b00b      	add	sp, #44	@ 0x2c
 800a41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a420:	c304      	stmia	r3!, {r2}
 800a422:	e7cf      	b.n	800a3c4 <__multiply+0x54>
 800a424:	9b01      	ldr	r3, [sp, #4]
 800a426:	6818      	ldr	r0, [r3, #0]
 800a428:	b280      	uxth	r0, r0
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d01e      	beq.n	800a46c <__multiply+0xfc>
 800a42e:	4667      	mov	r7, ip
 800a430:	2500      	movs	r5, #0
 800a432:	9e08      	ldr	r6, [sp, #32]
 800a434:	ce02      	ldmia	r6!, {r1}
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	9307      	str	r3, [sp, #28]
 800a43a:	b28b      	uxth	r3, r1
 800a43c:	4343      	muls	r3, r0
 800a43e:	001a      	movs	r2, r3
 800a440:	466b      	mov	r3, sp
 800a442:	0c09      	lsrs	r1, r1, #16
 800a444:	8b9b      	ldrh	r3, [r3, #28]
 800a446:	4341      	muls	r1, r0
 800a448:	18d3      	adds	r3, r2, r3
 800a44a:	9a07      	ldr	r2, [sp, #28]
 800a44c:	195b      	adds	r3, r3, r5
 800a44e:	0c12      	lsrs	r2, r2, #16
 800a450:	1889      	adds	r1, r1, r2
 800a452:	0c1a      	lsrs	r2, r3, #16
 800a454:	188a      	adds	r2, r1, r2
 800a456:	b29b      	uxth	r3, r3
 800a458:	0c15      	lsrs	r5, r2, #16
 800a45a:	0412      	lsls	r2, r2, #16
 800a45c:	431a      	orrs	r2, r3
 800a45e:	9b05      	ldr	r3, [sp, #20]
 800a460:	c704      	stmia	r7!, {r2}
 800a462:	42b3      	cmp	r3, r6
 800a464:	d8e6      	bhi.n	800a434 <__multiply+0xc4>
 800a466:	4663      	mov	r3, ip
 800a468:	9a06      	ldr	r2, [sp, #24]
 800a46a:	509d      	str	r5, [r3, r2]
 800a46c:	9b01      	ldr	r3, [sp, #4]
 800a46e:	6818      	ldr	r0, [r3, #0]
 800a470:	0c00      	lsrs	r0, r0, #16
 800a472:	d020      	beq.n	800a4b6 <__multiply+0x146>
 800a474:	4663      	mov	r3, ip
 800a476:	0025      	movs	r5, r4
 800a478:	4661      	mov	r1, ip
 800a47a:	2700      	movs	r7, #0
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3514      	adds	r5, #20
 800a480:	682a      	ldr	r2, [r5, #0]
 800a482:	680e      	ldr	r6, [r1, #0]
 800a484:	b292      	uxth	r2, r2
 800a486:	4342      	muls	r2, r0
 800a488:	0c36      	lsrs	r6, r6, #16
 800a48a:	1992      	adds	r2, r2, r6
 800a48c:	19d2      	adds	r2, r2, r7
 800a48e:	0416      	lsls	r6, r2, #16
 800a490:	b29b      	uxth	r3, r3
 800a492:	431e      	orrs	r6, r3
 800a494:	600e      	str	r6, [r1, #0]
 800a496:	cd40      	ldmia	r5!, {r6}
 800a498:	684b      	ldr	r3, [r1, #4]
 800a49a:	0c36      	lsrs	r6, r6, #16
 800a49c:	4346      	muls	r6, r0
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	0c12      	lsrs	r2, r2, #16
 800a4a2:	18f3      	adds	r3, r6, r3
 800a4a4:	189b      	adds	r3, r3, r2
 800a4a6:	9a05      	ldr	r2, [sp, #20]
 800a4a8:	0c1f      	lsrs	r7, r3, #16
 800a4aa:	3104      	adds	r1, #4
 800a4ac:	42aa      	cmp	r2, r5
 800a4ae:	d8e7      	bhi.n	800a480 <__multiply+0x110>
 800a4b0:	4662      	mov	r2, ip
 800a4b2:	9906      	ldr	r1, [sp, #24]
 800a4b4:	5053      	str	r3, [r2, r1]
 800a4b6:	9b01      	ldr	r3, [sp, #4]
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	2304      	movs	r3, #4
 800a4be:	449c      	add	ip, r3
 800a4c0:	e79b      	b.n	800a3fa <__multiply+0x8a>
 800a4c2:	9b03      	ldr	r3, [sp, #12]
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	9303      	str	r3, [sp, #12]
 800a4c8:	e79b      	b.n	800a402 <__multiply+0x92>
 800a4ca:	46c0      	nop			@ (mov r8, r8)
 800a4cc:	0800b9e8 	.word	0x0800b9e8
 800a4d0:	0800b9f9 	.word	0x0800b9f9

0800a4d4 <__pow5mult>:
 800a4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	0015      	movs	r5, r2
 800a4da:	0007      	movs	r7, r0
 800a4dc:	000e      	movs	r6, r1
 800a4de:	401a      	ands	r2, r3
 800a4e0:	421d      	tst	r5, r3
 800a4e2:	d008      	beq.n	800a4f6 <__pow5mult+0x22>
 800a4e4:	4925      	ldr	r1, [pc, #148]	@ (800a57c <__pow5mult+0xa8>)
 800a4e6:	3a01      	subs	r2, #1
 800a4e8:	0092      	lsls	r2, r2, #2
 800a4ea:	5852      	ldr	r2, [r2, r1]
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	0031      	movs	r1, r6
 800a4f0:	f7ff fe92 	bl	800a218 <__multadd>
 800a4f4:	0006      	movs	r6, r0
 800a4f6:	10ad      	asrs	r5, r5, #2
 800a4f8:	d03d      	beq.n	800a576 <__pow5mult+0xa2>
 800a4fa:	69fc      	ldr	r4, [r7, #28]
 800a4fc:	2c00      	cmp	r4, #0
 800a4fe:	d10f      	bne.n	800a520 <__pow5mult+0x4c>
 800a500:	2010      	movs	r0, #16
 800a502:	f7ff fd65 	bl	8009fd0 <malloc>
 800a506:	1e02      	subs	r2, r0, #0
 800a508:	61f8      	str	r0, [r7, #28]
 800a50a:	d105      	bne.n	800a518 <__pow5mult+0x44>
 800a50c:	21b4      	movs	r1, #180	@ 0xb4
 800a50e:	4b1c      	ldr	r3, [pc, #112]	@ (800a580 <__pow5mult+0xac>)
 800a510:	481c      	ldr	r0, [pc, #112]	@ (800a584 <__pow5mult+0xb0>)
 800a512:	31ff      	adds	r1, #255	@ 0xff
 800a514:	f000 fbfa 	bl	800ad0c <__assert_func>
 800a518:	6044      	str	r4, [r0, #4]
 800a51a:	6084      	str	r4, [r0, #8]
 800a51c:	6004      	str	r4, [r0, #0]
 800a51e:	60c4      	str	r4, [r0, #12]
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	689c      	ldr	r4, [r3, #8]
 800a524:	9301      	str	r3, [sp, #4]
 800a526:	2c00      	cmp	r4, #0
 800a528:	d108      	bne.n	800a53c <__pow5mult+0x68>
 800a52a:	0038      	movs	r0, r7
 800a52c:	4916      	ldr	r1, [pc, #88]	@ (800a588 <__pow5mult+0xb4>)
 800a52e:	f7ff ff07 	bl	800a340 <__i2b>
 800a532:	9b01      	ldr	r3, [sp, #4]
 800a534:	0004      	movs	r4, r0
 800a536:	6098      	str	r0, [r3, #8]
 800a538:	2300      	movs	r3, #0
 800a53a:	6003      	str	r3, [r0, #0]
 800a53c:	2301      	movs	r3, #1
 800a53e:	421d      	tst	r5, r3
 800a540:	d00a      	beq.n	800a558 <__pow5mult+0x84>
 800a542:	0031      	movs	r1, r6
 800a544:	0022      	movs	r2, r4
 800a546:	0038      	movs	r0, r7
 800a548:	f7ff ff12 	bl	800a370 <__multiply>
 800a54c:	0031      	movs	r1, r6
 800a54e:	9001      	str	r0, [sp, #4]
 800a550:	0038      	movs	r0, r7
 800a552:	f7ff fe3d 	bl	800a1d0 <_Bfree>
 800a556:	9e01      	ldr	r6, [sp, #4]
 800a558:	106d      	asrs	r5, r5, #1
 800a55a:	d00c      	beq.n	800a576 <__pow5mult+0xa2>
 800a55c:	6820      	ldr	r0, [r4, #0]
 800a55e:	2800      	cmp	r0, #0
 800a560:	d107      	bne.n	800a572 <__pow5mult+0x9e>
 800a562:	0022      	movs	r2, r4
 800a564:	0021      	movs	r1, r4
 800a566:	0038      	movs	r0, r7
 800a568:	f7ff ff02 	bl	800a370 <__multiply>
 800a56c:	2300      	movs	r3, #0
 800a56e:	6020      	str	r0, [r4, #0]
 800a570:	6003      	str	r3, [r0, #0]
 800a572:	0004      	movs	r4, r0
 800a574:	e7e2      	b.n	800a53c <__pow5mult+0x68>
 800a576:	0030      	movs	r0, r6
 800a578:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a57a:	46c0      	nop			@ (mov r8, r8)
 800a57c:	0800ba54 	.word	0x0800ba54
 800a580:	0800b979 	.word	0x0800b979
 800a584:	0800b9f9 	.word	0x0800b9f9
 800a588:	00000271 	.word	0x00000271

0800a58c <__lshift>:
 800a58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a58e:	000c      	movs	r4, r1
 800a590:	0016      	movs	r6, r2
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	1157      	asrs	r7, r2, #5
 800a596:	b085      	sub	sp, #20
 800a598:	18fb      	adds	r3, r7, r3
 800a59a:	9301      	str	r3, [sp, #4]
 800a59c:	3301      	adds	r3, #1
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	6849      	ldr	r1, [r1, #4]
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	9002      	str	r0, [sp, #8]
 800a5a6:	9a00      	ldr	r2, [sp, #0]
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	db10      	blt.n	800a5ce <__lshift+0x42>
 800a5ac:	9802      	ldr	r0, [sp, #8]
 800a5ae:	f7ff fdcb 	bl	800a148 <_Balloc>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	0001      	movs	r1, r0
 800a5b6:	0005      	movs	r5, r0
 800a5b8:	001a      	movs	r2, r3
 800a5ba:	3114      	adds	r1, #20
 800a5bc:	4298      	cmp	r0, r3
 800a5be:	d10c      	bne.n	800a5da <__lshift+0x4e>
 800a5c0:	21ef      	movs	r1, #239	@ 0xef
 800a5c2:	002a      	movs	r2, r5
 800a5c4:	4b25      	ldr	r3, [pc, #148]	@ (800a65c <__lshift+0xd0>)
 800a5c6:	4826      	ldr	r0, [pc, #152]	@ (800a660 <__lshift+0xd4>)
 800a5c8:	0049      	lsls	r1, r1, #1
 800a5ca:	f000 fb9f 	bl	800ad0c <__assert_func>
 800a5ce:	3101      	adds	r1, #1
 800a5d0:	005b      	lsls	r3, r3, #1
 800a5d2:	e7e8      	b.n	800a5a6 <__lshift+0x1a>
 800a5d4:	0098      	lsls	r0, r3, #2
 800a5d6:	500a      	str	r2, [r1, r0]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	42bb      	cmp	r3, r7
 800a5dc:	dbfa      	blt.n	800a5d4 <__lshift+0x48>
 800a5de:	43fb      	mvns	r3, r7
 800a5e0:	17db      	asrs	r3, r3, #31
 800a5e2:	401f      	ands	r7, r3
 800a5e4:	00bf      	lsls	r7, r7, #2
 800a5e6:	0023      	movs	r3, r4
 800a5e8:	201f      	movs	r0, #31
 800a5ea:	19c9      	adds	r1, r1, r7
 800a5ec:	0037      	movs	r7, r6
 800a5ee:	6922      	ldr	r2, [r4, #16]
 800a5f0:	3314      	adds	r3, #20
 800a5f2:	0092      	lsls	r2, r2, #2
 800a5f4:	189a      	adds	r2, r3, r2
 800a5f6:	4007      	ands	r7, r0
 800a5f8:	4206      	tst	r6, r0
 800a5fa:	d029      	beq.n	800a650 <__lshift+0xc4>
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	1bc0      	subs	r0, r0, r7
 800a600:	9003      	str	r0, [sp, #12]
 800a602:	468c      	mov	ip, r1
 800a604:	2000      	movs	r0, #0
 800a606:	681e      	ldr	r6, [r3, #0]
 800a608:	40be      	lsls	r6, r7
 800a60a:	4306      	orrs	r6, r0
 800a60c:	4660      	mov	r0, ip
 800a60e:	c040      	stmia	r0!, {r6}
 800a610:	4684      	mov	ip, r0
 800a612:	9e03      	ldr	r6, [sp, #12]
 800a614:	cb01      	ldmia	r3!, {r0}
 800a616:	40f0      	lsrs	r0, r6
 800a618:	429a      	cmp	r2, r3
 800a61a:	d8f4      	bhi.n	800a606 <__lshift+0x7a>
 800a61c:	0026      	movs	r6, r4
 800a61e:	3615      	adds	r6, #21
 800a620:	2304      	movs	r3, #4
 800a622:	42b2      	cmp	r2, r6
 800a624:	d304      	bcc.n	800a630 <__lshift+0xa4>
 800a626:	1b13      	subs	r3, r2, r4
 800a628:	3b15      	subs	r3, #21
 800a62a:	089b      	lsrs	r3, r3, #2
 800a62c:	3301      	adds	r3, #1
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	50c8      	str	r0, [r1, r3]
 800a632:	2800      	cmp	r0, #0
 800a634:	d002      	beq.n	800a63c <__lshift+0xb0>
 800a636:	9b01      	ldr	r3, [sp, #4]
 800a638:	3302      	adds	r3, #2
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	9b00      	ldr	r3, [sp, #0]
 800a63e:	9802      	ldr	r0, [sp, #8]
 800a640:	3b01      	subs	r3, #1
 800a642:	0021      	movs	r1, r4
 800a644:	612b      	str	r3, [r5, #16]
 800a646:	f7ff fdc3 	bl	800a1d0 <_Bfree>
 800a64a:	0028      	movs	r0, r5
 800a64c:	b005      	add	sp, #20
 800a64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a650:	cb01      	ldmia	r3!, {r0}
 800a652:	c101      	stmia	r1!, {r0}
 800a654:	429a      	cmp	r2, r3
 800a656:	d8fb      	bhi.n	800a650 <__lshift+0xc4>
 800a658:	e7f0      	b.n	800a63c <__lshift+0xb0>
 800a65a:	46c0      	nop			@ (mov r8, r8)
 800a65c:	0800b9e8 	.word	0x0800b9e8
 800a660:	0800b9f9 	.word	0x0800b9f9

0800a664 <__mcmp>:
 800a664:	b530      	push	{r4, r5, lr}
 800a666:	690b      	ldr	r3, [r1, #16]
 800a668:	6904      	ldr	r4, [r0, #16]
 800a66a:	0002      	movs	r2, r0
 800a66c:	1ae0      	subs	r0, r4, r3
 800a66e:	429c      	cmp	r4, r3
 800a670:	d10f      	bne.n	800a692 <__mcmp+0x2e>
 800a672:	3214      	adds	r2, #20
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	3114      	adds	r1, #20
 800a678:	0014      	movs	r4, r2
 800a67a:	18c9      	adds	r1, r1, r3
 800a67c:	18d2      	adds	r2, r2, r3
 800a67e:	3a04      	subs	r2, #4
 800a680:	3904      	subs	r1, #4
 800a682:	6815      	ldr	r5, [r2, #0]
 800a684:	680b      	ldr	r3, [r1, #0]
 800a686:	429d      	cmp	r5, r3
 800a688:	d004      	beq.n	800a694 <__mcmp+0x30>
 800a68a:	2001      	movs	r0, #1
 800a68c:	429d      	cmp	r5, r3
 800a68e:	d200      	bcs.n	800a692 <__mcmp+0x2e>
 800a690:	3802      	subs	r0, #2
 800a692:	bd30      	pop	{r4, r5, pc}
 800a694:	4294      	cmp	r4, r2
 800a696:	d3f2      	bcc.n	800a67e <__mcmp+0x1a>
 800a698:	e7fb      	b.n	800a692 <__mcmp+0x2e>
	...

0800a69c <__mdiff>:
 800a69c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a69e:	000c      	movs	r4, r1
 800a6a0:	b087      	sub	sp, #28
 800a6a2:	9000      	str	r0, [sp, #0]
 800a6a4:	0011      	movs	r1, r2
 800a6a6:	0020      	movs	r0, r4
 800a6a8:	0017      	movs	r7, r2
 800a6aa:	f7ff ffdb 	bl	800a664 <__mcmp>
 800a6ae:	1e05      	subs	r5, r0, #0
 800a6b0:	d110      	bne.n	800a6d4 <__mdiff+0x38>
 800a6b2:	0001      	movs	r1, r0
 800a6b4:	9800      	ldr	r0, [sp, #0]
 800a6b6:	f7ff fd47 	bl	800a148 <_Balloc>
 800a6ba:	1e02      	subs	r2, r0, #0
 800a6bc:	d104      	bne.n	800a6c8 <__mdiff+0x2c>
 800a6be:	4b40      	ldr	r3, [pc, #256]	@ (800a7c0 <__mdiff+0x124>)
 800a6c0:	4840      	ldr	r0, [pc, #256]	@ (800a7c4 <__mdiff+0x128>)
 800a6c2:	4941      	ldr	r1, [pc, #260]	@ (800a7c8 <__mdiff+0x12c>)
 800a6c4:	f000 fb22 	bl	800ad0c <__assert_func>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	6145      	str	r5, [r0, #20]
 800a6cc:	6103      	str	r3, [r0, #16]
 800a6ce:	0010      	movs	r0, r2
 800a6d0:	b007      	add	sp, #28
 800a6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d4:	2600      	movs	r6, #0
 800a6d6:	42b0      	cmp	r0, r6
 800a6d8:	da03      	bge.n	800a6e2 <__mdiff+0x46>
 800a6da:	0023      	movs	r3, r4
 800a6dc:	003c      	movs	r4, r7
 800a6de:	001f      	movs	r7, r3
 800a6e0:	3601      	adds	r6, #1
 800a6e2:	6861      	ldr	r1, [r4, #4]
 800a6e4:	9800      	ldr	r0, [sp, #0]
 800a6e6:	f7ff fd2f 	bl	800a148 <_Balloc>
 800a6ea:	1e02      	subs	r2, r0, #0
 800a6ec:	d103      	bne.n	800a6f6 <__mdiff+0x5a>
 800a6ee:	4b34      	ldr	r3, [pc, #208]	@ (800a7c0 <__mdiff+0x124>)
 800a6f0:	4834      	ldr	r0, [pc, #208]	@ (800a7c4 <__mdiff+0x128>)
 800a6f2:	4936      	ldr	r1, [pc, #216]	@ (800a7cc <__mdiff+0x130>)
 800a6f4:	e7e6      	b.n	800a6c4 <__mdiff+0x28>
 800a6f6:	6923      	ldr	r3, [r4, #16]
 800a6f8:	3414      	adds	r4, #20
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	18e3      	adds	r3, r4, r3
 800a700:	0021      	movs	r1, r4
 800a702:	9401      	str	r4, [sp, #4]
 800a704:	003c      	movs	r4, r7
 800a706:	9302      	str	r3, [sp, #8]
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	3414      	adds	r4, #20
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	18e3      	adds	r3, r4, r3
 800a710:	9303      	str	r3, [sp, #12]
 800a712:	0003      	movs	r3, r0
 800a714:	60c6      	str	r6, [r0, #12]
 800a716:	468c      	mov	ip, r1
 800a718:	2000      	movs	r0, #0
 800a71a:	3314      	adds	r3, #20
 800a71c:	9304      	str	r3, [sp, #16]
 800a71e:	9305      	str	r3, [sp, #20]
 800a720:	4663      	mov	r3, ip
 800a722:	cb20      	ldmia	r3!, {r5}
 800a724:	b2a9      	uxth	r1, r5
 800a726:	000e      	movs	r6, r1
 800a728:	469c      	mov	ip, r3
 800a72a:	cc08      	ldmia	r4!, {r3}
 800a72c:	0c2d      	lsrs	r5, r5, #16
 800a72e:	b299      	uxth	r1, r3
 800a730:	1a71      	subs	r1, r6, r1
 800a732:	1809      	adds	r1, r1, r0
 800a734:	0c1b      	lsrs	r3, r3, #16
 800a736:	1408      	asrs	r0, r1, #16
 800a738:	1aeb      	subs	r3, r5, r3
 800a73a:	181b      	adds	r3, r3, r0
 800a73c:	1418      	asrs	r0, r3, #16
 800a73e:	b289      	uxth	r1, r1
 800a740:	041b      	lsls	r3, r3, #16
 800a742:	4319      	orrs	r1, r3
 800a744:	9b05      	ldr	r3, [sp, #20]
 800a746:	c302      	stmia	r3!, {r1}
 800a748:	9305      	str	r3, [sp, #20]
 800a74a:	9b03      	ldr	r3, [sp, #12]
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	d8e7      	bhi.n	800a720 <__mdiff+0x84>
 800a750:	0039      	movs	r1, r7
 800a752:	9c03      	ldr	r4, [sp, #12]
 800a754:	3115      	adds	r1, #21
 800a756:	2304      	movs	r3, #4
 800a758:	428c      	cmp	r4, r1
 800a75a:	d304      	bcc.n	800a766 <__mdiff+0xca>
 800a75c:	1be3      	subs	r3, r4, r7
 800a75e:	3b15      	subs	r3, #21
 800a760:	089b      	lsrs	r3, r3, #2
 800a762:	3301      	adds	r3, #1
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	9901      	ldr	r1, [sp, #4]
 800a768:	18cd      	adds	r5, r1, r3
 800a76a:	9904      	ldr	r1, [sp, #16]
 800a76c:	002e      	movs	r6, r5
 800a76e:	18cb      	adds	r3, r1, r3
 800a770:	001f      	movs	r7, r3
 800a772:	9902      	ldr	r1, [sp, #8]
 800a774:	428e      	cmp	r6, r1
 800a776:	d311      	bcc.n	800a79c <__mdiff+0x100>
 800a778:	9c02      	ldr	r4, [sp, #8]
 800a77a:	1ee9      	subs	r1, r5, #3
 800a77c:	2000      	movs	r0, #0
 800a77e:	428c      	cmp	r4, r1
 800a780:	d304      	bcc.n	800a78c <__mdiff+0xf0>
 800a782:	0021      	movs	r1, r4
 800a784:	3103      	adds	r1, #3
 800a786:	1b49      	subs	r1, r1, r5
 800a788:	0889      	lsrs	r1, r1, #2
 800a78a:	0088      	lsls	r0, r1, #2
 800a78c:	181b      	adds	r3, r3, r0
 800a78e:	3b04      	subs	r3, #4
 800a790:	6819      	ldr	r1, [r3, #0]
 800a792:	2900      	cmp	r1, #0
 800a794:	d010      	beq.n	800a7b8 <__mdiff+0x11c>
 800a796:	9b00      	ldr	r3, [sp, #0]
 800a798:	6113      	str	r3, [r2, #16]
 800a79a:	e798      	b.n	800a6ce <__mdiff+0x32>
 800a79c:	4684      	mov	ip, r0
 800a79e:	ce02      	ldmia	r6!, {r1}
 800a7a0:	b288      	uxth	r0, r1
 800a7a2:	4460      	add	r0, ip
 800a7a4:	1400      	asrs	r0, r0, #16
 800a7a6:	0c0c      	lsrs	r4, r1, #16
 800a7a8:	1904      	adds	r4, r0, r4
 800a7aa:	4461      	add	r1, ip
 800a7ac:	1420      	asrs	r0, r4, #16
 800a7ae:	b289      	uxth	r1, r1
 800a7b0:	0424      	lsls	r4, r4, #16
 800a7b2:	4321      	orrs	r1, r4
 800a7b4:	c702      	stmia	r7!, {r1}
 800a7b6:	e7dc      	b.n	800a772 <__mdiff+0xd6>
 800a7b8:	9900      	ldr	r1, [sp, #0]
 800a7ba:	3901      	subs	r1, #1
 800a7bc:	9100      	str	r1, [sp, #0]
 800a7be:	e7e6      	b.n	800a78e <__mdiff+0xf2>
 800a7c0:	0800b9e8 	.word	0x0800b9e8
 800a7c4:	0800b9f9 	.word	0x0800b9f9
 800a7c8:	00000237 	.word	0x00000237
 800a7cc:	00000245 	.word	0x00000245

0800a7d0 <__d2b>:
 800a7d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	0016      	movs	r6, r2
 800a7d6:	001f      	movs	r7, r3
 800a7d8:	f7ff fcb6 	bl	800a148 <_Balloc>
 800a7dc:	1e04      	subs	r4, r0, #0
 800a7de:	d105      	bne.n	800a7ec <__d2b+0x1c>
 800a7e0:	0022      	movs	r2, r4
 800a7e2:	4b25      	ldr	r3, [pc, #148]	@ (800a878 <__d2b+0xa8>)
 800a7e4:	4825      	ldr	r0, [pc, #148]	@ (800a87c <__d2b+0xac>)
 800a7e6:	4926      	ldr	r1, [pc, #152]	@ (800a880 <__d2b+0xb0>)
 800a7e8:	f000 fa90 	bl	800ad0c <__assert_func>
 800a7ec:	033b      	lsls	r3, r7, #12
 800a7ee:	007d      	lsls	r5, r7, #1
 800a7f0:	0b1b      	lsrs	r3, r3, #12
 800a7f2:	0d6d      	lsrs	r5, r5, #21
 800a7f4:	d002      	beq.n	800a7fc <__d2b+0x2c>
 800a7f6:	2280      	movs	r2, #128	@ 0x80
 800a7f8:	0352      	lsls	r2, r2, #13
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	9301      	str	r3, [sp, #4]
 800a7fe:	2e00      	cmp	r6, #0
 800a800:	d025      	beq.n	800a84e <__d2b+0x7e>
 800a802:	4668      	mov	r0, sp
 800a804:	9600      	str	r6, [sp, #0]
 800a806:	f7ff fd6c 	bl	800a2e2 <__lo0bits>
 800a80a:	9b01      	ldr	r3, [sp, #4]
 800a80c:	9900      	ldr	r1, [sp, #0]
 800a80e:	2800      	cmp	r0, #0
 800a810:	d01b      	beq.n	800a84a <__d2b+0x7a>
 800a812:	2220      	movs	r2, #32
 800a814:	001e      	movs	r6, r3
 800a816:	1a12      	subs	r2, r2, r0
 800a818:	4096      	lsls	r6, r2
 800a81a:	0032      	movs	r2, r6
 800a81c:	40c3      	lsrs	r3, r0
 800a81e:	430a      	orrs	r2, r1
 800a820:	6162      	str	r2, [r4, #20]
 800a822:	9301      	str	r3, [sp, #4]
 800a824:	9e01      	ldr	r6, [sp, #4]
 800a826:	61a6      	str	r6, [r4, #24]
 800a828:	1e73      	subs	r3, r6, #1
 800a82a:	419e      	sbcs	r6, r3
 800a82c:	3601      	adds	r6, #1
 800a82e:	6126      	str	r6, [r4, #16]
 800a830:	2d00      	cmp	r5, #0
 800a832:	d014      	beq.n	800a85e <__d2b+0x8e>
 800a834:	2635      	movs	r6, #53	@ 0x35
 800a836:	4b13      	ldr	r3, [pc, #76]	@ (800a884 <__d2b+0xb4>)
 800a838:	18ed      	adds	r5, r5, r3
 800a83a:	9b08      	ldr	r3, [sp, #32]
 800a83c:	182d      	adds	r5, r5, r0
 800a83e:	601d      	str	r5, [r3, #0]
 800a840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a842:	1a36      	subs	r6, r6, r0
 800a844:	601e      	str	r6, [r3, #0]
 800a846:	0020      	movs	r0, r4
 800a848:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a84a:	6161      	str	r1, [r4, #20]
 800a84c:	e7ea      	b.n	800a824 <__d2b+0x54>
 800a84e:	a801      	add	r0, sp, #4
 800a850:	f7ff fd47 	bl	800a2e2 <__lo0bits>
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	2601      	movs	r6, #1
 800a858:	6163      	str	r3, [r4, #20]
 800a85a:	3020      	adds	r0, #32
 800a85c:	e7e7      	b.n	800a82e <__d2b+0x5e>
 800a85e:	4b0a      	ldr	r3, [pc, #40]	@ (800a888 <__d2b+0xb8>)
 800a860:	18c0      	adds	r0, r0, r3
 800a862:	9b08      	ldr	r3, [sp, #32]
 800a864:	6018      	str	r0, [r3, #0]
 800a866:	4b09      	ldr	r3, [pc, #36]	@ (800a88c <__d2b+0xbc>)
 800a868:	18f3      	adds	r3, r6, r3
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	18e3      	adds	r3, r4, r3
 800a86e:	6958      	ldr	r0, [r3, #20]
 800a870:	f7ff fd16 	bl	800a2a0 <__hi0bits>
 800a874:	0176      	lsls	r6, r6, #5
 800a876:	e7e3      	b.n	800a840 <__d2b+0x70>
 800a878:	0800b9e8 	.word	0x0800b9e8
 800a87c:	0800b9f9 	.word	0x0800b9f9
 800a880:	0000030f 	.word	0x0000030f
 800a884:	fffffbcd 	.word	0xfffffbcd
 800a888:	fffffbce 	.word	0xfffffbce
 800a88c:	3fffffff 	.word	0x3fffffff

0800a890 <__ssputs_r>:
 800a890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a892:	688e      	ldr	r6, [r1, #8]
 800a894:	b085      	sub	sp, #20
 800a896:	001f      	movs	r7, r3
 800a898:	000c      	movs	r4, r1
 800a89a:	680b      	ldr	r3, [r1, #0]
 800a89c:	9002      	str	r0, [sp, #8]
 800a89e:	9203      	str	r2, [sp, #12]
 800a8a0:	42be      	cmp	r6, r7
 800a8a2:	d830      	bhi.n	800a906 <__ssputs_r+0x76>
 800a8a4:	210c      	movs	r1, #12
 800a8a6:	5e62      	ldrsh	r2, [r4, r1]
 800a8a8:	2190      	movs	r1, #144	@ 0x90
 800a8aa:	00c9      	lsls	r1, r1, #3
 800a8ac:	420a      	tst	r2, r1
 800a8ae:	d028      	beq.n	800a902 <__ssputs_r+0x72>
 800a8b0:	2003      	movs	r0, #3
 800a8b2:	6921      	ldr	r1, [r4, #16]
 800a8b4:	1a5b      	subs	r3, r3, r1
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	6963      	ldr	r3, [r4, #20]
 800a8ba:	4343      	muls	r3, r0
 800a8bc:	9801      	ldr	r0, [sp, #4]
 800a8be:	0fdd      	lsrs	r5, r3, #31
 800a8c0:	18ed      	adds	r5, r5, r3
 800a8c2:	1c7b      	adds	r3, r7, #1
 800a8c4:	181b      	adds	r3, r3, r0
 800a8c6:	106d      	asrs	r5, r5, #1
 800a8c8:	42ab      	cmp	r3, r5
 800a8ca:	d900      	bls.n	800a8ce <__ssputs_r+0x3e>
 800a8cc:	001d      	movs	r5, r3
 800a8ce:	0552      	lsls	r2, r2, #21
 800a8d0:	d528      	bpl.n	800a924 <__ssputs_r+0x94>
 800a8d2:	0029      	movs	r1, r5
 800a8d4:	9802      	ldr	r0, [sp, #8]
 800a8d6:	f7ff fba7 	bl	800a028 <_malloc_r>
 800a8da:	1e06      	subs	r6, r0, #0
 800a8dc:	d02c      	beq.n	800a938 <__ssputs_r+0xa8>
 800a8de:	9a01      	ldr	r2, [sp, #4]
 800a8e0:	6921      	ldr	r1, [r4, #16]
 800a8e2:	f000 fa09 	bl	800acf8 <memcpy>
 800a8e6:	89a2      	ldrh	r2, [r4, #12]
 800a8e8:	4b18      	ldr	r3, [pc, #96]	@ (800a94c <__ssputs_r+0xbc>)
 800a8ea:	401a      	ands	r2, r3
 800a8ec:	2380      	movs	r3, #128	@ 0x80
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	81a3      	strh	r3, [r4, #12]
 800a8f2:	9b01      	ldr	r3, [sp, #4]
 800a8f4:	6126      	str	r6, [r4, #16]
 800a8f6:	18f6      	adds	r6, r6, r3
 800a8f8:	6026      	str	r6, [r4, #0]
 800a8fa:	003e      	movs	r6, r7
 800a8fc:	6165      	str	r5, [r4, #20]
 800a8fe:	1aed      	subs	r5, r5, r3
 800a900:	60a5      	str	r5, [r4, #8]
 800a902:	42be      	cmp	r6, r7
 800a904:	d900      	bls.n	800a908 <__ssputs_r+0x78>
 800a906:	003e      	movs	r6, r7
 800a908:	0032      	movs	r2, r6
 800a90a:	9903      	ldr	r1, [sp, #12]
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	f000 f9ce 	bl	800acae <memmove>
 800a912:	2000      	movs	r0, #0
 800a914:	68a3      	ldr	r3, [r4, #8]
 800a916:	1b9b      	subs	r3, r3, r6
 800a918:	60a3      	str	r3, [r4, #8]
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	199b      	adds	r3, r3, r6
 800a91e:	6023      	str	r3, [r4, #0]
 800a920:	b005      	add	sp, #20
 800a922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a924:	002a      	movs	r2, r5
 800a926:	9802      	ldr	r0, [sp, #8]
 800a928:	f000 fa4d 	bl	800adc6 <_realloc_r>
 800a92c:	1e06      	subs	r6, r0, #0
 800a92e:	d1e0      	bne.n	800a8f2 <__ssputs_r+0x62>
 800a930:	6921      	ldr	r1, [r4, #16]
 800a932:	9802      	ldr	r0, [sp, #8]
 800a934:	f7ff fb02 	bl	8009f3c <_free_r>
 800a938:	230c      	movs	r3, #12
 800a93a:	2001      	movs	r0, #1
 800a93c:	9a02      	ldr	r2, [sp, #8]
 800a93e:	4240      	negs	r0, r0
 800a940:	6013      	str	r3, [r2, #0]
 800a942:	89a2      	ldrh	r2, [r4, #12]
 800a944:	3334      	adds	r3, #52	@ 0x34
 800a946:	4313      	orrs	r3, r2
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	e7e9      	b.n	800a920 <__ssputs_r+0x90>
 800a94c:	fffffb7f 	.word	0xfffffb7f

0800a950 <_svfiprintf_r>:
 800a950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a952:	b0a1      	sub	sp, #132	@ 0x84
 800a954:	9003      	str	r0, [sp, #12]
 800a956:	001d      	movs	r5, r3
 800a958:	898b      	ldrh	r3, [r1, #12]
 800a95a:	000f      	movs	r7, r1
 800a95c:	0016      	movs	r6, r2
 800a95e:	061b      	lsls	r3, r3, #24
 800a960:	d511      	bpl.n	800a986 <_svfiprintf_r+0x36>
 800a962:	690b      	ldr	r3, [r1, #16]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10e      	bne.n	800a986 <_svfiprintf_r+0x36>
 800a968:	2140      	movs	r1, #64	@ 0x40
 800a96a:	f7ff fb5d 	bl	800a028 <_malloc_r>
 800a96e:	6038      	str	r0, [r7, #0]
 800a970:	6138      	str	r0, [r7, #16]
 800a972:	2800      	cmp	r0, #0
 800a974:	d105      	bne.n	800a982 <_svfiprintf_r+0x32>
 800a976:	230c      	movs	r3, #12
 800a978:	9a03      	ldr	r2, [sp, #12]
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	2001      	movs	r0, #1
 800a97e:	4240      	negs	r0, r0
 800a980:	e0cf      	b.n	800ab22 <_svfiprintf_r+0x1d2>
 800a982:	2340      	movs	r3, #64	@ 0x40
 800a984:	617b      	str	r3, [r7, #20]
 800a986:	2300      	movs	r3, #0
 800a988:	ac08      	add	r4, sp, #32
 800a98a:	6163      	str	r3, [r4, #20]
 800a98c:	3320      	adds	r3, #32
 800a98e:	7663      	strb	r3, [r4, #25]
 800a990:	3310      	adds	r3, #16
 800a992:	76a3      	strb	r3, [r4, #26]
 800a994:	9507      	str	r5, [sp, #28]
 800a996:	0035      	movs	r5, r6
 800a998:	782b      	ldrb	r3, [r5, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <_svfiprintf_r+0x52>
 800a99e:	2b25      	cmp	r3, #37	@ 0x25
 800a9a0:	d148      	bne.n	800aa34 <_svfiprintf_r+0xe4>
 800a9a2:	1bab      	subs	r3, r5, r6
 800a9a4:	9305      	str	r3, [sp, #20]
 800a9a6:	42b5      	cmp	r5, r6
 800a9a8:	d00b      	beq.n	800a9c2 <_svfiprintf_r+0x72>
 800a9aa:	0032      	movs	r2, r6
 800a9ac:	0039      	movs	r1, r7
 800a9ae:	9803      	ldr	r0, [sp, #12]
 800a9b0:	f7ff ff6e 	bl	800a890 <__ssputs_r>
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	d100      	bne.n	800a9ba <_svfiprintf_r+0x6a>
 800a9b8:	e0ae      	b.n	800ab18 <_svfiprintf_r+0x1c8>
 800a9ba:	6963      	ldr	r3, [r4, #20]
 800a9bc:	9a05      	ldr	r2, [sp, #20]
 800a9be:	189b      	adds	r3, r3, r2
 800a9c0:	6163      	str	r3, [r4, #20]
 800a9c2:	782b      	ldrb	r3, [r5, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d100      	bne.n	800a9ca <_svfiprintf_r+0x7a>
 800a9c8:	e0a6      	b.n	800ab18 <_svfiprintf_r+0x1c8>
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4252      	negs	r2, r2
 800a9d0:	6062      	str	r2, [r4, #4]
 800a9d2:	a904      	add	r1, sp, #16
 800a9d4:	3254      	adds	r2, #84	@ 0x54
 800a9d6:	1852      	adds	r2, r2, r1
 800a9d8:	1c6e      	adds	r6, r5, #1
 800a9da:	6023      	str	r3, [r4, #0]
 800a9dc:	60e3      	str	r3, [r4, #12]
 800a9de:	60a3      	str	r3, [r4, #8]
 800a9e0:	7013      	strb	r3, [r2, #0]
 800a9e2:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a9e4:	4b54      	ldr	r3, [pc, #336]	@ (800ab38 <_svfiprintf_r+0x1e8>)
 800a9e6:	2205      	movs	r2, #5
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	7831      	ldrb	r1, [r6, #0]
 800a9ec:	9305      	str	r3, [sp, #20]
 800a9ee:	f7fe fc18 	bl	8009222 <memchr>
 800a9f2:	1c75      	adds	r5, r6, #1
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d11f      	bne.n	800aa38 <_svfiprintf_r+0xe8>
 800a9f8:	6822      	ldr	r2, [r4, #0]
 800a9fa:	06d3      	lsls	r3, r2, #27
 800a9fc:	d504      	bpl.n	800aa08 <_svfiprintf_r+0xb8>
 800a9fe:	2353      	movs	r3, #83	@ 0x53
 800aa00:	a904      	add	r1, sp, #16
 800aa02:	185b      	adds	r3, r3, r1
 800aa04:	2120      	movs	r1, #32
 800aa06:	7019      	strb	r1, [r3, #0]
 800aa08:	0713      	lsls	r3, r2, #28
 800aa0a:	d504      	bpl.n	800aa16 <_svfiprintf_r+0xc6>
 800aa0c:	2353      	movs	r3, #83	@ 0x53
 800aa0e:	a904      	add	r1, sp, #16
 800aa10:	185b      	adds	r3, r3, r1
 800aa12:	212b      	movs	r1, #43	@ 0x2b
 800aa14:	7019      	strb	r1, [r3, #0]
 800aa16:	7833      	ldrb	r3, [r6, #0]
 800aa18:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa1a:	d016      	beq.n	800aa4a <_svfiprintf_r+0xfa>
 800aa1c:	0035      	movs	r5, r6
 800aa1e:	2100      	movs	r1, #0
 800aa20:	200a      	movs	r0, #10
 800aa22:	68e3      	ldr	r3, [r4, #12]
 800aa24:	782a      	ldrb	r2, [r5, #0]
 800aa26:	1c6e      	adds	r6, r5, #1
 800aa28:	3a30      	subs	r2, #48	@ 0x30
 800aa2a:	2a09      	cmp	r2, #9
 800aa2c:	d950      	bls.n	800aad0 <_svfiprintf_r+0x180>
 800aa2e:	2900      	cmp	r1, #0
 800aa30:	d111      	bne.n	800aa56 <_svfiprintf_r+0x106>
 800aa32:	e017      	b.n	800aa64 <_svfiprintf_r+0x114>
 800aa34:	3501      	adds	r5, #1
 800aa36:	e7af      	b.n	800a998 <_svfiprintf_r+0x48>
 800aa38:	9b05      	ldr	r3, [sp, #20]
 800aa3a:	6822      	ldr	r2, [r4, #0]
 800aa3c:	1ac0      	subs	r0, r0, r3
 800aa3e:	2301      	movs	r3, #1
 800aa40:	4083      	lsls	r3, r0
 800aa42:	4313      	orrs	r3, r2
 800aa44:	002e      	movs	r6, r5
 800aa46:	6023      	str	r3, [r4, #0]
 800aa48:	e7cc      	b.n	800a9e4 <_svfiprintf_r+0x94>
 800aa4a:	9b07      	ldr	r3, [sp, #28]
 800aa4c:	1d19      	adds	r1, r3, #4
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	9107      	str	r1, [sp, #28]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	db01      	blt.n	800aa5a <_svfiprintf_r+0x10a>
 800aa56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa58:	e004      	b.n	800aa64 <_svfiprintf_r+0x114>
 800aa5a:	425b      	negs	r3, r3
 800aa5c:	60e3      	str	r3, [r4, #12]
 800aa5e:	2302      	movs	r3, #2
 800aa60:	4313      	orrs	r3, r2
 800aa62:	6023      	str	r3, [r4, #0]
 800aa64:	782b      	ldrb	r3, [r5, #0]
 800aa66:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa68:	d10c      	bne.n	800aa84 <_svfiprintf_r+0x134>
 800aa6a:	786b      	ldrb	r3, [r5, #1]
 800aa6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa6e:	d134      	bne.n	800aada <_svfiprintf_r+0x18a>
 800aa70:	9b07      	ldr	r3, [sp, #28]
 800aa72:	3502      	adds	r5, #2
 800aa74:	1d1a      	adds	r2, r3, #4
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	9207      	str	r2, [sp, #28]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	da01      	bge.n	800aa82 <_svfiprintf_r+0x132>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	425b      	negs	r3, r3
 800aa82:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa84:	4e2d      	ldr	r6, [pc, #180]	@ (800ab3c <_svfiprintf_r+0x1ec>)
 800aa86:	2203      	movs	r2, #3
 800aa88:	0030      	movs	r0, r6
 800aa8a:	7829      	ldrb	r1, [r5, #0]
 800aa8c:	f7fe fbc9 	bl	8009222 <memchr>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d006      	beq.n	800aaa2 <_svfiprintf_r+0x152>
 800aa94:	2340      	movs	r3, #64	@ 0x40
 800aa96:	1b80      	subs	r0, r0, r6
 800aa98:	4083      	lsls	r3, r0
 800aa9a:	6822      	ldr	r2, [r4, #0]
 800aa9c:	3501      	adds	r5, #1
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	7829      	ldrb	r1, [r5, #0]
 800aaa4:	2206      	movs	r2, #6
 800aaa6:	4826      	ldr	r0, [pc, #152]	@ (800ab40 <_svfiprintf_r+0x1f0>)
 800aaa8:	1c6e      	adds	r6, r5, #1
 800aaaa:	7621      	strb	r1, [r4, #24]
 800aaac:	f7fe fbb9 	bl	8009222 <memchr>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	d038      	beq.n	800ab26 <_svfiprintf_r+0x1d6>
 800aab4:	4b23      	ldr	r3, [pc, #140]	@ (800ab44 <_svfiprintf_r+0x1f4>)
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d122      	bne.n	800ab00 <_svfiprintf_r+0x1b0>
 800aaba:	2207      	movs	r2, #7
 800aabc:	9b07      	ldr	r3, [sp, #28]
 800aabe:	3307      	adds	r3, #7
 800aac0:	4393      	bics	r3, r2
 800aac2:	3308      	adds	r3, #8
 800aac4:	9307      	str	r3, [sp, #28]
 800aac6:	6963      	ldr	r3, [r4, #20]
 800aac8:	9a04      	ldr	r2, [sp, #16]
 800aaca:	189b      	adds	r3, r3, r2
 800aacc:	6163      	str	r3, [r4, #20]
 800aace:	e762      	b.n	800a996 <_svfiprintf_r+0x46>
 800aad0:	4343      	muls	r3, r0
 800aad2:	0035      	movs	r5, r6
 800aad4:	2101      	movs	r1, #1
 800aad6:	189b      	adds	r3, r3, r2
 800aad8:	e7a4      	b.n	800aa24 <_svfiprintf_r+0xd4>
 800aada:	2300      	movs	r3, #0
 800aadc:	200a      	movs	r0, #10
 800aade:	0019      	movs	r1, r3
 800aae0:	3501      	adds	r5, #1
 800aae2:	6063      	str	r3, [r4, #4]
 800aae4:	782a      	ldrb	r2, [r5, #0]
 800aae6:	1c6e      	adds	r6, r5, #1
 800aae8:	3a30      	subs	r2, #48	@ 0x30
 800aaea:	2a09      	cmp	r2, #9
 800aaec:	d903      	bls.n	800aaf6 <_svfiprintf_r+0x1a6>
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0c8      	beq.n	800aa84 <_svfiprintf_r+0x134>
 800aaf2:	9109      	str	r1, [sp, #36]	@ 0x24
 800aaf4:	e7c6      	b.n	800aa84 <_svfiprintf_r+0x134>
 800aaf6:	4341      	muls	r1, r0
 800aaf8:	0035      	movs	r5, r6
 800aafa:	2301      	movs	r3, #1
 800aafc:	1889      	adds	r1, r1, r2
 800aafe:	e7f1      	b.n	800aae4 <_svfiprintf_r+0x194>
 800ab00:	aa07      	add	r2, sp, #28
 800ab02:	9200      	str	r2, [sp, #0]
 800ab04:	0021      	movs	r1, r4
 800ab06:	003a      	movs	r2, r7
 800ab08:	4b0f      	ldr	r3, [pc, #60]	@ (800ab48 <_svfiprintf_r+0x1f8>)
 800ab0a:	9803      	ldr	r0, [sp, #12]
 800ab0c:	f7fd fe02 	bl	8008714 <_printf_float>
 800ab10:	9004      	str	r0, [sp, #16]
 800ab12:	9b04      	ldr	r3, [sp, #16]
 800ab14:	3301      	adds	r3, #1
 800ab16:	d1d6      	bne.n	800aac6 <_svfiprintf_r+0x176>
 800ab18:	89bb      	ldrh	r3, [r7, #12]
 800ab1a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ab1c:	065b      	lsls	r3, r3, #25
 800ab1e:	d500      	bpl.n	800ab22 <_svfiprintf_r+0x1d2>
 800ab20:	e72c      	b.n	800a97c <_svfiprintf_r+0x2c>
 800ab22:	b021      	add	sp, #132	@ 0x84
 800ab24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab26:	aa07      	add	r2, sp, #28
 800ab28:	9200      	str	r2, [sp, #0]
 800ab2a:	0021      	movs	r1, r4
 800ab2c:	003a      	movs	r2, r7
 800ab2e:	4b06      	ldr	r3, [pc, #24]	@ (800ab48 <_svfiprintf_r+0x1f8>)
 800ab30:	9803      	ldr	r0, [sp, #12]
 800ab32:	f7fe f89d 	bl	8008c70 <_printf_i>
 800ab36:	e7eb      	b.n	800ab10 <_svfiprintf_r+0x1c0>
 800ab38:	0800bb50 	.word	0x0800bb50
 800ab3c:	0800bb56 	.word	0x0800bb56
 800ab40:	0800bb5a 	.word	0x0800bb5a
 800ab44:	08008715 	.word	0x08008715
 800ab48:	0800a891 	.word	0x0800a891

0800ab4c <__sflush_r>:
 800ab4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab4e:	220c      	movs	r2, #12
 800ab50:	5e8b      	ldrsh	r3, [r1, r2]
 800ab52:	0005      	movs	r5, r0
 800ab54:	000c      	movs	r4, r1
 800ab56:	071a      	lsls	r2, r3, #28
 800ab58:	d456      	bmi.n	800ac08 <__sflush_r+0xbc>
 800ab5a:	684a      	ldr	r2, [r1, #4]
 800ab5c:	2a00      	cmp	r2, #0
 800ab5e:	dc02      	bgt.n	800ab66 <__sflush_r+0x1a>
 800ab60:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800ab62:	2a00      	cmp	r2, #0
 800ab64:	dd4e      	ble.n	800ac04 <__sflush_r+0xb8>
 800ab66:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ab68:	2f00      	cmp	r7, #0
 800ab6a:	d04b      	beq.n	800ac04 <__sflush_r+0xb8>
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	2080      	movs	r0, #128	@ 0x80
 800ab70:	682e      	ldr	r6, [r5, #0]
 800ab72:	602a      	str	r2, [r5, #0]
 800ab74:	001a      	movs	r2, r3
 800ab76:	0140      	lsls	r0, r0, #5
 800ab78:	6a21      	ldr	r1, [r4, #32]
 800ab7a:	4002      	ands	r2, r0
 800ab7c:	4203      	tst	r3, r0
 800ab7e:	d033      	beq.n	800abe8 <__sflush_r+0x9c>
 800ab80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab82:	89a3      	ldrh	r3, [r4, #12]
 800ab84:	075b      	lsls	r3, r3, #29
 800ab86:	d506      	bpl.n	800ab96 <__sflush_r+0x4a>
 800ab88:	6863      	ldr	r3, [r4, #4]
 800ab8a:	1ad2      	subs	r2, r2, r3
 800ab8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <__sflush_r+0x4a>
 800ab92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab94:	1ad2      	subs	r2, r2, r3
 800ab96:	2300      	movs	r3, #0
 800ab98:	0028      	movs	r0, r5
 800ab9a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ab9c:	6a21      	ldr	r1, [r4, #32]
 800ab9e:	47b8      	blx	r7
 800aba0:	89a2      	ldrh	r2, [r4, #12]
 800aba2:	1c43      	adds	r3, r0, #1
 800aba4:	d106      	bne.n	800abb4 <__sflush_r+0x68>
 800aba6:	6829      	ldr	r1, [r5, #0]
 800aba8:	291d      	cmp	r1, #29
 800abaa:	d846      	bhi.n	800ac3a <__sflush_r+0xee>
 800abac:	4b29      	ldr	r3, [pc, #164]	@ (800ac54 <__sflush_r+0x108>)
 800abae:	410b      	asrs	r3, r1
 800abb0:	07db      	lsls	r3, r3, #31
 800abb2:	d442      	bmi.n	800ac3a <__sflush_r+0xee>
 800abb4:	2300      	movs	r3, #0
 800abb6:	6063      	str	r3, [r4, #4]
 800abb8:	6923      	ldr	r3, [r4, #16]
 800abba:	6023      	str	r3, [r4, #0]
 800abbc:	04d2      	lsls	r2, r2, #19
 800abbe:	d505      	bpl.n	800abcc <__sflush_r+0x80>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	d102      	bne.n	800abca <__sflush_r+0x7e>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d100      	bne.n	800abcc <__sflush_r+0x80>
 800abca:	6560      	str	r0, [r4, #84]	@ 0x54
 800abcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abce:	602e      	str	r6, [r5, #0]
 800abd0:	2900      	cmp	r1, #0
 800abd2:	d017      	beq.n	800ac04 <__sflush_r+0xb8>
 800abd4:	0023      	movs	r3, r4
 800abd6:	3344      	adds	r3, #68	@ 0x44
 800abd8:	4299      	cmp	r1, r3
 800abda:	d002      	beq.n	800abe2 <__sflush_r+0x96>
 800abdc:	0028      	movs	r0, r5
 800abde:	f7ff f9ad 	bl	8009f3c <_free_r>
 800abe2:	2300      	movs	r3, #0
 800abe4:	6363      	str	r3, [r4, #52]	@ 0x34
 800abe6:	e00d      	b.n	800ac04 <__sflush_r+0xb8>
 800abe8:	2301      	movs	r3, #1
 800abea:	0028      	movs	r0, r5
 800abec:	47b8      	blx	r7
 800abee:	0002      	movs	r2, r0
 800abf0:	1c43      	adds	r3, r0, #1
 800abf2:	d1c6      	bne.n	800ab82 <__sflush_r+0x36>
 800abf4:	682b      	ldr	r3, [r5, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d0c3      	beq.n	800ab82 <__sflush_r+0x36>
 800abfa:	2b1d      	cmp	r3, #29
 800abfc:	d001      	beq.n	800ac02 <__sflush_r+0xb6>
 800abfe:	2b16      	cmp	r3, #22
 800ac00:	d11a      	bne.n	800ac38 <__sflush_r+0xec>
 800ac02:	602e      	str	r6, [r5, #0]
 800ac04:	2000      	movs	r0, #0
 800ac06:	e01e      	b.n	800ac46 <__sflush_r+0xfa>
 800ac08:	690e      	ldr	r6, [r1, #16]
 800ac0a:	2e00      	cmp	r6, #0
 800ac0c:	d0fa      	beq.n	800ac04 <__sflush_r+0xb8>
 800ac0e:	680f      	ldr	r7, [r1, #0]
 800ac10:	600e      	str	r6, [r1, #0]
 800ac12:	1bba      	subs	r2, r7, r6
 800ac14:	9201      	str	r2, [sp, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	079b      	lsls	r3, r3, #30
 800ac1a:	d100      	bne.n	800ac1e <__sflush_r+0xd2>
 800ac1c:	694a      	ldr	r2, [r1, #20]
 800ac1e:	60a2      	str	r2, [r4, #8]
 800ac20:	9b01      	ldr	r3, [sp, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	ddee      	ble.n	800ac04 <__sflush_r+0xb8>
 800ac26:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ac28:	0032      	movs	r2, r6
 800ac2a:	001f      	movs	r7, r3
 800ac2c:	0028      	movs	r0, r5
 800ac2e:	9b01      	ldr	r3, [sp, #4]
 800ac30:	6a21      	ldr	r1, [r4, #32]
 800ac32:	47b8      	blx	r7
 800ac34:	2800      	cmp	r0, #0
 800ac36:	dc07      	bgt.n	800ac48 <__sflush_r+0xfc>
 800ac38:	89a2      	ldrh	r2, [r4, #12]
 800ac3a:	2340      	movs	r3, #64	@ 0x40
 800ac3c:	2001      	movs	r0, #1
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	b21b      	sxth	r3, r3
 800ac42:	81a3      	strh	r3, [r4, #12]
 800ac44:	4240      	negs	r0, r0
 800ac46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac48:	9b01      	ldr	r3, [sp, #4]
 800ac4a:	1836      	adds	r6, r6, r0
 800ac4c:	1a1b      	subs	r3, r3, r0
 800ac4e:	9301      	str	r3, [sp, #4]
 800ac50:	e7e6      	b.n	800ac20 <__sflush_r+0xd4>
 800ac52:	46c0      	nop			@ (mov r8, r8)
 800ac54:	dfbffffe 	.word	0xdfbffffe

0800ac58 <_fflush_r>:
 800ac58:	690b      	ldr	r3, [r1, #16]
 800ac5a:	b570      	push	{r4, r5, r6, lr}
 800ac5c:	0005      	movs	r5, r0
 800ac5e:	000c      	movs	r4, r1
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d102      	bne.n	800ac6a <_fflush_r+0x12>
 800ac64:	2500      	movs	r5, #0
 800ac66:	0028      	movs	r0, r5
 800ac68:	bd70      	pop	{r4, r5, r6, pc}
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d004      	beq.n	800ac78 <_fflush_r+0x20>
 800ac6e:	6a03      	ldr	r3, [r0, #32]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <_fflush_r+0x20>
 800ac74:	f7fe f99a 	bl	8008fac <__sinit>
 800ac78:	220c      	movs	r2, #12
 800ac7a:	5ea3      	ldrsh	r3, [r4, r2]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d0f1      	beq.n	800ac64 <_fflush_r+0xc>
 800ac80:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac82:	07d2      	lsls	r2, r2, #31
 800ac84:	d404      	bmi.n	800ac90 <_fflush_r+0x38>
 800ac86:	059b      	lsls	r3, r3, #22
 800ac88:	d402      	bmi.n	800ac90 <_fflush_r+0x38>
 800ac8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac8c:	f7fe fac7 	bl	800921e <__retarget_lock_acquire_recursive>
 800ac90:	0028      	movs	r0, r5
 800ac92:	0021      	movs	r1, r4
 800ac94:	f7ff ff5a 	bl	800ab4c <__sflush_r>
 800ac98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac9a:	0005      	movs	r5, r0
 800ac9c:	07db      	lsls	r3, r3, #31
 800ac9e:	d4e2      	bmi.n	800ac66 <_fflush_r+0xe>
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	059b      	lsls	r3, r3, #22
 800aca4:	d4df      	bmi.n	800ac66 <_fflush_r+0xe>
 800aca6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aca8:	f7fe faba 	bl	8009220 <__retarget_lock_release_recursive>
 800acac:	e7db      	b.n	800ac66 <_fflush_r+0xe>

0800acae <memmove>:
 800acae:	b510      	push	{r4, lr}
 800acb0:	4288      	cmp	r0, r1
 800acb2:	d806      	bhi.n	800acc2 <memmove+0x14>
 800acb4:	2300      	movs	r3, #0
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d008      	beq.n	800accc <memmove+0x1e>
 800acba:	5ccc      	ldrb	r4, [r1, r3]
 800acbc:	54c4      	strb	r4, [r0, r3]
 800acbe:	3301      	adds	r3, #1
 800acc0:	e7f9      	b.n	800acb6 <memmove+0x8>
 800acc2:	188b      	adds	r3, r1, r2
 800acc4:	4298      	cmp	r0, r3
 800acc6:	d2f5      	bcs.n	800acb4 <memmove+0x6>
 800acc8:	3a01      	subs	r2, #1
 800acca:	d200      	bcs.n	800acce <memmove+0x20>
 800accc:	bd10      	pop	{r4, pc}
 800acce:	5c8b      	ldrb	r3, [r1, r2]
 800acd0:	5483      	strb	r3, [r0, r2]
 800acd2:	e7f9      	b.n	800acc8 <memmove+0x1a>

0800acd4 <_sbrk_r>:
 800acd4:	2300      	movs	r3, #0
 800acd6:	b570      	push	{r4, r5, r6, lr}
 800acd8:	4d06      	ldr	r5, [pc, #24]	@ (800acf4 <_sbrk_r+0x20>)
 800acda:	0004      	movs	r4, r0
 800acdc:	0008      	movs	r0, r1
 800acde:	602b      	str	r3, [r5, #0]
 800ace0:	f7f9 f8ae 	bl	8003e40 <_sbrk>
 800ace4:	1c43      	adds	r3, r0, #1
 800ace6:	d103      	bne.n	800acf0 <_sbrk_r+0x1c>
 800ace8:	682b      	ldr	r3, [r5, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d000      	beq.n	800acf0 <_sbrk_r+0x1c>
 800acee:	6023      	str	r3, [r4, #0]
 800acf0:	bd70      	pop	{r4, r5, r6, pc}
 800acf2:	46c0      	nop			@ (mov r8, r8)
 800acf4:	20000534 	.word	0x20000534

0800acf8 <memcpy>:
 800acf8:	2300      	movs	r3, #0
 800acfa:	b510      	push	{r4, lr}
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d100      	bne.n	800ad02 <memcpy+0xa>
 800ad00:	bd10      	pop	{r4, pc}
 800ad02:	5ccc      	ldrb	r4, [r1, r3]
 800ad04:	54c4      	strb	r4, [r0, r3]
 800ad06:	3301      	adds	r3, #1
 800ad08:	e7f8      	b.n	800acfc <memcpy+0x4>
	...

0800ad0c <__assert_func>:
 800ad0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ad0e:	0014      	movs	r4, r2
 800ad10:	001a      	movs	r2, r3
 800ad12:	4b09      	ldr	r3, [pc, #36]	@ (800ad38 <__assert_func+0x2c>)
 800ad14:	0005      	movs	r5, r0
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	000e      	movs	r6, r1
 800ad1a:	68d8      	ldr	r0, [r3, #12]
 800ad1c:	4b07      	ldr	r3, [pc, #28]	@ (800ad3c <__assert_func+0x30>)
 800ad1e:	2c00      	cmp	r4, #0
 800ad20:	d101      	bne.n	800ad26 <__assert_func+0x1a>
 800ad22:	4b07      	ldr	r3, [pc, #28]	@ (800ad40 <__assert_func+0x34>)
 800ad24:	001c      	movs	r4, r3
 800ad26:	4907      	ldr	r1, [pc, #28]	@ (800ad44 <__assert_func+0x38>)
 800ad28:	9301      	str	r3, [sp, #4]
 800ad2a:	9402      	str	r4, [sp, #8]
 800ad2c:	002b      	movs	r3, r5
 800ad2e:	9600      	str	r6, [sp, #0]
 800ad30:	f000 f886 	bl	800ae40 <fiprintf>
 800ad34:	f000 f894 	bl	800ae60 <abort>
 800ad38:	20000018 	.word	0x20000018
 800ad3c:	0800bb6b 	.word	0x0800bb6b
 800ad40:	0800bba6 	.word	0x0800bba6
 800ad44:	0800bb78 	.word	0x0800bb78

0800ad48 <_calloc_r>:
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	0c0b      	lsrs	r3, r1, #16
 800ad4c:	0c15      	lsrs	r5, r2, #16
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d11e      	bne.n	800ad90 <_calloc_r+0x48>
 800ad52:	2d00      	cmp	r5, #0
 800ad54:	d10c      	bne.n	800ad70 <_calloc_r+0x28>
 800ad56:	b289      	uxth	r1, r1
 800ad58:	b294      	uxth	r4, r2
 800ad5a:	434c      	muls	r4, r1
 800ad5c:	0021      	movs	r1, r4
 800ad5e:	f7ff f963 	bl	800a028 <_malloc_r>
 800ad62:	1e05      	subs	r5, r0, #0
 800ad64:	d01a      	beq.n	800ad9c <_calloc_r+0x54>
 800ad66:	0022      	movs	r2, r4
 800ad68:	2100      	movs	r1, #0
 800ad6a:	f7fe f9d3 	bl	8009114 <memset>
 800ad6e:	e016      	b.n	800ad9e <_calloc_r+0x56>
 800ad70:	1c2b      	adds	r3, r5, #0
 800ad72:	1c0c      	adds	r4, r1, #0
 800ad74:	b289      	uxth	r1, r1
 800ad76:	b292      	uxth	r2, r2
 800ad78:	434a      	muls	r2, r1
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	b2a1      	uxth	r1, r4
 800ad7e:	4359      	muls	r1, r3
 800ad80:	0c14      	lsrs	r4, r2, #16
 800ad82:	190c      	adds	r4, r1, r4
 800ad84:	0c23      	lsrs	r3, r4, #16
 800ad86:	d107      	bne.n	800ad98 <_calloc_r+0x50>
 800ad88:	0424      	lsls	r4, r4, #16
 800ad8a:	b292      	uxth	r2, r2
 800ad8c:	4314      	orrs	r4, r2
 800ad8e:	e7e5      	b.n	800ad5c <_calloc_r+0x14>
 800ad90:	2d00      	cmp	r5, #0
 800ad92:	d101      	bne.n	800ad98 <_calloc_r+0x50>
 800ad94:	1c14      	adds	r4, r2, #0
 800ad96:	e7ed      	b.n	800ad74 <_calloc_r+0x2c>
 800ad98:	230c      	movs	r3, #12
 800ad9a:	6003      	str	r3, [r0, #0]
 800ad9c:	2500      	movs	r5, #0
 800ad9e:	0028      	movs	r0, r5
 800ada0:	bd70      	pop	{r4, r5, r6, pc}

0800ada2 <__ascii_mbtowc>:
 800ada2:	b082      	sub	sp, #8
 800ada4:	2900      	cmp	r1, #0
 800ada6:	d100      	bne.n	800adaa <__ascii_mbtowc+0x8>
 800ada8:	a901      	add	r1, sp, #4
 800adaa:	1e10      	subs	r0, r2, #0
 800adac:	d006      	beq.n	800adbc <__ascii_mbtowc+0x1a>
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d006      	beq.n	800adc0 <__ascii_mbtowc+0x1e>
 800adb2:	7813      	ldrb	r3, [r2, #0]
 800adb4:	600b      	str	r3, [r1, #0]
 800adb6:	7810      	ldrb	r0, [r2, #0]
 800adb8:	1e43      	subs	r3, r0, #1
 800adba:	4198      	sbcs	r0, r3
 800adbc:	b002      	add	sp, #8
 800adbe:	4770      	bx	lr
 800adc0:	2002      	movs	r0, #2
 800adc2:	4240      	negs	r0, r0
 800adc4:	e7fa      	b.n	800adbc <__ascii_mbtowc+0x1a>

0800adc6 <_realloc_r>:
 800adc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adc8:	0006      	movs	r6, r0
 800adca:	000c      	movs	r4, r1
 800adcc:	0015      	movs	r5, r2
 800adce:	2900      	cmp	r1, #0
 800add0:	d105      	bne.n	800adde <_realloc_r+0x18>
 800add2:	0011      	movs	r1, r2
 800add4:	f7ff f928 	bl	800a028 <_malloc_r>
 800add8:	0004      	movs	r4, r0
 800adda:	0020      	movs	r0, r4
 800addc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800adde:	2a00      	cmp	r2, #0
 800ade0:	d103      	bne.n	800adea <_realloc_r+0x24>
 800ade2:	f7ff f8ab 	bl	8009f3c <_free_r>
 800ade6:	2400      	movs	r4, #0
 800ade8:	e7f7      	b.n	800adda <_realloc_r+0x14>
 800adea:	f000 f840 	bl	800ae6e <_malloc_usable_size_r>
 800adee:	0007      	movs	r7, r0
 800adf0:	4285      	cmp	r5, r0
 800adf2:	d802      	bhi.n	800adfa <_realloc_r+0x34>
 800adf4:	0843      	lsrs	r3, r0, #1
 800adf6:	42ab      	cmp	r3, r5
 800adf8:	d3ef      	bcc.n	800adda <_realloc_r+0x14>
 800adfa:	0029      	movs	r1, r5
 800adfc:	0030      	movs	r0, r6
 800adfe:	f7ff f913 	bl	800a028 <_malloc_r>
 800ae02:	9001      	str	r0, [sp, #4]
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d0ee      	beq.n	800ade6 <_realloc_r+0x20>
 800ae08:	002a      	movs	r2, r5
 800ae0a:	42bd      	cmp	r5, r7
 800ae0c:	d900      	bls.n	800ae10 <_realloc_r+0x4a>
 800ae0e:	003a      	movs	r2, r7
 800ae10:	0021      	movs	r1, r4
 800ae12:	9801      	ldr	r0, [sp, #4]
 800ae14:	f7ff ff70 	bl	800acf8 <memcpy>
 800ae18:	0021      	movs	r1, r4
 800ae1a:	0030      	movs	r0, r6
 800ae1c:	f7ff f88e 	bl	8009f3c <_free_r>
 800ae20:	9c01      	ldr	r4, [sp, #4]
 800ae22:	e7da      	b.n	800adda <_realloc_r+0x14>

0800ae24 <__ascii_wctomb>:
 800ae24:	0003      	movs	r3, r0
 800ae26:	1e08      	subs	r0, r1, #0
 800ae28:	d005      	beq.n	800ae36 <__ascii_wctomb+0x12>
 800ae2a:	2aff      	cmp	r2, #255	@ 0xff
 800ae2c:	d904      	bls.n	800ae38 <__ascii_wctomb+0x14>
 800ae2e:	228a      	movs	r2, #138	@ 0x8a
 800ae30:	2001      	movs	r0, #1
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	4240      	negs	r0, r0
 800ae36:	4770      	bx	lr
 800ae38:	2001      	movs	r0, #1
 800ae3a:	700a      	strb	r2, [r1, #0]
 800ae3c:	e7fb      	b.n	800ae36 <__ascii_wctomb+0x12>
	...

0800ae40 <fiprintf>:
 800ae40:	b40e      	push	{r1, r2, r3}
 800ae42:	b517      	push	{r0, r1, r2, r4, lr}
 800ae44:	4c05      	ldr	r4, [pc, #20]	@ (800ae5c <fiprintf+0x1c>)
 800ae46:	ab05      	add	r3, sp, #20
 800ae48:	cb04      	ldmia	r3!, {r2}
 800ae4a:	0001      	movs	r1, r0
 800ae4c:	6820      	ldr	r0, [r4, #0]
 800ae4e:	9301      	str	r3, [sp, #4]
 800ae50:	f000 f83c 	bl	800aecc <_vfiprintf_r>
 800ae54:	bc1e      	pop	{r1, r2, r3, r4}
 800ae56:	bc08      	pop	{r3}
 800ae58:	b003      	add	sp, #12
 800ae5a:	4718      	bx	r3
 800ae5c:	20000018 	.word	0x20000018

0800ae60 <abort>:
 800ae60:	2006      	movs	r0, #6
 800ae62:	b510      	push	{r4, lr}
 800ae64:	f000 fa18 	bl	800b298 <raise>
 800ae68:	2001      	movs	r0, #1
 800ae6a:	f7f8 ff77 	bl	8003d5c <_exit>

0800ae6e <_malloc_usable_size_r>:
 800ae6e:	1f0b      	subs	r3, r1, #4
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	1f18      	subs	r0, r3, #4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	da01      	bge.n	800ae7c <_malloc_usable_size_r+0xe>
 800ae78:	580b      	ldr	r3, [r1, r0]
 800ae7a:	18c0      	adds	r0, r0, r3
 800ae7c:	4770      	bx	lr

0800ae7e <__sfputc_r>:
 800ae7e:	6893      	ldr	r3, [r2, #8]
 800ae80:	b510      	push	{r4, lr}
 800ae82:	3b01      	subs	r3, #1
 800ae84:	6093      	str	r3, [r2, #8]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	da04      	bge.n	800ae94 <__sfputc_r+0x16>
 800ae8a:	6994      	ldr	r4, [r2, #24]
 800ae8c:	42a3      	cmp	r3, r4
 800ae8e:	db07      	blt.n	800aea0 <__sfputc_r+0x22>
 800ae90:	290a      	cmp	r1, #10
 800ae92:	d005      	beq.n	800aea0 <__sfputc_r+0x22>
 800ae94:	6813      	ldr	r3, [r2, #0]
 800ae96:	1c58      	adds	r0, r3, #1
 800ae98:	6010      	str	r0, [r2, #0]
 800ae9a:	7019      	strb	r1, [r3, #0]
 800ae9c:	0008      	movs	r0, r1
 800ae9e:	bd10      	pop	{r4, pc}
 800aea0:	f000 f930 	bl	800b104 <__swbuf_r>
 800aea4:	0001      	movs	r1, r0
 800aea6:	e7f9      	b.n	800ae9c <__sfputc_r+0x1e>

0800aea8 <__sfputs_r>:
 800aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeaa:	0006      	movs	r6, r0
 800aeac:	000f      	movs	r7, r1
 800aeae:	0014      	movs	r4, r2
 800aeb0:	18d5      	adds	r5, r2, r3
 800aeb2:	42ac      	cmp	r4, r5
 800aeb4:	d101      	bne.n	800aeba <__sfputs_r+0x12>
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	e007      	b.n	800aeca <__sfputs_r+0x22>
 800aeba:	7821      	ldrb	r1, [r4, #0]
 800aebc:	003a      	movs	r2, r7
 800aebe:	0030      	movs	r0, r6
 800aec0:	f7ff ffdd 	bl	800ae7e <__sfputc_r>
 800aec4:	3401      	adds	r4, #1
 800aec6:	1c43      	adds	r3, r0, #1
 800aec8:	d1f3      	bne.n	800aeb2 <__sfputs_r+0xa>
 800aeca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aecc <_vfiprintf_r>:
 800aecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aece:	b0a1      	sub	sp, #132	@ 0x84
 800aed0:	000f      	movs	r7, r1
 800aed2:	0015      	movs	r5, r2
 800aed4:	001e      	movs	r6, r3
 800aed6:	9003      	str	r0, [sp, #12]
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d004      	beq.n	800aee6 <_vfiprintf_r+0x1a>
 800aedc:	6a03      	ldr	r3, [r0, #32]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <_vfiprintf_r+0x1a>
 800aee2:	f7fe f863 	bl	8008fac <__sinit>
 800aee6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aee8:	07db      	lsls	r3, r3, #31
 800aeea:	d405      	bmi.n	800aef8 <_vfiprintf_r+0x2c>
 800aeec:	89bb      	ldrh	r3, [r7, #12]
 800aeee:	059b      	lsls	r3, r3, #22
 800aef0:	d402      	bmi.n	800aef8 <_vfiprintf_r+0x2c>
 800aef2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800aef4:	f7fe f993 	bl	800921e <__retarget_lock_acquire_recursive>
 800aef8:	89bb      	ldrh	r3, [r7, #12]
 800aefa:	071b      	lsls	r3, r3, #28
 800aefc:	d502      	bpl.n	800af04 <_vfiprintf_r+0x38>
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d113      	bne.n	800af2c <_vfiprintf_r+0x60>
 800af04:	0039      	movs	r1, r7
 800af06:	9803      	ldr	r0, [sp, #12]
 800af08:	f000 f93e 	bl	800b188 <__swsetup_r>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d00d      	beq.n	800af2c <_vfiprintf_r+0x60>
 800af10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af12:	07db      	lsls	r3, r3, #31
 800af14:	d503      	bpl.n	800af1e <_vfiprintf_r+0x52>
 800af16:	2001      	movs	r0, #1
 800af18:	4240      	negs	r0, r0
 800af1a:	b021      	add	sp, #132	@ 0x84
 800af1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af1e:	89bb      	ldrh	r3, [r7, #12]
 800af20:	059b      	lsls	r3, r3, #22
 800af22:	d4f8      	bmi.n	800af16 <_vfiprintf_r+0x4a>
 800af24:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800af26:	f7fe f97b 	bl	8009220 <__retarget_lock_release_recursive>
 800af2a:	e7f4      	b.n	800af16 <_vfiprintf_r+0x4a>
 800af2c:	2300      	movs	r3, #0
 800af2e:	ac08      	add	r4, sp, #32
 800af30:	6163      	str	r3, [r4, #20]
 800af32:	3320      	adds	r3, #32
 800af34:	7663      	strb	r3, [r4, #25]
 800af36:	3310      	adds	r3, #16
 800af38:	76a3      	strb	r3, [r4, #26]
 800af3a:	9607      	str	r6, [sp, #28]
 800af3c:	002e      	movs	r6, r5
 800af3e:	7833      	ldrb	r3, [r6, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <_vfiprintf_r+0x7c>
 800af44:	2b25      	cmp	r3, #37	@ 0x25
 800af46:	d148      	bne.n	800afda <_vfiprintf_r+0x10e>
 800af48:	1b73      	subs	r3, r6, r5
 800af4a:	9305      	str	r3, [sp, #20]
 800af4c:	42ae      	cmp	r6, r5
 800af4e:	d00b      	beq.n	800af68 <_vfiprintf_r+0x9c>
 800af50:	002a      	movs	r2, r5
 800af52:	0039      	movs	r1, r7
 800af54:	9803      	ldr	r0, [sp, #12]
 800af56:	f7ff ffa7 	bl	800aea8 <__sfputs_r>
 800af5a:	3001      	adds	r0, #1
 800af5c:	d100      	bne.n	800af60 <_vfiprintf_r+0x94>
 800af5e:	e0ae      	b.n	800b0be <_vfiprintf_r+0x1f2>
 800af60:	6963      	ldr	r3, [r4, #20]
 800af62:	9a05      	ldr	r2, [sp, #20]
 800af64:	189b      	adds	r3, r3, r2
 800af66:	6163      	str	r3, [r4, #20]
 800af68:	7833      	ldrb	r3, [r6, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d100      	bne.n	800af70 <_vfiprintf_r+0xa4>
 800af6e:	e0a6      	b.n	800b0be <_vfiprintf_r+0x1f2>
 800af70:	2201      	movs	r2, #1
 800af72:	2300      	movs	r3, #0
 800af74:	4252      	negs	r2, r2
 800af76:	6062      	str	r2, [r4, #4]
 800af78:	a904      	add	r1, sp, #16
 800af7a:	3254      	adds	r2, #84	@ 0x54
 800af7c:	1852      	adds	r2, r2, r1
 800af7e:	1c75      	adds	r5, r6, #1
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	60e3      	str	r3, [r4, #12]
 800af84:	60a3      	str	r3, [r4, #8]
 800af86:	7013      	strb	r3, [r2, #0]
 800af88:	65a3      	str	r3, [r4, #88]	@ 0x58
 800af8a:	4b59      	ldr	r3, [pc, #356]	@ (800b0f0 <_vfiprintf_r+0x224>)
 800af8c:	2205      	movs	r2, #5
 800af8e:	0018      	movs	r0, r3
 800af90:	7829      	ldrb	r1, [r5, #0]
 800af92:	9305      	str	r3, [sp, #20]
 800af94:	f7fe f945 	bl	8009222 <memchr>
 800af98:	1c6e      	adds	r6, r5, #1
 800af9a:	2800      	cmp	r0, #0
 800af9c:	d11f      	bne.n	800afde <_vfiprintf_r+0x112>
 800af9e:	6822      	ldr	r2, [r4, #0]
 800afa0:	06d3      	lsls	r3, r2, #27
 800afa2:	d504      	bpl.n	800afae <_vfiprintf_r+0xe2>
 800afa4:	2353      	movs	r3, #83	@ 0x53
 800afa6:	a904      	add	r1, sp, #16
 800afa8:	185b      	adds	r3, r3, r1
 800afaa:	2120      	movs	r1, #32
 800afac:	7019      	strb	r1, [r3, #0]
 800afae:	0713      	lsls	r3, r2, #28
 800afb0:	d504      	bpl.n	800afbc <_vfiprintf_r+0xf0>
 800afb2:	2353      	movs	r3, #83	@ 0x53
 800afb4:	a904      	add	r1, sp, #16
 800afb6:	185b      	adds	r3, r3, r1
 800afb8:	212b      	movs	r1, #43	@ 0x2b
 800afba:	7019      	strb	r1, [r3, #0]
 800afbc:	782b      	ldrb	r3, [r5, #0]
 800afbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800afc0:	d016      	beq.n	800aff0 <_vfiprintf_r+0x124>
 800afc2:	002e      	movs	r6, r5
 800afc4:	2100      	movs	r1, #0
 800afc6:	200a      	movs	r0, #10
 800afc8:	68e3      	ldr	r3, [r4, #12]
 800afca:	7832      	ldrb	r2, [r6, #0]
 800afcc:	1c75      	adds	r5, r6, #1
 800afce:	3a30      	subs	r2, #48	@ 0x30
 800afd0:	2a09      	cmp	r2, #9
 800afd2:	d950      	bls.n	800b076 <_vfiprintf_r+0x1aa>
 800afd4:	2900      	cmp	r1, #0
 800afd6:	d111      	bne.n	800affc <_vfiprintf_r+0x130>
 800afd8:	e017      	b.n	800b00a <_vfiprintf_r+0x13e>
 800afda:	3601      	adds	r6, #1
 800afdc:	e7af      	b.n	800af3e <_vfiprintf_r+0x72>
 800afde:	9b05      	ldr	r3, [sp, #20]
 800afe0:	6822      	ldr	r2, [r4, #0]
 800afe2:	1ac0      	subs	r0, r0, r3
 800afe4:	2301      	movs	r3, #1
 800afe6:	4083      	lsls	r3, r0
 800afe8:	4313      	orrs	r3, r2
 800afea:	0035      	movs	r5, r6
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	e7cc      	b.n	800af8a <_vfiprintf_r+0xbe>
 800aff0:	9b07      	ldr	r3, [sp, #28]
 800aff2:	1d19      	adds	r1, r3, #4
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	9107      	str	r1, [sp, #28]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	db01      	blt.n	800b000 <_vfiprintf_r+0x134>
 800affc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800affe:	e004      	b.n	800b00a <_vfiprintf_r+0x13e>
 800b000:	425b      	negs	r3, r3
 800b002:	60e3      	str	r3, [r4, #12]
 800b004:	2302      	movs	r3, #2
 800b006:	4313      	orrs	r3, r2
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	7833      	ldrb	r3, [r6, #0]
 800b00c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b00e:	d10c      	bne.n	800b02a <_vfiprintf_r+0x15e>
 800b010:	7873      	ldrb	r3, [r6, #1]
 800b012:	2b2a      	cmp	r3, #42	@ 0x2a
 800b014:	d134      	bne.n	800b080 <_vfiprintf_r+0x1b4>
 800b016:	9b07      	ldr	r3, [sp, #28]
 800b018:	3602      	adds	r6, #2
 800b01a:	1d1a      	adds	r2, r3, #4
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	9207      	str	r2, [sp, #28]
 800b020:	2b00      	cmp	r3, #0
 800b022:	da01      	bge.n	800b028 <_vfiprintf_r+0x15c>
 800b024:	2301      	movs	r3, #1
 800b026:	425b      	negs	r3, r3
 800b028:	9309      	str	r3, [sp, #36]	@ 0x24
 800b02a:	4d32      	ldr	r5, [pc, #200]	@ (800b0f4 <_vfiprintf_r+0x228>)
 800b02c:	2203      	movs	r2, #3
 800b02e:	0028      	movs	r0, r5
 800b030:	7831      	ldrb	r1, [r6, #0]
 800b032:	f7fe f8f6 	bl	8009222 <memchr>
 800b036:	2800      	cmp	r0, #0
 800b038:	d006      	beq.n	800b048 <_vfiprintf_r+0x17c>
 800b03a:	2340      	movs	r3, #64	@ 0x40
 800b03c:	1b40      	subs	r0, r0, r5
 800b03e:	4083      	lsls	r3, r0
 800b040:	6822      	ldr	r2, [r4, #0]
 800b042:	3601      	adds	r6, #1
 800b044:	4313      	orrs	r3, r2
 800b046:	6023      	str	r3, [r4, #0]
 800b048:	7831      	ldrb	r1, [r6, #0]
 800b04a:	2206      	movs	r2, #6
 800b04c:	482a      	ldr	r0, [pc, #168]	@ (800b0f8 <_vfiprintf_r+0x22c>)
 800b04e:	1c75      	adds	r5, r6, #1
 800b050:	7621      	strb	r1, [r4, #24]
 800b052:	f7fe f8e6 	bl	8009222 <memchr>
 800b056:	2800      	cmp	r0, #0
 800b058:	d040      	beq.n	800b0dc <_vfiprintf_r+0x210>
 800b05a:	4b28      	ldr	r3, [pc, #160]	@ (800b0fc <_vfiprintf_r+0x230>)
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d122      	bne.n	800b0a6 <_vfiprintf_r+0x1da>
 800b060:	2207      	movs	r2, #7
 800b062:	9b07      	ldr	r3, [sp, #28]
 800b064:	3307      	adds	r3, #7
 800b066:	4393      	bics	r3, r2
 800b068:	3308      	adds	r3, #8
 800b06a:	9307      	str	r3, [sp, #28]
 800b06c:	6963      	ldr	r3, [r4, #20]
 800b06e:	9a04      	ldr	r2, [sp, #16]
 800b070:	189b      	adds	r3, r3, r2
 800b072:	6163      	str	r3, [r4, #20]
 800b074:	e762      	b.n	800af3c <_vfiprintf_r+0x70>
 800b076:	4343      	muls	r3, r0
 800b078:	002e      	movs	r6, r5
 800b07a:	2101      	movs	r1, #1
 800b07c:	189b      	adds	r3, r3, r2
 800b07e:	e7a4      	b.n	800afca <_vfiprintf_r+0xfe>
 800b080:	2300      	movs	r3, #0
 800b082:	200a      	movs	r0, #10
 800b084:	0019      	movs	r1, r3
 800b086:	3601      	adds	r6, #1
 800b088:	6063      	str	r3, [r4, #4]
 800b08a:	7832      	ldrb	r2, [r6, #0]
 800b08c:	1c75      	adds	r5, r6, #1
 800b08e:	3a30      	subs	r2, #48	@ 0x30
 800b090:	2a09      	cmp	r2, #9
 800b092:	d903      	bls.n	800b09c <_vfiprintf_r+0x1d0>
 800b094:	2b00      	cmp	r3, #0
 800b096:	d0c8      	beq.n	800b02a <_vfiprintf_r+0x15e>
 800b098:	9109      	str	r1, [sp, #36]	@ 0x24
 800b09a:	e7c6      	b.n	800b02a <_vfiprintf_r+0x15e>
 800b09c:	4341      	muls	r1, r0
 800b09e:	002e      	movs	r6, r5
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	1889      	adds	r1, r1, r2
 800b0a4:	e7f1      	b.n	800b08a <_vfiprintf_r+0x1be>
 800b0a6:	aa07      	add	r2, sp, #28
 800b0a8:	9200      	str	r2, [sp, #0]
 800b0aa:	0021      	movs	r1, r4
 800b0ac:	003a      	movs	r2, r7
 800b0ae:	4b14      	ldr	r3, [pc, #80]	@ (800b100 <_vfiprintf_r+0x234>)
 800b0b0:	9803      	ldr	r0, [sp, #12]
 800b0b2:	f7fd fb2f 	bl	8008714 <_printf_float>
 800b0b6:	9004      	str	r0, [sp, #16]
 800b0b8:	9b04      	ldr	r3, [sp, #16]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	d1d6      	bne.n	800b06c <_vfiprintf_r+0x1a0>
 800b0be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0c0:	07db      	lsls	r3, r3, #31
 800b0c2:	d405      	bmi.n	800b0d0 <_vfiprintf_r+0x204>
 800b0c4:	89bb      	ldrh	r3, [r7, #12]
 800b0c6:	059b      	lsls	r3, r3, #22
 800b0c8:	d402      	bmi.n	800b0d0 <_vfiprintf_r+0x204>
 800b0ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b0cc:	f7fe f8a8 	bl	8009220 <__retarget_lock_release_recursive>
 800b0d0:	89bb      	ldrh	r3, [r7, #12]
 800b0d2:	065b      	lsls	r3, r3, #25
 800b0d4:	d500      	bpl.n	800b0d8 <_vfiprintf_r+0x20c>
 800b0d6:	e71e      	b.n	800af16 <_vfiprintf_r+0x4a>
 800b0d8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b0da:	e71e      	b.n	800af1a <_vfiprintf_r+0x4e>
 800b0dc:	aa07      	add	r2, sp, #28
 800b0de:	9200      	str	r2, [sp, #0]
 800b0e0:	0021      	movs	r1, r4
 800b0e2:	003a      	movs	r2, r7
 800b0e4:	4b06      	ldr	r3, [pc, #24]	@ (800b100 <_vfiprintf_r+0x234>)
 800b0e6:	9803      	ldr	r0, [sp, #12]
 800b0e8:	f7fd fdc2 	bl	8008c70 <_printf_i>
 800b0ec:	e7e3      	b.n	800b0b6 <_vfiprintf_r+0x1ea>
 800b0ee:	46c0      	nop			@ (mov r8, r8)
 800b0f0:	0800bb50 	.word	0x0800bb50
 800b0f4:	0800bb56 	.word	0x0800bb56
 800b0f8:	0800bb5a 	.word	0x0800bb5a
 800b0fc:	08008715 	.word	0x08008715
 800b100:	0800aea9 	.word	0x0800aea9

0800b104 <__swbuf_r>:
 800b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b106:	0006      	movs	r6, r0
 800b108:	000d      	movs	r5, r1
 800b10a:	0014      	movs	r4, r2
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d004      	beq.n	800b11a <__swbuf_r+0x16>
 800b110:	6a03      	ldr	r3, [r0, #32]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <__swbuf_r+0x16>
 800b116:	f7fd ff49 	bl	8008fac <__sinit>
 800b11a:	69a3      	ldr	r3, [r4, #24]
 800b11c:	60a3      	str	r3, [r4, #8]
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	071b      	lsls	r3, r3, #28
 800b122:	d502      	bpl.n	800b12a <__swbuf_r+0x26>
 800b124:	6923      	ldr	r3, [r4, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d109      	bne.n	800b13e <__swbuf_r+0x3a>
 800b12a:	0021      	movs	r1, r4
 800b12c:	0030      	movs	r0, r6
 800b12e:	f000 f82b 	bl	800b188 <__swsetup_r>
 800b132:	2800      	cmp	r0, #0
 800b134:	d003      	beq.n	800b13e <__swbuf_r+0x3a>
 800b136:	2501      	movs	r5, #1
 800b138:	426d      	negs	r5, r5
 800b13a:	0028      	movs	r0, r5
 800b13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b13e:	6923      	ldr	r3, [r4, #16]
 800b140:	6820      	ldr	r0, [r4, #0]
 800b142:	b2ef      	uxtb	r7, r5
 800b144:	1ac0      	subs	r0, r0, r3
 800b146:	6963      	ldr	r3, [r4, #20]
 800b148:	b2ed      	uxtb	r5, r5
 800b14a:	4283      	cmp	r3, r0
 800b14c:	dc05      	bgt.n	800b15a <__swbuf_r+0x56>
 800b14e:	0021      	movs	r1, r4
 800b150:	0030      	movs	r0, r6
 800b152:	f7ff fd81 	bl	800ac58 <_fflush_r>
 800b156:	2800      	cmp	r0, #0
 800b158:	d1ed      	bne.n	800b136 <__swbuf_r+0x32>
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	3001      	adds	r0, #1
 800b15e:	3b01      	subs	r3, #1
 800b160:	60a3      	str	r3, [r4, #8]
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	1c5a      	adds	r2, r3, #1
 800b166:	6022      	str	r2, [r4, #0]
 800b168:	701f      	strb	r7, [r3, #0]
 800b16a:	6963      	ldr	r3, [r4, #20]
 800b16c:	4283      	cmp	r3, r0
 800b16e:	d004      	beq.n	800b17a <__swbuf_r+0x76>
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	07db      	lsls	r3, r3, #31
 800b174:	d5e1      	bpl.n	800b13a <__swbuf_r+0x36>
 800b176:	2d0a      	cmp	r5, #10
 800b178:	d1df      	bne.n	800b13a <__swbuf_r+0x36>
 800b17a:	0021      	movs	r1, r4
 800b17c:	0030      	movs	r0, r6
 800b17e:	f7ff fd6b 	bl	800ac58 <_fflush_r>
 800b182:	2800      	cmp	r0, #0
 800b184:	d0d9      	beq.n	800b13a <__swbuf_r+0x36>
 800b186:	e7d6      	b.n	800b136 <__swbuf_r+0x32>

0800b188 <__swsetup_r>:
 800b188:	4b2d      	ldr	r3, [pc, #180]	@ (800b240 <__swsetup_r+0xb8>)
 800b18a:	b570      	push	{r4, r5, r6, lr}
 800b18c:	0005      	movs	r5, r0
 800b18e:	6818      	ldr	r0, [r3, #0]
 800b190:	000c      	movs	r4, r1
 800b192:	2800      	cmp	r0, #0
 800b194:	d004      	beq.n	800b1a0 <__swsetup_r+0x18>
 800b196:	6a03      	ldr	r3, [r0, #32]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <__swsetup_r+0x18>
 800b19c:	f7fd ff06 	bl	8008fac <__sinit>
 800b1a0:	230c      	movs	r3, #12
 800b1a2:	5ee2      	ldrsh	r2, [r4, r3]
 800b1a4:	0713      	lsls	r3, r2, #28
 800b1a6:	d423      	bmi.n	800b1f0 <__swsetup_r+0x68>
 800b1a8:	06d3      	lsls	r3, r2, #27
 800b1aa:	d407      	bmi.n	800b1bc <__swsetup_r+0x34>
 800b1ac:	2309      	movs	r3, #9
 800b1ae:	602b      	str	r3, [r5, #0]
 800b1b0:	2340      	movs	r3, #64	@ 0x40
 800b1b2:	2001      	movs	r0, #1
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	81a3      	strh	r3, [r4, #12]
 800b1b8:	4240      	negs	r0, r0
 800b1ba:	e03a      	b.n	800b232 <__swsetup_r+0xaa>
 800b1bc:	0752      	lsls	r2, r2, #29
 800b1be:	d513      	bpl.n	800b1e8 <__swsetup_r+0x60>
 800b1c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1c2:	2900      	cmp	r1, #0
 800b1c4:	d008      	beq.n	800b1d8 <__swsetup_r+0x50>
 800b1c6:	0023      	movs	r3, r4
 800b1c8:	3344      	adds	r3, #68	@ 0x44
 800b1ca:	4299      	cmp	r1, r3
 800b1cc:	d002      	beq.n	800b1d4 <__swsetup_r+0x4c>
 800b1ce:	0028      	movs	r0, r5
 800b1d0:	f7fe feb4 	bl	8009f3c <_free_r>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1d8:	2224      	movs	r2, #36	@ 0x24
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	4393      	bics	r3, r2
 800b1de:	81a3      	strh	r3, [r4, #12]
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	6063      	str	r3, [r4, #4]
 800b1e4:	6923      	ldr	r3, [r4, #16]
 800b1e6:	6023      	str	r3, [r4, #0]
 800b1e8:	2308      	movs	r3, #8
 800b1ea:	89a2      	ldrh	r2, [r4, #12]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	81a3      	strh	r3, [r4, #12]
 800b1f0:	6923      	ldr	r3, [r4, #16]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10b      	bne.n	800b20e <__swsetup_r+0x86>
 800b1f6:	21a0      	movs	r1, #160	@ 0xa0
 800b1f8:	2280      	movs	r2, #128	@ 0x80
 800b1fa:	89a3      	ldrh	r3, [r4, #12]
 800b1fc:	0089      	lsls	r1, r1, #2
 800b1fe:	0092      	lsls	r2, r2, #2
 800b200:	400b      	ands	r3, r1
 800b202:	4293      	cmp	r3, r2
 800b204:	d003      	beq.n	800b20e <__swsetup_r+0x86>
 800b206:	0021      	movs	r1, r4
 800b208:	0028      	movs	r0, r5
 800b20a:	f000 f88f 	bl	800b32c <__smakebuf_r>
 800b20e:	230c      	movs	r3, #12
 800b210:	5ee2      	ldrsh	r2, [r4, r3]
 800b212:	2101      	movs	r1, #1
 800b214:	0013      	movs	r3, r2
 800b216:	400b      	ands	r3, r1
 800b218:	420a      	tst	r2, r1
 800b21a:	d00b      	beq.n	800b234 <__swsetup_r+0xac>
 800b21c:	2300      	movs	r3, #0
 800b21e:	60a3      	str	r3, [r4, #8]
 800b220:	6963      	ldr	r3, [r4, #20]
 800b222:	425b      	negs	r3, r3
 800b224:	61a3      	str	r3, [r4, #24]
 800b226:	2000      	movs	r0, #0
 800b228:	6923      	ldr	r3, [r4, #16]
 800b22a:	4283      	cmp	r3, r0
 800b22c:	d101      	bne.n	800b232 <__swsetup_r+0xaa>
 800b22e:	0613      	lsls	r3, r2, #24
 800b230:	d4be      	bmi.n	800b1b0 <__swsetup_r+0x28>
 800b232:	bd70      	pop	{r4, r5, r6, pc}
 800b234:	0791      	lsls	r1, r2, #30
 800b236:	d400      	bmi.n	800b23a <__swsetup_r+0xb2>
 800b238:	6963      	ldr	r3, [r4, #20]
 800b23a:	60a3      	str	r3, [r4, #8]
 800b23c:	e7f3      	b.n	800b226 <__swsetup_r+0x9e>
 800b23e:	46c0      	nop			@ (mov r8, r8)
 800b240:	20000018 	.word	0x20000018

0800b244 <_raise_r>:
 800b244:	b570      	push	{r4, r5, r6, lr}
 800b246:	0004      	movs	r4, r0
 800b248:	000d      	movs	r5, r1
 800b24a:	291f      	cmp	r1, #31
 800b24c:	d904      	bls.n	800b258 <_raise_r+0x14>
 800b24e:	2316      	movs	r3, #22
 800b250:	6003      	str	r3, [r0, #0]
 800b252:	2001      	movs	r0, #1
 800b254:	4240      	negs	r0, r0
 800b256:	bd70      	pop	{r4, r5, r6, pc}
 800b258:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d004      	beq.n	800b268 <_raise_r+0x24>
 800b25e:	008a      	lsls	r2, r1, #2
 800b260:	189b      	adds	r3, r3, r2
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	2a00      	cmp	r2, #0
 800b266:	d108      	bne.n	800b27a <_raise_r+0x36>
 800b268:	0020      	movs	r0, r4
 800b26a:	f000 f831 	bl	800b2d0 <_getpid_r>
 800b26e:	002a      	movs	r2, r5
 800b270:	0001      	movs	r1, r0
 800b272:	0020      	movs	r0, r4
 800b274:	f000 f81a 	bl	800b2ac <_kill_r>
 800b278:	e7ed      	b.n	800b256 <_raise_r+0x12>
 800b27a:	2a01      	cmp	r2, #1
 800b27c:	d009      	beq.n	800b292 <_raise_r+0x4e>
 800b27e:	1c51      	adds	r1, r2, #1
 800b280:	d103      	bne.n	800b28a <_raise_r+0x46>
 800b282:	2316      	movs	r3, #22
 800b284:	6003      	str	r3, [r0, #0]
 800b286:	2001      	movs	r0, #1
 800b288:	e7e5      	b.n	800b256 <_raise_r+0x12>
 800b28a:	2100      	movs	r1, #0
 800b28c:	0028      	movs	r0, r5
 800b28e:	6019      	str	r1, [r3, #0]
 800b290:	4790      	blx	r2
 800b292:	2000      	movs	r0, #0
 800b294:	e7df      	b.n	800b256 <_raise_r+0x12>
	...

0800b298 <raise>:
 800b298:	b510      	push	{r4, lr}
 800b29a:	4b03      	ldr	r3, [pc, #12]	@ (800b2a8 <raise+0x10>)
 800b29c:	0001      	movs	r1, r0
 800b29e:	6818      	ldr	r0, [r3, #0]
 800b2a0:	f7ff ffd0 	bl	800b244 <_raise_r>
 800b2a4:	bd10      	pop	{r4, pc}
 800b2a6:	46c0      	nop			@ (mov r8, r8)
 800b2a8:	20000018 	.word	0x20000018

0800b2ac <_kill_r>:
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	b570      	push	{r4, r5, r6, lr}
 800b2b0:	4d06      	ldr	r5, [pc, #24]	@ (800b2cc <_kill_r+0x20>)
 800b2b2:	0004      	movs	r4, r0
 800b2b4:	0008      	movs	r0, r1
 800b2b6:	0011      	movs	r1, r2
 800b2b8:	602b      	str	r3, [r5, #0]
 800b2ba:	f7f8 fd3f 	bl	8003d3c <_kill>
 800b2be:	1c43      	adds	r3, r0, #1
 800b2c0:	d103      	bne.n	800b2ca <_kill_r+0x1e>
 800b2c2:	682b      	ldr	r3, [r5, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d000      	beq.n	800b2ca <_kill_r+0x1e>
 800b2c8:	6023      	str	r3, [r4, #0]
 800b2ca:	bd70      	pop	{r4, r5, r6, pc}
 800b2cc:	20000534 	.word	0x20000534

0800b2d0 <_getpid_r>:
 800b2d0:	b510      	push	{r4, lr}
 800b2d2:	f7f8 fd2d 	bl	8003d30 <_getpid>
 800b2d6:	bd10      	pop	{r4, pc}

0800b2d8 <__swhatbuf_r>:
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	000e      	movs	r6, r1
 800b2dc:	001d      	movs	r5, r3
 800b2de:	230e      	movs	r3, #14
 800b2e0:	5ec9      	ldrsh	r1, [r1, r3]
 800b2e2:	0014      	movs	r4, r2
 800b2e4:	b096      	sub	sp, #88	@ 0x58
 800b2e6:	2900      	cmp	r1, #0
 800b2e8:	da0c      	bge.n	800b304 <__swhatbuf_r+0x2c>
 800b2ea:	89b2      	ldrh	r2, [r6, #12]
 800b2ec:	2380      	movs	r3, #128	@ 0x80
 800b2ee:	0011      	movs	r1, r2
 800b2f0:	4019      	ands	r1, r3
 800b2f2:	421a      	tst	r2, r3
 800b2f4:	d114      	bne.n	800b320 <__swhatbuf_r+0x48>
 800b2f6:	2380      	movs	r3, #128	@ 0x80
 800b2f8:	00db      	lsls	r3, r3, #3
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	6029      	str	r1, [r5, #0]
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	b016      	add	sp, #88	@ 0x58
 800b302:	bd70      	pop	{r4, r5, r6, pc}
 800b304:	466a      	mov	r2, sp
 800b306:	f000 f853 	bl	800b3b0 <_fstat_r>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	dbed      	blt.n	800b2ea <__swhatbuf_r+0x12>
 800b30e:	23f0      	movs	r3, #240	@ 0xf0
 800b310:	9901      	ldr	r1, [sp, #4]
 800b312:	021b      	lsls	r3, r3, #8
 800b314:	4019      	ands	r1, r3
 800b316:	4b04      	ldr	r3, [pc, #16]	@ (800b328 <__swhatbuf_r+0x50>)
 800b318:	18c9      	adds	r1, r1, r3
 800b31a:	424b      	negs	r3, r1
 800b31c:	4159      	adcs	r1, r3
 800b31e:	e7ea      	b.n	800b2f6 <__swhatbuf_r+0x1e>
 800b320:	2100      	movs	r1, #0
 800b322:	2340      	movs	r3, #64	@ 0x40
 800b324:	e7e9      	b.n	800b2fa <__swhatbuf_r+0x22>
 800b326:	46c0      	nop			@ (mov r8, r8)
 800b328:	ffffe000 	.word	0xffffe000

0800b32c <__smakebuf_r>:
 800b32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b32e:	2602      	movs	r6, #2
 800b330:	898b      	ldrh	r3, [r1, #12]
 800b332:	0005      	movs	r5, r0
 800b334:	000c      	movs	r4, r1
 800b336:	b085      	sub	sp, #20
 800b338:	4233      	tst	r3, r6
 800b33a:	d007      	beq.n	800b34c <__smakebuf_r+0x20>
 800b33c:	0023      	movs	r3, r4
 800b33e:	3347      	adds	r3, #71	@ 0x47
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	6123      	str	r3, [r4, #16]
 800b344:	2301      	movs	r3, #1
 800b346:	6163      	str	r3, [r4, #20]
 800b348:	b005      	add	sp, #20
 800b34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b34c:	ab03      	add	r3, sp, #12
 800b34e:	aa02      	add	r2, sp, #8
 800b350:	f7ff ffc2 	bl	800b2d8 <__swhatbuf_r>
 800b354:	9f02      	ldr	r7, [sp, #8]
 800b356:	9001      	str	r0, [sp, #4]
 800b358:	0039      	movs	r1, r7
 800b35a:	0028      	movs	r0, r5
 800b35c:	f7fe fe64 	bl	800a028 <_malloc_r>
 800b360:	2800      	cmp	r0, #0
 800b362:	d108      	bne.n	800b376 <__smakebuf_r+0x4a>
 800b364:	220c      	movs	r2, #12
 800b366:	5ea3      	ldrsh	r3, [r4, r2]
 800b368:	059a      	lsls	r2, r3, #22
 800b36a:	d4ed      	bmi.n	800b348 <__smakebuf_r+0x1c>
 800b36c:	2203      	movs	r2, #3
 800b36e:	4393      	bics	r3, r2
 800b370:	431e      	orrs	r6, r3
 800b372:	81a6      	strh	r6, [r4, #12]
 800b374:	e7e2      	b.n	800b33c <__smakebuf_r+0x10>
 800b376:	2380      	movs	r3, #128	@ 0x80
 800b378:	89a2      	ldrh	r2, [r4, #12]
 800b37a:	6020      	str	r0, [r4, #0]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	81a3      	strh	r3, [r4, #12]
 800b380:	9b03      	ldr	r3, [sp, #12]
 800b382:	6120      	str	r0, [r4, #16]
 800b384:	6167      	str	r7, [r4, #20]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00c      	beq.n	800b3a4 <__smakebuf_r+0x78>
 800b38a:	0028      	movs	r0, r5
 800b38c:	230e      	movs	r3, #14
 800b38e:	5ee1      	ldrsh	r1, [r4, r3]
 800b390:	f000 f820 	bl	800b3d4 <_isatty_r>
 800b394:	2800      	cmp	r0, #0
 800b396:	d005      	beq.n	800b3a4 <__smakebuf_r+0x78>
 800b398:	2303      	movs	r3, #3
 800b39a:	89a2      	ldrh	r2, [r4, #12]
 800b39c:	439a      	bics	r2, r3
 800b39e:	3b02      	subs	r3, #2
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	81a3      	strh	r3, [r4, #12]
 800b3a4:	89a3      	ldrh	r3, [r4, #12]
 800b3a6:	9a01      	ldr	r2, [sp, #4]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	81a3      	strh	r3, [r4, #12]
 800b3ac:	e7cc      	b.n	800b348 <__smakebuf_r+0x1c>
	...

0800b3b0 <_fstat_r>:
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	b570      	push	{r4, r5, r6, lr}
 800b3b4:	4d06      	ldr	r5, [pc, #24]	@ (800b3d0 <_fstat_r+0x20>)
 800b3b6:	0004      	movs	r4, r0
 800b3b8:	0008      	movs	r0, r1
 800b3ba:	0011      	movs	r1, r2
 800b3bc:	602b      	str	r3, [r5, #0]
 800b3be:	f7f8 fd1d 	bl	8003dfc <_fstat>
 800b3c2:	1c43      	adds	r3, r0, #1
 800b3c4:	d103      	bne.n	800b3ce <_fstat_r+0x1e>
 800b3c6:	682b      	ldr	r3, [r5, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d000      	beq.n	800b3ce <_fstat_r+0x1e>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd70      	pop	{r4, r5, r6, pc}
 800b3d0:	20000534 	.word	0x20000534

0800b3d4 <_isatty_r>:
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	b570      	push	{r4, r5, r6, lr}
 800b3d8:	4d06      	ldr	r5, [pc, #24]	@ (800b3f4 <_isatty_r+0x20>)
 800b3da:	0004      	movs	r4, r0
 800b3dc:	0008      	movs	r0, r1
 800b3de:	602b      	str	r3, [r5, #0]
 800b3e0:	f7f8 fd1a 	bl	8003e18 <_isatty>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d103      	bne.n	800b3f0 <_isatty_r+0x1c>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d000      	beq.n	800b3f0 <_isatty_r+0x1c>
 800b3ee:	6023      	str	r3, [r4, #0]
 800b3f0:	bd70      	pop	{r4, r5, r6, pc}
 800b3f2:	46c0      	nop			@ (mov r8, r8)
 800b3f4:	20000534 	.word	0x20000534

0800b3f8 <log>:
 800b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fa:	0004      	movs	r4, r0
 800b3fc:	000d      	movs	r5, r1
 800b3fe:	f000 f837 	bl	800b470 <__ieee754_log>
 800b402:	0022      	movs	r2, r4
 800b404:	0006      	movs	r6, r0
 800b406:	000f      	movs	r7, r1
 800b408:	002b      	movs	r3, r5
 800b40a:	0020      	movs	r0, r4
 800b40c:	0029      	movs	r1, r5
 800b40e:	f7f7 fd0f 	bl	8002e30 <__aeabi_dcmpun>
 800b412:	2800      	cmp	r0, #0
 800b414:	d115      	bne.n	800b442 <log+0x4a>
 800b416:	2200      	movs	r2, #0
 800b418:	2300      	movs	r3, #0
 800b41a:	0020      	movs	r0, r4
 800b41c:	0029      	movs	r1, r5
 800b41e:	f7f5 f82d 	bl	800047c <__aeabi_dcmpgt>
 800b422:	2800      	cmp	r0, #0
 800b424:	d10d      	bne.n	800b442 <log+0x4a>
 800b426:	2200      	movs	r2, #0
 800b428:	2300      	movs	r3, #0
 800b42a:	0020      	movs	r0, r4
 800b42c:	0029      	movs	r1, r5
 800b42e:	f7f5 f80b 	bl	8000448 <__aeabi_dcmpeq>
 800b432:	2800      	cmp	r0, #0
 800b434:	d008      	beq.n	800b448 <log+0x50>
 800b436:	f7fd fec7 	bl	80091c8 <__errno>
 800b43a:	2322      	movs	r3, #34	@ 0x22
 800b43c:	2600      	movs	r6, #0
 800b43e:	4f07      	ldr	r7, [pc, #28]	@ (800b45c <log+0x64>)
 800b440:	6003      	str	r3, [r0, #0]
 800b442:	0030      	movs	r0, r6
 800b444:	0039      	movs	r1, r7
 800b446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b448:	f7fd febe 	bl	80091c8 <__errno>
 800b44c:	2321      	movs	r3, #33	@ 0x21
 800b44e:	6003      	str	r3, [r0, #0]
 800b450:	4803      	ldr	r0, [pc, #12]	@ (800b460 <log+0x68>)
 800b452:	f000 f807 	bl	800b464 <nan>
 800b456:	0006      	movs	r6, r0
 800b458:	000f      	movs	r7, r1
 800b45a:	e7f2      	b.n	800b442 <log+0x4a>
 800b45c:	fff00000 	.word	0xfff00000
 800b460:	0800bba6 	.word	0x0800bba6

0800b464 <nan>:
 800b464:	2000      	movs	r0, #0
 800b466:	4901      	ldr	r1, [pc, #4]	@ (800b46c <nan+0x8>)
 800b468:	4770      	bx	lr
 800b46a:	46c0      	nop			@ (mov r8, r8)
 800b46c:	7ff80000 	.word	0x7ff80000

0800b470 <__ieee754_log>:
 800b470:	2380      	movs	r3, #128	@ 0x80
 800b472:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b474:	035b      	lsls	r3, r3, #13
 800b476:	000e      	movs	r6, r1
 800b478:	b08d      	sub	sp, #52	@ 0x34
 800b47a:	4299      	cmp	r1, r3
 800b47c:	da23      	bge.n	800b4c6 <__ieee754_log+0x56>
 800b47e:	004b      	lsls	r3, r1, #1
 800b480:	085b      	lsrs	r3, r3, #1
 800b482:	4303      	orrs	r3, r0
 800b484:	d107      	bne.n	800b496 <__ieee754_log+0x26>
 800b486:	2200      	movs	r2, #0
 800b488:	2300      	movs	r3, #0
 800b48a:	2000      	movs	r0, #0
 800b48c:	49b4      	ldr	r1, [pc, #720]	@ (800b760 <__ieee754_log+0x2f0>)
 800b48e:	f7f6 fa27 	bl	80018e0 <__aeabi_ddiv>
 800b492:	b00d      	add	sp, #52	@ 0x34
 800b494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b496:	2900      	cmp	r1, #0
 800b498:	da06      	bge.n	800b4a8 <__ieee754_log+0x38>
 800b49a:	0002      	movs	r2, r0
 800b49c:	000b      	movs	r3, r1
 800b49e:	f7f7 f92b 	bl	80026f8 <__aeabi_dsub>
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	e7f2      	b.n	800b48e <__ieee754_log+0x1e>
 800b4a8:	4bae      	ldr	r3, [pc, #696]	@ (800b764 <__ieee754_log+0x2f4>)
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f7f6 fe5c 	bl	8002168 <__aeabi_dmul>
 800b4b0:	2336      	movs	r3, #54	@ 0x36
 800b4b2:	000e      	movs	r6, r1
 800b4b4:	425b      	negs	r3, r3
 800b4b6:	4aac      	ldr	r2, [pc, #688]	@ (800b768 <__ieee754_log+0x2f8>)
 800b4b8:	4296      	cmp	r6, r2
 800b4ba:	dd06      	ble.n	800b4ca <__ieee754_log+0x5a>
 800b4bc:	0002      	movs	r2, r0
 800b4be:	000b      	movs	r3, r1
 800b4c0:	f7f5 feaa 	bl	8001218 <__aeabi_dadd>
 800b4c4:	e7e5      	b.n	800b492 <__ieee754_log+0x22>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	e7f5      	b.n	800b4b6 <__ieee754_log+0x46>
 800b4ca:	4ca8      	ldr	r4, [pc, #672]	@ (800b76c <__ieee754_log+0x2fc>)
 800b4cc:	1532      	asrs	r2, r6, #20
 800b4ce:	1912      	adds	r2, r2, r4
 800b4d0:	0336      	lsls	r6, r6, #12
 800b4d2:	4ca7      	ldr	r4, [pc, #668]	@ (800b770 <__ieee754_log+0x300>)
 800b4d4:	18d2      	adds	r2, r2, r3
 800b4d6:	0b33      	lsrs	r3, r6, #12
 800b4d8:	9302      	str	r3, [sp, #8]
 800b4da:	191b      	adds	r3, r3, r4
 800b4dc:	2480      	movs	r4, #128	@ 0x80
 800b4de:	0364      	lsls	r4, r4, #13
 800b4e0:	4023      	ands	r3, r4
 800b4e2:	4ca4      	ldr	r4, [pc, #656]	@ (800b774 <__ieee754_log+0x304>)
 800b4e4:	9d02      	ldr	r5, [sp, #8]
 800b4e6:	405c      	eors	r4, r3
 800b4e8:	151b      	asrs	r3, r3, #20
 800b4ea:	189b      	adds	r3, r3, r2
 800b4ec:	4325      	orrs	r5, r4
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	0029      	movs	r1, r5
 800b4f4:	4b9f      	ldr	r3, [pc, #636]	@ (800b774 <__ieee754_log+0x304>)
 800b4f6:	f7f7 f8ff 	bl	80026f8 <__aeabi_dsub>
 800b4fa:	9b02      	ldr	r3, [sp, #8]
 800b4fc:	0006      	movs	r6, r0
 800b4fe:	3302      	adds	r3, #2
 800b500:	031b      	lsls	r3, r3, #12
 800b502:	000f      	movs	r7, r1
 800b504:	2200      	movs	r2, #0
 800b506:	0b1b      	lsrs	r3, r3, #12
 800b508:	2b02      	cmp	r3, #2
 800b50a:	dc64      	bgt.n	800b5d6 <__ieee754_log+0x166>
 800b50c:	2300      	movs	r3, #0
 800b50e:	f7f4 ff9b 	bl	8000448 <__aeabi_dcmpeq>
 800b512:	2800      	cmp	r0, #0
 800b514:	d019      	beq.n	800b54a <__ieee754_log+0xda>
 800b516:	9b00      	ldr	r3, [sp, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d100      	bne.n	800b51e <__ieee754_log+0xae>
 800b51c:	e11c      	b.n	800b758 <__ieee754_log+0x2e8>
 800b51e:	0018      	movs	r0, r3
 800b520:	f7f7 fce4 	bl	8002eec <__aeabi_i2d>
 800b524:	4a94      	ldr	r2, [pc, #592]	@ (800b778 <__ieee754_log+0x308>)
 800b526:	4b95      	ldr	r3, [pc, #596]	@ (800b77c <__ieee754_log+0x30c>)
 800b528:	0004      	movs	r4, r0
 800b52a:	000d      	movs	r5, r1
 800b52c:	f7f6 fe1c 	bl	8002168 <__aeabi_dmul>
 800b530:	4a93      	ldr	r2, [pc, #588]	@ (800b780 <__ieee754_log+0x310>)
 800b532:	0006      	movs	r6, r0
 800b534:	000f      	movs	r7, r1
 800b536:	4b93      	ldr	r3, [pc, #588]	@ (800b784 <__ieee754_log+0x314>)
 800b538:	0020      	movs	r0, r4
 800b53a:	0029      	movs	r1, r5
 800b53c:	f7f6 fe14 	bl	8002168 <__aeabi_dmul>
 800b540:	0002      	movs	r2, r0
 800b542:	000b      	movs	r3, r1
 800b544:	0030      	movs	r0, r6
 800b546:	0039      	movs	r1, r7
 800b548:	e7ba      	b.n	800b4c0 <__ieee754_log+0x50>
 800b54a:	4a8f      	ldr	r2, [pc, #572]	@ (800b788 <__ieee754_log+0x318>)
 800b54c:	4b8f      	ldr	r3, [pc, #572]	@ (800b78c <__ieee754_log+0x31c>)
 800b54e:	0030      	movs	r0, r6
 800b550:	0039      	movs	r1, r7
 800b552:	f7f6 fe09 	bl	8002168 <__aeabi_dmul>
 800b556:	0002      	movs	r2, r0
 800b558:	000b      	movs	r3, r1
 800b55a:	2000      	movs	r0, #0
 800b55c:	498c      	ldr	r1, [pc, #560]	@ (800b790 <__ieee754_log+0x320>)
 800b55e:	f7f7 f8cb 	bl	80026f8 <__aeabi_dsub>
 800b562:	0032      	movs	r2, r6
 800b564:	0004      	movs	r4, r0
 800b566:	000d      	movs	r5, r1
 800b568:	003b      	movs	r3, r7
 800b56a:	0030      	movs	r0, r6
 800b56c:	0039      	movs	r1, r7
 800b56e:	f7f6 fdfb 	bl	8002168 <__aeabi_dmul>
 800b572:	000b      	movs	r3, r1
 800b574:	0002      	movs	r2, r0
 800b576:	0029      	movs	r1, r5
 800b578:	0020      	movs	r0, r4
 800b57a:	f7f6 fdf5 	bl	8002168 <__aeabi_dmul>
 800b57e:	9b00      	ldr	r3, [sp, #0]
 800b580:	9002      	str	r0, [sp, #8]
 800b582:	9103      	str	r1, [sp, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d106      	bne.n	800b596 <__ieee754_log+0x126>
 800b588:	0002      	movs	r2, r0
 800b58a:	000b      	movs	r3, r1
 800b58c:	0030      	movs	r0, r6
 800b58e:	0039      	movs	r1, r7
 800b590:	f7f7 f8b2 	bl	80026f8 <__aeabi_dsub>
 800b594:	e77d      	b.n	800b492 <__ieee754_log+0x22>
 800b596:	9800      	ldr	r0, [sp, #0]
 800b598:	f7f7 fca8 	bl	8002eec <__aeabi_i2d>
 800b59c:	4a76      	ldr	r2, [pc, #472]	@ (800b778 <__ieee754_log+0x308>)
 800b59e:	4b77      	ldr	r3, [pc, #476]	@ (800b77c <__ieee754_log+0x30c>)
 800b5a0:	0004      	movs	r4, r0
 800b5a2:	000d      	movs	r5, r1
 800b5a4:	f7f6 fde0 	bl	8002168 <__aeabi_dmul>
 800b5a8:	4a75      	ldr	r2, [pc, #468]	@ (800b780 <__ieee754_log+0x310>)
 800b5aa:	9000      	str	r0, [sp, #0]
 800b5ac:	9101      	str	r1, [sp, #4]
 800b5ae:	4b75      	ldr	r3, [pc, #468]	@ (800b784 <__ieee754_log+0x314>)
 800b5b0:	0020      	movs	r0, r4
 800b5b2:	0029      	movs	r1, r5
 800b5b4:	f7f6 fdd8 	bl	8002168 <__aeabi_dmul>
 800b5b8:	0002      	movs	r2, r0
 800b5ba:	000b      	movs	r3, r1
 800b5bc:	9802      	ldr	r0, [sp, #8]
 800b5be:	9903      	ldr	r1, [sp, #12]
 800b5c0:	f7f7 f89a 	bl	80026f8 <__aeabi_dsub>
 800b5c4:	0032      	movs	r2, r6
 800b5c6:	003b      	movs	r3, r7
 800b5c8:	f7f7 f896 	bl	80026f8 <__aeabi_dsub>
 800b5cc:	0002      	movs	r2, r0
 800b5ce:	000b      	movs	r3, r1
 800b5d0:	9800      	ldr	r0, [sp, #0]
 800b5d2:	9901      	ldr	r1, [sp, #4]
 800b5d4:	e7dc      	b.n	800b590 <__ieee754_log+0x120>
 800b5d6:	2380      	movs	r3, #128	@ 0x80
 800b5d8:	05db      	lsls	r3, r3, #23
 800b5da:	f7f5 fe1d 	bl	8001218 <__aeabi_dadd>
 800b5de:	0002      	movs	r2, r0
 800b5e0:	000b      	movs	r3, r1
 800b5e2:	0030      	movs	r0, r6
 800b5e4:	0039      	movs	r1, r7
 800b5e6:	f7f6 f97b 	bl	80018e0 <__aeabi_ddiv>
 800b5ea:	9004      	str	r0, [sp, #16]
 800b5ec:	9105      	str	r1, [sp, #20]
 800b5ee:	9800      	ldr	r0, [sp, #0]
 800b5f0:	f7f7 fc7c 	bl	8002eec <__aeabi_i2d>
 800b5f4:	9a04      	ldr	r2, [sp, #16]
 800b5f6:	9b05      	ldr	r3, [sp, #20]
 800b5f8:	9006      	str	r0, [sp, #24]
 800b5fa:	9107      	str	r1, [sp, #28]
 800b5fc:	0010      	movs	r0, r2
 800b5fe:	0019      	movs	r1, r3
 800b600:	f7f6 fdb2 	bl	8002168 <__aeabi_dmul>
 800b604:	4a63      	ldr	r2, [pc, #396]	@ (800b794 <__ieee754_log+0x324>)
 800b606:	9b02      	ldr	r3, [sp, #8]
 800b608:	4694      	mov	ip, r2
 800b60a:	4463      	add	r3, ip
 800b60c:	0002      	movs	r2, r0
 800b60e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b610:	000b      	movs	r3, r1
 800b612:	9008      	str	r0, [sp, #32]
 800b614:	9109      	str	r1, [sp, #36]	@ 0x24
 800b616:	f7f6 fda7 	bl	8002168 <__aeabi_dmul>
 800b61a:	0004      	movs	r4, r0
 800b61c:	000d      	movs	r5, r1
 800b61e:	4a5e      	ldr	r2, [pc, #376]	@ (800b798 <__ieee754_log+0x328>)
 800b620:	4b5e      	ldr	r3, [pc, #376]	@ (800b79c <__ieee754_log+0x32c>)
 800b622:	f7f6 fda1 	bl	8002168 <__aeabi_dmul>
 800b626:	4a5e      	ldr	r2, [pc, #376]	@ (800b7a0 <__ieee754_log+0x330>)
 800b628:	4b5e      	ldr	r3, [pc, #376]	@ (800b7a4 <__ieee754_log+0x334>)
 800b62a:	f7f5 fdf5 	bl	8001218 <__aeabi_dadd>
 800b62e:	0022      	movs	r2, r4
 800b630:	002b      	movs	r3, r5
 800b632:	f7f6 fd99 	bl	8002168 <__aeabi_dmul>
 800b636:	4a5c      	ldr	r2, [pc, #368]	@ (800b7a8 <__ieee754_log+0x338>)
 800b638:	4b5c      	ldr	r3, [pc, #368]	@ (800b7ac <__ieee754_log+0x33c>)
 800b63a:	f7f5 fded 	bl	8001218 <__aeabi_dadd>
 800b63e:	0022      	movs	r2, r4
 800b640:	002b      	movs	r3, r5
 800b642:	f7f6 fd91 	bl	8002168 <__aeabi_dmul>
 800b646:	4a5a      	ldr	r2, [pc, #360]	@ (800b7b0 <__ieee754_log+0x340>)
 800b648:	4b5a      	ldr	r3, [pc, #360]	@ (800b7b4 <__ieee754_log+0x344>)
 800b64a:	f7f5 fde5 	bl	8001218 <__aeabi_dadd>
 800b64e:	9a08      	ldr	r2, [sp, #32]
 800b650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b652:	f7f6 fd89 	bl	8002168 <__aeabi_dmul>
 800b656:	4a58      	ldr	r2, [pc, #352]	@ (800b7b8 <__ieee754_log+0x348>)
 800b658:	9008      	str	r0, [sp, #32]
 800b65a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b65c:	4b57      	ldr	r3, [pc, #348]	@ (800b7bc <__ieee754_log+0x34c>)
 800b65e:	0020      	movs	r0, r4
 800b660:	0029      	movs	r1, r5
 800b662:	f7f6 fd81 	bl	8002168 <__aeabi_dmul>
 800b666:	4a56      	ldr	r2, [pc, #344]	@ (800b7c0 <__ieee754_log+0x350>)
 800b668:	4b56      	ldr	r3, [pc, #344]	@ (800b7c4 <__ieee754_log+0x354>)
 800b66a:	f7f5 fdd5 	bl	8001218 <__aeabi_dadd>
 800b66e:	0022      	movs	r2, r4
 800b670:	002b      	movs	r3, r5
 800b672:	f7f6 fd79 	bl	8002168 <__aeabi_dmul>
 800b676:	4a54      	ldr	r2, [pc, #336]	@ (800b7c8 <__ieee754_log+0x358>)
 800b678:	4b54      	ldr	r3, [pc, #336]	@ (800b7cc <__ieee754_log+0x35c>)
 800b67a:	f7f5 fdcd 	bl	8001218 <__aeabi_dadd>
 800b67e:	0022      	movs	r2, r4
 800b680:	002b      	movs	r3, r5
 800b682:	f7f6 fd71 	bl	8002168 <__aeabi_dmul>
 800b686:	0002      	movs	r2, r0
 800b688:	000b      	movs	r3, r1
 800b68a:	9808      	ldr	r0, [sp, #32]
 800b68c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b68e:	f7f5 fdc3 	bl	8001218 <__aeabi_dadd>
 800b692:	9a02      	ldr	r2, [sp, #8]
 800b694:	4b4e      	ldr	r3, [pc, #312]	@ (800b7d0 <__ieee754_log+0x360>)
 800b696:	0004      	movs	r4, r0
 800b698:	1a9b      	subs	r3, r3, r2
 800b69a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b69c:	000d      	movs	r5, r1
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	dd34      	ble.n	800b70e <__ieee754_log+0x29e>
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4b3a      	ldr	r3, [pc, #232]	@ (800b790 <__ieee754_log+0x320>)
 800b6a8:	0030      	movs	r0, r6
 800b6aa:	0039      	movs	r1, r7
 800b6ac:	f7f6 fd5c 	bl	8002168 <__aeabi_dmul>
 800b6b0:	0032      	movs	r2, r6
 800b6b2:	003b      	movs	r3, r7
 800b6b4:	f7f6 fd58 	bl	8002168 <__aeabi_dmul>
 800b6b8:	0002      	movs	r2, r0
 800b6ba:	000b      	movs	r3, r1
 800b6bc:	9002      	str	r0, [sp, #8]
 800b6be:	9103      	str	r1, [sp, #12]
 800b6c0:	0020      	movs	r0, r4
 800b6c2:	0029      	movs	r1, r5
 800b6c4:	f7f5 fda8 	bl	8001218 <__aeabi_dadd>
 800b6c8:	9a04      	ldr	r2, [sp, #16]
 800b6ca:	9b05      	ldr	r3, [sp, #20]
 800b6cc:	f7f6 fd4c 	bl	8002168 <__aeabi_dmul>
 800b6d0:	9b00      	ldr	r3, [sp, #0]
 800b6d2:	0004      	movs	r4, r0
 800b6d4:	000d      	movs	r5, r1
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <__ieee754_log+0x278>
 800b6da:	0002      	movs	r2, r0
 800b6dc:	000b      	movs	r3, r1
 800b6de:	9802      	ldr	r0, [sp, #8]
 800b6e0:	9903      	ldr	r1, [sp, #12]
 800b6e2:	f7f7 f809 	bl	80026f8 <__aeabi_dsub>
 800b6e6:	e74f      	b.n	800b588 <__ieee754_log+0x118>
 800b6e8:	4a23      	ldr	r2, [pc, #140]	@ (800b778 <__ieee754_log+0x308>)
 800b6ea:	4b24      	ldr	r3, [pc, #144]	@ (800b77c <__ieee754_log+0x30c>)
 800b6ec:	9806      	ldr	r0, [sp, #24]
 800b6ee:	9907      	ldr	r1, [sp, #28]
 800b6f0:	f7f6 fd3a 	bl	8002168 <__aeabi_dmul>
 800b6f4:	4a22      	ldr	r2, [pc, #136]	@ (800b780 <__ieee754_log+0x310>)
 800b6f6:	9000      	str	r0, [sp, #0]
 800b6f8:	9101      	str	r1, [sp, #4]
 800b6fa:	9806      	ldr	r0, [sp, #24]
 800b6fc:	9907      	ldr	r1, [sp, #28]
 800b6fe:	4b21      	ldr	r3, [pc, #132]	@ (800b784 <__ieee754_log+0x314>)
 800b700:	f7f6 fd32 	bl	8002168 <__aeabi_dmul>
 800b704:	0022      	movs	r2, r4
 800b706:	002b      	movs	r3, r5
 800b708:	f7f5 fd86 	bl	8001218 <__aeabi_dadd>
 800b70c:	e754      	b.n	800b5b8 <__ieee754_log+0x148>
 800b70e:	0002      	movs	r2, r0
 800b710:	000b      	movs	r3, r1
 800b712:	0030      	movs	r0, r6
 800b714:	0039      	movs	r1, r7
 800b716:	f7f6 ffef 	bl	80026f8 <__aeabi_dsub>
 800b71a:	9a04      	ldr	r2, [sp, #16]
 800b71c:	9b05      	ldr	r3, [sp, #20]
 800b71e:	f7f6 fd23 	bl	8002168 <__aeabi_dmul>
 800b722:	9b00      	ldr	r3, [sp, #0]
 800b724:	0004      	movs	r4, r0
 800b726:	000d      	movs	r5, r1
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d102      	bne.n	800b732 <__ieee754_log+0x2c2>
 800b72c:	0002      	movs	r2, r0
 800b72e:	000b      	movs	r3, r1
 800b730:	e72c      	b.n	800b58c <__ieee754_log+0x11c>
 800b732:	4a11      	ldr	r2, [pc, #68]	@ (800b778 <__ieee754_log+0x308>)
 800b734:	4b11      	ldr	r3, [pc, #68]	@ (800b77c <__ieee754_log+0x30c>)
 800b736:	9806      	ldr	r0, [sp, #24]
 800b738:	9907      	ldr	r1, [sp, #28]
 800b73a:	f7f6 fd15 	bl	8002168 <__aeabi_dmul>
 800b73e:	4a10      	ldr	r2, [pc, #64]	@ (800b780 <__ieee754_log+0x310>)
 800b740:	9000      	str	r0, [sp, #0]
 800b742:	9101      	str	r1, [sp, #4]
 800b744:	9806      	ldr	r0, [sp, #24]
 800b746:	9907      	ldr	r1, [sp, #28]
 800b748:	4b0e      	ldr	r3, [pc, #56]	@ (800b784 <__ieee754_log+0x314>)
 800b74a:	f7f6 fd0d 	bl	8002168 <__aeabi_dmul>
 800b74e:	0002      	movs	r2, r0
 800b750:	000b      	movs	r3, r1
 800b752:	0020      	movs	r0, r4
 800b754:	0029      	movs	r1, r5
 800b756:	e733      	b.n	800b5c0 <__ieee754_log+0x150>
 800b758:	2000      	movs	r0, #0
 800b75a:	2100      	movs	r1, #0
 800b75c:	e699      	b.n	800b492 <__ieee754_log+0x22>
 800b75e:	46c0      	nop			@ (mov r8, r8)
 800b760:	c3500000 	.word	0xc3500000
 800b764:	43500000 	.word	0x43500000
 800b768:	7fefffff 	.word	0x7fefffff
 800b76c:	fffffc01 	.word	0xfffffc01
 800b770:	00095f64 	.word	0x00095f64
 800b774:	3ff00000 	.word	0x3ff00000
 800b778:	fee00000 	.word	0xfee00000
 800b77c:	3fe62e42 	.word	0x3fe62e42
 800b780:	35793c76 	.word	0x35793c76
 800b784:	3dea39ef 	.word	0x3dea39ef
 800b788:	55555555 	.word	0x55555555
 800b78c:	3fd55555 	.word	0x3fd55555
 800b790:	3fe00000 	.word	0x3fe00000
 800b794:	fff9eb86 	.word	0xfff9eb86
 800b798:	df3e5244 	.word	0xdf3e5244
 800b79c:	3fc2f112 	.word	0x3fc2f112
 800b7a0:	96cb03de 	.word	0x96cb03de
 800b7a4:	3fc74664 	.word	0x3fc74664
 800b7a8:	94229359 	.word	0x94229359
 800b7ac:	3fd24924 	.word	0x3fd24924
 800b7b0:	55555593 	.word	0x55555593
 800b7b4:	3fe55555 	.word	0x3fe55555
 800b7b8:	d078c69f 	.word	0xd078c69f
 800b7bc:	3fc39a09 	.word	0x3fc39a09
 800b7c0:	1d8e78af 	.word	0x1d8e78af
 800b7c4:	3fcc71c5 	.word	0x3fcc71c5
 800b7c8:	9997fa04 	.word	0x9997fa04
 800b7cc:	3fd99999 	.word	0x3fd99999
 800b7d0:	0006b851 	.word	0x0006b851

0800b7d4 <_init>:
 800b7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d6:	46c0      	nop			@ (mov r8, r8)
 800b7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7da:	bc08      	pop	{r3}
 800b7dc:	469e      	mov	lr, r3
 800b7de:	4770      	bx	lr

0800b7e0 <_fini>:
 800b7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e2:	46c0      	nop			@ (mov r8, r8)
 800b7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7e6:	bc08      	pop	{r3}
 800b7e8:	469e      	mov	lr, r3
 800b7ea:	4770      	bx	lr
