
BANO_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000572c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005870  08005870  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005878  08005878  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005878  08005878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000000c  0800588c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  0800588c  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f36  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002669  00000000  00000000  00034f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  000375d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00038710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001746e  00000000  00000000  00039760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001382b  00000000  00000000  00050bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000998c0  00000000  00000000  000643f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fdcb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f08  00000000  00000000  000fdd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080057d0 	.word	0x080057d0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080057d0 	.word	0x080057d0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HEX_to_DEC>:
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void HEX_to_DEC(uint32_t Hex, char * DEC)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	char T = 48;
 8000626:	210f      	movs	r1, #15
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	701a      	strb	r2, [r3, #0]
	DEC[3] = T;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	3303      	adds	r3, #3
 8000632:	187a      	adds	r2, r7, r1
 8000634:	7812      	ldrb	r2, [r2, #0]
 8000636:	701a      	strb	r2, [r3, #0]
	DEC[2] = T;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	3302      	adds	r3, #2
 800063c:	187a      	adds	r2, r7, r1
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	701a      	strb	r2, [r3, #0]
	DEC[1] = T;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	187a      	adds	r2, r7, r1
 8000648:	7812      	ldrb	r2, [r2, #0]
 800064a:	701a      	strb	r2, [r3, #0]
	DEC[0] = T;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	187a      	adds	r2, r7, r1
 8000650:	7812      	ldrb	r2, [r2, #0]
 8000652:	701a      	strb	r2, [r3, #0]
	while( Hex >= 1000 )
 8000654:	e00a      	b.n	800066c <HEX_to_DEC+0x50>
	{Hex = Hex - 1000; DEC[0] = DEC[0] + 1;}
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a1d      	ldr	r2, [pc, #116]	; (80006d0 <HEX_to_DEC+0xb4>)
 800065a:	4694      	mov	ip, r2
 800065c:	4463      	add	r3, ip
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	3301      	adds	r3, #1
 8000666:	b2da      	uxtb	r2, r3
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	701a      	strb	r2, [r3, #0]
	while( Hex >= 1000 )
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	23fa      	movs	r3, #250	; 0xfa
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	429a      	cmp	r2, r3
 8000674:	d2ef      	bcs.n	8000656 <HEX_to_DEC+0x3a>

	while( Hex >= 100 )
 8000676:	e00a      	b.n	800068e <HEX_to_DEC+0x72>
	{Hex = Hex - 100; DEC[1] = DEC[1] + 1;}
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3b64      	subs	r3, #100	; 0x64
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	781a      	ldrb	r2, [r3, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	3201      	adds	r2, #1
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	701a      	strb	r2, [r3, #0]
	while( Hex >= 100 )
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b63      	cmp	r3, #99	; 0x63
 8000692:	d8f1      	bhi.n	8000678 <HEX_to_DEC+0x5c>

	while( Hex >= 10 )
 8000694:	e00a      	b.n	80006ac <HEX_to_DEC+0x90>
	{Hex = Hex - 10; DEC[2] = DEC[2] + 1;}
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3b0a      	subs	r3, #10
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	3302      	adds	r3, #2
 80006a0:	781a      	ldrb	r2, [r3, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	3302      	adds	r3, #2
 80006a6:	3201      	adds	r2, #1
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	701a      	strb	r2, [r3, #0]
	while( Hex >= 10 )
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b09      	cmp	r3, #9
 80006b0:	d8f1      	bhi.n	8000696 <HEX_to_DEC+0x7a>
	DEC[3] = DEC[3] + Hex;
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	3303      	adds	r3, #3
 80006b6:	7819      	ldrb	r1, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	3303      	adds	r3, #3
 80006c0:	188a      	adds	r2, r1, r2
 80006c2:	b2d2      	uxtb	r2, r2
 80006c4:	701a      	strb	r2, [r3, #0]
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b004      	add	sp, #16
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	fffffc18 	.word	0xfffffc18

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 fcda 	bl	8001090 <HAL_Init>

  /* USER CODE BEGIN Init */

  Timer_State = 0;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <main+0x38>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f819 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f9b7 	bl	8000a58 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006ea:	f000 f85d 	bl	80007a8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80006ee:	f000 f931 	bl	8000954 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006f2:	f000 f97d 	bl	80009f0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006f6:	f000 f8d9 	bl	80008ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <main+0x3c>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f003 f829 	bl	8003754 <HAL_TIM_Base_Start_IT>

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000702:	4b04      	ldr	r3, [pc, #16]	; (8000714 <main+0x40>)
 8000704:	0018      	movs	r0, r3
 8000706:	f001 fd1b 	bl	8002140 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x36>
 800070c:	20000120 	.word	0x20000120
 8000710:	20000144 	.word	0x20000144
 8000714:	20000028 	.word	0x20000028

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b093      	sub	sp, #76	; 0x4c
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	2410      	movs	r4, #16
 8000720:	193b      	adds	r3, r7, r4
 8000722:	0018      	movs	r0, r3
 8000724:	2338      	movs	r3, #56	; 0x38
 8000726:	001a      	movs	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	f005 f849 	bl	80057c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072e:	003b      	movs	r3, r7
 8000730:	0018      	movs	r0, r3
 8000732:	2310      	movs	r3, #16
 8000734:	001a      	movs	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	f005 f842 	bl	80057c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	0018      	movs	r0, r3
 8000742:	f002 f925 	bl	8002990 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2202      	movs	r2, #2
 800074a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	0052      	lsls	r2, r2, #1
 8000752:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2240      	movs	r2, #64	; 0x40
 800075e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	193b      	adds	r3, r7, r4
 8000768:	0018      	movs	r0, r3
 800076a:	f002 f95d 	bl	8002a28 <HAL_RCC_OscConfig>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000772:	f000 facd 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	003b      	movs	r3, r7
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800077c:	003b      	movs	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	003b      	movs	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000788:	003b      	movs	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078e:	003b      	movs	r3, r7
 8000790:	2100      	movs	r1, #0
 8000792:	0018      	movs	r0, r3
 8000794:	f002 fc62 	bl	800305c <HAL_RCC_ClockConfig>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800079c:	f000 fab8 	bl	8000d10 <Error_Handler>
  }
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b013      	add	sp, #76	; 0x4c
 80007a6:	bd90      	pop	{r4, r7, pc}

080007a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	0018      	movs	r0, r3
 80007b2:	230c      	movs	r3, #12
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f005 f802 	bl	80057c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007bc:	4b37      	ldr	r3, [pc, #220]	; (800089c <MX_ADC1_Init+0xf4>)
 80007be:	4a38      	ldr	r2, [pc, #224]	; (80008a0 <MX_ADC1_Init+0xf8>)
 80007c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80007c2:	4b36      	ldr	r3, [pc, #216]	; (800089c <MX_ADC1_Init+0xf4>)
 80007c4:	22a0      	movs	r2, #160	; 0xa0
 80007c6:	0352      	lsls	r2, r2, #13
 80007c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ca:	4b34      	ldr	r3, [pc, #208]	; (800089c <MX_ADC1_Init+0xf4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d0:	4b32      	ldr	r3, [pc, #200]	; (800089c <MX_ADC1_Init+0xf4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007d6:	4b31      	ldr	r3, [pc, #196]	; (800089c <MX_ADC1_Init+0xf4>)
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	0392      	lsls	r2, r2, #14
 80007dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <MX_ADC1_Init+0xf4>)
 80007e0:	2204      	movs	r2, #4
 80007e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e4:	4b2d      	ldr	r3, [pc, #180]	; (800089c <MX_ADC1_Init+0xf4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <MX_ADC1_Init+0xf4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f0:	4b2a      	ldr	r3, [pc, #168]	; (800089c <MX_ADC1_Init+0xf4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80007f6:	4b29      	ldr	r3, [pc, #164]	; (800089c <MX_ADC1_Init+0xf4>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80007fc:	4b27      	ldr	r3, [pc, #156]	; (800089c <MX_ADC1_Init+0xf4>)
 80007fe:	2220      	movs	r2, #32
 8000800:	2101      	movs	r1, #1
 8000802:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <MX_ADC1_Init+0xf4>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080a:	4b24      	ldr	r3, [pc, #144]	; (800089c <MX_ADC1_Init+0xf4>)
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_ADC1_Init+0xf4>)
 8000812:	222c      	movs	r2, #44	; 0x2c
 8000814:	2100      	movs	r1, #0
 8000816:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000818:	4b20      	ldr	r3, [pc, #128]	; (800089c <MX_ADC1_Init+0xf4>)
 800081a:	2200      	movs	r2, #0
 800081c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_ADC1_Init+0xf4>)
 8000820:	2207      	movs	r2, #7
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_ADC1_Init+0xf4>)
 8000826:	2207      	movs	r2, #7
 8000828:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_ADC1_Init+0xf4>)
 800082c:	223c      	movs	r2, #60	; 0x3c
 800082e:	2100      	movs	r1, #0
 8000830:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_ADC1_Init+0xf4>)
 8000834:	2200      	movs	r2, #0
 8000836:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_ADC1_Init+0xf4>)
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fe18 	bl	8001470 <HAL_ADC_Init>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000844:	f000 fa64 	bl	8000d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085a:	1d3a      	adds	r2, r7, #4
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_ADC1_Init+0xf4>)
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f001 f8d7 	bl	8001a14 <HAL_ADC_ConfigChannel>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800086a:	f000 fa51 	bl	8000d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <MX_ADC1_Init+0xfc>)
 8000872:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2204      	movs	r2, #4
 8000878:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_2;
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <MX_ADC1_Init+0x100>)
 800087e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000880:	1d3a      	adds	r2, r7, #4
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_ADC1_Init+0xf4>)
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f001 f8c4 	bl	8001a14 <HAL_ADC_ConfigChannel>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000890:	f000 fa3e 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b004      	add	sp, #16
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000028 	.word	0x20000028
 80008a0:	40012400 	.word	0x40012400
 80008a4:	04000002 	.word	0x04000002
 80008a8:	07ffff04 	.word	0x07ffff04

080008ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b2:	2310      	movs	r3, #16
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	0018      	movs	r0, r3
 80008b8:	2310      	movs	r3, #16
 80008ba:	001a      	movs	r2, r3
 80008bc:	2100      	movs	r1, #0
 80008be:	f004 ff7f 	bl	80057c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	0018      	movs	r0, r3
 80008c6:	230c      	movs	r3, #12
 80008c8:	001a      	movs	r2, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	f004 ff78 	bl	80057c0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <MX_TIM2_Init+0xa0>)
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	05d2      	lsls	r2, r2, #23
 80008d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80008d8:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_TIM2_Init+0xa0>)
 80008da:	4a1d      	ldr	r2, [pc, #116]	; (8000950 <MX_TIM2_Init+0xa4>)
 80008dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_TIM2_Init+0xa0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_TIM2_Init+0xa0>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_TIM2_Init+0xa0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_TIM2_Init+0xa0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_TIM2_Init+0xa0>)
 80008f8:	0018      	movs	r0, r3
 80008fa:	f002 fed3 	bl	80036a4 <HAL_TIM_Base_Init>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000902:	f000 fa05 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000906:	2110      	movs	r1, #16
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	0152      	lsls	r2, r2, #5
 800090e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000910:	187a      	adds	r2, r7, r1
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_TIM2_Init+0xa0>)
 8000914:	0011      	movs	r1, r2
 8000916:	0018      	movs	r0, r3
 8000918:	f003 f878 	bl	8003a0c <HAL_TIM_ConfigClockSource>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000920:	f000 f9f6 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000930:	1d3a      	adds	r2, r7, #4
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_TIM2_Init+0xa0>)
 8000934:	0011      	movs	r1, r2
 8000936:	0018      	movs	r0, r3
 8000938:	f003 fa7e 	bl	8003e38 <HAL_TIMEx_MasterConfigSynchronization>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000940:	f000 f9e6 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b008      	add	sp, #32
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000144 	.word	0x20000144
 8000950:	00003e7f 	.word	0x00003e7f

08000954 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000958:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 800095a:	4a24      	ldr	r2, [pc, #144]	; (80009ec <MX_USART1_UART_Init+0x98>)
 800095c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 8000960:	22e1      	movs	r2, #225	; 0xe1
 8000962:	0252      	lsls	r2, r2, #9
 8000964:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f003 faca 	bl	8003f38 <HAL_UART_Init>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009a8:	f000 f9b2 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 80009ae:	2100      	movs	r1, #0
 80009b0:	0018      	movs	r0, r3
 80009b2:	f004 fe01 	bl	80055b8 <HAL_UARTEx_SetTxFifoThreshold>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d001      	beq.n	80009be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009ba:	f000 f9a9 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 80009c0:	2100      	movs	r1, #0
 80009c2:	0018      	movs	r0, r3
 80009c4:	f004 fe38 	bl	8005638 <HAL_UARTEx_SetRxFifoThreshold>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009cc:	f000 f9a0 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <MX_USART1_UART_Init+0x94>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f004 fdb6 	bl	8005544 <HAL_UARTEx_DisableFifoMode>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009dc:	f000 f998 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	2000008c 	.word	0x2000008c
 80009ec:	40013800 	.word	0x40013800

080009f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_USART2_UART_Init+0x60>)
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <MX_USART2_UART_Init+0x64>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_USART2_UART_Init+0x60>)
 80009fc:	22e1      	movs	r2, #225	; 0xe1
 80009fe:	0252      	lsls	r2, r2, #9
 8000a00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_USART2_UART_Init+0x60>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_USART2_UART_Init+0x60>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_USART2_UART_Init+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_USART2_UART_Init+0x60>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_USART2_UART_Init+0x60>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_USART2_UART_Init+0x60>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_USART2_UART_Init+0x60>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_USART2_UART_Init+0x60>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_USART2_UART_Init+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <MX_USART2_UART_Init+0x60>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f003 fa7c 	bl	8003f38 <HAL_UART_Init>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a44:	f000 f964 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	20000190 	.word	0x20000190
 8000a54:	40004400 	.word	0x40004400

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b089      	sub	sp, #36	; 0x24
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	240c      	movs	r4, #12
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	0018      	movs	r0, r3
 8000a64:	2314      	movs	r3, #20
 8000a66:	001a      	movs	r2, r3
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f004 fea9 	bl	80057c0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b4e      	ldr	r3, [pc, #312]	; (8000ba8 <MX_GPIO_Init+0x150>)
 8000a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a72:	4b4d      	ldr	r3, [pc, #308]	; (8000ba8 <MX_GPIO_Init+0x150>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
 8000a7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ba8 <MX_GPIO_Init+0x150>)
 8000a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b48      	ldr	r3, [pc, #288]	; (8000ba8 <MX_GPIO_Init+0x150>)
 8000a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a8a:	4b47      	ldr	r3, [pc, #284]	; (8000ba8 <MX_GPIO_Init+0x150>)
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	635a      	str	r2, [r3, #52]	; 0x34
 8000a92:	4b45      	ldr	r3, [pc, #276]	; (8000ba8 <MX_GPIO_Init+0x150>)
 8000a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a96:	2202      	movs	r2, #2
 8000a98:	4013      	ands	r3, r2
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <MX_GPIO_Init+0x150>)
 8000aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa2:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <MX_GPIO_Init+0x150>)
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	635a      	str	r2, [r3, #52]	; 0x34
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <MX_GPIO_Init+0x150>)
 8000aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aae:	2204      	movs	r2, #4
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	; (8000bac <MX_GPIO_Init+0x154>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2101      	movs	r1, #1
 8000abc:	0018      	movs	r0, r3
 8000abe:	f001 ff49 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	; (8000bac <MX_GPIO_Init+0x154>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f001 ff43 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ace:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <MX_GPIO_Init+0x158>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2140      	movs	r1, #64	; 0x40
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f001 ff3d 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	0219      	lsls	r1, r3, #8
 8000ade:	23a0      	movs	r3, #160	; 0xa0
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 ff35 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	2210      	movs	r2, #16
 8000aee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2288      	movs	r2, #136	; 0x88
 8000af4:	0352      	lsls	r2, r2, #13
 8000af6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	193a      	adds	r2, r7, r4
 8000b00:	23a0      	movs	r3, #160	; 0xa0
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	0011      	movs	r1, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 fdc0 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	2203      	movs	r2, #3
 8000b10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2201      	movs	r2, #1
 8000b16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	4a21      	ldr	r2, [pc, #132]	; (8000bac <MX_GPIO_Init+0x154>)
 8000b28:	0019      	movs	r1, r3
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	f001 fdae 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	2240      	movs	r2, #64	; 0x40
 8000b34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2201      	movs	r2, #1
 8000b3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <MX_GPIO_Init+0x158>)
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	0010      	movs	r0, r2
 8000b50:	f001 fd9c 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b54:	0021      	movs	r1, r4
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	0212      	lsls	r2, r2, #8
 8000b5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	000c      	movs	r4, r1
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2201      	movs	r2, #1
 8000b64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	193a      	adds	r2, r7, r4
 8000b74:	23a0      	movs	r3, #160	; 0xa0
 8000b76:	05db      	lsls	r3, r3, #23
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 fd86 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	2230      	movs	r2, #48	; 0x30
 8000b84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	4a05      	ldr	r2, [pc, #20]	; (8000bac <MX_GPIO_Init+0x154>)
 8000b96:	0019      	movs	r1, r3
 8000b98:	0010      	movs	r0, r2
 8000b9a:	f001 fd77 	bl	800268c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b009      	add	sp, #36	; 0x24
 8000ba4:	bd90      	pop	{r4, r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	50000400 	.word	0x50000400
 8000bb0:	50000800 	.word	0x50000800

08000bb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	static uint16_t cntr = 0;
    if (htim->Instance == TIM2)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	05db      	lsls	r3, r3, #23
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d000      	beq.n	8000bca <HAL_TIM_PeriodElapsedCallback+0x16>
 8000bc8:	e090      	b.n	8000cec <HAL_TIM_PeriodElapsedCallback+0x138>
    {

    	if(Timer_State == PERIOD)
 8000bca:	4b4a      	ldr	r3, [pc, #296]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	23fa      	movs	r3, #250	; 0xfa
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d16d      	bne.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0xfe>
    	{
    		Timer_State = 0;
 8000bd6:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]

    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	0219      	lsls	r1, r3, #8
 8000be0:	23a0      	movs	r3, #160	; 0xa0
 8000be2:	05db      	lsls	r3, r3, #23
 8000be4:	2201      	movs	r2, #1
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 feb4 	bl	8002954 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000bec:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f001 feae 	bl	8002954 <HAL_GPIO_WritePin>


    	uint32_t Data[2];
    	ADC_ChannelConfTypeDef sConfig = {0};
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	230c      	movs	r3, #12
 8000c00:	001a      	movs	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f004 fddc 	bl	80057c0 <memset>

    	  transmitBuffer[0] = (char)'t';
 8000c08:	4b3c      	ldr	r3, [pc, #240]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c0a:	2274      	movs	r2, #116	; 0x74
 8000c0c:	701a      	strb	r2, [r3, #0]
    	  transmitBuffer[1] = (char)'=';
 8000c0e:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c10:	223d      	movs	r2, #61	; 0x3d
 8000c12:	705a      	strb	r2, [r3, #1]
    	  transmitBuffer[2] = (char)'1';
 8000c14:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c16:	2231      	movs	r2, #49	; 0x31
 8000c18:	709a      	strb	r2, [r3, #2]
    	  transmitBuffer[3] = (char)'0';
 8000c1a:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c1c:	2230      	movs	r2, #48	; 0x30
 8000c1e:	70da      	strb	r2, [r3, #3]
    	  transmitBuffer[4] = (char)'0';
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c22:	2230      	movs	r2, #48	; 0x30
 8000c24:	711a      	strb	r2, [r3, #4]
    	  transmitBuffer[5] = (char)'C';
 8000c26:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c28:	2243      	movs	r2, #67	; 0x43
 8000c2a:	715a      	strb	r2, [r3, #5]
    	  transmitBuffer[8] = (char)'\n';
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c2e:	220a      	movs	r2, #10
 8000c30:	721a      	strb	r2, [r3, #8]


    	  HAL_ADC_Start(&hadc1);
 8000c32:	4b33      	ldr	r3, [pc, #204]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fdc3 	bl	80017c0 <HAL_ADC_Start>
    	  HAL_ADC_PollForConversion(&hadc1,100);
 8000c3a:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c3c:	2164      	movs	r1, #100	; 0x64
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 fe48 	bl	80018d4 <HAL_ADC_PollForConversion>
    	  Data[0] =  HAL_ADC_GetValue(&hadc1);
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 fed8 	bl	80019fc <HAL_ADC_GetValue>
 8000c4c:	0002      	movs	r2, r0
 8000c4e:	2418      	movs	r4, #24
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	601a      	str	r2, [r3, #0]



    	  HAL_ADC_Start(&hadc1);
 8000c54:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 fdb2 	bl	80017c0 <HAL_ADC_Start>
    	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000c5c:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c5e:	2164      	movs	r1, #100	; 0x64
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 fe37 	bl	80018d4 <HAL_ADC_PollForConversion>
    	  Data[1] =  HAL_ADC_GetValue(&hadc1);
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f000 fec7 	bl	80019fc <HAL_ADC_GetValue>
 8000c6e:	0002      	movs	r2, r0
 8000c70:	193b      	adds	r3, r7, r4
 8000c72:	605a      	str	r2, [r3, #4]
    	  HAL_ADC_Stop(&hadc1);
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 fdf0 	bl	800185c <HAL_ADC_Stop>

//    	  https://community.st.com/t5/stm32cubemx-mcus/reading-multiple-adc-channel/td-p/171369


    	  HEX_to_DEC(Data[0], &transmitBuffer[2]);
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a20      	ldr	r2, [pc, #128]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff fcc9 	bl	800061c <HEX_to_DEC>
    	  transmitBuffer[6] = ' ';
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	719a      	strb	r2, [r3, #6]
    	  HEX_to_DEC(Data[1], &transmitBuffer[7]);
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff fcbf 	bl	800061c <HEX_to_DEC>
    	  transmitBuffer[11] = (char)'\n';
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000ca0:	220a      	movs	r2, #10
 8000ca2:	72da      	strb	r2, [r3, #11]

        HAL_UART_Transmit_IT(&huart1, transmitBuffer, 12);
 8000ca4:	4915      	ldr	r1, [pc, #84]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000ca8:	220c      	movs	r2, #12
 8000caa:	0018      	movs	r0, r3
 8000cac:	f003 f99a 	bl	8003fe4 <HAL_UART_Transmit_IT>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
    		Timer_State ++;
    	}
    	else{Timer_State ++;}
    }
}
 8000cb0:	e01c      	b.n	8000cec <HAL_TIM_PeriodElapsedCallback+0x138>
    	else if(Timer_State == FLASH_PERIOD)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b64      	cmp	r3, #100	; 0x64
 8000cb8:	d113      	bne.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0x12e>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	0219      	lsls	r1, r3, #8
 8000cbe:	23a0      	movs	r3, #160	; 0xa0
 8000cc0:	05db      	lsls	r3, r3, #23
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f001 fe45 	bl	8002954 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2101      	movs	r1, #1
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f001 fe3f 	bl	8002954 <HAL_GPIO_WritePin>
    		Timer_State ++;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	e004      	b.n	8000cec <HAL_TIM_PeriodElapsedCallback+0x138>
    	else{Timer_State ++;}
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cea:	601a      	str	r2, [r3, #0]
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b009      	add	sp, #36	; 0x24
 8000cf2:	bd90      	pop	{r4, r7, pc}
 8000cf4:	20000120 	.word	0x20000120
 8000cf8:	50000400 	.word	0x50000400
 8000cfc:	20000124 	.word	0x20000124
 8000d00:	20000028 	.word	0x20000028
 8000d04:	20000126 	.word	0x20000126
 8000d08:	2000012b 	.word	0x2000012b
 8000d0c:	2000008c 	.word	0x2000008c

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_MspInit+0x44>)
 8000d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_MspInit+0x44>)
 8000d28:	2101      	movs	r1, #1
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_MspInit+0x44>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	2201      	movs	r2, #1
 8000d34:	4013      	ands	r3, r2
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x44>)
 8000d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_MspInit+0x44>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	0549      	lsls	r1, r1, #21
 8000d44:	430a      	orrs	r2, r1
 8000d46:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_MspInit+0x44>)
 8000d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	055b      	lsls	r3, r3, #21
 8000d50:	4013      	ands	r3, r2
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b095      	sub	sp, #84	; 0x54
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	233c      	movs	r3, #60	; 0x3c
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	0018      	movs	r0, r3
 8000d72:	2314      	movs	r3, #20
 8000d74:	001a      	movs	r2, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	f004 fd22 	bl	80057c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	2414      	movs	r4, #20
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	0018      	movs	r0, r3
 8000d82:	2328      	movs	r3, #40	; 0x28
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f004 fd1a 	bl	80057c0 <memset>
  if(hadc->Instance==ADC1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a20      	ldr	r2, [pc, #128]	; (8000e14 <HAL_ADC_MspInit+0xb0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d139      	bne.n	8000e0a <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	01d2      	lsls	r2, r2, #7
 8000d9c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	0018      	movs	r0, r3
 8000da8:	f002 fb02 	bl	80033b0 <HAL_RCCEx_PeriphCLKConfig>
 8000dac:	1e03      	subs	r3, r0, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000db0:	f7ff ffae 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_ADC_MspInit+0xb4>)
 8000db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_ADC_MspInit+0xb4>)
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	0349      	lsls	r1, r1, #13
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	641a      	str	r2, [r3, #64]	; 0x40
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_ADC_MspInit+0xb4>)
 8000dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	035b      	lsls	r3, r3, #13
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_ADC_MspInit+0xb4>)
 8000dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <HAL_ADC_MspInit+0xb4>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_ADC_MspInit+0xb4>)
 8000dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de0:	2201      	movs	r2, #1
 8000de2:	4013      	ands	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000de8:	213c      	movs	r1, #60	; 0x3c
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2203      	movs	r2, #3
 8000dee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2203      	movs	r2, #3
 8000df4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	187b      	adds	r3, r7, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	187a      	adds	r2, r7, r1
 8000dfe:	23a0      	movs	r3, #160	; 0xa0
 8000e00:	05db      	lsls	r3, r3, #23
 8000e02:	0011      	movs	r1, r2
 8000e04:	0018      	movs	r0, r3
 8000e06:	f001 fc41 	bl	800268c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b015      	add	sp, #84	; 0x54
 8000e10:	bd90      	pop	{r4, r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	40012400 	.word	0x40012400
 8000e18:	40021000 	.word	0x40021000

08000e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	05db      	lsls	r3, r3, #23
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d113      	bne.n	8000e58 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_TIM_Base_MspInit+0x44>)
 8000e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_TIM_Base_MspInit+0x44>)
 8000e36:	2101      	movs	r1, #1
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_TIM_Base_MspInit+0x44>)
 8000e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e40:	2201      	movs	r2, #1
 8000e42:	4013      	ands	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	200f      	movs	r0, #15
 8000e4e:	f001 fb1f 	bl	8002490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e52:	200f      	movs	r0, #15
 8000e54:	f001 fb31 	bl	80024ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b004      	add	sp, #16
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b097      	sub	sp, #92	; 0x5c
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	2344      	movs	r3, #68	; 0x44
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	0018      	movs	r0, r3
 8000e72:	2314      	movs	r3, #20
 8000e74:	001a      	movs	r2, r3
 8000e76:	2100      	movs	r1, #0
 8000e78:	f004 fca2 	bl	80057c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e7c:	241c      	movs	r4, #28
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	0018      	movs	r0, r3
 8000e82:	2328      	movs	r3, #40	; 0x28
 8000e84:	001a      	movs	r2, r3
 8000e86:	2100      	movs	r1, #0
 8000e88:	f004 fc9a 	bl	80057c0 <memset>
  if(huart->Instance==USART1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a45      	ldr	r2, [pc, #276]	; (8000fa8 <HAL_UART_MspInit+0x144>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d146      	bne.n	8000f24 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	2201      	movs	r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f002 fa83 	bl	80033b0 <HAL_RCCEx_PeriphCLKConfig>
 8000eaa:	1e03      	subs	r3, r0, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eae:	f7ff ff2f 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eb2:	4b3e      	ldr	r3, [pc, #248]	; (8000fac <HAL_UART_MspInit+0x148>)
 8000eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb6:	4b3d      	ldr	r3, [pc, #244]	; (8000fac <HAL_UART_MspInit+0x148>)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	01c9      	lsls	r1, r1, #7
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec0:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <HAL_UART_MspInit+0x148>)
 8000ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	01db      	lsls	r3, r3, #7
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
 8000ecc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <HAL_UART_MspInit+0x148>)
 8000ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed2:	4b36      	ldr	r3, [pc, #216]	; (8000fac <HAL_UART_MspInit+0x148>)
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eda:	4b34      	ldr	r3, [pc, #208]	; (8000fac <HAL_UART_MspInit+0x148>)
 8000edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ede:	2202      	movs	r2, #2
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ee6:	2144      	movs	r1, #68	; 0x44
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	22c0      	movs	r2, #192	; 0xc0
 8000eec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	4a29      	ldr	r2, [pc, #164]	; (8000fb0 <HAL_UART_MspInit+0x14c>)
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	0010      	movs	r0, r2
 8000f0e:	f001 fbbd 	bl	800268c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	201b      	movs	r0, #27
 8000f18:	f001 faba 	bl	8002490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f1c:	201b      	movs	r0, #27
 8000f1e:	f001 facc 	bl	80024ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f22:	e03d      	b.n	8000fa0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <HAL_UART_MspInit+0x150>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d138      	bne.n	8000fa0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <HAL_UART_MspInit+0x148>)
 8000f30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <HAL_UART_MspInit+0x148>)
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	0289      	lsls	r1, r1, #10
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_UART_MspInit+0x148>)
 8000f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	029b      	lsls	r3, r3, #10
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_UART_MspInit+0x148>)
 8000f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_UART_MspInit+0x148>)
 8000f50:	2101      	movs	r1, #1
 8000f52:	430a      	orrs	r2, r1
 8000f54:	635a      	str	r2, [r3, #52]	; 0x34
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_UART_MspInit+0x148>)
 8000f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f62:	2144      	movs	r1, #68	; 0x44
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	220c      	movs	r2, #12
 8000f68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2201      	movs	r2, #1
 8000f80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	187a      	adds	r2, r7, r1
 8000f84:	23a0      	movs	r3, #160	; 0xa0
 8000f86:	05db      	lsls	r3, r3, #23
 8000f88:	0011      	movs	r1, r2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f001 fb7e 	bl	800268c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	201c      	movs	r0, #28
 8000f96:	f001 fa7b 	bl	8002490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f9a:	201c      	movs	r0, #28
 8000f9c:	f001 fa8d 	bl	80024ba <HAL_NVIC_EnableIRQ>
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b017      	add	sp, #92	; 0x5c
 8000fa6:	bd90      	pop	{r4, r7, pc}
 8000fa8:	40013800 	.word	0x40013800
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	50000400 	.word	0x50000400
 8000fb4:	40004400 	.word	0x40004400

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f8c2 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <TIM2_IRQHandler+0x14>)
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f002 fc04 	bl	80037fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	20000144 	.word	0x20000144

08001000 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <USART1_IRQHandler+0x14>)
 8001006:	0018      	movs	r0, r3
 8001008:	f003 f894 	bl	8004134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	2000008c 	.word	0x2000008c

08001018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <USART2_IRQHandler+0x14>)
 800101e:	0018      	movs	r0, r3
 8001020:	f003 f888 	bl	8004134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	20000190 	.word	0x20000190

08001030 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001040:	f7ff fff6 	bl	8001030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	; (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800106a:	f004 fb85 	bl	8005778 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800106e:	f7ff fb31 	bl	80006d4 <main>

08001072 <LoopForever>:

LoopForever:
  b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   r0, =_estack
 8001074:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001080:	08005880 	.word	0x08005880
  ldr r2, =_sbss
 8001084:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001088:	20000248 	.word	0x20000248

0800108c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_IRQHandler>
	...

08001090 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_Init+0x3c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Init+0x3c>)
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0049      	lsls	r1, r1, #1
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010aa:	2003      	movs	r0, #3
 80010ac:	f000 f810 	bl	80010d0 <HAL_InitTick>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d003      	beq.n	80010bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e001      	b.n	80010c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010bc:	f7ff fe2e 	bl	8000d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	781b      	ldrb	r3, [r3, #0]
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b002      	add	sp, #8
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	230f      	movs	r3, #15
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_InitTick+0x88>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d02b      	beq.n	8001140 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_InitTick+0x8c>)
 80010ea:	681c      	ldr	r4, [r3, #0]
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_InitTick+0x88>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	0019      	movs	r1, r3
 80010f2:	23fa      	movs	r3, #250	; 0xfa
 80010f4:	0098      	lsls	r0, r3, #2
 80010f6:	f7ff f805 	bl	8000104 <__udivsi3>
 80010fa:	0003      	movs	r3, r0
 80010fc:	0019      	movs	r1, r3
 80010fe:	0020      	movs	r0, r4
 8001100:	f7ff f800 	bl	8000104 <__udivsi3>
 8001104:	0003      	movs	r3, r0
 8001106:	0018      	movs	r0, r3
 8001108:	f001 f9e7 	bl	80024da <HAL_SYSTICK_Config>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d112      	bne.n	8001136 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d80a      	bhi.n	800112c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	2301      	movs	r3, #1
 800111a:	425b      	negs	r3, r3
 800111c:	2200      	movs	r2, #0
 800111e:	0018      	movs	r0, r3
 8001120:	f001 f9b6 	bl	8002490 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_InitTick+0x90>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e00d      	b.n	8001148 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800112c:	230f      	movs	r3, #15
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e008      	b.n	8001148 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001136:	230f      	movs	r3, #15
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e003      	b.n	8001148 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001148:	230f      	movs	r3, #15
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	781b      	ldrb	r3, [r3, #0]
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b005      	add	sp, #20
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	20000008 	.word	0x20000008
 800115c:	20000000 	.word	0x20000000
 8001160:	20000004 	.word	0x20000004

08001164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x1c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	001a      	movs	r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x20>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	18d2      	adds	r2, r2, r3
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_IncTick+0x20>)
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20000008 	.word	0x20000008
 8001184:	20000244 	.word	0x20000244

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b02      	ldr	r3, [pc, #8]	; (8001198 <HAL_GetTick+0x10>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	20000244 	.word	0x20000244

0800119c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80011ac:	401a      	ands	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	601a      	str	r2, [r3, #0]
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b002      	add	sp, #8
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	fe3fffff 	.word	0xfe3fffff

080011c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	23e0      	movs	r3, #224	; 0xe0
 80011d2:	045b      	lsls	r3, r3, #17
 80011d4:	4013      	ands	r3, r2
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b002      	add	sp, #8
 80011dc:	bd80      	pop	{r7, pc}

080011de <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	2104      	movs	r1, #4
 80011f2:	400a      	ands	r2, r1
 80011f4:	2107      	movs	r1, #7
 80011f6:	4091      	lsls	r1, r2
 80011f8:	000a      	movs	r2, r1
 80011fa:	43d2      	mvns	r2, r2
 80011fc:	401a      	ands	r2, r3
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2104      	movs	r1, #4
 8001202:	400b      	ands	r3, r1
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4099      	lsls	r1, r3
 8001208:	000b      	movs	r3, r1
 800120a:	431a      	orrs	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b004      	add	sp, #16
 8001216:	bd80      	pop	{r7, pc}

08001218 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	2104      	movs	r1, #4
 800122a:	400a      	ands	r2, r1
 800122c:	2107      	movs	r1, #7
 800122e:	4091      	lsls	r1, r2
 8001230:	000a      	movs	r2, r1
 8001232:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2104      	movs	r1, #4
 8001238:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800123a:	40da      	lsrs	r2, r3
 800123c:	0013      	movs	r3, r2
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}

08001246 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	23c0      	movs	r3, #192	; 0xc0
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	4013      	ands	r3, r2
 8001258:	d101      	bne.n	800125e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800125e:	2300      	movs	r3, #0
}
 8001260:	0018      	movs	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	b002      	add	sp, #8
 8001266:	bd80      	pop	{r7, pc}

08001268 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	211f      	movs	r1, #31
 800127c:	400a      	ands	r2, r1
 800127e:	210f      	movs	r1, #15
 8001280:	4091      	lsls	r1, r2
 8001282:	000a      	movs	r2, r1
 8001284:	43d2      	mvns	r2, r2
 8001286:	401a      	ands	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	0e9b      	lsrs	r3, r3, #26
 800128c:	210f      	movs	r1, #15
 800128e:	4019      	ands	r1, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	201f      	movs	r0, #31
 8001294:	4003      	ands	r3, r0
 8001296:	4099      	lsls	r1, r3
 8001298:	000b      	movs	r3, r1
 800129a:	431a      	orrs	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b004      	add	sp, #16
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	035b      	lsls	r3, r3, #13
 80012ba:	0b5b      	lsrs	r3, r3, #13
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}

080012ca <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	0352      	lsls	r2, r2, #13
 80012dc:	0b52      	lsrs	r2, r2, #13
 80012de:	43d2      	mvns	r2, r2
 80012e0:	401a      	ands	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b002      	add	sp, #8
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	0212      	lsls	r2, r2, #8
 8001304:	43d2      	mvns	r2, r2
 8001306:	401a      	ands	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	400b      	ands	r3, r1
 8001310:	4904      	ldr	r1, [pc, #16]	; (8001324 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001312:	400b      	ands	r3, r1
 8001314:	431a      	orrs	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	b004      	add	sp, #16
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	07ffff00 	.word	0x07ffff00

08001328 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4a05      	ldr	r2, [pc, #20]	; (800134c <LL_ADC_EnableInternalRegulator+0x24>)
 8001336:	4013      	ands	r3, r2
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	0552      	lsls	r2, r2, #21
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	6fffffe8 	.word	0x6fffffe8

08001350 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	055b      	lsls	r3, r3, #21
 8001360:	401a      	ands	r2, r3
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	055b      	lsls	r3, r3, #21
 8001366:	429a      	cmp	r2, r3
 8001368:	d101      	bne.n	800136e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800136e:	2300      	movs	r3, #0
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <LL_ADC_Enable+0x20>)
 8001386:	4013      	ands	r3, r2
 8001388:	2201      	movs	r2, #1
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}
 8001398:	7fffffe8 	.word	0x7fffffe8

0800139c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <LL_ADC_Disable+0x20>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	2202      	movs	r2, #2
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	7fffffe8 	.word	0x7fffffe8

080013c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2201      	movs	r2, #1
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <LL_ADC_IsEnabled+0x18>
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <LL_ADC_IsEnabled+0x1a>
 80013d8:	2300      	movs	r3, #0
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b002      	add	sp, #8
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2202      	movs	r2, #2
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d101      	bne.n	80013fa <LL_ADC_IsDisableOngoing+0x18>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <LL_ADC_IsDisableOngoing+0x1a>
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b002      	add	sp, #8
 8001402:	bd80      	pop	{r7, pc}

08001404 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <LL_ADC_REG_StartConversion+0x20>)
 8001412:	4013      	ands	r3, r2
 8001414:	2204      	movs	r2, #4
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}
 8001424:	7fffffe8 	.word	0x7fffffe8

08001428 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <LL_ADC_REG_StopConversion+0x20>)
 8001436:	4013      	ands	r3, r2
 8001438:	2210      	movs	r2, #16
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}
 8001448:	7fffffe8 	.word	0x7fffffe8

0800144c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2204      	movs	r2, #4
 800145a:	4013      	ands	r3, r2
 800145c:	2b04      	cmp	r3, #4
 800145e:	d101      	bne.n	8001464 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001464:	2300      	movs	r3, #0
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	b002      	add	sp, #8
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001478:	231f      	movs	r3, #31
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e17f      	b.n	8001796 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10a      	bne.n	80014b4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff fc5f 	bl	8000d64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2254      	movs	r2, #84	; 0x54
 80014b0:	2100      	movs	r1, #0
 80014b2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff ff49 	bl	8001350 <LL_ADC_IsInternalRegulatorEnabled>
 80014be:	1e03      	subs	r3, r0, #0
 80014c0:	d115      	bne.n	80014ee <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	0018      	movs	r0, r3
 80014c8:	f7ff ff2e 	bl	8001328 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014cc:	4bb4      	ldr	r3, [pc, #720]	; (80017a0 <HAL_ADC_Init+0x330>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	49b4      	ldr	r1, [pc, #720]	; (80017a4 <HAL_ADC_Init+0x334>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7fe fe16 	bl	8000104 <__udivsi3>
 80014d8:	0003      	movs	r3, r0
 80014da:	3301      	adds	r3, #1
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014e0:	e002      	b.n	80014e8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f9      	bne.n	80014e2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff ff2c 	bl	8001350 <LL_ADC_IsInternalRegulatorEnabled>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d10f      	bne.n	800151c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001500:	2210      	movs	r2, #16
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150c:	2201      	movs	r2, #1
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001514:	231f      	movs	r3, #31
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff ff93 	bl	800144c <LL_ADC_REG_IsConversionOngoing>
 8001526:	0003      	movs	r3, r0
 8001528:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152e:	2210      	movs	r2, #16
 8001530:	4013      	ands	r3, r2
 8001532:	d000      	beq.n	8001536 <HAL_ADC_Init+0xc6>
 8001534:	e122      	b.n	800177c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d000      	beq.n	800153e <HAL_ADC_Init+0xce>
 800153c:	e11e      	b.n	800177c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	4a99      	ldr	r2, [pc, #612]	; (80017a8 <HAL_ADC_Init+0x338>)
 8001544:	4013      	ands	r3, r2
 8001546:	2202      	movs	r2, #2
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	0018      	movs	r0, r3
 8001554:	f7ff ff34 	bl	80013c0 <LL_ADC_IsEnabled>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d000      	beq.n	800155e <HAL_ADC_Init+0xee>
 800155c:	e0ad      	b.n	80016ba <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7e1b      	ldrb	r3, [r3, #24]
 8001566:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001568:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7e5b      	ldrb	r3, [r3, #25]
 800156e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001570:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7e9b      	ldrb	r3, [r3, #26]
 8001576:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001578:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <HAL_ADC_Init+0x118>
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	015b      	lsls	r3, r3, #5
 8001586:	e000      	b.n	800158a <HAL_ADC_Init+0x11a>
 8001588:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800158a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001590:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2b00      	cmp	r3, #0
 8001598:	da04      	bge.n	80015a4 <HAL_ADC_Init+0x134>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	e001      	b.n	80015a8 <HAL_ADC_Init+0x138>
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80015a8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	212c      	movs	r1, #44	; 0x2c
 80015ae:	5c5b      	ldrb	r3, [r3, r1]
 80015b0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015b2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2220      	movs	r2, #32
 80015be:	5c9b      	ldrb	r3, [r3, r2]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d115      	bne.n	80015f0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7e9b      	ldrb	r3, [r3, #26]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	0252      	lsls	r2, r2, #9
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	e00b      	b.n	80015f0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015dc:	2220      	movs	r2, #32
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e8:	2201      	movs	r2, #1
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00a      	beq.n	800160e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fc:	23e0      	movs	r3, #224	; 0xe0
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001606:	4313      	orrs	r3, r2
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4a65      	ldr	r2, [pc, #404]	; (80017ac <HAL_ADC_Init+0x33c>)
 8001616:	4013      	ands	r3, r2
 8001618:	0019      	movs	r1, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	430a      	orrs	r2, r1
 8001622:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	0f9b      	lsrs	r3, r3, #30
 800162a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001630:	4313      	orrs	r3, r2
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4313      	orrs	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	223c      	movs	r2, #60	; 0x3c
 800163c:	5c9b      	ldrb	r3, [r3, r2]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d111      	bne.n	8001666 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	0f9b      	lsrs	r3, r3, #30
 8001648:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800164e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001654:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800165a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	4313      	orrs	r3, r2
 8001660:	2201      	movs	r2, #1
 8001662:	4313      	orrs	r3, r2
 8001664:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	4a50      	ldr	r2, [pc, #320]	; (80017b0 <HAL_ADC_Init+0x340>)
 800166e:	4013      	ands	r3, r2
 8001670:	0019      	movs	r1, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	430a      	orrs	r2, r1
 800167a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	23c0      	movs	r3, #192	; 0xc0
 8001682:	061b      	lsls	r3, r3, #24
 8001684:	429a      	cmp	r2, r3
 8001686:	d018      	beq.n	80016ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	05db      	lsls	r3, r3, #23
 8001690:	429a      	cmp	r2, r3
 8001692:	d012      	beq.n	80016ba <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	061b      	lsls	r3, r3, #24
 800169c:	429a      	cmp	r2, r3
 800169e:	d00c      	beq.n	80016ba <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80016a0:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <HAL_ADC_Init+0x344>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a44      	ldr	r2, [pc, #272]	; (80017b8 <HAL_ADC_Init+0x348>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	23f0      	movs	r3, #240	; 0xf0
 80016b0:	039b      	lsls	r3, r3, #14
 80016b2:	401a      	ands	r2, r3
 80016b4:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <HAL_ADC_Init+0x344>)
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c2:	001a      	movs	r2, r3
 80016c4:	2100      	movs	r1, #0
 80016c6:	f7ff fd8a 	bl	80011de <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d2:	493a      	ldr	r1, [pc, #232]	; (80017bc <HAL_ADC_Init+0x34c>)
 80016d4:	001a      	movs	r2, r3
 80016d6:	f7ff fd82 	bl	80011de <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2110      	movs	r1, #16
 80016ee:	4249      	negs	r1, r1
 80016f0:	430a      	orrs	r2, r1
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
 80016f4:	e018      	b.n	8001728 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	039b      	lsls	r3, r3, #14
 80016fe:	429a      	cmp	r2, r3
 8001700:	d112      	bne.n	8001728 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	3b01      	subs	r3, #1
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	221c      	movs	r2, #28
 8001712:	4013      	ands	r3, r2
 8001714:	2210      	movs	r2, #16
 8001716:	4252      	negs	r2, r2
 8001718:	409a      	lsls	r2, r3
 800171a:	0011      	movs	r1, r2
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2100      	movs	r1, #0
 800172e:	0018      	movs	r0, r3
 8001730:	f7ff fd72 	bl	8001218 <LL_ADC_GetSamplingTimeCommonChannels>
 8001734:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800173a:	429a      	cmp	r2, r3
 800173c:	d10b      	bne.n	8001756 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	2203      	movs	r2, #3
 800174a:	4393      	bics	r3, r2
 800174c:	2201      	movs	r2, #1
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001754:	e01c      	b.n	8001790 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	2212      	movs	r2, #18
 800175c:	4393      	bics	r3, r2
 800175e:	2210      	movs	r2, #16
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	2201      	movs	r2, #1
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001772:	231f      	movs	r3, #31
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800177a:	e009      	b.n	8001790 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001780:	2210      	movs	r2, #16
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001788:	231f      	movs	r3, #31
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001790:	231f      	movs	r3, #31
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	781b      	ldrb	r3, [r3, #0]
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b008      	add	sp, #32
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	20000000 	.word	0x20000000
 80017a4:	00030d40 	.word	0x00030d40
 80017a8:	fffffefd 	.word	0xfffffefd
 80017ac:	ffde0201 	.word	0xffde0201
 80017b0:	1ffffc02 	.word	0x1ffffc02
 80017b4:	40012708 	.word	0x40012708
 80017b8:	ffc3ffff 	.word	0xffc3ffff
 80017bc:	07ffff04 	.word	0x07ffff04

080017c0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff fe3d 	bl	800144c <LL_ADC_REG_IsConversionOngoing>
 80017d2:	1e03      	subs	r3, r0, #0
 80017d4:	d135      	bne.n	8001842 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2254      	movs	r2, #84	; 0x54
 80017da:	5c9b      	ldrb	r3, [r3, r2]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_Start+0x24>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e035      	b.n	8001850 <HAL_ADC_Start+0x90>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2254      	movs	r2, #84	; 0x54
 80017e8:	2101      	movs	r1, #1
 80017ea:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017ec:	250f      	movs	r5, #15
 80017ee:	197c      	adds	r4, r7, r5
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	0018      	movs	r0, r3
 80017f4:	f000 fb28 	bl	8001e48 <ADC_Enable>
 80017f8:	0003      	movs	r3, r0
 80017fa:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017fc:	197b      	adds	r3, r7, r5
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d119      	bne.n	8001838 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	4a13      	ldr	r2, [pc, #76]	; (8001858 <HAL_ADC_Start+0x98>)
 800180a:	4013      	ands	r3, r2
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	0052      	lsls	r2, r2, #1
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	221c      	movs	r2, #28
 8001822:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2254      	movs	r2, #84	; 0x54
 8001828:	2100      	movs	r1, #0
 800182a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff fde7 	bl	8001404 <LL_ADC_REG_StartConversion>
 8001836:	e008      	b.n	800184a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2254      	movs	r2, #84	; 0x54
 800183c:	2100      	movs	r1, #0
 800183e:	5499      	strb	r1, [r3, r2]
 8001840:	e003      	b.n	800184a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001842:	230f      	movs	r3, #15
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	2202      	movs	r2, #2
 8001848:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800184a:	230f      	movs	r3, #15
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	781b      	ldrb	r3, [r3, #0]
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bdb0      	pop	{r4, r5, r7, pc}
 8001858:	fffff0fe 	.word	0xfffff0fe

0800185c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2254      	movs	r2, #84	; 0x54
 8001868:	5c9b      	ldrb	r3, [r3, r2]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_ADC_Stop+0x16>
 800186e:	2302      	movs	r3, #2
 8001870:	e029      	b.n	80018c6 <HAL_ADC_Stop+0x6a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2254      	movs	r2, #84	; 0x54
 8001876:	2101      	movs	r1, #1
 8001878:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800187a:	250f      	movs	r5, #15
 800187c:	197c      	adds	r4, r7, r5
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	0018      	movs	r0, r3
 8001882:	f000 fa9f 	bl	8001dc4 <ADC_ConversionStop>
 8001886:	0003      	movs	r3, r0
 8001888:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800188a:	197b      	adds	r3, r7, r5
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d112      	bne.n	80018b8 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001892:	197c      	adds	r4, r7, r5
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	0018      	movs	r0, r3
 8001898:	f000 fb5c 	bl	8001f54 <ADC_Disable>
 800189c:	0003      	movs	r3, r0
 800189e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80018a0:	197b      	adds	r3, r7, r5
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d107      	bne.n	80018b8 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_ADC_Stop+0x74>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	2201      	movs	r2, #1
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2254      	movs	r2, #84	; 0x54
 80018bc:	2100      	movs	r1, #0
 80018be:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80018c0:	230f      	movs	r3, #15
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	781b      	ldrb	r3, [r3, #0]
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b004      	add	sp, #16
 80018cc:	bdb0      	pop	{r4, r5, r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	fffffefe 	.word	0xfffffefe

080018d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d102      	bne.n	80018ec <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80018e6:	2308      	movs	r3, #8
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	e00f      	b.n	800190c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2201      	movs	r2, #1
 80018f4:	4013      	ands	r3, r2
 80018f6:	d007      	beq.n	8001908 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	2220      	movs	r2, #32
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e072      	b.n	80019ee <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001908:	2304      	movs	r3, #4
 800190a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800190c:	f7ff fc3c 	bl	8001188 <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001914:	e01f      	b.n	8001956 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	d01c      	beq.n	8001956 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800191c:	f7ff fc34 	bl	8001188 <HAL_GetTick>
 8001920:	0002      	movs	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d302      	bcc.n	8001932 <HAL_ADC_PollForConversion+0x5e>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d111      	bne.n	8001956 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4013      	ands	r3, r2
 800193c:	d10b      	bne.n	8001956 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	2204      	movs	r2, #4
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2254      	movs	r2, #84	; 0x54
 800194e:	2100      	movs	r1, #0
 8001950:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e04b      	b.n	80019ee <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	d0d9      	beq.n	8001916 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	2280      	movs	r2, #128	; 0x80
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff fc66 	bl	8001246 <LL_ADC_REG_IsTriggerSourceSWStart>
 800197a:	1e03      	subs	r3, r0, #0
 800197c:	d02e      	beq.n	80019dc <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7e9b      	ldrb	r3, [r3, #26]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d12a      	bne.n	80019dc <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2208      	movs	r2, #8
 800198e:	4013      	ands	r3, r2
 8001990:	2b08      	cmp	r3, #8
 8001992:	d123      	bne.n	80019dc <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0018      	movs	r0, r3
 800199a:	f7ff fd57 	bl	800144c <LL_ADC_REG_IsConversionOngoing>
 800199e:	1e03      	subs	r3, r0, #0
 80019a0:	d110      	bne.n	80019c4 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	210c      	movs	r1, #12
 80019ae:	438a      	bics	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	4a10      	ldr	r2, [pc, #64]	; (80019f8 <HAL_ADC_PollForConversion+0x124>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	2201      	movs	r2, #1
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	659a      	str	r2, [r3, #88]	; 0x58
 80019c2:	e00b      	b.n	80019dc <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	2220      	movs	r2, #32
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2201      	movs	r2, #1
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7e1b      	ldrb	r3, [r3, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d103      	bne.n	80019ec <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	220c      	movs	r2, #12
 80019ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b004      	add	sp, #16
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	fffffefe 	.word	0xfffffefe

080019fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a1e:	2317      	movs	r3, #23
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2254      	movs	r2, #84	; 0x54
 8001a2e:	5c9b      	ldrb	r3, [r3, r2]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x24>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e1c0      	b.n	8001dba <HAL_ADC_ConfigChannel+0x3a6>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2254      	movs	r2, #84	; 0x54
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7ff fd01 	bl	800144c <LL_ADC_REG_IsConversionOngoing>
 8001a4a:	1e03      	subs	r3, r0, #0
 8001a4c:	d000      	beq.n	8001a50 <HAL_ADC_ConfigChannel+0x3c>
 8001a4e:	e1a3      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d100      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x46>
 8001a58:	e143      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	061b      	lsls	r3, r3, #24
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d004      	beq.n	8001a70 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a6a:	4ac1      	ldr	r2, [pc, #772]	; (8001d70 <HAL_ADC_ConfigChannel+0x35c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d108      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0019      	movs	r1, r3
 8001a7a:	0010      	movs	r0, r2
 8001a7c:	f7ff fc14 	bl	80012a8 <LL_ADC_REG_SetSequencerChAdd>
 8001a80:	e0c9      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	211f      	movs	r1, #31
 8001a8c:	400b      	ands	r3, r1
 8001a8e:	210f      	movs	r1, #15
 8001a90:	4099      	lsls	r1, r3
 8001a92:	000b      	movs	r3, r1
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4013      	ands	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	035b      	lsls	r3, r3, #13
 8001aa0:	0b5b      	lsrs	r3, r3, #13
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x9c>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0e9b      	lsrs	r3, r3, #26
 8001aaa:	221f      	movs	r2, #31
 8001aac:	4013      	ands	r3, r2
 8001aae:	e098      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d000      	beq.n	8001abc <HAL_ADC_ConfigChannel+0xa8>
 8001aba:	e091      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x1cc>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d000      	beq.n	8001ac8 <HAL_ADC_ConfigChannel+0xb4>
 8001ac6:	e089      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x1c8>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2204      	movs	r2, #4
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d000      	beq.n	8001ad4 <HAL_ADC_ConfigChannel+0xc0>
 8001ad2:	e081      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x1c4>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2208      	movs	r2, #8
 8001ada:	4013      	ands	r3, r2
 8001adc:	d000      	beq.n	8001ae0 <HAL_ADC_ConfigChannel+0xcc>
 8001ade:	e079      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x1c0>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2210      	movs	r2, #16
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d000      	beq.n	8001aec <HAL_ADC_ConfigChannel+0xd8>
 8001aea:	e071      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x1bc>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2220      	movs	r2, #32
 8001af2:	4013      	ands	r3, r2
 8001af4:	d000      	beq.n	8001af8 <HAL_ADC_ConfigChannel+0xe4>
 8001af6:	e069      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x1b8>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2240      	movs	r2, #64	; 0x40
 8001afe:	4013      	ands	r3, r2
 8001b00:	d000      	beq.n	8001b04 <HAL_ADC_ConfigChannel+0xf0>
 8001b02:	e061      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x1b4>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d000      	beq.n	8001b10 <HAL_ADC_ConfigChannel+0xfc>
 8001b0e:	e059      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x1b0>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d151      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x1ac>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4013      	ands	r3, r2
 8001b26:	d149      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x1a8>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4013      	ands	r3, r2
 8001b32:	d141      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x1a4>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d139      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1a0>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	015b      	lsls	r3, r3, #5
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d131      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x19c>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	019b      	lsls	r3, r3, #6
 8001b54:	4013      	ands	r3, r2
 8001b56:	d129      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x198>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	01db      	lsls	r3, r3, #7
 8001b60:	4013      	ands	r3, r2
 8001b62:	d121      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x194>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d119      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x190>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	025b      	lsls	r3, r3, #9
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d111      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x18c>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	029b      	lsls	r3, r3, #10
 8001b84:	4013      	ands	r3, r2
 8001b86:	d109      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x188>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	02db      	lsls	r3, r3, #11
 8001b90:	4013      	ands	r3, r2
 8001b92:	d001      	beq.n	8001b98 <HAL_ADC_ConfigChannel+0x184>
 8001b94:	2312      	movs	r3, #18
 8001b96:	e024      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e022      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001b9c:	2311      	movs	r3, #17
 8001b9e:	e020      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ba0:	2310      	movs	r3, #16
 8001ba2:	e01e      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	e01c      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ba8:	230e      	movs	r3, #14
 8001baa:	e01a      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bac:	230d      	movs	r3, #13
 8001bae:	e018      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bb0:	230c      	movs	r3, #12
 8001bb2:	e016      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bb4:	230b      	movs	r3, #11
 8001bb6:	e014      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bb8:	230a      	movs	r3, #10
 8001bba:	e012      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bbc:	2309      	movs	r3, #9
 8001bbe:	e010      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	e00e      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bc4:	2307      	movs	r3, #7
 8001bc6:	e00c      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bc8:	2306      	movs	r3, #6
 8001bca:	e00a      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bcc:	2305      	movs	r3, #5
 8001bce:	e008      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	e006      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e004      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e002      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_ADC_ConfigChannel+0x1ce>
 8001be0:	2300      	movs	r3, #0
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	6852      	ldr	r2, [r2, #4]
 8001be6:	201f      	movs	r0, #31
 8001be8:	4002      	ands	r2, r0
 8001bea:	4093      	lsls	r3, r2
 8001bec:	000a      	movs	r2, r1
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d808      	bhi.n	8001c16 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	001a      	movs	r2, r3
 8001c12:	f7ff fb29 	bl	8001268 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6819      	ldr	r1, [r3, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	001a      	movs	r2, r3
 8001c24:	f7ff fb64 	bl	80012f0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db00      	blt.n	8001c32 <HAL_ADC_ConfigChannel+0x21e>
 8001c30:	e0bc      	b.n	8001dac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c32:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_ADC_ConfigChannel+0x360>)
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff fac5 	bl	80011c4 <LL_ADC_GetCommonPathInternalCh>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a4d      	ldr	r2, [pc, #308]	; (8001d78 <HAL_ADC_ConfigChannel+0x364>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d122      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	041b      	lsls	r3, r3, #16
 8001c4e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c50:	d11d      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	0412      	lsls	r2, r2, #16
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	4a46      	ldr	r2, [pc, #280]	; (8001d74 <HAL_ADC_ConfigChannel+0x360>)
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	0010      	movs	r0, r2
 8001c60:	f7ff fa9c 	bl	800119c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c64:	4b45      	ldr	r3, [pc, #276]	; (8001d7c <HAL_ADC_ConfigChannel+0x368>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4945      	ldr	r1, [pc, #276]	; (8001d80 <HAL_ADC_ConfigChannel+0x36c>)
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7fe fa4a 	bl	8000104 <__udivsi3>
 8001c70:	0003      	movs	r3, r0
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	0013      	movs	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	189b      	adds	r3, r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c7e:	e002      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f9      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c8c:	e08e      	b.n	8001dac <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a3c      	ldr	r2, [pc, #240]	; (8001d84 <HAL_ADC_ConfigChannel+0x370>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d10e      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	045b      	lsls	r3, r3, #17
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d109      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2280      	movs	r2, #128	; 0x80
 8001ca6:	0452      	lsls	r2, r2, #17
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	4a32      	ldr	r2, [pc, #200]	; (8001d74 <HAL_ADC_ConfigChannel+0x360>)
 8001cac:	0019      	movs	r1, r3
 8001cae:	0010      	movs	r0, r2
 8001cb0:	f7ff fa74 	bl	800119c <LL_ADC_SetCommonPathInternalCh>
 8001cb4:	e07a      	b.n	8001dac <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a33      	ldr	r2, [pc, #204]	; (8001d88 <HAL_ADC_ConfigChannel+0x374>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d000      	beq.n	8001cc2 <HAL_ADC_ConfigChannel+0x2ae>
 8001cc0:	e074      	b.n	8001dac <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	03db      	lsls	r3, r3, #15
 8001cc8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cca:	d000      	beq.n	8001cce <HAL_ADC_ConfigChannel+0x2ba>
 8001ccc:	e06e      	b.n	8001dac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2280      	movs	r2, #128	; 0x80
 8001cd2:	03d2      	lsls	r2, r2, #15
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <HAL_ADC_ConfigChannel+0x360>)
 8001cd8:	0019      	movs	r1, r3
 8001cda:	0010      	movs	r0, r2
 8001cdc:	f7ff fa5e 	bl	800119c <LL_ADC_SetCommonPathInternalCh>
 8001ce0:	e064      	b.n	8001dac <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	061b      	lsls	r3, r3, #24
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d004      	beq.n	8001cf8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cf2:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_ADC_ConfigChannel+0x35c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d107      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0019      	movs	r1, r3
 8001d02:	0010      	movs	r0, r2
 8001d04:	f7ff fae1 	bl	80012ca <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	da4d      	bge.n	8001dac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_ADC_ConfigChannel+0x360>)
 8001d12:	0018      	movs	r0, r3
 8001d14:	f7ff fa56 	bl	80011c4 <LL_ADC_GetCommonPathInternalCh>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <HAL_ADC_ConfigChannel+0x364>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d108      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <HAL_ADC_ConfigChannel+0x378>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	4a11      	ldr	r2, [pc, #68]	; (8001d74 <HAL_ADC_ConfigChannel+0x360>)
 8001d2e:	0019      	movs	r1, r3
 8001d30:	0010      	movs	r0, r2
 8001d32:	f7ff fa33 	bl	800119c <LL_ADC_SetCommonPathInternalCh>
 8001d36:	e039      	b.n	8001dac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <HAL_ADC_ConfigChannel+0x370>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d108      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <HAL_ADC_ConfigChannel+0x37c>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_ADC_ConfigChannel+0x360>)
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	0010      	movs	r0, r2
 8001d4e:	f7ff fa25 	bl	800119c <LL_ADC_SetCommonPathInternalCh>
 8001d52:	e02b      	b.n	8001dac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <HAL_ADC_ConfigChannel+0x374>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d126      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <HAL_ADC_ConfigChannel+0x380>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	4a03      	ldr	r2, [pc, #12]	; (8001d74 <HAL_ADC_ConfigChannel+0x360>)
 8001d66:	0019      	movs	r1, r3
 8001d68:	0010      	movs	r0, r2
 8001d6a:	f7ff fa17 	bl	800119c <LL_ADC_SetCommonPathInternalCh>
 8001d6e:	e01d      	b.n	8001dac <HAL_ADC_ConfigChannel+0x398>
 8001d70:	80000004 	.word	0x80000004
 8001d74:	40012708 	.word	0x40012708
 8001d78:	b0001000 	.word	0xb0001000
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	00030d40 	.word	0x00030d40
 8001d84:	b8004000 	.word	0xb8004000
 8001d88:	b4002000 	.word	0xb4002000
 8001d8c:	ff7fffff 	.word	0xff7fffff
 8001d90:	feffffff 	.word	0xfeffffff
 8001d94:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001da4:	2317      	movs	r3, #23
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2254      	movs	r2, #84	; 0x54
 8001db0:	2100      	movs	r1, #0
 8001db2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001db4:	2317      	movs	r3, #23
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	781b      	ldrb	r3, [r3, #0]
}
 8001dba:	0018      	movs	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b006      	add	sp, #24
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)

08001dc4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff fb3b 	bl	800144c <LL_ADC_REG_IsConversionOngoing>
 8001dd6:	1e03      	subs	r3, r0, #0
 8001dd8:	d031      	beq.n	8001e3e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	0018      	movs	r0, r3
 8001de0:	f7ff faff 	bl	80013e2 <LL_ADC_IsDisableOngoing>
 8001de4:	1e03      	subs	r3, r0, #0
 8001de6:	d104      	bne.n	8001df2 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f7ff fb1b 	bl	8001428 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001df2:	f7ff f9c9 	bl	8001188 <HAL_GetTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001dfa:	e01a      	b.n	8001e32 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001dfc:	f7ff f9c4 	bl	8001188 <HAL_GetTick>
 8001e00:	0002      	movs	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d913      	bls.n	8001e32 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2204      	movs	r2, #4
 8001e12:	4013      	ands	r3, r2
 8001e14:	d00d      	beq.n	8001e32 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2201      	movs	r2, #1
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e006      	b.n	8001e40 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d1de      	bne.n	8001dfc <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b004      	add	sp, #16
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f7ff fab1 	bl	80013c0 <LL_ADC_IsEnabled>
 8001e5e:	1e03      	subs	r3, r0, #0
 8001e60:	d000      	beq.n	8001e64 <ADC_Enable+0x1c>
 8001e62:	e069      	b.n	8001f38 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4a36      	ldr	r2, [pc, #216]	; (8001f44 <ADC_Enable+0xfc>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d00d      	beq.n	8001e8c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	2210      	movs	r2, #16
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	2201      	movs	r2, #1
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e056      	b.n	8001f3a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff fa71 	bl	8001378 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <ADC_Enable+0x100>)
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff f993 	bl	80011c4 <LL_ADC_GetCommonPathInternalCh>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	041b      	lsls	r3, r3, #16
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d00f      	beq.n	8001ec8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <ADC_Enable+0x104>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4928      	ldr	r1, [pc, #160]	; (8001f50 <ADC_Enable+0x108>)
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7fe f928 	bl	8000104 <__udivsi3>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001eb8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001eba:	e002      	b.n	8001ec2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f9      	bne.n	8001ebc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7e5b      	ldrb	r3, [r3, #25]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d033      	beq.n	8001f38 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001ed0:	f7ff f95a 	bl	8001188 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ed8:	e027      	b.n	8001f2a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f7ff fa6e 	bl	80013c0 <LL_ADC_IsEnabled>
 8001ee4:	1e03      	subs	r3, r0, #0
 8001ee6:	d104      	bne.n	8001ef2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7ff fa43 	bl	8001378 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ef2:	f7ff f949 	bl	8001188 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d914      	bls.n	8001f2a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2201      	movs	r2, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d00d      	beq.n	8001f2a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	2210      	movs	r2, #16
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1e:	2201      	movs	r2, #1
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e007      	b.n	8001f3a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2201      	movs	r2, #1
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d1d0      	bne.n	8001eda <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b004      	add	sp, #16
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	80000017 	.word	0x80000017
 8001f48:	40012708 	.word	0x40012708
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	00030d40 	.word	0x00030d40

08001f54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f7ff fa3e 	bl	80013e2 <LL_ADC_IsDisableOngoing>
 8001f66:	0003      	movs	r3, r0
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f7ff fa26 	bl	80013c0 <LL_ADC_IsEnabled>
 8001f74:	1e03      	subs	r3, r0, #0
 8001f76:	d046      	beq.n	8002006 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d143      	bne.n	8002006 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2205      	movs	r2, #5
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10d      	bne.n	8001fa8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7ff fa03 	bl	800139c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f9e:	f7ff f8f3 	bl	8001188 <HAL_GetTick>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fa6:	e028      	b.n	8001ffa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	2210      	movs	r2, #16
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	2201      	movs	r2, #1
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e021      	b.n	8002008 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fc4:	f7ff f8e0 	bl	8001188 <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d913      	bls.n	8001ffa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d00d      	beq.n	8001ffa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	2201      	movs	r2, #1
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e006      	b.n	8002008 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2201      	movs	r2, #1
 8002002:	4013      	ands	r3, r2
 8002004:	d1de      	bne.n	8001fc4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b004      	add	sp, #16
 800200e:	bd80      	pop	{r7, pc}

08002010 <LL_ADC_GetCommonClock>:
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	23f0      	movs	r3, #240	; 0xf0
 800201e:	039b      	lsls	r3, r3, #14
 8002020:	4013      	ands	r3, r2
}
 8002022:	0018      	movs	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	b002      	add	sp, #8
 8002028:	bd80      	pop	{r7, pc}

0800202a <LL_ADC_GetClock>:
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	0f9b      	lsrs	r3, r3, #30
 8002038:	079b      	lsls	r3, r3, #30
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b002      	add	sp, #8
 8002040:	bd80      	pop	{r7, pc}

08002042 <LL_ADC_SetCalibrationFactor>:
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	22b4      	movs	r2, #180	; 0xb4
 8002050:	589b      	ldr	r3, [r3, r2]
 8002052:	227f      	movs	r2, #127	; 0x7f
 8002054:	4393      	bics	r3, r2
 8002056:	001a      	movs	r2, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	21b4      	movs	r1, #180	; 0xb4
 8002060:	505a      	str	r2, [r3, r1]
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}

0800206a <LL_ADC_GetCalibrationFactor>:
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	22b4      	movs	r2, #180	; 0xb4
 8002076:	589b      	ldr	r3, [r3, r2]
 8002078:	227f      	movs	r2, #127	; 0x7f
 800207a:	4013      	ands	r3, r2
}
 800207c:	0018      	movs	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	b002      	add	sp, #8
 8002082:	bd80      	pop	{r7, pc}

08002084 <LL_ADC_Enable>:
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <LL_ADC_Enable+0x20>)
 8002092:	4013      	ands	r3, r2
 8002094:	2201      	movs	r2, #1
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	609a      	str	r2, [r3, #8]
}
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	7fffffe8 	.word	0x7fffffe8

080020a8 <LL_ADC_Disable>:
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <LL_ADC_Disable+0x20>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	2202      	movs	r2, #2
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	609a      	str	r2, [r3, #8]
}
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b002      	add	sp, #8
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	7fffffe8 	.word	0x7fffffe8

080020cc <LL_ADC_IsEnabled>:
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2201      	movs	r2, #1
 80020da:	4013      	ands	r3, r2
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <LL_ADC_IsEnabled+0x18>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <LL_ADC_IsEnabled+0x1a>
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	0018      	movs	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b002      	add	sp, #8
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <LL_ADC_StartCalibration>:
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a05      	ldr	r2, [pc, #20]	; (8002114 <LL_ADC_StartCalibration+0x24>)
 80020fe:	4013      	ands	r3, r2
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	0612      	lsls	r2, r2, #24
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	609a      	str	r2, [r3, #8]
}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b002      	add	sp, #8
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	7fffffe8 	.word	0x7fffffe8

08002118 <LL_ADC_IsCalibrationOnGoing>:
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	0fdb      	lsrs	r3, r3, #31
 8002126:	07da      	lsls	r2, r3, #31
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	061b      	lsls	r3, r3, #24
 800212c:	429a      	cmp	r2, r3
 800212e:	d101      	bne.n	8002134 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002134:	2300      	movs	r3, #0
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b002      	add	sp, #8
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b08b      	sub	sp, #44	; 0x2c
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2254      	movs	r2, #84	; 0x54
 8002154:	5c9b      	ldrb	r3, [r3, r2]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_ADCEx_Calibration_Start+0x1e>
 800215a:	2302      	movs	r3, #2
 800215c:	e0dd      	b.n	800231a <HAL_ADCEx_Calibration_Start+0x1da>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2254      	movs	r2, #84	; 0x54
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002166:	231f      	movs	r3, #31
 8002168:	18fc      	adds	r4, r7, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f7ff fef1 	bl	8001f54 <ADC_Disable>
 8002172:	0003      	movs	r3, r0
 8002174:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0018      	movs	r0, r3
 800217c:	f7ff ffa6 	bl	80020cc <LL_ADC_IsEnabled>
 8002180:	1e03      	subs	r3, r0, #0
 8002182:	d000      	beq.n	8002186 <HAL_ADCEx_Calibration_Start+0x46>
 8002184:	e0bc      	b.n	8002300 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	4a66      	ldr	r2, [pc, #408]	; (8002324 <HAL_ADCEx_Calibration_Start+0x1e4>)
 800218c:	4013      	ands	r3, r2
 800218e:	2202      	movs	r2, #2
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a62      	ldr	r2, [pc, #392]	; (8002328 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	495f      	ldr	r1, [pc, #380]	; (800232c <HAL_ADCEx_Calibration_Start+0x1ec>)
 80021ae:	400a      	ands	r2, r1
 80021b0:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
 80021b6:	e02d      	b.n	8002214 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff ff97 	bl	80020f0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80021c2:	e014      	b.n	80021ee <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3301      	adds	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_ADCEx_Calibration_Start+0x1f0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d90d      	bls.n	80021ee <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	2212      	movs	r2, #18
 80021d8:	4393      	bics	r3, r2
 80021da:	2210      	movs	r2, #16
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2254      	movs	r2, #84	; 0x54
 80021e6:	2100      	movs	r1, #0
 80021e8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e095      	b.n	800231a <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff ff90 	bl	8002118 <LL_ADC_IsCalibrationOnGoing>
 80021f8:	1e03      	subs	r3, r0, #0
 80021fa:	d1e3      	bne.n	80021c4 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	0018      	movs	r0, r3
 8002202:	f7ff ff32 	bl	800206a <LL_ADC_GetCalibrationFactor>
 8002206:	0002      	movs	r2, r0
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	189b      	adds	r3, r3, r2
 800220c:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	3301      	adds	r3, #1
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	2b07      	cmp	r3, #7
 8002218:	d9ce      	bls.n	80021b8 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800221a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800221c:	6a38      	ldr	r0, [r7, #32]
 800221e:	f7fd ff71 	bl	8000104 <__udivsi3>
 8002222:	0003      	movs	r3, r0
 8002224:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0018      	movs	r0, r3
 800222c:	f7ff ff2a 	bl	8002084 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	0018      	movs	r0, r3
 8002236:	f7ff fef8 	bl	800202a <LL_ADC_GetClock>
 800223a:	1e03      	subs	r3, r0, #0
 800223c:	d11b      	bne.n	8002276 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8002240:	0018      	movs	r0, r3
 8002242:	f7ff fee5 	bl	8002010 <LL_ADC_GetCommonClock>
 8002246:	0003      	movs	r3, r0
 8002248:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	23e0      	movs	r3, #224	; 0xe0
 800224e:	035b      	lsls	r3, r3, #13
 8002250:	429a      	cmp	r2, r3
 8002252:	d310      	bcc.n	8002276 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	0c9b      	lsrs	r3, r3, #18
 8002258:	3b03      	subs	r3, #3
 800225a:	2201      	movs	r2, #1
 800225c:	409a      	lsls	r2, r3
 800225e:	0013      	movs	r3, r2
 8002260:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8002268:	e002      	b.n	8002270 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3b01      	subs	r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f9      	bne.n	800226a <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a3a      	ldr	r2, [r7, #32]
 800227c:	0011      	movs	r1, r2
 800227e:	0018      	movs	r0, r3
 8002280:	f7ff fedf 	bl	8002042 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0018      	movs	r0, r3
 800228a:	f7ff ff0d 	bl	80020a8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800228e:	f7fe ff7b 	bl	8001188 <HAL_GetTick>
 8002292:	0003      	movs	r3, r0
 8002294:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002296:	e01b      	b.n	80022d0 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002298:	f7fe ff76 	bl	8001188 <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d914      	bls.n	80022d0 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f7ff ff0e 	bl	80020cc <LL_ADC_IsEnabled>
 80022b0:	1e03      	subs	r3, r0, #0
 80022b2:	d00d      	beq.n	80022d0 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	2210      	movs	r2, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	2201      	movs	r2, #1
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e024      	b.n	800231a <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7ff fef9 	bl	80020cc <LL_ADC_IsEnabled>
 80022da:	1e03      	subs	r3, r0, #0
 80022dc:	d1dc      	bne.n	8002298 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68d9      	ldr	r1, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	2203      	movs	r2, #3
 80022f4:	4393      	bics	r3, r2
 80022f6:	2201      	movs	r2, #1
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	659a      	str	r2, [r3, #88]	; 0x58
 80022fe:	e005      	b.n	800230c <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	2210      	movs	r2, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2254      	movs	r2, #84	; 0x54
 8002310:	2100      	movs	r1, #0
 8002312:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002314:	231f      	movs	r3, #31
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	781b      	ldrb	r3, [r3, #0]
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b00b      	add	sp, #44	; 0x2c
 8002320:	bd90      	pop	{r4, r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	fffffefd 	.word	0xfffffefd
 8002328:	00008003 	.word	0x00008003
 800232c:	ffff7ffc 	.word	0xffff7ffc
 8002330:	0002f1ff 	.word	0x0002f1ff
 8002334:	40012708 	.word	0x40012708

08002338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	0002      	movs	r2, r0
 8002340:	1dfb      	adds	r3, r7, #7
 8002342:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002344:	1dfb      	adds	r3, r7, #7
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b7f      	cmp	r3, #127	; 0x7f
 800234a:	d809      	bhi.n	8002360 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	001a      	movs	r2, r3
 8002352:	231f      	movs	r3, #31
 8002354:	401a      	ands	r2, r3
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <__NVIC_EnableIRQ+0x30>)
 8002358:	2101      	movs	r1, #1
 800235a:	4091      	lsls	r1, r2
 800235c:	000a      	movs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	0002      	movs	r2, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	1dfb      	adds	r3, r7, #7
 8002378:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b7f      	cmp	r3, #127	; 0x7f
 8002380:	d828      	bhi.n	80023d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002382:	4a2f      	ldr	r2, [pc, #188]	; (8002440 <__NVIC_SetPriority+0xd4>)
 8002384:	1dfb      	adds	r3, r7, #7
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b25b      	sxtb	r3, r3
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	33c0      	adds	r3, #192	; 0xc0
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	589b      	ldr	r3, [r3, r2]
 8002392:	1dfa      	adds	r2, r7, #7
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	0011      	movs	r1, r2
 8002398:	2203      	movs	r2, #3
 800239a:	400a      	ands	r2, r1
 800239c:	00d2      	lsls	r2, r2, #3
 800239e:	21ff      	movs	r1, #255	; 0xff
 80023a0:	4091      	lsls	r1, r2
 80023a2:	000a      	movs	r2, r1
 80023a4:	43d2      	mvns	r2, r2
 80023a6:	401a      	ands	r2, r3
 80023a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	019b      	lsls	r3, r3, #6
 80023ae:	22ff      	movs	r2, #255	; 0xff
 80023b0:	401a      	ands	r2, r3
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	0018      	movs	r0, r3
 80023b8:	2303      	movs	r3, #3
 80023ba:	4003      	ands	r3, r0
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c0:	481f      	ldr	r0, [pc, #124]	; (8002440 <__NVIC_SetPriority+0xd4>)
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	430a      	orrs	r2, r1
 80023cc:	33c0      	adds	r3, #192	; 0xc0
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023d2:	e031      	b.n	8002438 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <__NVIC_SetPriority+0xd8>)
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	0019      	movs	r1, r3
 80023dc:	230f      	movs	r3, #15
 80023de:	400b      	ands	r3, r1
 80023e0:	3b08      	subs	r3, #8
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3306      	adds	r3, #6
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	18d3      	adds	r3, r2, r3
 80023ea:	3304      	adds	r3, #4
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	1dfa      	adds	r2, r7, #7
 80023f0:	7812      	ldrb	r2, [r2, #0]
 80023f2:	0011      	movs	r1, r2
 80023f4:	2203      	movs	r2, #3
 80023f6:	400a      	ands	r2, r1
 80023f8:	00d2      	lsls	r2, r2, #3
 80023fa:	21ff      	movs	r1, #255	; 0xff
 80023fc:	4091      	lsls	r1, r2
 80023fe:	000a      	movs	r2, r1
 8002400:	43d2      	mvns	r2, r2
 8002402:	401a      	ands	r2, r3
 8002404:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	019b      	lsls	r3, r3, #6
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	401a      	ands	r2, r3
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	0018      	movs	r0, r3
 8002414:	2303      	movs	r3, #3
 8002416:	4003      	ands	r3, r0
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800241c:	4809      	ldr	r0, [pc, #36]	; (8002444 <__NVIC_SetPriority+0xd8>)
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	001c      	movs	r4, r3
 8002424:	230f      	movs	r3, #15
 8002426:	4023      	ands	r3, r4
 8002428:	3b08      	subs	r3, #8
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	430a      	orrs	r2, r1
 800242e:	3306      	adds	r3, #6
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	18c3      	adds	r3, r0, r3
 8002434:	3304      	adds	r3, #4
 8002436:	601a      	str	r2, [r3, #0]
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b003      	add	sp, #12
 800243e:	bd90      	pop	{r4, r7, pc}
 8002440:	e000e100 	.word	0xe000e100
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	1e5a      	subs	r2, r3, #1
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	045b      	lsls	r3, r3, #17
 8002458:	429a      	cmp	r2, r3
 800245a:	d301      	bcc.n	8002460 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245c:	2301      	movs	r3, #1
 800245e:	e010      	b.n	8002482 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <SysTick_Config+0x44>)
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	3a01      	subs	r2, #1
 8002466:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002468:	2301      	movs	r3, #1
 800246a:	425b      	negs	r3, r3
 800246c:	2103      	movs	r1, #3
 800246e:	0018      	movs	r0, r3
 8002470:	f7ff ff7c 	bl	800236c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <SysTick_Config+0x44>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <SysTick_Config+0x44>)
 800247c:	2207      	movs	r2, #7
 800247e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002480:	2300      	movs	r3, #0
}
 8002482:	0018      	movs	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	b002      	add	sp, #8
 8002488:	bd80      	pop	{r7, pc}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	e000e010 	.word	0xe000e010

08002490 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	210f      	movs	r1, #15
 800249c:	187b      	adds	r3, r7, r1
 800249e:	1c02      	adds	r2, r0, #0
 80024a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	0011      	movs	r1, r2
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7ff ff5d 	bl	800236c <__NVIC_SetPriority>
}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b004      	add	sp, #16
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	0002      	movs	r2, r0
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c6:	1dfb      	adds	r3, r7, #7
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b25b      	sxtb	r3, r3
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff ff33 	bl	8002338 <__NVIC_EnableIRQ>
}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b002      	add	sp, #8
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7ff ffaf 	bl	8002448 <SysTick_Config>
 80024ea:	0003      	movs	r3, r0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b002      	add	sp, #8
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e050      	b.n	80025a8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2225      	movs	r2, #37	; 0x25
 800250a:	5c9b      	ldrb	r3, [r3, r2]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d008      	beq.n	8002524 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2204      	movs	r2, #4
 8002516:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2224      	movs	r2, #36	; 0x24
 800251c:	2100      	movs	r1, #0
 800251e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e041      	b.n	80025a8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	210e      	movs	r1, #14
 8002530:	438a      	bics	r2, r1
 8002532:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	491c      	ldr	r1, [pc, #112]	; (80025b0 <HAL_DMA_Abort+0xbc>)
 8002540:	400a      	ands	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2101      	movs	r1, #1
 8002550:	438a      	bics	r2, r1
 8002552:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002554:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_DMA_Abort+0xc0>)
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	221c      	movs	r2, #28
 800255e:	4013      	ands	r3, r2
 8002560:	2201      	movs	r2, #1
 8002562:	409a      	lsls	r2, r3
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <HAL_DMA_Abort+0xc0>)
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002572:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00c      	beq.n	8002596 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002586:	490a      	ldr	r1, [pc, #40]	; (80025b0 <HAL_DMA_Abort+0xbc>)
 8002588:	400a      	ands	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002594:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2225      	movs	r2, #37	; 0x25
 800259a:	2101      	movs	r1, #1
 800259c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2224      	movs	r2, #36	; 0x24
 80025a2:	2100      	movs	r1, #0
 80025a4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	fffffeff 	.word	0xfffffeff
 80025b4:	40020000 	.word	0x40020000

080025b8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c0:	210f      	movs	r1, #15
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2225      	movs	r2, #37	; 0x25
 80025cc:	5c9b      	ldrb	r3, [r3, r2]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d006      	beq.n	80025e2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2204      	movs	r2, #4
 80025d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80025da:	187b      	adds	r3, r7, r1
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
 80025e0:	e049      	b.n	8002676 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	210e      	movs	r1, #14
 80025ee:	438a      	bics	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	438a      	bics	r2, r1
 8002600:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260c:	491d      	ldr	r1, [pc, #116]	; (8002684 <HAL_DMA_Abort_IT+0xcc>)
 800260e:	400a      	ands	r2, r1
 8002610:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_DMA_Abort_IT+0xd0>)
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	221c      	movs	r2, #28
 800261c:	4013      	ands	r3, r2
 800261e:	2201      	movs	r2, #1
 8002620:	409a      	lsls	r2, r3
 8002622:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_DMA_Abort_IT+0xd0>)
 8002624:	430a      	orrs	r2, r1
 8002626:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002630:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00c      	beq.n	8002654 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002644:	490f      	ldr	r1, [pc, #60]	; (8002684 <HAL_DMA_Abort_IT+0xcc>)
 8002646:	400a      	ands	r2, r1
 8002648:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002652:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2225      	movs	r2, #37	; 0x25
 8002658:	2101      	movs	r1, #1
 800265a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	; 0x24
 8002660:	2100      	movs	r1, #0
 8002662:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	2b00      	cmp	r3, #0
 800266a:	d004      	beq.n	8002676 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	0010      	movs	r0, r2
 8002674:	4798      	blx	r3
    }
  }
  return status;
 8002676:	230f      	movs	r3, #15
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	781b      	ldrb	r3, [r3, #0]
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b004      	add	sp, #16
 8002682:	bd80      	pop	{r7, pc}
 8002684:	fffffeff 	.word	0xfffffeff
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269a:	e147      	b.n	800292c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2101      	movs	r1, #1
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4091      	lsls	r1, r2
 80026a6:	000a      	movs	r2, r1
 80026a8:	4013      	ands	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d100      	bne.n	80026b4 <HAL_GPIO_Init+0x28>
 80026b2:	e138      	b.n	8002926 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2203      	movs	r2, #3
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d005      	beq.n	80026cc <HAL_GPIO_Init+0x40>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2203      	movs	r2, #3
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d130      	bne.n	800272e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	409a      	lsls	r2, r3
 80026da:	0013      	movs	r3, r2
 80026dc:	43da      	mvns	r2, r3
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	409a      	lsls	r2, r3
 80026ee:	0013      	movs	r3, r2
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002702:	2201      	movs	r2, #1
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
 8002708:	0013      	movs	r3, r2
 800270a:	43da      	mvns	r2, r3
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	2201      	movs	r2, #1
 800271a:	401a      	ands	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
 8002720:	0013      	movs	r3, r2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2203      	movs	r2, #3
 8002734:	4013      	ands	r3, r2
 8002736:	2b03      	cmp	r3, #3
 8002738:	d017      	beq.n	800276a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	2203      	movs	r2, #3
 8002746:	409a      	lsls	r2, r3
 8002748:	0013      	movs	r3, r2
 800274a:	43da      	mvns	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	409a      	lsls	r2, r3
 800275c:	0013      	movs	r3, r2
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2203      	movs	r2, #3
 8002770:	4013      	ands	r3, r2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d123      	bne.n	80027be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	08da      	lsrs	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3208      	adds	r2, #8
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	58d3      	ldr	r3, [r2, r3]
 8002782:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2207      	movs	r2, #7
 8002788:	4013      	ands	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	220f      	movs	r2, #15
 800278e:	409a      	lsls	r2, r3
 8002790:	0013      	movs	r3, r2
 8002792:	43da      	mvns	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2107      	movs	r1, #7
 80027a2:	400b      	ands	r3, r1
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	409a      	lsls	r2, r3
 80027a8:	0013      	movs	r3, r2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	0092      	lsls	r2, r2, #2
 80027ba:	6939      	ldr	r1, [r7, #16]
 80027bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	409a      	lsls	r2, r3
 80027cc:	0013      	movs	r3, r2
 80027ce:	43da      	mvns	r2, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2203      	movs	r2, #3
 80027dc:	401a      	ands	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	409a      	lsls	r2, r3
 80027e4:	0013      	movs	r3, r2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	23c0      	movs	r3, #192	; 0xc0
 80027f8:	029b      	lsls	r3, r3, #10
 80027fa:	4013      	ands	r3, r2
 80027fc:	d100      	bne.n	8002800 <HAL_GPIO_Init+0x174>
 80027fe:	e092      	b.n	8002926 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002800:	4a50      	ldr	r2, [pc, #320]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	3318      	adds	r3, #24
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	589b      	ldr	r3, [r3, r2]
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2203      	movs	r2, #3
 8002812:	4013      	ands	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	220f      	movs	r2, #15
 8002818:	409a      	lsls	r2, r3
 800281a:	0013      	movs	r3, r2
 800281c:	43da      	mvns	r2, r3
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	23a0      	movs	r3, #160	; 0xa0
 8002828:	05db      	lsls	r3, r3, #23
 800282a:	429a      	cmp	r2, r3
 800282c:	d013      	beq.n	8002856 <HAL_GPIO_Init+0x1ca>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a45      	ldr	r2, [pc, #276]	; (8002948 <HAL_GPIO_Init+0x2bc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00d      	beq.n	8002852 <HAL_GPIO_Init+0x1c6>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a44      	ldr	r2, [pc, #272]	; (800294c <HAL_GPIO_Init+0x2c0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <HAL_GPIO_Init+0x1c2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a43      	ldr	r2, [pc, #268]	; (8002950 <HAL_GPIO_Init+0x2c4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_GPIO_Init+0x1be>
 8002846:	2303      	movs	r3, #3
 8002848:	e006      	b.n	8002858 <HAL_GPIO_Init+0x1cc>
 800284a:	2305      	movs	r3, #5
 800284c:	e004      	b.n	8002858 <HAL_GPIO_Init+0x1cc>
 800284e:	2302      	movs	r3, #2
 8002850:	e002      	b.n	8002858 <HAL_GPIO_Init+0x1cc>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_GPIO_Init+0x1cc>
 8002856:	2300      	movs	r3, #0
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	2103      	movs	r1, #3
 800285c:	400a      	ands	r2, r1
 800285e:	00d2      	lsls	r2, r2, #3
 8002860:	4093      	lsls	r3, r2
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002868:	4936      	ldr	r1, [pc, #216]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	3318      	adds	r3, #24
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002876:	4b33      	ldr	r3, [pc, #204]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	43da      	mvns	r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	035b      	lsls	r3, r3, #13
 800288e:	4013      	ands	r3, r2
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800289a:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	43da      	mvns	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	039b      	lsls	r3, r3, #14
 80028b8:	4013      	ands	r3, r2
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028ca:	4a1e      	ldr	r2, [pc, #120]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 80028cc:	2384      	movs	r3, #132	; 0x84
 80028ce:	58d3      	ldr	r3, [r2, r3]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	43da      	mvns	r2, r3
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	029b      	lsls	r3, r3, #10
 80028e4:	4013      	ands	r3, r2
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028f0:	4914      	ldr	r1, [pc, #80]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 80028f2:	2284      	movs	r2, #132	; 0x84
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80028f8:	4a12      	ldr	r2, [pc, #72]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 80028fa:	2380      	movs	r3, #128	; 0x80
 80028fc:	58d3      	ldr	r3, [r2, r3]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	43da      	mvns	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	025b      	lsls	r3, r3, #9
 8002912:	4013      	ands	r3, r2
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800291e:	4909      	ldr	r1, [pc, #36]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3301      	adds	r3, #1
 800292a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	40da      	lsrs	r2, r3
 8002934:	1e13      	subs	r3, r2, #0
 8002936:	d000      	beq.n	800293a <HAL_GPIO_Init+0x2ae>
 8002938:	e6b0      	b.n	800269c <HAL_GPIO_Init+0x10>
  }
}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	b006      	add	sp, #24
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021800 	.word	0x40021800
 8002948:	50000400 	.word	0x50000400
 800294c:	50000800 	.word	0x50000800
 8002950:	50000c00 	.word	0x50000c00

08002954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	0008      	movs	r0, r1
 800295e:	0011      	movs	r1, r2
 8002960:	1cbb      	adds	r3, r7, #2
 8002962:	1c02      	adds	r2, r0, #0
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	1c7b      	adds	r3, r7, #1
 8002968:	1c0a      	adds	r2, r1, #0
 800296a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800296c:	1c7b      	adds	r3, r7, #1
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002974:	1cbb      	adds	r3, r7, #2
 8002976:	881a      	ldrh	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800297c:	e003      	b.n	8002986 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800297e:	1cbb      	adds	r3, r7, #2
 8002980:	881a      	ldrh	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b002      	add	sp, #8
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a19      	ldr	r2, [pc, #100]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d11f      	bne.n	80029f4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80029b4:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	0013      	movs	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	189b      	adds	r3, r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4912      	ldr	r1, [pc, #72]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80029c2:	0018      	movs	r0, r3
 80029c4:	f7fd fb9e 	bl	8000104 <__udivsi3>
 80029c8:	0003      	movs	r3, r0
 80029ca:	3301      	adds	r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029ce:	e008      	b.n	80029e2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3b01      	subs	r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e001      	b.n	80029e2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e009      	b.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	401a      	ands	r2, r3
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d0ed      	beq.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	0018      	movs	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b004      	add	sp, #16
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	40007000 	.word	0x40007000
 8002a04:	fffff9ff 	.word	0xfffff9ff
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	000f4240 	.word	0x000f4240

08002a10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	23e0      	movs	r3, #224	; 0xe0
 8002a1a:	01db      	lsls	r3, r3, #7
 8002a1c:	4013      	ands	r3, r2
}
 8002a1e:	0018      	movs	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000

08002a28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e2fe      	b.n	8003038 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4013      	ands	r3, r2
 8002a42:	d100      	bne.n	8002a46 <HAL_RCC_OscConfig+0x1e>
 8002a44:	e07c      	b.n	8002b40 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a46:	4bc3      	ldr	r3, [pc, #780]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2238      	movs	r2, #56	; 0x38
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a50:	4bc0      	ldr	r3, [pc, #768]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2203      	movs	r2, #3
 8002a56:	4013      	ands	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d102      	bne.n	8002a66 <HAL_RCC_OscConfig+0x3e>
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d002      	beq.n	8002a6c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	4bb9      	ldr	r3, [pc, #740]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	029b      	lsls	r3, r3, #10
 8002a74:	4013      	ands	r3, r2
 8002a76:	d062      	beq.n	8002b3e <HAL_RCC_OscConfig+0x116>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d15e      	bne.n	8002b3e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e2d9      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	025b      	lsls	r3, r3, #9
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x78>
 8002a90:	4bb0      	ldr	r3, [pc, #704]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4baf      	ldr	r3, [pc, #700]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	0249      	lsls	r1, r1, #9
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e020      	b.n	8002ae2 <HAL_RCC_OscConfig+0xba>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	23a0      	movs	r3, #160	; 0xa0
 8002aa6:	02db      	lsls	r3, r3, #11
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d10e      	bne.n	8002aca <HAL_RCC_OscConfig+0xa2>
 8002aac:	4ba9      	ldr	r3, [pc, #676]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4ba8      	ldr	r3, [pc, #672]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002ab2:	2180      	movs	r1, #128	; 0x80
 8002ab4:	02c9      	lsls	r1, r1, #11
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	4ba6      	ldr	r3, [pc, #664]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4ba5      	ldr	r3, [pc, #660]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	0249      	lsls	r1, r1, #9
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e00b      	b.n	8002ae2 <HAL_RCC_OscConfig+0xba>
 8002aca:	4ba2      	ldr	r3, [pc, #648]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4ba1      	ldr	r3, [pc, #644]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002ad0:	49a1      	ldr	r1, [pc, #644]	; (8002d58 <HAL_RCC_OscConfig+0x330>)
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	4b9f      	ldr	r3, [pc, #636]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b9e      	ldr	r3, [pc, #632]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002adc:	499f      	ldr	r1, [pc, #636]	; (8002d5c <HAL_RCC_OscConfig+0x334>)
 8002ade:	400a      	ands	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d014      	beq.n	8002b14 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe fb4d 	bl	8001188 <HAL_GetTick>
 8002aee:	0003      	movs	r3, r0
 8002af0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af4:	f7fe fb48 	bl	8001188 <HAL_GetTick>
 8002af8:	0002      	movs	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e298      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b06:	4b93      	ldr	r3, [pc, #588]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	029b      	lsls	r3, r3, #10
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0xcc>
 8002b12:	e015      	b.n	8002b40 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fb38 	bl	8001188 <HAL_GetTick>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fb33 	bl	8001188 <HAL_GetTick>
 8002b22:	0002      	movs	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b64      	cmp	r3, #100	; 0x64
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e283      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b30:	4b88      	ldr	r3, [pc, #544]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	029b      	lsls	r3, r3, #10
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d1f0      	bne.n	8002b1e <HAL_RCC_OscConfig+0xf6>
 8002b3c:	e000      	b.n	8002b40 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2202      	movs	r2, #2
 8002b46:	4013      	ands	r3, r2
 8002b48:	d100      	bne.n	8002b4c <HAL_RCC_OscConfig+0x124>
 8002b4a:	e099      	b.n	8002c80 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4c:	4b81      	ldr	r3, [pc, #516]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2238      	movs	r2, #56	; 0x38
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b56:	4b7f      	ldr	r3, [pc, #508]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d102      	bne.n	8002b6c <HAL_RCC_OscConfig+0x144>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d002      	beq.n	8002b72 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d135      	bne.n	8002bde <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b72:	4b78      	ldr	r3, [pc, #480]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCC_OscConfig+0x162>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e256      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b72      	ldr	r3, [pc, #456]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4a74      	ldr	r2, [pc, #464]	; (8002d60 <HAL_RCC_OscConfig+0x338>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	021a      	lsls	r2, r3, #8
 8002b9a:	4b6e      	ldr	r3, [pc, #440]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d112      	bne.n	8002bcc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ba6:	4b6b      	ldr	r3, [pc, #428]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a6e      	ldr	r2, [pc, #440]	; (8002d64 <HAL_RCC_OscConfig+0x33c>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	0019      	movs	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	4b67      	ldr	r3, [pc, #412]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002bba:	4b66      	ldr	r3, [pc, #408]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	0adb      	lsrs	r3, r3, #11
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	4a68      	ldr	r2, [pc, #416]	; (8002d68 <HAL_RCC_OscConfig+0x340>)
 8002bc6:	40da      	lsrs	r2, r3
 8002bc8:	4b68      	ldr	r3, [pc, #416]	; (8002d6c <HAL_RCC_OscConfig+0x344>)
 8002bca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bcc:	4b68      	ldr	r3, [pc, #416]	; (8002d70 <HAL_RCC_OscConfig+0x348>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7fe fa7d 	bl	80010d0 <HAL_InitTick>
 8002bd6:	1e03      	subs	r3, r0, #0
 8002bd8:	d051      	beq.n	8002c7e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e22c      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d030      	beq.n	8002c48 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002be6:	4b5b      	ldr	r3, [pc, #364]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a5e      	ldr	r2, [pc, #376]	; (8002d64 <HAL_RCC_OscConfig+0x33c>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	4b57      	ldr	r3, [pc, #348]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002bfa:	4b56      	ldr	r3, [pc, #344]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b55      	ldr	r3, [pc, #340]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002c00:	2180      	movs	r1, #128	; 0x80
 8002c02:	0049      	lsls	r1, r1, #1
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fabe 	bl	8001188 <HAL_GetTick>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fe fab9 	bl	8001188 <HAL_GetTick>
 8002c16:	0002      	movs	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e209      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c24:	4b4b      	ldr	r3, [pc, #300]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b48      	ldr	r3, [pc, #288]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a4a      	ldr	r2, [pc, #296]	; (8002d60 <HAL_RCC_OscConfig+0x338>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	021a      	lsls	r2, r3, #8
 8002c40:	4b44      	ldr	r3, [pc, #272]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	e01b      	b.n	8002c80 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002c48:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b41      	ldr	r3, [pc, #260]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002c4e:	4949      	ldr	r1, [pc, #292]	; (8002d74 <HAL_RCC_OscConfig+0x34c>)
 8002c50:	400a      	ands	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7fe fa98 	bl	8001188 <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5e:	f7fe fa93 	bl	8001188 <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e1e3      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c70:	4b38      	ldr	r3, [pc, #224]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d1f0      	bne.n	8002c5e <HAL_RCC_OscConfig+0x236>
 8002c7c:	e000      	b.n	8002c80 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c7e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2208      	movs	r2, #8
 8002c86:	4013      	ands	r3, r2
 8002c88:	d047      	beq.n	8002d1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c8a:	4b32      	ldr	r3, [pc, #200]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2238      	movs	r2, #56	; 0x38
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b18      	cmp	r3, #24
 8002c94:	d10a      	bne.n	8002cac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c96:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d03c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x2f2>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d138      	bne.n	8002d1a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e1c5      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d019      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002cb4:	4b27      	ldr	r3, [pc, #156]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002cb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cb8:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002cba:	2101      	movs	r1, #1
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fa62 	bl	8001188 <HAL_GetTick>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cca:	f7fe fa5d 	bl	8001188 <HAL_GetTick>
 8002cce:	0002      	movs	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e1ad      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d0f1      	beq.n	8002cca <HAL_RCC_OscConfig+0x2a2>
 8002ce6:	e018      	b.n	8002d1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002cea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002cee:	2101      	movs	r1, #1
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fa48 	bl	8001188 <HAL_GetTick>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cfe:	f7fe fa43 	bl	8001188 <HAL_GetTick>
 8002d02:	0002      	movs	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e193      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d14:	2202      	movs	r2, #2
 8002d16:	4013      	ands	r3, r2
 8002d18:	d1f1      	bne.n	8002cfe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	4013      	ands	r3, r2
 8002d22:	d100      	bne.n	8002d26 <HAL_RCC_OscConfig+0x2fe>
 8002d24:	e0c6      	b.n	8002eb4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d26:	231f      	movs	r3, #31
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2238      	movs	r2, #56	; 0x38
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d11e      	bne.n	8002d78 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_RCC_OscConfig+0x32c>)
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3e:	2202      	movs	r2, #2
 8002d40:	4013      	ands	r3, r2
 8002d42:	d100      	bne.n	8002d46 <HAL_RCC_OscConfig+0x31e>
 8002d44:	e0b6      	b.n	8002eb4 <HAL_RCC_OscConfig+0x48c>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d000      	beq.n	8002d50 <HAL_RCC_OscConfig+0x328>
 8002d4e:	e0b1      	b.n	8002eb4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e171      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
 8002d54:	40021000 	.word	0x40021000
 8002d58:	fffeffff 	.word	0xfffeffff
 8002d5c:	fffbffff 	.word	0xfffbffff
 8002d60:	ffff80ff 	.word	0xffff80ff
 8002d64:	ffffc7ff 	.word	0xffffc7ff
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	20000004 	.word	0x20000004
 8002d74:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d78:	4bb1      	ldr	r3, [pc, #708]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	055b      	lsls	r3, r3, #21
 8002d80:	4013      	ands	r3, r2
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_OscConfig+0x360>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x362>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d011      	beq.n	8002db2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d8e:	4bac      	ldr	r3, [pc, #688]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d92:	4bab      	ldr	r3, [pc, #684]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	0549      	lsls	r1, r1, #21
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d9c:	4ba8      	ldr	r3, [pc, #672]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	055b      	lsls	r3, r3, #21
 8002da4:	4013      	ands	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002daa:	231f      	movs	r3, #31
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db2:	4ba4      	ldr	r3, [pc, #656]	; (8003044 <HAL_RCC_OscConfig+0x61c>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d11a      	bne.n	8002df4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dbe:	4ba1      	ldr	r3, [pc, #644]	; (8003044 <HAL_RCC_OscConfig+0x61c>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	4ba0      	ldr	r3, [pc, #640]	; (8003044 <HAL_RCC_OscConfig+0x61c>)
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	0049      	lsls	r1, r1, #1
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe f9dc 	bl	8001188 <HAL_GetTick>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd6:	f7fe f9d7 	bl	8001188 <HAL_GetTick>
 8002dda:	0002      	movs	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e127      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de8:	4b96      	ldr	r3, [pc, #600]	; (8003044 <HAL_RCC_OscConfig+0x61c>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4013      	ands	r3, r2
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d106      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3e2>
 8002dfc:	4b90      	ldr	r3, [pc, #576]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002dfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e00:	4b8f      	ldr	r3, [pc, #572]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002e02:	2101      	movs	r1, #1
 8002e04:	430a      	orrs	r2, r1
 8002e06:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e08:	e01c      	b.n	8002e44 <HAL_RCC_OscConfig+0x41c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b05      	cmp	r3, #5
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x404>
 8002e12:	4b8b      	ldr	r3, [pc, #556]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002e14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e16:	4b8a      	ldr	r3, [pc, #552]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002e18:	2104      	movs	r1, #4
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e1e:	4b88      	ldr	r3, [pc, #544]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002e20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e22:	4b87      	ldr	r3, [pc, #540]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002e24:	2101      	movs	r1, #1
 8002e26:	430a      	orrs	r2, r1
 8002e28:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e2a:	e00b      	b.n	8002e44 <HAL_RCC_OscConfig+0x41c>
 8002e2c:	4b84      	ldr	r3, [pc, #528]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002e2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e30:	4b83      	ldr	r3, [pc, #524]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002e32:	2101      	movs	r1, #1
 8002e34:	438a      	bics	r2, r1
 8002e36:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e38:	4b81      	ldr	r3, [pc, #516]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002e3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e3c:	4b80      	ldr	r3, [pc, #512]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002e3e:	2104      	movs	r1, #4
 8002e40:	438a      	bics	r2, r1
 8002e42:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d014      	beq.n	8002e76 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe f99c 	bl	8001188 <HAL_GetTick>
 8002e50:	0003      	movs	r3, r0
 8002e52:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e54:	e009      	b.n	8002e6a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7fe f997 	bl	8001188 <HAL_GetTick>
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	4a79      	ldr	r2, [pc, #484]	; (8003048 <HAL_RCC_OscConfig+0x620>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e0e6      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e6a:	4b75      	ldr	r3, [pc, #468]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	2202      	movs	r2, #2
 8002e70:	4013      	ands	r3, r2
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0x42e>
 8002e74:	e013      	b.n	8002e9e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fe f987 	bl	8001188 <HAL_GetTick>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e7e:	e009      	b.n	8002e94 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e80:	f7fe f982 	bl	8001188 <HAL_GetTick>
 8002e84:	0002      	movs	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	4a6f      	ldr	r2, [pc, #444]	; (8003048 <HAL_RCC_OscConfig+0x620>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e0d1      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e94:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e98:	2202      	movs	r2, #2
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e9e:	231f      	movs	r3, #31
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002ea8:	4b65      	ldr	r3, [pc, #404]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eac:	4b64      	ldr	r3, [pc, #400]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002eae:	4967      	ldr	r1, [pc, #412]	; (800304c <HAL_RCC_OscConfig+0x624>)
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d100      	bne.n	8002ebe <HAL_RCC_OscConfig+0x496>
 8002ebc:	e0bb      	b.n	8003036 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ebe:	4b60      	ldr	r3, [pc, #384]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2238      	movs	r2, #56	; 0x38
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d100      	bne.n	8002ecc <HAL_RCC_OscConfig+0x4a4>
 8002eca:	e07b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d156      	bne.n	8002f82 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed4:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b59      	ldr	r3, [pc, #356]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002eda:	495d      	ldr	r1, [pc, #372]	; (8003050 <HAL_RCC_OscConfig+0x628>)
 8002edc:	400a      	ands	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe f952 	bl	8001188 <HAL_GetTick>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eea:	f7fe f94d 	bl	8001188 <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e09d      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efc:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	049b      	lsls	r3, r3, #18
 8002f04:	4013      	ands	r3, r2
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f08:	4b4d      	ldr	r3, [pc, #308]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4a51      	ldr	r2, [pc, #324]	; (8003054 <HAL_RCC_OscConfig+0x62c>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1a      	ldr	r2, [r3, #32]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f34:	431a      	orrs	r2, r3
 8002f36:	4b42      	ldr	r3, [pc, #264]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f3c:	4b40      	ldr	r3, [pc, #256]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	0449      	lsls	r1, r1, #17
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f4a:	4b3d      	ldr	r3, [pc, #244]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	4b3c      	ldr	r3, [pc, #240]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	0549      	lsls	r1, r1, #21
 8002f54:	430a      	orrs	r2, r1
 8002f56:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe f916 	bl	8001188 <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f62:	f7fe f911 	bl	8001188 <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e061      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f74:	4b32      	ldr	r3, [pc, #200]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	049b      	lsls	r3, r3, #18
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x53a>
 8002f80:	e059      	b.n	8003036 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002f88:	4931      	ldr	r1, [pc, #196]	; (8003050 <HAL_RCC_OscConfig+0x628>)
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe f8fb 	bl	8001188 <HAL_GetTick>
 8002f92:	0003      	movs	r3, r0
 8002f94:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fe f8f6 	bl	8001188 <HAL_GetTick>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e046      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	049b      	lsls	r3, r3, #18
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	4b21      	ldr	r3, [pc, #132]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002fbc:	4926      	ldr	r1, [pc, #152]	; (8003058 <HAL_RCC_OscConfig+0x630>)
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	e038      	b.n	8003036 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e033      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <HAL_RCC_OscConfig+0x618>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	401a      	ands	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d126      	bne.n	8003032 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2270      	movs	r2, #112	; 0x70
 8002fe8:	401a      	ands	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d11f      	bne.n	8003032 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	23fe      	movs	r3, #254	; 0xfe
 8002ff6:	01db      	lsls	r3, r3, #7
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d116      	bne.n	8003032 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	23f8      	movs	r3, #248	; 0xf8
 8003008:	039b      	lsls	r3, r3, #14
 800300a:	401a      	ands	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d10e      	bne.n	8003032 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	23e0      	movs	r3, #224	; 0xe0
 8003018:	051b      	lsls	r3, r3, #20
 800301a:	401a      	ands	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d106      	bne.n	8003032 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	0f5b      	lsrs	r3, r3, #29
 8003028:	075a      	lsls	r2, r3, #29
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	b008      	add	sp, #32
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	40007000 	.word	0x40007000
 8003048:	00001388 	.word	0x00001388
 800304c:	efffffff 	.word	0xefffffff
 8003050:	feffffff 	.word	0xfeffffff
 8003054:	11c1808c 	.word	0x11c1808c
 8003058:	eefefffc 	.word	0xeefefffc

0800305c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0e9      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003070:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2207      	movs	r2, #7
 8003076:	4013      	ands	r3, r2
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d91e      	bls.n	80030bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b73      	ldr	r3, [pc, #460]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2207      	movs	r2, #7
 8003084:	4393      	bics	r3, r2
 8003086:	0019      	movs	r1, r3
 8003088:	4b70      	ldr	r3, [pc, #448]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003090:	f7fe f87a 	bl	8001188 <HAL_GetTick>
 8003094:	0003      	movs	r3, r0
 8003096:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003098:	e009      	b.n	80030ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800309a:	f7fe f875 	bl	8001188 <HAL_GetTick>
 800309e:	0002      	movs	r2, r0
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	4a6a      	ldr	r2, [pc, #424]	; (8003250 <HAL_RCC_ClockConfig+0x1f4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e0ca      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030ae:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2207      	movs	r2, #7
 80030b4:	4013      	ands	r3, r2
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d1ee      	bne.n	800309a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2202      	movs	r2, #2
 80030c2:	4013      	ands	r3, r2
 80030c4:	d015      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2204      	movs	r2, #4
 80030cc:	4013      	ands	r3, r2
 80030ce:	d006      	beq.n	80030de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030d0:	4b60      	ldr	r3, [pc, #384]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	4b5f      	ldr	r3, [pc, #380]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 80030d6:	21e0      	movs	r1, #224	; 0xe0
 80030d8:	01c9      	lsls	r1, r1, #7
 80030da:	430a      	orrs	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030de:	4b5d      	ldr	r3, [pc, #372]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	4a5d      	ldr	r2, [pc, #372]	; (8003258 <HAL_RCC_ClockConfig+0x1fc>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4b59      	ldr	r3, [pc, #356]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 80030ee:	430a      	orrs	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2201      	movs	r2, #1
 80030f8:	4013      	ands	r3, r2
 80030fa:	d057      	beq.n	80031ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d107      	bne.n	8003114 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003104:	4b53      	ldr	r3, [pc, #332]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	029b      	lsls	r3, r3, #10
 800310c:	4013      	ands	r3, r2
 800310e:	d12b      	bne.n	8003168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e097      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d107      	bne.n	800312c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311c:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	049b      	lsls	r3, r3, #18
 8003124:	4013      	ands	r3, r2
 8003126:	d11f      	bne.n	8003168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e08b      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d107      	bne.n	8003144 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003134:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4013      	ands	r3, r2
 800313e:	d113      	bne.n	8003168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e07f      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b03      	cmp	r3, #3
 800314a:	d106      	bne.n	800315a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800314c:	4b41      	ldr	r3, [pc, #260]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 800314e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003150:	2202      	movs	r2, #2
 8003152:	4013      	ands	r3, r2
 8003154:	d108      	bne.n	8003168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e074      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315a:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315e:	2202      	movs	r2, #2
 8003160:	4013      	ands	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e06d      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003168:	4b3a      	ldr	r3, [pc, #232]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2207      	movs	r2, #7
 800316e:	4393      	bics	r3, r2
 8003170:	0019      	movs	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4b37      	ldr	r3, [pc, #220]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317c:	f7fe f804 	bl	8001188 <HAL_GetTick>
 8003180:	0003      	movs	r3, r0
 8003182:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003184:	e009      	b.n	800319a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003186:	f7fd ffff 	bl	8001188 <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <HAL_RCC_ClockConfig+0x1f4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e054      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2238      	movs	r2, #56	; 0x38
 80031a0:	401a      	ands	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1ec      	bne.n	8003186 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2207      	movs	r2, #7
 80031b2:	4013      	ands	r3, r2
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d21e      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2207      	movs	r2, #7
 80031c0:	4393      	bics	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	4b21      	ldr	r3, [pc, #132]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031cc:	f7fd ffdc 	bl	8001188 <HAL_GetTick>
 80031d0:	0003      	movs	r3, r0
 80031d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031d4:	e009      	b.n	80031ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d6:	f7fd ffd7 	bl	8001188 <HAL_GetTick>
 80031da:	0002      	movs	r2, r0
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	4a1b      	ldr	r2, [pc, #108]	; (8003250 <HAL_RCC_ClockConfig+0x1f4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e02c      	b.n	8003244 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_RCC_ClockConfig+0x1f0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2207      	movs	r2, #7
 80031f0:	4013      	ands	r3, r2
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1ee      	bne.n	80031d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2204      	movs	r2, #4
 80031fe:	4013      	ands	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003202:	4b14      	ldr	r3, [pc, #80]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	4a15      	ldr	r2, [pc, #84]	; (800325c <HAL_RCC_ClockConfig+0x200>)
 8003208:	4013      	ands	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 8003212:	430a      	orrs	r2, r1
 8003214:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003216:	f000 f829 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800321a:	0001      	movs	r1, r0
 800321c:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_RCC_ClockConfig+0x1f8>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	0a1b      	lsrs	r3, r3, #8
 8003222:	220f      	movs	r2, #15
 8003224:	401a      	ands	r2, r3
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_RCC_ClockConfig+0x204>)
 8003228:	0092      	lsls	r2, r2, #2
 800322a:	58d3      	ldr	r3, [r2, r3]
 800322c:	221f      	movs	r2, #31
 800322e:	4013      	ands	r3, r2
 8003230:	000a      	movs	r2, r1
 8003232:	40da      	lsrs	r2, r3
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_ClockConfig+0x208>)
 8003236:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_ClockConfig+0x20c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd ff47 	bl	80010d0 <HAL_InitTick>
 8003242:	0003      	movs	r3, r0
}
 8003244:	0018      	movs	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	b004      	add	sp, #16
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40022000 	.word	0x40022000
 8003250:	00001388 	.word	0x00001388
 8003254:	40021000 	.word	0x40021000
 8003258:	fffff0ff 	.word	0xfffff0ff
 800325c:	ffff8fff 	.word	0xffff8fff
 8003260:	080057e8 	.word	0x080057e8
 8003264:	20000000 	.word	0x20000000
 8003268:	20000004 	.word	0x20000004

0800326c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003272:	4b3c      	ldr	r3, [pc, #240]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2238      	movs	r2, #56	; 0x38
 8003278:	4013      	ands	r3, r2
 800327a:	d10f      	bne.n	800329c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800327c:	4b39      	ldr	r3, [pc, #228]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	0adb      	lsrs	r3, r3, #11
 8003282:	2207      	movs	r2, #7
 8003284:	4013      	ands	r3, r2
 8003286:	2201      	movs	r2, #1
 8003288:	409a      	lsls	r2, r3
 800328a:	0013      	movs	r3, r2
 800328c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800328e:	6839      	ldr	r1, [r7, #0]
 8003290:	4835      	ldr	r0, [pc, #212]	; (8003368 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003292:	f7fc ff37 	bl	8000104 <__udivsi3>
 8003296:	0003      	movs	r3, r0
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	e05d      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800329c:	4b31      	ldr	r3, [pc, #196]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2238      	movs	r2, #56	; 0x38
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d102      	bne.n	80032ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032a8:	4b30      	ldr	r3, [pc, #192]	; (800336c <HAL_RCC_GetSysClockFreq+0x100>)
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	e054      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ae:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2238      	movs	r2, #56	; 0x38
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d138      	bne.n	800332c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80032ba:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2203      	movs	r2, #3
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032c4:	4b27      	ldr	r3, [pc, #156]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	2207      	movs	r2, #7
 80032cc:	4013      	ands	r3, r2
 80032ce:	3301      	adds	r3, #1
 80032d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d10d      	bne.n	80032f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	4824      	ldr	r0, [pc, #144]	; (800336c <HAL_RCC_GetSysClockFreq+0x100>)
 80032dc:	f7fc ff12 	bl	8000104 <__udivsi3>
 80032e0:	0003      	movs	r3, r0
 80032e2:	0019      	movs	r1, r3
 80032e4:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	227f      	movs	r2, #127	; 0x7f
 80032ec:	4013      	ands	r3, r2
 80032ee:	434b      	muls	r3, r1
 80032f0:	617b      	str	r3, [r7, #20]
        break;
 80032f2:	e00d      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	481c      	ldr	r0, [pc, #112]	; (8003368 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032f8:	f7fc ff04 	bl	8000104 <__udivsi3>
 80032fc:	0003      	movs	r3, r0
 80032fe:	0019      	movs	r1, r3
 8003300:	4b18      	ldr	r3, [pc, #96]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	0a1b      	lsrs	r3, r3, #8
 8003306:	227f      	movs	r2, #127	; 0x7f
 8003308:	4013      	ands	r3, r2
 800330a:	434b      	muls	r3, r1
 800330c:	617b      	str	r3, [r7, #20]
        break;
 800330e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	0f5b      	lsrs	r3, r3, #29
 8003316:	2207      	movs	r2, #7
 8003318:	4013      	ands	r3, r2
 800331a:	3301      	adds	r3, #1
 800331c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	6978      	ldr	r0, [r7, #20]
 8003322:	f7fc feef 	bl	8000104 <__udivsi3>
 8003326:	0003      	movs	r3, r0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	e015      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800332c:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2238      	movs	r2, #56	; 0x38
 8003332:	4013      	ands	r3, r2
 8003334:	2b20      	cmp	r3, #32
 8003336:	d103      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	e00b      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2238      	movs	r2, #56	; 0x38
 8003346:	4013      	ands	r3, r2
 8003348:	2b18      	cmp	r3, #24
 800334a:	d103      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800334c:	23fa      	movs	r3, #250	; 0xfa
 800334e:	01db      	lsls	r3, r3, #7
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	e001      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003358:	693b      	ldr	r3, [r7, #16]
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b006      	add	sp, #24
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	40021000 	.word	0x40021000
 8003368:	00f42400 	.word	0x00f42400
 800336c:	007a1200 	.word	0x007a1200

08003370 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003374:	4b02      	ldr	r3, [pc, #8]	; (8003380 <HAL_RCC_GetHCLKFreq+0x10>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	0018      	movs	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	20000000 	.word	0x20000000

08003384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003384:	b5b0      	push	{r4, r5, r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003388:	f7ff fff2 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 800338c:	0004      	movs	r4, r0
 800338e:	f7ff fb3f 	bl	8002a10 <LL_RCC_GetAPB1Prescaler>
 8003392:	0003      	movs	r3, r0
 8003394:	0b1a      	lsrs	r2, r3, #12
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003398:	0092      	lsls	r2, r2, #2
 800339a:	58d3      	ldr	r3, [r2, r3]
 800339c:	221f      	movs	r2, #31
 800339e:	4013      	ands	r3, r2
 80033a0:	40dc      	lsrs	r4, r3
 80033a2:	0023      	movs	r3, r4
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bdb0      	pop	{r4, r5, r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	08005828 	.word	0x08005828

080033b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80033b8:	2313      	movs	r3, #19
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033c0:	2312      	movs	r3, #18
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	029b      	lsls	r3, r3, #10
 80033d0:	4013      	ands	r3, r2
 80033d2:	d100      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80033d4:	e0a3      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d6:	2011      	movs	r0, #17
 80033d8:	183b      	adds	r3, r7, r0
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4ba5      	ldr	r3, [pc, #660]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	055b      	lsls	r3, r3, #21
 80033e6:	4013      	ands	r3, r2
 80033e8:	d110      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	4ba2      	ldr	r3, [pc, #648]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ee:	4ba1      	ldr	r3, [pc, #644]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	0549      	lsls	r1, r1, #21
 80033f4:	430a      	orrs	r2, r1
 80033f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80033f8:	4b9e      	ldr	r3, [pc, #632]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	055b      	lsls	r3, r3, #21
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003406:	183b      	adds	r3, r7, r0
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800340c:	4b9a      	ldr	r3, [pc, #616]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b99      	ldr	r3, [pc, #612]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	0049      	lsls	r1, r1, #1
 8003416:	430a      	orrs	r2, r1
 8003418:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800341a:	f7fd feb5 	bl	8001188 <HAL_GetTick>
 800341e:	0003      	movs	r3, r0
 8003420:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003422:	e00b      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003424:	f7fd feb0 	bl	8001188 <HAL_GetTick>
 8003428:	0002      	movs	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d904      	bls.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003432:	2313      	movs	r3, #19
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	2203      	movs	r2, #3
 8003438:	701a      	strb	r2, [r3, #0]
        break;
 800343a:	e005      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800343c:	4b8e      	ldr	r3, [pc, #568]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4013      	ands	r3, r2
 8003446:	d0ed      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003448:	2313      	movs	r3, #19
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d154      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003452:	4b88      	ldr	r3, [pc, #544]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003456:	23c0      	movs	r3, #192	; 0xc0
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4013      	ands	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d019      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	429a      	cmp	r2, r3
 800346c:	d014      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800346e:	4b81      	ldr	r3, [pc, #516]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003472:	4a82      	ldr	r2, [pc, #520]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003474:	4013      	ands	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003478:	4b7e      	ldr	r3, [pc, #504]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800347a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800347c:	4b7d      	ldr	r3, [pc, #500]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800347e:	2180      	movs	r1, #128	; 0x80
 8003480:	0249      	lsls	r1, r1, #9
 8003482:	430a      	orrs	r2, r1
 8003484:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003486:	4b7b      	ldr	r3, [pc, #492]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003488:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800348a:	4b7a      	ldr	r3, [pc, #488]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800348c:	497c      	ldr	r1, [pc, #496]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800348e:	400a      	ands	r2, r1
 8003490:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003492:	4b78      	ldr	r3, [pc, #480]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2201      	movs	r2, #1
 800349c:	4013      	ands	r3, r2
 800349e:	d016      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fd fe72 	bl	8001188 <HAL_GetTick>
 80034a4:	0003      	movs	r3, r0
 80034a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a8:	e00c      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034aa:	f7fd fe6d 	bl	8001188 <HAL_GetTick>
 80034ae:	0002      	movs	r2, r0
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	4a73      	ldr	r2, [pc, #460]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d904      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80034ba:	2313      	movs	r3, #19
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	2203      	movs	r2, #3
 80034c0:	701a      	strb	r2, [r3, #0]
            break;
 80034c2:	e004      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c4:	4b6b      	ldr	r3, [pc, #428]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c8:	2202      	movs	r2, #2
 80034ca:	4013      	ands	r3, r2
 80034cc:	d0ed      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80034ce:	2313      	movs	r3, #19
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034d8:	4b66      	ldr	r3, [pc, #408]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	4a67      	ldr	r2, [pc, #412]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80034de:	4013      	ands	r3, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034e6:	4b63      	ldr	r3, [pc, #396]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034e8:	430a      	orrs	r2, r1
 80034ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80034ec:	e00c      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034ee:	2312      	movs	r3, #18
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2213      	movs	r2, #19
 80034f4:	18ba      	adds	r2, r7, r2
 80034f6:	7812      	ldrb	r2, [r2, #0]
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	e005      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	2312      	movs	r3, #18
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	2213      	movs	r2, #19
 8003502:	18ba      	adds	r2, r7, r2
 8003504:	7812      	ldrb	r2, [r2, #0]
 8003506:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003508:	2311      	movs	r3, #17
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d105      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003512:	4b58      	ldr	r3, [pc, #352]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003516:	4b57      	ldr	r3, [pc, #348]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003518:	495b      	ldr	r1, [pc, #364]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800351a:	400a      	ands	r2, r1
 800351c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2201      	movs	r2, #1
 8003524:	4013      	ands	r3, r2
 8003526:	d009      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003528:	4b52      	ldr	r3, [pc, #328]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	2203      	movs	r2, #3
 800352e:	4393      	bics	r3, r2
 8003530:	0019      	movs	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4b4f      	ldr	r3, [pc, #316]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003538:	430a      	orrs	r2, r1
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2210      	movs	r2, #16
 8003542:	4013      	ands	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003546:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	4a50      	ldr	r2, [pc, #320]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800354c:	4013      	ands	r3, r2
 800354e:	0019      	movs	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003556:	430a      	orrs	r2, r1
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4013      	ands	r3, r2
 8003564:	d009      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003566:	4b43      	ldr	r3, [pc, #268]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	4a49      	ldr	r2, [pc, #292]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800356c:	4013      	ands	r3, r2
 800356e:	0019      	movs	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	4b3f      	ldr	r3, [pc, #252]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003576:	430a      	orrs	r2, r1
 8003578:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4013      	ands	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003586:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	4a42      	ldr	r2, [pc, #264]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800358c:	4013      	ands	r3, r2
 800358e:	0019      	movs	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003596:	430a      	orrs	r2, r1
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2220      	movs	r2, #32
 80035a0:	4013      	ands	r3, r2
 80035a2:	d009      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035a4:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	4a3b      	ldr	r2, [pc, #236]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	0019      	movs	r1, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	4b30      	ldr	r3, [pc, #192]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035b4:	430a      	orrs	r2, r1
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	01db      	lsls	r3, r3, #7
 80035c0:	4013      	ands	r3, r2
 80035c2:	d015      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035c4:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	0899      	lsrs	r1, r3, #2
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	4b28      	ldr	r3, [pc, #160]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035d2:	430a      	orrs	r2, r1
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	05db      	lsls	r3, r3, #23
 80035de:	429a      	cmp	r2, r3
 80035e0:	d106      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035e2:	4b24      	ldr	r3, [pc, #144]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035e8:	2180      	movs	r1, #128	; 0x80
 80035ea:	0249      	lsls	r1, r1, #9
 80035ec:	430a      	orrs	r2, r1
 80035ee:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	039b      	lsls	r3, r3, #14
 80035f8:	4013      	ands	r3, r2
 80035fa:	d016      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035fc:	4b1d      	ldr	r3, [pc, #116]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	4a26      	ldr	r2, [pc, #152]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003602:	4013      	ands	r3, r2
 8003604:	0019      	movs	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1a      	ldr	r2, [r3, #32]
 800360a:	4b1a      	ldr	r3, [pc, #104]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800360c:	430a      	orrs	r2, r1
 800360e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1a      	ldr	r2, [r3, #32]
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	03db      	lsls	r3, r3, #15
 8003618:	429a      	cmp	r2, r3
 800361a:	d106      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800361c:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	4b14      	ldr	r3, [pc, #80]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003622:	2180      	movs	r1, #128	; 0x80
 8003624:	0449      	lsls	r1, r1, #17
 8003626:	430a      	orrs	r2, r1
 8003628:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	4013      	ands	r3, r2
 8003634:	d016      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800363c:	4013      	ands	r3, r2
 800363e:	0019      	movs	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003646:	430a      	orrs	r2, r1
 8003648:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	01db      	lsls	r3, r3, #7
 8003652:	429a      	cmp	r2, r3
 8003654:	d106      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003656:	4b07      	ldr	r3, [pc, #28]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800365c:	2180      	movs	r1, #128	; 0x80
 800365e:	0249      	lsls	r1, r1, #9
 8003660:	430a      	orrs	r2, r1
 8003662:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003664:	2312      	movs	r3, #18
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	781b      	ldrb	r3, [r3, #0]
}
 800366a:	0018      	movs	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	b006      	add	sp, #24
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	40021000 	.word	0x40021000
 8003678:	40007000 	.word	0x40007000
 800367c:	fffffcff 	.word	0xfffffcff
 8003680:	fffeffff 	.word	0xfffeffff
 8003684:	00001388 	.word	0x00001388
 8003688:	efffffff 	.word	0xefffffff
 800368c:	fffff3ff 	.word	0xfffff3ff
 8003690:	fff3ffff 	.word	0xfff3ffff
 8003694:	ffcfffff 	.word	0xffcfffff
 8003698:	ffffcfff 	.word	0xffffcfff
 800369c:	ffbfffff 	.word	0xffbfffff
 80036a0:	ffff3fff 	.word	0xffff3fff

080036a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e04a      	b.n	800374c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	223d      	movs	r2, #61	; 0x3d
 80036ba:	5c9b      	ldrb	r3, [r3, r2]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d107      	bne.n	80036d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	223c      	movs	r2, #60	; 0x3c
 80036c6:	2100      	movs	r1, #0
 80036c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7fd fba5 	bl	8000e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	223d      	movs	r2, #61	; 0x3d
 80036d6:	2102      	movs	r1, #2
 80036d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	0019      	movs	r1, r3
 80036e4:	0010      	movs	r0, r2
 80036e6:	f000 fa87 	bl	8003bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2248      	movs	r2, #72	; 0x48
 80036ee:	2101      	movs	r1, #1
 80036f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	223e      	movs	r2, #62	; 0x3e
 80036f6:	2101      	movs	r1, #1
 80036f8:	5499      	strb	r1, [r3, r2]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	223f      	movs	r2, #63	; 0x3f
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2240      	movs	r2, #64	; 0x40
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2241      	movs	r2, #65	; 0x41
 800370e:	2101      	movs	r1, #1
 8003710:	5499      	strb	r1, [r3, r2]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2242      	movs	r2, #66	; 0x42
 8003716:	2101      	movs	r1, #1
 8003718:	5499      	strb	r1, [r3, r2]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2243      	movs	r2, #67	; 0x43
 800371e:	2101      	movs	r1, #1
 8003720:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2244      	movs	r2, #68	; 0x44
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2245      	movs	r2, #69	; 0x45
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2246      	movs	r2, #70	; 0x46
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2247      	movs	r2, #71	; 0x47
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	223d      	movs	r2, #61	; 0x3d
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b002      	add	sp, #8
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	223d      	movs	r2, #61	; 0x3d
 8003760:	5c9b      	ldrb	r3, [r3, r2]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d001      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e03d      	b.n	80037e8 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	223d      	movs	r2, #61	; 0x3d
 8003770:	2102      	movs	r1, #2
 8003772:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	430a      	orrs	r2, r1
 8003782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a19      	ldr	r2, [pc, #100]	; (80037f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00a      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x50>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	2380      	movs	r3, #128	; 0x80
 8003794:	05db      	lsls	r3, r3, #23
 8003796:	429a      	cmp	r2, r3
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0x50>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d116      	bne.n	80037d2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <HAL_TIM_Base_Start_IT+0xa4>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b06      	cmp	r3, #6
 80037b4:	d016      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x90>
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	025b      	lsls	r3, r3, #9
 80037bc:	429a      	cmp	r2, r3
 80037be:	d011      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2101      	movs	r1, #1
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d0:	e008      	b.n	80037e4 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	430a      	orrs	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e000      	b.n	80037e6 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b004      	add	sp, #16
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40012c00 	.word	0x40012c00
 80037f4:	40000400 	.word	0x40000400
 80037f8:	00010007 	.word	0x00010007

080037fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2202      	movs	r2, #2
 8003818:	4013      	ands	r3, r2
 800381a:	d021      	beq.n	8003860 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2202      	movs	r2, #2
 8003820:	4013      	ands	r3, r2
 8003822:	d01d      	beq.n	8003860 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2203      	movs	r2, #3
 800382a:	4252      	negs	r2, r2
 800382c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2203      	movs	r2, #3
 800383c:	4013      	ands	r3, r2
 800383e:	d004      	beq.n	800384a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f000 f9c0 	bl	8003bc8 <HAL_TIM_IC_CaptureCallback>
 8003848:	e007      	b.n	800385a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0018      	movs	r0, r3
 800384e:	f000 f9b3 	bl	8003bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	0018      	movs	r0, r3
 8003856:	f000 f9bf 	bl	8003bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2204      	movs	r2, #4
 8003864:	4013      	ands	r3, r2
 8003866:	d022      	beq.n	80038ae <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2204      	movs	r2, #4
 800386c:	4013      	ands	r3, r2
 800386e:	d01e      	beq.n	80038ae <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2205      	movs	r2, #5
 8003876:	4252      	negs	r2, r2
 8003878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	23c0      	movs	r3, #192	; 0xc0
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4013      	ands	r3, r2
 800388c:	d004      	beq.n	8003898 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	0018      	movs	r0, r3
 8003892:	f000 f999 	bl	8003bc8 <HAL_TIM_IC_CaptureCallback>
 8003896:	e007      	b.n	80038a8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	0018      	movs	r0, r3
 800389c:	f000 f98c 	bl	8003bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 f998 	bl	8003bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2208      	movs	r2, #8
 80038b2:	4013      	ands	r3, r2
 80038b4:	d021      	beq.n	80038fa <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2208      	movs	r2, #8
 80038ba:	4013      	ands	r3, r2
 80038bc:	d01d      	beq.n	80038fa <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2209      	movs	r2, #9
 80038c4:	4252      	negs	r2, r2
 80038c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2204      	movs	r2, #4
 80038cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	2203      	movs	r2, #3
 80038d6:	4013      	ands	r3, r2
 80038d8:	d004      	beq.n	80038e4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 f973 	bl	8003bc8 <HAL_TIM_IC_CaptureCallback>
 80038e2:	e007      	b.n	80038f4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	0018      	movs	r0, r3
 80038e8:	f000 f966 	bl	8003bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	0018      	movs	r0, r3
 80038f0:	f000 f972 	bl	8003bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2210      	movs	r2, #16
 80038fe:	4013      	ands	r3, r2
 8003900:	d022      	beq.n	8003948 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2210      	movs	r2, #16
 8003906:	4013      	ands	r3, r2
 8003908:	d01e      	beq.n	8003948 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2211      	movs	r2, #17
 8003910:	4252      	negs	r2, r2
 8003912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2208      	movs	r2, #8
 8003918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	23c0      	movs	r3, #192	; 0xc0
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4013      	ands	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	0018      	movs	r0, r3
 800392c:	f000 f94c 	bl	8003bc8 <HAL_TIM_IC_CaptureCallback>
 8003930:	e007      	b.n	8003942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	0018      	movs	r0, r3
 8003936:	f000 f93f 	bl	8003bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	0018      	movs	r0, r3
 800393e:	f000 f94b 	bl	8003bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2201      	movs	r2, #1
 800394c:	4013      	ands	r3, r2
 800394e:	d00c      	beq.n	800396a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	4013      	ands	r3, r2
 8003956:	d008      	beq.n	800396a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2202      	movs	r2, #2
 800395e:	4252      	negs	r2, r2
 8003960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	0018      	movs	r0, r3
 8003966:	f7fd f925 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2280      	movs	r2, #128	; 0x80
 800396e:	4013      	ands	r3, r2
 8003970:	d104      	bne.n	800397c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	019b      	lsls	r3, r3, #6
 8003978:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800397a:	d00b      	beq.n	8003994 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	4013      	ands	r3, r2
 8003982:	d007      	beq.n	8003994 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1e      	ldr	r2, [pc, #120]	; (8003a04 <HAL_TIM_IRQHandler+0x208>)
 800398a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	0018      	movs	r0, r3
 8003990:	f000 fac2 	bl	8003f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4013      	ands	r3, r2
 800399c:	d00b      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2280      	movs	r2, #128	; 0x80
 80039a2:	4013      	ands	r3, r2
 80039a4:	d007      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <HAL_TIM_IRQHandler+0x20c>)
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f000 fab9 	bl	8003f28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2240      	movs	r2, #64	; 0x40
 80039ba:	4013      	ands	r3, r2
 80039bc:	d00c      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2240      	movs	r2, #64	; 0x40
 80039c2:	4013      	ands	r3, r2
 80039c4:	d008      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2241      	movs	r2, #65	; 0x41
 80039cc:	4252      	negs	r2, r2
 80039ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 f908 	bl	8003be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2220      	movs	r2, #32
 80039dc:	4013      	ands	r3, r2
 80039de:	d00c      	beq.n	80039fa <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	4013      	ands	r3, r2
 80039e6:	d008      	beq.n	80039fa <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2221      	movs	r2, #33	; 0x21
 80039ee:	4252      	negs	r2, r2
 80039f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0018      	movs	r0, r3
 80039f6:	f000 fa87 	bl	8003f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b004      	add	sp, #16
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	ffffdf7f 	.word	0xffffdf7f
 8003a08:	fffffeff 	.word	0xfffffeff

08003a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a16:	230f      	movs	r3, #15
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	223c      	movs	r2, #60	; 0x3c
 8003a22:	5c9b      	ldrb	r3, [r3, r2]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_TIM_ConfigClockSource+0x20>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e0bc      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x19a>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	223c      	movs	r2, #60	; 0x3c
 8003a30:	2101      	movs	r1, #1
 8003a32:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	223d      	movs	r2, #61	; 0x3d
 8003a38:	2102      	movs	r1, #2
 8003a3a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4a5a      	ldr	r2, [pc, #360]	; (8003bb0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4a59      	ldr	r2, [pc, #356]	; (8003bb4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	0192      	lsls	r2, r2, #6
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d040      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0xde>
 8003a68:	2280      	movs	r2, #128	; 0x80
 8003a6a:	0192      	lsls	r2, r2, #6
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d900      	bls.n	8003a72 <HAL_TIM_ConfigClockSource+0x66>
 8003a70:	e088      	b.n	8003b84 <HAL_TIM_ConfigClockSource+0x178>
 8003a72:	2280      	movs	r2, #128	; 0x80
 8003a74:	0152      	lsls	r2, r2, #5
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d100      	bne.n	8003a7c <HAL_TIM_ConfigClockSource+0x70>
 8003a7a:	e088      	b.n	8003b8e <HAL_TIM_ConfigClockSource+0x182>
 8003a7c:	2280      	movs	r2, #128	; 0x80
 8003a7e:	0152      	lsls	r2, r2, #5
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d900      	bls.n	8003a86 <HAL_TIM_ConfigClockSource+0x7a>
 8003a84:	e07e      	b.n	8003b84 <HAL_TIM_ConfigClockSource+0x178>
 8003a86:	2b70      	cmp	r3, #112	; 0x70
 8003a88:	d018      	beq.n	8003abc <HAL_TIM_ConfigClockSource+0xb0>
 8003a8a:	d900      	bls.n	8003a8e <HAL_TIM_ConfigClockSource+0x82>
 8003a8c:	e07a      	b.n	8003b84 <HAL_TIM_ConfigClockSource+0x178>
 8003a8e:	2b60      	cmp	r3, #96	; 0x60
 8003a90:	d04f      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x126>
 8003a92:	d900      	bls.n	8003a96 <HAL_TIM_ConfigClockSource+0x8a>
 8003a94:	e076      	b.n	8003b84 <HAL_TIM_ConfigClockSource+0x178>
 8003a96:	2b50      	cmp	r3, #80	; 0x50
 8003a98:	d03b      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x106>
 8003a9a:	d900      	bls.n	8003a9e <HAL_TIM_ConfigClockSource+0x92>
 8003a9c:	e072      	b.n	8003b84 <HAL_TIM_ConfigClockSource+0x178>
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d057      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x146>
 8003aa2:	d900      	bls.n	8003aa6 <HAL_TIM_ConfigClockSource+0x9a>
 8003aa4:	e06e      	b.n	8003b84 <HAL_TIM_ConfigClockSource+0x178>
 8003aa6:	2b30      	cmp	r3, #48	; 0x30
 8003aa8:	d063      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x166>
 8003aaa:	d86b      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x178>
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d060      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x166>
 8003ab0:	d868      	bhi.n	8003b84 <HAL_TIM_ConfigClockSource+0x178>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d05d      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x166>
 8003ab6:	2b10      	cmp	r3, #16
 8003ab8:	d05b      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x166>
 8003aba:	e063      	b.n	8003b84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	6899      	ldr	r1, [r3, #8]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f000 f994 	bl	8003df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2277      	movs	r2, #119	; 0x77
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	609a      	str	r2, [r3, #8]
      break;
 8003ae8:	e052      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6899      	ldr	r1, [r3, #8]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f000 f97d 	bl	8003df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	01c9      	lsls	r1, r1, #7
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]
      break;
 8003b10:	e03e      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6859      	ldr	r1, [r3, #4]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	001a      	movs	r2, r3
 8003b20:	f000 f8ee 	bl	8003d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2150      	movs	r1, #80	; 0x50
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 f948 	bl	8003dc0 <TIM_ITRx_SetConfig>
      break;
 8003b30:	e02e      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6859      	ldr	r1, [r3, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	001a      	movs	r2, r3
 8003b40:	f000 f90c 	bl	8003d5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2160      	movs	r1, #96	; 0x60
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f000 f938 	bl	8003dc0 <TIM_ITRx_SetConfig>
      break;
 8003b50:	e01e      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	001a      	movs	r2, r3
 8003b60:	f000 f8ce 	bl	8003d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2140      	movs	r1, #64	; 0x40
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 f928 	bl	8003dc0 <TIM_ITRx_SetConfig>
      break;
 8003b70:	e00e      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	0010      	movs	r0, r2
 8003b7e:	f000 f91f 	bl	8003dc0 <TIM_ITRx_SetConfig>
      break;
 8003b82:	e005      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003b84:	230f      	movs	r3, #15
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
      break;
 8003b8c:	e000      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003b8e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	223d      	movs	r2, #61	; 0x3d
 8003b94:	2101      	movs	r1, #1
 8003b96:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	223c      	movs	r2, #60	; 0x3c
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	5499      	strb	r1, [r3, r2]

  return status;
 8003ba0:	230f      	movs	r3, #15
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	781b      	ldrb	r3, [r3, #0]
}
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b004      	add	sp, #16
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	ffceff88 	.word	0xffceff88
 8003bb4:	ffff00ff 	.word	0xffff00ff

08003bb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b002      	add	sp, #8
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b002      	add	sp, #8
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a37      	ldr	r2, [pc, #220]	; (8003ce8 <TIM_Base_SetConfig+0xf0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d008      	beq.n	8003c22 <TIM_Base_SetConfig+0x2a>
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	2380      	movs	r3, #128	; 0x80
 8003c14:	05db      	lsls	r3, r3, #23
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d003      	beq.n	8003c22 <TIM_Base_SetConfig+0x2a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a33      	ldr	r2, [pc, #204]	; (8003cec <TIM_Base_SetConfig+0xf4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d108      	bne.n	8003c34 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2270      	movs	r2, #112	; 0x70
 8003c26:	4393      	bics	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a2c      	ldr	r2, [pc, #176]	; (8003ce8 <TIM_Base_SetConfig+0xf0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d014      	beq.n	8003c66 <TIM_Base_SetConfig+0x6e>
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	05db      	lsls	r3, r3, #23
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d00f      	beq.n	8003c66 <TIM_Base_SetConfig+0x6e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a28      	ldr	r2, [pc, #160]	; (8003cec <TIM_Base_SetConfig+0xf4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00b      	beq.n	8003c66 <TIM_Base_SetConfig+0x6e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a27      	ldr	r2, [pc, #156]	; (8003cf0 <TIM_Base_SetConfig+0xf8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d007      	beq.n	8003c66 <TIM_Base_SetConfig+0x6e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <TIM_Base_SetConfig+0xfc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d003      	beq.n	8003c66 <TIM_Base_SetConfig+0x6e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <TIM_Base_SetConfig+0x100>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d108      	bne.n	8003c78 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <TIM_Base_SetConfig+0x104>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2280      	movs	r2, #128	; 0x80
 8003c7c:	4393      	bics	r3, r2
 8003c7e:	001a      	movs	r2, r3
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a11      	ldr	r2, [pc, #68]	; (8003ce8 <TIM_Base_SetConfig+0xf0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <TIM_Base_SetConfig+0xbe>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <TIM_Base_SetConfig+0xfc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d003      	beq.n	8003cb6 <TIM_Base_SetConfig+0xbe>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <TIM_Base_SetConfig+0x100>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d103      	bne.n	8003cbe <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d106      	bne.n	8003cde <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	4393      	bics	r3, r2
 8003cd8:	001a      	movs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	611a      	str	r2, [r3, #16]
  }
}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b004      	add	sp, #16
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	40002000 	.word	0x40002000
 8003cf4:	40014400 	.word	0x40014400
 8003cf8:	40014800 	.word	0x40014800
 8003cfc:	fffffcff 	.word	0xfffffcff

08003d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	2201      	movs	r2, #1
 8003d18:	4393      	bics	r3, r2
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	22f0      	movs	r2, #240	; 0xf0
 8003d2a:	4393      	bics	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	220a      	movs	r2, #10
 8003d3c:	4393      	bics	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b006      	add	sp, #24
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	2210      	movs	r2, #16
 8003d74:	4393      	bics	r3, r2
 8003d76:	001a      	movs	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <TIM_TI2_ConfigInputStage+0x60>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	031b      	lsls	r3, r3, #12
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	22a0      	movs	r2, #160	; 0xa0
 8003d98:	4393      	bics	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b006      	add	sp, #24
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	ffff0fff 	.word	0xffff0fff

08003dc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <TIM_ITRx_SetConfig+0x34>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	2207      	movs	r2, #7
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	609a      	str	r2, [r3, #8]
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b004      	add	sp, #16
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	ffcfff8f 	.word	0xffcfff8f

08003df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <TIM_ETR_SetConfig+0x3c>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	021a      	lsls	r2, r3, #8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	609a      	str	r2, [r3, #8]
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b006      	add	sp, #24
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	ffff00ff 	.word	0xffff00ff

08003e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	223c      	movs	r2, #60	; 0x3c
 8003e46:	5c9b      	ldrb	r3, [r3, r2]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e050      	b.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	223c      	movs	r2, #60	; 0x3c
 8003e54:	2101      	movs	r1, #1
 8003e56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	223d      	movs	r2, #61	; 0x3d
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a21      	ldr	r2, [pc, #132]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d108      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4a20      	ldr	r2, [pc, #128]	; (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2270      	movs	r2, #112	; 0x70
 8003e90:	4393      	bics	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a14      	ldr	r2, [pc, #80]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00a      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	05db      	lsls	r3, r3, #23
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d004      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a10      	ldr	r2, [pc, #64]	; (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2280      	movs	r2, #128	; 0x80
 8003eca:	4393      	bics	r3, r2
 8003ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	223d      	movs	r2, #61	; 0x3d
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	223c      	movs	r2, #60	; 0x3c
 8003eec:	2100      	movs	r1, #0
 8003eee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b004      	add	sp, #16
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	ff0fffff 	.word	0xff0fffff
 8003f04:	40000400 	.word	0x40000400

08003f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b002      	add	sp, #8
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f20:	46c0      	nop			; (mov r8, r8)
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b002      	add	sp, #8
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f30:	46c0      	nop			; (mov r8, r8)
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b002      	add	sp, #8
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e046      	b.n	8003fd8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2288      	movs	r2, #136	; 0x88
 8003f4e:	589b      	ldr	r3, [r3, r2]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d107      	bne.n	8003f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2284      	movs	r2, #132	; 0x84
 8003f58:	2100      	movs	r1, #0
 8003f5a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7fc ff80 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2288      	movs	r2, #136	; 0x88
 8003f68:	2124      	movs	r1, #36	; 0x24
 8003f6a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2101      	movs	r1, #1
 8003f78:	438a      	bics	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	0018      	movs	r0, r3
 8003f88:	f000 fea4 	bl	8004cd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f000 fc12 	bl	80047b8 <UART_SetConfig>
 8003f94:	0003      	movs	r3, r0
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e01c      	b.n	8003fd8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	490d      	ldr	r1, [pc, #52]	; (8003fe0 <HAL_UART_Init+0xa8>)
 8003faa:	400a      	ands	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	212a      	movs	r1, #42	; 0x2a
 8003fba:	438a      	bics	r2, r1
 8003fbc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2101      	movs	r1, #1
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f000 ff33 	bl	8004e3c <UART_CheckIdleState>
 8003fd6:	0003      	movs	r3, r0
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	ffffb7ff 	.word	0xffffb7ff

08003fe4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08c      	sub	sp, #48	; 0x30
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	1dbb      	adds	r3, r7, #6
 8003ff0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2288      	movs	r2, #136	; 0x88
 8003ff6:	589b      	ldr	r3, [r3, r2]
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d000      	beq.n	8003ffe <HAL_UART_Transmit_IT+0x1a>
 8003ffc:	e08d      	b.n	800411a <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_UART_Transmit_IT+0x28>
 8004004:	1dbb      	adds	r3, r7, #6
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e085      	b.n	800411c <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	015b      	lsls	r3, r3, #5
 8004018:	429a      	cmp	r2, r3
 800401a:	d109      	bne.n	8004030 <HAL_UART_Transmit_IT+0x4c>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d105      	bne.n	8004030 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2201      	movs	r2, #1
 8004028:	4013      	ands	r3, r2
 800402a:	d001      	beq.n	8004030 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e075      	b.n	800411c <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1dba      	adds	r2, r7, #6
 800403a:	2154      	movs	r1, #84	; 0x54
 800403c:	8812      	ldrh	r2, [r2, #0]
 800403e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1dba      	adds	r2, r7, #6
 8004044:	2156      	movs	r1, #86	; 0x56
 8004046:	8812      	ldrh	r2, [r2, #0]
 8004048:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2290      	movs	r2, #144	; 0x90
 8004054:	2100      	movs	r1, #0
 8004056:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2288      	movs	r2, #136	; 0x88
 800405c:	2121      	movs	r1, #33	; 0x21
 800405e:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	059b      	lsls	r3, r3, #22
 8004068:	429a      	cmp	r2, r3
 800406a:	d12a      	bne.n	80040c2 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	015b      	lsls	r3, r3, #5
 8004074:	429a      	cmp	r2, r3
 8004076:	d107      	bne.n	8004088 <HAL_UART_Transmit_IT+0xa4>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d103      	bne.n	8004088 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a28      	ldr	r2, [pc, #160]	; (8004124 <HAL_UART_Transmit_IT+0x140>)
 8004084:	679a      	str	r2, [r3, #120]	; 0x78
 8004086:	e002      	b.n	800408e <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4a27      	ldr	r2, [pc, #156]	; (8004128 <HAL_UART_Transmit_IT+0x144>)
 800408c:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408e:	f3ef 8310 	mrs	r3, PRIMASK
 8004092:	61fb      	str	r3, [r7, #28]
  return(result);
 8004094:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004096:	62bb      	str	r3, [r7, #40]	; 0x28
 8004098:	2301      	movs	r3, #1
 800409a:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	f383 8810 	msr	PRIMASK, r3
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2180      	movs	r1, #128	; 0x80
 80040b0:	0409      	lsls	r1, r1, #16
 80040b2:	430a      	orrs	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	f383 8810 	msr	PRIMASK, r3
}
 80040c0:	e029      	b.n	8004116 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	2380      	movs	r3, #128	; 0x80
 80040c8:	015b      	lsls	r3, r3, #5
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d107      	bne.n	80040de <HAL_UART_Transmit_IT+0xfa>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a14      	ldr	r2, [pc, #80]	; (800412c <HAL_UART_Transmit_IT+0x148>)
 80040da:	679a      	str	r2, [r3, #120]	; 0x78
 80040dc:	e002      	b.n	80040e4 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4a13      	ldr	r2, [pc, #76]	; (8004130 <HAL_UART_Transmit_IT+0x14c>)
 80040e2:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e4:	f3ef 8310 	mrs	r3, PRIMASK
 80040e8:	613b      	str	r3, [r7, #16]
  return(result);
 80040ea:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ee:	2301      	movs	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f383 8810 	msr	PRIMASK, r3
}
 80040f8:	46c0      	nop			; (mov r8, r8)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2180      	movs	r1, #128	; 0x80
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f383 8810 	msr	PRIMASK, r3
}
 8004114:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e000      	b.n	800411c <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800411a:	2302      	movs	r3, #2
  }
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b00c      	add	sp, #48	; 0x30
 8004122:	bd80      	pop	{r7, pc}
 8004124:	080053c9 	.word	0x080053c9
 8004128:	080052dd 	.word	0x080052dd
 800412c:	0800521f 	.word	0x0800521f
 8004130:	0800516b 	.word	0x0800516b

08004134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004134:	b5b0      	push	{r4, r5, r7, lr}
 8004136:	b0aa      	sub	sp, #168	; 0xa8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	22a4      	movs	r2, #164	; 0xa4
 8004144:	18b9      	adds	r1, r7, r2
 8004146:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	20a0      	movs	r0, #160	; 0xa0
 8004150:	1839      	adds	r1, r7, r0
 8004152:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	249c      	movs	r4, #156	; 0x9c
 800415c:	1939      	adds	r1, r7, r4
 800415e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004160:	0011      	movs	r1, r2
 8004162:	18bb      	adds	r3, r7, r2
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4aa2      	ldr	r2, [pc, #648]	; (80043f0 <HAL_UART_IRQHandler+0x2bc>)
 8004168:	4013      	ands	r3, r2
 800416a:	2298      	movs	r2, #152	; 0x98
 800416c:	18bd      	adds	r5, r7, r2
 800416e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004170:	18bb      	adds	r3, r7, r2
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d11a      	bne.n	80041ae <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004178:	187b      	adds	r3, r7, r1
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2220      	movs	r2, #32
 800417e:	4013      	ands	r3, r2
 8004180:	d015      	beq.n	80041ae <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004182:	183b      	adds	r3, r7, r0
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2220      	movs	r2, #32
 8004188:	4013      	ands	r3, r2
 800418a:	d105      	bne.n	8004198 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800418c:	193b      	adds	r3, r7, r4
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	055b      	lsls	r3, r3, #21
 8004194:	4013      	ands	r3, r2
 8004196:	d00a      	beq.n	80041ae <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	2b00      	cmp	r3, #0
 800419e:	d100      	bne.n	80041a2 <HAL_UART_IRQHandler+0x6e>
 80041a0:	e2dc      	b.n	800475c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	0010      	movs	r0, r2
 80041aa:	4798      	blx	r3
      }
      return;
 80041ac:	e2d6      	b.n	800475c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041ae:	2398      	movs	r3, #152	; 0x98
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d100      	bne.n	80041ba <HAL_UART_IRQHandler+0x86>
 80041b8:	e122      	b.n	8004400 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80041ba:	239c      	movs	r3, #156	; 0x9c
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a8c      	ldr	r2, [pc, #560]	; (80043f4 <HAL_UART_IRQHandler+0x2c0>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	d106      	bne.n	80041d4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80041c6:	23a0      	movs	r3, #160	; 0xa0
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a8a      	ldr	r2, [pc, #552]	; (80043f8 <HAL_UART_IRQHandler+0x2c4>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	d100      	bne.n	80041d4 <HAL_UART_IRQHandler+0xa0>
 80041d2:	e115      	b.n	8004400 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041d4:	23a4      	movs	r3, #164	; 0xa4
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2201      	movs	r2, #1
 80041dc:	4013      	ands	r3, r2
 80041de:	d012      	beq.n	8004206 <HAL_UART_IRQHandler+0xd2>
 80041e0:	23a0      	movs	r3, #160	; 0xa0
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	4013      	ands	r3, r2
 80041ec:	d00b      	beq.n	8004206 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2201      	movs	r2, #1
 80041f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2290      	movs	r2, #144	; 0x90
 80041fa:	589b      	ldr	r3, [r3, r2]
 80041fc:	2201      	movs	r2, #1
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2190      	movs	r1, #144	; 0x90
 8004204:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004206:	23a4      	movs	r3, #164	; 0xa4
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2202      	movs	r2, #2
 800420e:	4013      	ands	r3, r2
 8004210:	d011      	beq.n	8004236 <HAL_UART_IRQHandler+0x102>
 8004212:	239c      	movs	r3, #156	; 0x9c
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2201      	movs	r2, #1
 800421a:	4013      	ands	r3, r2
 800421c:	d00b      	beq.n	8004236 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2202      	movs	r2, #2
 8004224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2290      	movs	r2, #144	; 0x90
 800422a:	589b      	ldr	r3, [r3, r2]
 800422c:	2204      	movs	r2, #4
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2190      	movs	r1, #144	; 0x90
 8004234:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004236:	23a4      	movs	r3, #164	; 0xa4
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2204      	movs	r2, #4
 800423e:	4013      	ands	r3, r2
 8004240:	d011      	beq.n	8004266 <HAL_UART_IRQHandler+0x132>
 8004242:	239c      	movs	r3, #156	; 0x9c
 8004244:	18fb      	adds	r3, r7, r3
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2201      	movs	r2, #1
 800424a:	4013      	ands	r3, r2
 800424c:	d00b      	beq.n	8004266 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2204      	movs	r2, #4
 8004254:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2290      	movs	r2, #144	; 0x90
 800425a:	589b      	ldr	r3, [r3, r2]
 800425c:	2202      	movs	r2, #2
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2190      	movs	r1, #144	; 0x90
 8004264:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004266:	23a4      	movs	r3, #164	; 0xa4
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2208      	movs	r2, #8
 800426e:	4013      	ands	r3, r2
 8004270:	d017      	beq.n	80042a2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004272:	23a0      	movs	r3, #160	; 0xa0
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2220      	movs	r2, #32
 800427a:	4013      	ands	r3, r2
 800427c:	d105      	bne.n	800428a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800427e:	239c      	movs	r3, #156	; 0x9c
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a5b      	ldr	r2, [pc, #364]	; (80043f4 <HAL_UART_IRQHandler+0x2c0>)
 8004286:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004288:	d00b      	beq.n	80042a2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2208      	movs	r2, #8
 8004290:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2290      	movs	r2, #144	; 0x90
 8004296:	589b      	ldr	r3, [r3, r2]
 8004298:	2208      	movs	r2, #8
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2190      	movs	r1, #144	; 0x90
 80042a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042a2:	23a4      	movs	r3, #164	; 0xa4
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	4013      	ands	r3, r2
 80042ae:	d013      	beq.n	80042d8 <HAL_UART_IRQHandler+0x1a4>
 80042b0:	23a0      	movs	r3, #160	; 0xa0
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	2380      	movs	r3, #128	; 0x80
 80042b8:	04db      	lsls	r3, r3, #19
 80042ba:	4013      	ands	r3, r2
 80042bc:	d00c      	beq.n	80042d8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2280      	movs	r2, #128	; 0x80
 80042c4:	0112      	lsls	r2, r2, #4
 80042c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2290      	movs	r2, #144	; 0x90
 80042cc:	589b      	ldr	r3, [r3, r2]
 80042ce:	2220      	movs	r2, #32
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2190      	movs	r1, #144	; 0x90
 80042d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2290      	movs	r2, #144	; 0x90
 80042dc:	589b      	ldr	r3, [r3, r2]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d100      	bne.n	80042e4 <HAL_UART_IRQHandler+0x1b0>
 80042e2:	e23d      	b.n	8004760 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042e4:	23a4      	movs	r3, #164	; 0xa4
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2220      	movs	r2, #32
 80042ec:	4013      	ands	r3, r2
 80042ee:	d015      	beq.n	800431c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042f0:	23a0      	movs	r3, #160	; 0xa0
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2220      	movs	r2, #32
 80042f8:	4013      	ands	r3, r2
 80042fa:	d106      	bne.n	800430a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042fc:	239c      	movs	r3, #156	; 0x9c
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	2380      	movs	r3, #128	; 0x80
 8004304:	055b      	lsls	r3, r3, #21
 8004306:	4013      	ands	r3, r2
 8004308:	d008      	beq.n	800431c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430e:	2b00      	cmp	r3, #0
 8004310:	d004      	beq.n	800431c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	0010      	movs	r0, r2
 800431a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2290      	movs	r2, #144	; 0x90
 8004320:	589b      	ldr	r3, [r3, r2]
 8004322:	2194      	movs	r1, #148	; 0x94
 8004324:	187a      	adds	r2, r7, r1
 8004326:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2240      	movs	r2, #64	; 0x40
 8004330:	4013      	ands	r3, r2
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d004      	beq.n	8004340 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004336:	187b      	adds	r3, r7, r1
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2228      	movs	r2, #40	; 0x28
 800433c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800433e:	d04c      	beq.n	80043da <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	0018      	movs	r0, r3
 8004344:	f000 fe94 	bl	8005070 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2240      	movs	r2, #64	; 0x40
 8004350:	4013      	ands	r3, r2
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d13c      	bne.n	80043d0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004356:	f3ef 8310 	mrs	r3, PRIMASK
 800435a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800435c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435e:	2090      	movs	r0, #144	; 0x90
 8004360:	183a      	adds	r2, r7, r0
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	2301      	movs	r3, #1
 8004366:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436a:	f383 8810 	msr	PRIMASK, r3
}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2140      	movs	r1, #64	; 0x40
 800437c:	438a      	bics	r2, r1
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	183b      	adds	r3, r7, r0
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004388:	f383 8810 	msr	PRIMASK, r3
}
 800438c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2280      	movs	r2, #128	; 0x80
 8004392:	589b      	ldr	r3, [r3, r2]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d016      	beq.n	80043c6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2280      	movs	r2, #128	; 0x80
 800439c:	589b      	ldr	r3, [r3, r2]
 800439e:	4a17      	ldr	r2, [pc, #92]	; (80043fc <HAL_UART_IRQHandler+0x2c8>)
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2280      	movs	r2, #128	; 0x80
 80043a6:	589b      	ldr	r3, [r3, r2]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7fe f905 	bl	80025b8 <HAL_DMA_Abort_IT>
 80043ae:	1e03      	subs	r3, r0, #0
 80043b0:	d01c      	beq.n	80043ec <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2280      	movs	r2, #128	; 0x80
 80043b6:	589b      	ldr	r3, [r3, r2]
 80043b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	2180      	movs	r1, #128	; 0x80
 80043be:	5852      	ldr	r2, [r2, r1]
 80043c0:	0010      	movs	r0, r2
 80043c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c4:	e012      	b.n	80043ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	0018      	movs	r0, r3
 80043ca:	f000 f9e1 	bl	8004790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ce:	e00d      	b.n	80043ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	0018      	movs	r0, r3
 80043d4:	f000 f9dc 	bl	8004790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d8:	e008      	b.n	80043ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	0018      	movs	r0, r3
 80043de:	f000 f9d7 	bl	8004790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2290      	movs	r2, #144	; 0x90
 80043e6:	2100      	movs	r1, #0
 80043e8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80043ea:	e1b9      	b.n	8004760 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ec:	46c0      	nop			; (mov r8, r8)
    return;
 80043ee:	e1b7      	b.n	8004760 <HAL_UART_IRQHandler+0x62c>
 80043f0:	0000080f 	.word	0x0000080f
 80043f4:	10000001 	.word	0x10000001
 80043f8:	04000120 	.word	0x04000120
 80043fc:	0800513d 	.word	0x0800513d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d000      	beq.n	800440a <HAL_UART_IRQHandler+0x2d6>
 8004408:	e13e      	b.n	8004688 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800440a:	23a4      	movs	r3, #164	; 0xa4
 800440c:	18fb      	adds	r3, r7, r3
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2210      	movs	r2, #16
 8004412:	4013      	ands	r3, r2
 8004414:	d100      	bne.n	8004418 <HAL_UART_IRQHandler+0x2e4>
 8004416:	e137      	b.n	8004688 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004418:	23a0      	movs	r3, #160	; 0xa0
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2210      	movs	r2, #16
 8004420:	4013      	ands	r3, r2
 8004422:	d100      	bne.n	8004426 <HAL_UART_IRQHandler+0x2f2>
 8004424:	e130      	b.n	8004688 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2210      	movs	r2, #16
 800442c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2240      	movs	r2, #64	; 0x40
 8004436:	4013      	ands	r3, r2
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	d000      	beq.n	800443e <HAL_UART_IRQHandler+0x30a>
 800443c:	e0a4      	b.n	8004588 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2280      	movs	r2, #128	; 0x80
 8004442:	589b      	ldr	r3, [r3, r2]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	217e      	movs	r1, #126	; 0x7e
 800444a:	187b      	adds	r3, r7, r1
 800444c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800444e:	187b      	adds	r3, r7, r1
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d100      	bne.n	8004458 <HAL_UART_IRQHandler+0x324>
 8004456:	e185      	b.n	8004764 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	225c      	movs	r2, #92	; 0x5c
 800445c:	5a9b      	ldrh	r3, [r3, r2]
 800445e:	187a      	adds	r2, r7, r1
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d300      	bcc.n	8004468 <HAL_UART_IRQHandler+0x334>
 8004466:	e17d      	b.n	8004764 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	187a      	adds	r2, r7, r1
 800446c:	215e      	movs	r1, #94	; 0x5e
 800446e:	8812      	ldrh	r2, [r2, #0]
 8004470:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2280      	movs	r2, #128	; 0x80
 8004476:	589b      	ldr	r3, [r3, r2]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2220      	movs	r2, #32
 800447e:	4013      	ands	r3, r2
 8004480:	d170      	bne.n	8004564 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004482:	f3ef 8310 	mrs	r3, PRIMASK
 8004486:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800448a:	67bb      	str	r3, [r7, #120]	; 0x78
 800448c:	2301      	movs	r3, #1
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	f383 8810 	msr	PRIMASK, r3
}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	49b4      	ldr	r1, [pc, #720]	; (8004774 <HAL_UART_IRQHandler+0x640>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	f383 8810 	msr	PRIMASK, r3
}
 80044b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b4:	f3ef 8310 	mrs	r3, PRIMASK
 80044b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80044ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044bc:	677b      	str	r3, [r7, #116]	; 0x74
 80044be:	2301      	movs	r3, #1
 80044c0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c4:	f383 8810 	msr	PRIMASK, r3
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2101      	movs	r1, #1
 80044d6:	438a      	bics	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044dc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e0:	f383 8810 	msr	PRIMASK, r3
}
 80044e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e6:	f3ef 8310 	mrs	r3, PRIMASK
 80044ea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80044ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ee:	673b      	str	r3, [r7, #112]	; 0x70
 80044f0:	2301      	movs	r3, #1
 80044f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f6:	f383 8810 	msr	PRIMASK, r3
}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2140      	movs	r1, #64	; 0x40
 8004508:	438a      	bics	r2, r1
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800450e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004512:	f383 8810 	msr	PRIMASK, r3
}
 8004516:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	228c      	movs	r2, #140	; 0x8c
 800451c:	2120      	movs	r1, #32
 800451e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004526:	f3ef 8310 	mrs	r3, PRIMASK
 800452a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800452c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800452e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004530:	2301      	movs	r3, #1
 8004532:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004536:	f383 8810 	msr	PRIMASK, r3
}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2110      	movs	r1, #16
 8004548:	438a      	bics	r2, r1
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004552:	f383 8810 	msr	PRIMASK, r3
}
 8004556:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2280      	movs	r2, #128	; 0x80
 800455c:	589b      	ldr	r3, [r3, r2]
 800455e:	0018      	movs	r0, r3
 8004560:	f7fd ffc8 	bl	80024f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	225c      	movs	r2, #92	; 0x5c
 800456e:	5a9a      	ldrh	r2, [r3, r2]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	215e      	movs	r1, #94	; 0x5e
 8004574:	5a5b      	ldrh	r3, [r3, r1]
 8004576:	b29b      	uxth	r3, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	b29a      	uxth	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	0011      	movs	r1, r2
 8004580:	0018      	movs	r0, r3
 8004582:	f000 f90d 	bl	80047a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004586:	e0ed      	b.n	8004764 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	225c      	movs	r2, #92	; 0x5c
 800458c:	5a99      	ldrh	r1, [r3, r2]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	225e      	movs	r2, #94	; 0x5e
 8004592:	5a9b      	ldrh	r3, [r3, r2]
 8004594:	b29a      	uxth	r2, r3
 8004596:	208e      	movs	r0, #142	; 0x8e
 8004598:	183b      	adds	r3, r7, r0
 800459a:	1a8a      	subs	r2, r1, r2
 800459c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	225e      	movs	r2, #94	; 0x5e
 80045a2:	5a9b      	ldrh	r3, [r3, r2]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d100      	bne.n	80045ac <HAL_UART_IRQHandler+0x478>
 80045aa:	e0dd      	b.n	8004768 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80045ac:	183b      	adds	r3, r7, r0
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d100      	bne.n	80045b6 <HAL_UART_IRQHandler+0x482>
 80045b4:	e0d8      	b.n	8004768 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b6:	f3ef 8310 	mrs	r3, PRIMASK
 80045ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80045bc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045be:	2488      	movs	r4, #136	; 0x88
 80045c0:	193a      	adds	r2, r7, r4
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	2301      	movs	r3, #1
 80045c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f383 8810 	msr	PRIMASK, r3
}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4967      	ldr	r1, [pc, #412]	; (8004778 <HAL_UART_IRQHandler+0x644>)
 80045dc:	400a      	ands	r2, r1
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	193b      	adds	r3, r7, r4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f383 8810 	msr	PRIMASK, r3
}
 80045ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ee:	f3ef 8310 	mrs	r3, PRIMASK
 80045f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80045f4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045f6:	2484      	movs	r4, #132	; 0x84
 80045f8:	193a      	adds	r2, r7, r4
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	2301      	movs	r3, #1
 80045fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f383 8810 	msr	PRIMASK, r3
}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	495a      	ldr	r1, [pc, #360]	; (800477c <HAL_UART_IRQHandler+0x648>)
 8004614:	400a      	ands	r2, r1
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	193b      	adds	r3, r7, r4
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	f383 8810 	msr	PRIMASK, r3
}
 8004624:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	228c      	movs	r2, #140	; 0x8c
 800462a:	2120      	movs	r1, #32
 800462c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463a:	f3ef 8310 	mrs	r3, PRIMASK
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004642:	2480      	movs	r4, #128	; 0x80
 8004644:	193a      	adds	r2, r7, r4
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	2301      	movs	r3, #1
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	f383 8810 	msr	PRIMASK, r3
}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2110      	movs	r1, #16
 8004660:	438a      	bics	r2, r1
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	193b      	adds	r3, r7, r4
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	f383 8810 	msr	PRIMASK, r3
}
 8004670:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004678:	183b      	adds	r3, r7, r0
 800467a:	881a      	ldrh	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	0011      	movs	r1, r2
 8004680:	0018      	movs	r0, r3
 8004682:	f000 f88d 	bl	80047a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004686:	e06f      	b.n	8004768 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004688:	23a4      	movs	r3, #164	; 0xa4
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	035b      	lsls	r3, r3, #13
 8004692:	4013      	ands	r3, r2
 8004694:	d010      	beq.n	80046b8 <HAL_UART_IRQHandler+0x584>
 8004696:	239c      	movs	r3, #156	; 0x9c
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	2380      	movs	r3, #128	; 0x80
 800469e:	03db      	lsls	r3, r3, #15
 80046a0:	4013      	ands	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2280      	movs	r2, #128	; 0x80
 80046aa:	0352      	lsls	r2, r2, #13
 80046ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f000 ff2f 	bl	8005514 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046b6:	e05a      	b.n	800476e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80046b8:	23a4      	movs	r3, #164	; 0xa4
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2280      	movs	r2, #128	; 0x80
 80046c0:	4013      	ands	r3, r2
 80046c2:	d016      	beq.n	80046f2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80046c4:	23a0      	movs	r3, #160	; 0xa0
 80046c6:	18fb      	adds	r3, r7, r3
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2280      	movs	r2, #128	; 0x80
 80046cc:	4013      	ands	r3, r2
 80046ce:	d106      	bne.n	80046de <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80046d0:	239c      	movs	r3, #156	; 0x9c
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	041b      	lsls	r3, r3, #16
 80046da:	4013      	ands	r3, r2
 80046dc:	d009      	beq.n	80046f2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d042      	beq.n	800476c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	0010      	movs	r0, r2
 80046ee:	4798      	blx	r3
    }
    return;
 80046f0:	e03c      	b.n	800476c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046f2:	23a4      	movs	r3, #164	; 0xa4
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2240      	movs	r2, #64	; 0x40
 80046fa:	4013      	ands	r3, r2
 80046fc:	d00a      	beq.n	8004714 <HAL_UART_IRQHandler+0x5e0>
 80046fe:	23a0      	movs	r3, #160	; 0xa0
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2240      	movs	r2, #64	; 0x40
 8004706:	4013      	ands	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	0018      	movs	r0, r3
 800470e:	f000 fed5 	bl	80054bc <UART_EndTransmit_IT>
    return;
 8004712:	e02c      	b.n	800476e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004714:	23a4      	movs	r3, #164	; 0xa4
 8004716:	18fb      	adds	r3, r7, r3
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	4013      	ands	r3, r2
 8004720:	d00b      	beq.n	800473a <HAL_UART_IRQHandler+0x606>
 8004722:	23a0      	movs	r3, #160	; 0xa0
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	05db      	lsls	r3, r3, #23
 800472c:	4013      	ands	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	0018      	movs	r0, r3
 8004734:	f000 fefe 	bl	8005534 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004738:	e019      	b.n	800476e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800473a:	23a4      	movs	r3, #164	; 0xa4
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	045b      	lsls	r3, r3, #17
 8004744:	4013      	ands	r3, r2
 8004746:	d012      	beq.n	800476e <HAL_UART_IRQHandler+0x63a>
 8004748:	23a0      	movs	r3, #160	; 0xa0
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	da0d      	bge.n	800476e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	0018      	movs	r0, r3
 8004756:	f000 fee5 	bl	8005524 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800475a:	e008      	b.n	800476e <HAL_UART_IRQHandler+0x63a>
      return;
 800475c:	46c0      	nop			; (mov r8, r8)
 800475e:	e006      	b.n	800476e <HAL_UART_IRQHandler+0x63a>
    return;
 8004760:	46c0      	nop			; (mov r8, r8)
 8004762:	e004      	b.n	800476e <HAL_UART_IRQHandler+0x63a>
      return;
 8004764:	46c0      	nop			; (mov r8, r8)
 8004766:	e002      	b.n	800476e <HAL_UART_IRQHandler+0x63a>
      return;
 8004768:	46c0      	nop			; (mov r8, r8)
 800476a:	e000      	b.n	800476e <HAL_UART_IRQHandler+0x63a>
    return;
 800476c:	46c0      	nop			; (mov r8, r8)
  }
}
 800476e:	46bd      	mov	sp, r7
 8004770:	b02a      	add	sp, #168	; 0xa8
 8004772:	bdb0      	pop	{r4, r5, r7, pc}
 8004774:	fffffeff 	.word	0xfffffeff
 8004778:	fffffedf 	.word	0xfffffedf
 800477c:	effffffe 	.word	0xeffffffe

08004780 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004788:	46c0      	nop			; (mov r8, r8)
 800478a:	46bd      	mov	sp, r7
 800478c:	b002      	add	sp, #8
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	b002      	add	sp, #8
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	000a      	movs	r2, r1
 80047aa:	1cbb      	adds	r3, r7, #2
 80047ac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b002      	add	sp, #8
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b8:	b5b0      	push	{r4, r5, r7, lr}
 80047ba:	b090      	sub	sp, #64	; 0x40
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047c0:	231a      	movs	r3, #26
 80047c2:	2220      	movs	r2, #32
 80047c4:	4694      	mov	ip, r2
 80047c6:	44bc      	add	ip, r7
 80047c8:	4463      	add	r3, ip
 80047ca:	2200      	movs	r2, #0
 80047cc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	431a      	orrs	r2, r3
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4ac7      	ldr	r2, [pc, #796]	; (8004b0c <UART_SetConfig+0x354>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	0019      	movs	r1, r3
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f8:	430b      	orrs	r3, r1
 80047fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4ac3      	ldr	r2, [pc, #780]	; (8004b10 <UART_SetConfig+0x358>)
 8004804:	4013      	ands	r3, r2
 8004806:	0018      	movs	r0, r3
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	68d9      	ldr	r1, [r3, #12]
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	0003      	movs	r3, r0
 8004812:	430b      	orrs	r3, r1
 8004814:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4abc      	ldr	r2, [pc, #752]	; (8004b14 <UART_SetConfig+0x35c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800482c:	4313      	orrs	r3, r2
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	4ab8      	ldr	r2, [pc, #736]	; (8004b18 <UART_SetConfig+0x360>)
 8004838:	4013      	ands	r3, r2
 800483a:	0019      	movs	r1, r3
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004842:	430b      	orrs	r3, r1
 8004844:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	220f      	movs	r2, #15
 800484e:	4393      	bics	r3, r2
 8004850:	0018      	movs	r0, r3
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	0003      	movs	r3, r0
 800485c:	430b      	orrs	r3, r1
 800485e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4aad      	ldr	r2, [pc, #692]	; (8004b1c <UART_SetConfig+0x364>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d136      	bne.n	80048d8 <UART_SetConfig+0x120>
 800486a:	4bad      	ldr	r3, [pc, #692]	; (8004b20 <UART_SetConfig+0x368>)
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	2203      	movs	r2, #3
 8004870:	4013      	ands	r3, r2
 8004872:	2b03      	cmp	r3, #3
 8004874:	d020      	beq.n	80048b8 <UART_SetConfig+0x100>
 8004876:	d827      	bhi.n	80048c8 <UART_SetConfig+0x110>
 8004878:	2b02      	cmp	r3, #2
 800487a:	d00d      	beq.n	8004898 <UART_SetConfig+0xe0>
 800487c:	d824      	bhi.n	80048c8 <UART_SetConfig+0x110>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <UART_SetConfig+0xd0>
 8004882:	2b01      	cmp	r3, #1
 8004884:	d010      	beq.n	80048a8 <UART_SetConfig+0xf0>
 8004886:	e01f      	b.n	80048c8 <UART_SetConfig+0x110>
 8004888:	231b      	movs	r3, #27
 800488a:	2220      	movs	r2, #32
 800488c:	4694      	mov	ip, r2
 800488e:	44bc      	add	ip, r7
 8004890:	4463      	add	r3, ip
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	e07c      	b.n	8004992 <UART_SetConfig+0x1da>
 8004898:	231b      	movs	r3, #27
 800489a:	2220      	movs	r2, #32
 800489c:	4694      	mov	ip, r2
 800489e:	44bc      	add	ip, r7
 80048a0:	4463      	add	r3, ip
 80048a2:	2202      	movs	r2, #2
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	e074      	b.n	8004992 <UART_SetConfig+0x1da>
 80048a8:	231b      	movs	r3, #27
 80048aa:	2220      	movs	r2, #32
 80048ac:	4694      	mov	ip, r2
 80048ae:	44bc      	add	ip, r7
 80048b0:	4463      	add	r3, ip
 80048b2:	2204      	movs	r2, #4
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	e06c      	b.n	8004992 <UART_SetConfig+0x1da>
 80048b8:	231b      	movs	r3, #27
 80048ba:	2220      	movs	r2, #32
 80048bc:	4694      	mov	ip, r2
 80048be:	44bc      	add	ip, r7
 80048c0:	4463      	add	r3, ip
 80048c2:	2208      	movs	r2, #8
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	e064      	b.n	8004992 <UART_SetConfig+0x1da>
 80048c8:	231b      	movs	r3, #27
 80048ca:	2220      	movs	r2, #32
 80048cc:	4694      	mov	ip, r2
 80048ce:	44bc      	add	ip, r7
 80048d0:	4463      	add	r3, ip
 80048d2:	2210      	movs	r2, #16
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e05c      	b.n	8004992 <UART_SetConfig+0x1da>
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a91      	ldr	r2, [pc, #580]	; (8004b24 <UART_SetConfig+0x36c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d107      	bne.n	80048f2 <UART_SetConfig+0x13a>
 80048e2:	231b      	movs	r3, #27
 80048e4:	2220      	movs	r2, #32
 80048e6:	4694      	mov	ip, r2
 80048e8:	44bc      	add	ip, r7
 80048ea:	4463      	add	r3, ip
 80048ec:	2200      	movs	r2, #0
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	e04f      	b.n	8004992 <UART_SetConfig+0x1da>
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a87      	ldr	r2, [pc, #540]	; (8004b14 <UART_SetConfig+0x35c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d143      	bne.n	8004984 <UART_SetConfig+0x1cc>
 80048fc:	4b88      	ldr	r3, [pc, #544]	; (8004b20 <UART_SetConfig+0x368>)
 80048fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004900:	23c0      	movs	r3, #192	; 0xc0
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	4013      	ands	r3, r2
 8004906:	22c0      	movs	r2, #192	; 0xc0
 8004908:	0112      	lsls	r2, r2, #4
 800490a:	4293      	cmp	r3, r2
 800490c:	d02a      	beq.n	8004964 <UART_SetConfig+0x1ac>
 800490e:	22c0      	movs	r2, #192	; 0xc0
 8004910:	0112      	lsls	r2, r2, #4
 8004912:	4293      	cmp	r3, r2
 8004914:	d82e      	bhi.n	8004974 <UART_SetConfig+0x1bc>
 8004916:	2280      	movs	r2, #128	; 0x80
 8004918:	0112      	lsls	r2, r2, #4
 800491a:	4293      	cmp	r3, r2
 800491c:	d012      	beq.n	8004944 <UART_SetConfig+0x18c>
 800491e:	2280      	movs	r2, #128	; 0x80
 8004920:	0112      	lsls	r2, r2, #4
 8004922:	4293      	cmp	r3, r2
 8004924:	d826      	bhi.n	8004974 <UART_SetConfig+0x1bc>
 8004926:	2b00      	cmp	r3, #0
 8004928:	d004      	beq.n	8004934 <UART_SetConfig+0x17c>
 800492a:	2280      	movs	r2, #128	; 0x80
 800492c:	00d2      	lsls	r2, r2, #3
 800492e:	4293      	cmp	r3, r2
 8004930:	d010      	beq.n	8004954 <UART_SetConfig+0x19c>
 8004932:	e01f      	b.n	8004974 <UART_SetConfig+0x1bc>
 8004934:	231b      	movs	r3, #27
 8004936:	2220      	movs	r2, #32
 8004938:	4694      	mov	ip, r2
 800493a:	44bc      	add	ip, r7
 800493c:	4463      	add	r3, ip
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e026      	b.n	8004992 <UART_SetConfig+0x1da>
 8004944:	231b      	movs	r3, #27
 8004946:	2220      	movs	r2, #32
 8004948:	4694      	mov	ip, r2
 800494a:	44bc      	add	ip, r7
 800494c:	4463      	add	r3, ip
 800494e:	2202      	movs	r2, #2
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e01e      	b.n	8004992 <UART_SetConfig+0x1da>
 8004954:	231b      	movs	r3, #27
 8004956:	2220      	movs	r2, #32
 8004958:	4694      	mov	ip, r2
 800495a:	44bc      	add	ip, r7
 800495c:	4463      	add	r3, ip
 800495e:	2204      	movs	r2, #4
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	e016      	b.n	8004992 <UART_SetConfig+0x1da>
 8004964:	231b      	movs	r3, #27
 8004966:	2220      	movs	r2, #32
 8004968:	4694      	mov	ip, r2
 800496a:	44bc      	add	ip, r7
 800496c:	4463      	add	r3, ip
 800496e:	2208      	movs	r2, #8
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	e00e      	b.n	8004992 <UART_SetConfig+0x1da>
 8004974:	231b      	movs	r3, #27
 8004976:	2220      	movs	r2, #32
 8004978:	4694      	mov	ip, r2
 800497a:	44bc      	add	ip, r7
 800497c:	4463      	add	r3, ip
 800497e:	2210      	movs	r2, #16
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	e006      	b.n	8004992 <UART_SetConfig+0x1da>
 8004984:	231b      	movs	r3, #27
 8004986:	2220      	movs	r2, #32
 8004988:	4694      	mov	ip, r2
 800498a:	44bc      	add	ip, r7
 800498c:	4463      	add	r3, ip
 800498e:	2210      	movs	r2, #16
 8004990:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a5f      	ldr	r2, [pc, #380]	; (8004b14 <UART_SetConfig+0x35c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d000      	beq.n	800499e <UART_SetConfig+0x1e6>
 800499c:	e096      	b.n	8004acc <UART_SetConfig+0x314>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800499e:	231b      	movs	r3, #27
 80049a0:	2220      	movs	r2, #32
 80049a2:	4694      	mov	ip, r2
 80049a4:	44bc      	add	ip, r7
 80049a6:	4463      	add	r3, ip
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d015      	beq.n	80049da <UART_SetConfig+0x222>
 80049ae:	dc18      	bgt.n	80049e2 <UART_SetConfig+0x22a>
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d00d      	beq.n	80049d0 <UART_SetConfig+0x218>
 80049b4:	dc15      	bgt.n	80049e2 <UART_SetConfig+0x22a>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <UART_SetConfig+0x208>
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d005      	beq.n	80049ca <UART_SetConfig+0x212>
 80049be:	e010      	b.n	80049e2 <UART_SetConfig+0x22a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c0:	f7fe fce0 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 80049c4:	0003      	movs	r3, r0
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049c8:	e015      	b.n	80049f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ca:	4b57      	ldr	r3, [pc, #348]	; (8004b28 <UART_SetConfig+0x370>)
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049ce:	e012      	b.n	80049f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d0:	f7fe fc4c 	bl	800326c <HAL_RCC_GetSysClockFreq>
 80049d4:	0003      	movs	r3, r0
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049d8:	e00d      	b.n	80049f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049e0:	e009      	b.n	80049f6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80049e6:	231a      	movs	r3, #26
 80049e8:	2220      	movs	r2, #32
 80049ea:	4694      	mov	ip, r2
 80049ec:	44bc      	add	ip, r7
 80049ee:	4463      	add	r3, ip
 80049f0:	2201      	movs	r2, #1
 80049f2:	701a      	strb	r2, [r3, #0]
        break;
 80049f4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d100      	bne.n	80049fe <UART_SetConfig+0x246>
 80049fc:	e14e      	b.n	8004c9c <UART_SetConfig+0x4e4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a02:	4b4a      	ldr	r3, [pc, #296]	; (8004b2c <UART_SetConfig+0x374>)
 8004a04:	0052      	lsls	r2, r2, #1
 8004a06:	5ad3      	ldrh	r3, [r2, r3]
 8004a08:	0019      	movs	r1, r3
 8004a0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a0c:	f7fb fb7a 	bl	8000104 <__udivsi3>
 8004a10:	0003      	movs	r3, r0
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	0013      	movs	r3, r2
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	189b      	adds	r3, r3, r2
 8004a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d305      	bcc.n	8004a30 <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d907      	bls.n	8004a40 <UART_SetConfig+0x288>
      {
        ret = HAL_ERROR;
 8004a30:	231a      	movs	r3, #26
 8004a32:	2220      	movs	r2, #32
 8004a34:	4694      	mov	ip, r2
 8004a36:	44bc      	add	ip, r7
 8004a38:	4463      	add	r3, ip
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e12d      	b.n	8004c9c <UART_SetConfig+0x4e4>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	2300      	movs	r3, #0
 8004a46:	61fb      	str	r3, [r7, #28]
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a4c:	4b37      	ldr	r3, [pc, #220]	; (8004b2c <UART_SetConfig+0x374>)
 8004a4e:	0052      	lsls	r2, r2, #1
 8004a50:	5ad3      	ldrh	r3, [r2, r3]
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	69b8      	ldr	r0, [r7, #24]
 8004a5e:	69f9      	ldr	r1, [r7, #28]
 8004a60:	f7fb fcc6 	bl	80003f0 <__aeabi_uldivmod>
 8004a64:	0002      	movs	r2, r0
 8004a66:	000b      	movs	r3, r1
 8004a68:	0e11      	lsrs	r1, r2, #24
 8004a6a:	021d      	lsls	r5, r3, #8
 8004a6c:	430d      	orrs	r5, r1
 8004a6e:	0214      	lsls	r4, r2, #8
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68b8      	ldr	r0, [r7, #8]
 8004a7e:	68f9      	ldr	r1, [r7, #12]
 8004a80:	1900      	adds	r0, r0, r4
 8004a82:	4169      	adcs	r1, r5
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	607b      	str	r3, [r7, #4]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f7fb fcad 	bl	80003f0 <__aeabi_uldivmod>
 8004a96:	0002      	movs	r2, r0
 8004a98:	000b      	movs	r3, r1
 8004a9a:	0013      	movs	r3, r2
 8004a9c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa0:	23c0      	movs	r3, #192	; 0xc0
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d309      	bcc.n	8004abc <UART_SetConfig+0x304>
 8004aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aaa:	2380      	movs	r3, #128	; 0x80
 8004aac:	035b      	lsls	r3, r3, #13
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d204      	bcs.n	8004abc <UART_SetConfig+0x304>
        {
          huart->Instance->BRR = usartdiv;
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab8:	60da      	str	r2, [r3, #12]
 8004aba:	e0ef      	b.n	8004c9c <UART_SetConfig+0x4e4>
        }
        else
        {
          ret = HAL_ERROR;
 8004abc:	231a      	movs	r3, #26
 8004abe:	2220      	movs	r2, #32
 8004ac0:	4694      	mov	ip, r2
 8004ac2:	44bc      	add	ip, r7
 8004ac4:	4463      	add	r3, ip
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	e0e7      	b.n	8004c9c <UART_SetConfig+0x4e4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	021b      	lsls	r3, r3, #8
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d000      	beq.n	8004ada <UART_SetConfig+0x322>
 8004ad8:	e085      	b.n	8004be6 <UART_SetConfig+0x42e>
  {
    switch (clocksource)
 8004ada:	231b      	movs	r3, #27
 8004adc:	2220      	movs	r2, #32
 8004ade:	4694      	mov	ip, r2
 8004ae0:	44bc      	add	ip, r7
 8004ae2:	4463      	add	r3, ip
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d027      	beq.n	8004b3a <UART_SetConfig+0x382>
 8004aea:	dc2a      	bgt.n	8004b42 <UART_SetConfig+0x38a>
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d01f      	beq.n	8004b30 <UART_SetConfig+0x378>
 8004af0:	dc27      	bgt.n	8004b42 <UART_SetConfig+0x38a>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <UART_SetConfig+0x344>
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d005      	beq.n	8004b06 <UART_SetConfig+0x34e>
 8004afa:	e022      	b.n	8004b42 <UART_SetConfig+0x38a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004afc:	f7fe fc42 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 8004b00:	0003      	movs	r3, r0
 8004b02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b04:	e027      	b.n	8004b56 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b06:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <UART_SetConfig+0x370>)
 8004b08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b0a:	e024      	b.n	8004b56 <UART_SetConfig+0x39e>
 8004b0c:	cfff69f3 	.word	0xcfff69f3
 8004b10:	ffffcfff 	.word	0xffffcfff
 8004b14:	40008000 	.word	0x40008000
 8004b18:	11fff4ff 	.word	0x11fff4ff
 8004b1c:	40013800 	.word	0x40013800
 8004b20:	40021000 	.word	0x40021000
 8004b24:	40004400 	.word	0x40004400
 8004b28:	00f42400 	.word	0x00f42400
 8004b2c:	08005848 	.word	0x08005848
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b30:	f7fe fb9c 	bl	800326c <HAL_RCC_GetSysClockFreq>
 8004b34:	0003      	movs	r3, r0
 8004b36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b38:	e00d      	b.n	8004b56 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3a:	2380      	movs	r3, #128	; 0x80
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b40:	e009      	b.n	8004b56 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004b46:	231a      	movs	r3, #26
 8004b48:	2220      	movs	r2, #32
 8004b4a:	4694      	mov	ip, r2
 8004b4c:	44bc      	add	ip, r7
 8004b4e:	4463      	add	r3, ip
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]
        break;
 8004b54:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d100      	bne.n	8004b5e <UART_SetConfig+0x3a6>
 8004b5c:	e09e      	b.n	8004c9c <UART_SetConfig+0x4e4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b62:	4b5a      	ldr	r3, [pc, #360]	; (8004ccc <UART_SetConfig+0x514>)
 8004b64:	0052      	lsls	r2, r2, #1
 8004b66:	5ad3      	ldrh	r3, [r2, r3]
 8004b68:	0019      	movs	r1, r3
 8004b6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004b6c:	f7fb faca 	bl	8000104 <__udivsi3>
 8004b70:	0003      	movs	r3, r0
 8004b72:	005a      	lsls	r2, r3, #1
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	18d2      	adds	r2, r2, r3
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	0019      	movs	r1, r3
 8004b82:	0010      	movs	r0, r2
 8004b84:	f7fb fabe 	bl	8000104 <__udivsi3>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	2b0f      	cmp	r3, #15
 8004b90:	d921      	bls.n	8004bd6 <UART_SetConfig+0x41e>
 8004b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b94:	2380      	movs	r3, #128	; 0x80
 8004b96:	025b      	lsls	r3, r3, #9
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d21c      	bcs.n	8004bd6 <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	200e      	movs	r0, #14
 8004ba2:	2420      	movs	r4, #32
 8004ba4:	193b      	adds	r3, r7, r4
 8004ba6:	181b      	adds	r3, r3, r0
 8004ba8:	210f      	movs	r1, #15
 8004baa:	438a      	bics	r2, r1
 8004bac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2207      	movs	r2, #7
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	b299      	uxth	r1, r3
 8004bba:	193b      	adds	r3, r7, r4
 8004bbc:	181b      	adds	r3, r3, r0
 8004bbe:	193a      	adds	r2, r7, r4
 8004bc0:	1812      	adds	r2, r2, r0
 8004bc2:	8812      	ldrh	r2, [r2, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	193a      	adds	r2, r7, r4
 8004bce:	1812      	adds	r2, r2, r0
 8004bd0:	8812      	ldrh	r2, [r2, #0]
 8004bd2:	60da      	str	r2, [r3, #12]
 8004bd4:	e062      	b.n	8004c9c <UART_SetConfig+0x4e4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bd6:	231a      	movs	r3, #26
 8004bd8:	2220      	movs	r2, #32
 8004bda:	4694      	mov	ip, r2
 8004bdc:	44bc      	add	ip, r7
 8004bde:	4463      	add	r3, ip
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	e05a      	b.n	8004c9c <UART_SetConfig+0x4e4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004be6:	231b      	movs	r3, #27
 8004be8:	2220      	movs	r2, #32
 8004bea:	4694      	mov	ip, r2
 8004bec:	44bc      	add	ip, r7
 8004bee:	4463      	add	r3, ip
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d015      	beq.n	8004c22 <UART_SetConfig+0x46a>
 8004bf6:	dc18      	bgt.n	8004c2a <UART_SetConfig+0x472>
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d00d      	beq.n	8004c18 <UART_SetConfig+0x460>
 8004bfc:	dc15      	bgt.n	8004c2a <UART_SetConfig+0x472>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <UART_SetConfig+0x450>
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d005      	beq.n	8004c12 <UART_SetConfig+0x45a>
 8004c06:	e010      	b.n	8004c2a <UART_SetConfig+0x472>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c08:	f7fe fbbc 	bl	8003384 <HAL_RCC_GetPCLK1Freq>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c10:	e015      	b.n	8004c3e <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c12:	4b2f      	ldr	r3, [pc, #188]	; (8004cd0 <UART_SetConfig+0x518>)
 8004c14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c16:	e012      	b.n	8004c3e <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c18:	f7fe fb28 	bl	800326c <HAL_RCC_GetSysClockFreq>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c20:	e00d      	b.n	8004c3e <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c28:	e009      	b.n	8004c3e <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004c2e:	231a      	movs	r3, #26
 8004c30:	2220      	movs	r2, #32
 8004c32:	4694      	mov	ip, r2
 8004c34:	44bc      	add	ip, r7
 8004c36:	4463      	add	r3, ip
 8004c38:	2201      	movs	r2, #1
 8004c3a:	701a      	strb	r2, [r3, #0]
        break;
 8004c3c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d02b      	beq.n	8004c9c <UART_SetConfig+0x4e4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c48:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <UART_SetConfig+0x514>)
 8004c4a:	0052      	lsls	r2, r2, #1
 8004c4c:	5ad3      	ldrh	r3, [r2, r3]
 8004c4e:	0019      	movs	r1, r3
 8004c50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c52:	f7fb fa57 	bl	8000104 <__udivsi3>
 8004c56:	0003      	movs	r3, r0
 8004c58:	001a      	movs	r2, r3
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	18d2      	adds	r2, r2, r3
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	0019      	movs	r1, r3
 8004c68:	0010      	movs	r0, r2
 8004c6a:	f7fb fa4b 	bl	8000104 <__udivsi3>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	2b0f      	cmp	r3, #15
 8004c76:	d90a      	bls.n	8004c8e <UART_SetConfig+0x4d6>
 8004c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7a:	2380      	movs	r3, #128	; 0x80
 8004c7c:	025b      	lsls	r3, r3, #9
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d205      	bcs.n	8004c8e <UART_SetConfig+0x4d6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60da      	str	r2, [r3, #12]
 8004c8c:	e006      	b.n	8004c9c <UART_SetConfig+0x4e4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c8e:	231a      	movs	r3, #26
 8004c90:	2220      	movs	r2, #32
 8004c92:	4694      	mov	ip, r2
 8004c94:	44bc      	add	ip, r7
 8004c96:	4463      	add	r3, ip
 8004c98:	2201      	movs	r2, #1
 8004c9a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	226a      	movs	r2, #106	; 0x6a
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	2268      	movs	r2, #104	; 0x68
 8004ca8:	2101      	movs	r1, #1
 8004caa:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	2200      	movs	r2, #0
 8004cb0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004cb8:	231a      	movs	r3, #26
 8004cba:	2220      	movs	r2, #32
 8004cbc:	4694      	mov	ip, r2
 8004cbe:	44bc      	add	ip, r7
 8004cc0:	4463      	add	r3, ip
 8004cc2:	781b      	ldrb	r3, [r3, #0]
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b010      	add	sp, #64	; 0x40
 8004cca:	bdb0      	pop	{r4, r5, r7, pc}
 8004ccc:	08005848 	.word	0x08005848
 8004cd0:	00f42400 	.word	0x00f42400

08004cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d00b      	beq.n	8004cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a4a      	ldr	r2, [pc, #296]	; (8004e18 <UART_AdvFeatureConfig+0x144>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	2201      	movs	r2, #1
 8004d04:	4013      	ands	r3, r2
 8004d06:	d00b      	beq.n	8004d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4a43      	ldr	r2, [pc, #268]	; (8004e1c <UART_AdvFeatureConfig+0x148>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	0019      	movs	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	2202      	movs	r2, #2
 8004d26:	4013      	ands	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4a3b      	ldr	r2, [pc, #236]	; (8004e20 <UART_AdvFeatureConfig+0x14c>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	0019      	movs	r1, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	2204      	movs	r2, #4
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4a34      	ldr	r2, [pc, #208]	; (8004e24 <UART_AdvFeatureConfig+0x150>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	0019      	movs	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	2210      	movs	r2, #16
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d00b      	beq.n	8004d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4a2c      	ldr	r2, [pc, #176]	; (8004e28 <UART_AdvFeatureConfig+0x154>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	4a25      	ldr	r2, [pc, #148]	; (8004e2c <UART_AdvFeatureConfig+0x158>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	2240      	movs	r2, #64	; 0x40
 8004dae:	4013      	ands	r3, r2
 8004db0:	d01d      	beq.n	8004dee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <UART_AdvFeatureConfig+0x15c>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	035b      	lsls	r3, r3, #13
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d10b      	bne.n	8004dee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4a15      	ldr	r2, [pc, #84]	; (8004e34 <UART_AdvFeatureConfig+0x160>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	0019      	movs	r1, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	2280      	movs	r2, #128	; 0x80
 8004df4:	4013      	ands	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	4a0e      	ldr	r2, [pc, #56]	; (8004e38 <UART_AdvFeatureConfig+0x164>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	0019      	movs	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }
}
 8004e10:	46c0      	nop			; (mov r8, r8)
 8004e12:	46bd      	mov	sp, r7
 8004e14:	b002      	add	sp, #8
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	ffff7fff 	.word	0xffff7fff
 8004e1c:	fffdffff 	.word	0xfffdffff
 8004e20:	fffeffff 	.word	0xfffeffff
 8004e24:	fffbffff 	.word	0xfffbffff
 8004e28:	ffffefff 	.word	0xffffefff
 8004e2c:	ffffdfff 	.word	0xffffdfff
 8004e30:	ffefffff 	.word	0xffefffff
 8004e34:	ff9fffff 	.word	0xff9fffff
 8004e38:	fff7ffff 	.word	0xfff7ffff

08004e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b092      	sub	sp, #72	; 0x48
 8004e40:	af02      	add	r7, sp, #8
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2290      	movs	r2, #144	; 0x90
 8004e48:	2100      	movs	r1, #0
 8004e4a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e4c:	f7fc f99c 	bl	8001188 <HAL_GetTick>
 8004e50:	0003      	movs	r3, r0
 8004e52:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d12d      	bne.n	8004ebe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e64:	2280      	movs	r2, #128	; 0x80
 8004e66:	0391      	lsls	r1, r2, #14
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	4a47      	ldr	r2, [pc, #284]	; (8004f88 <UART_CheckIdleState+0x14c>)
 8004e6c:	9200      	str	r2, [sp, #0]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f000 f88e 	bl	8004f90 <UART_WaitOnFlagUntilTimeout>
 8004e74:	1e03      	subs	r3, r0, #0
 8004e76:	d022      	beq.n	8004ebe <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e78:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e80:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e82:	2301      	movs	r3, #1
 8004e84:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	f383 8810 	msr	PRIMASK, r3
}
 8004e8c:	46c0      	nop			; (mov r8, r8)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2180      	movs	r1, #128	; 0x80
 8004e9a:	438a      	bics	r2, r1
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea4:	f383 8810 	msr	PRIMASK, r3
}
 8004ea8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2288      	movs	r2, #136	; 0x88
 8004eae:	2120      	movs	r1, #32
 8004eb0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2284      	movs	r2, #132	; 0x84
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e060      	b.n	8004f80 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2204      	movs	r2, #4
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d146      	bne.n	8004f5a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ece:	2280      	movs	r2, #128	; 0x80
 8004ed0:	03d1      	lsls	r1, r2, #15
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	4a2c      	ldr	r2, [pc, #176]	; (8004f88 <UART_CheckIdleState+0x14c>)
 8004ed6:	9200      	str	r2, [sp, #0]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f000 f859 	bl	8004f90 <UART_WaitOnFlagUntilTimeout>
 8004ede:	1e03      	subs	r3, r0, #0
 8004ee0:	d03b      	beq.n	8004f5a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004eea:	637b      	str	r3, [r7, #52]	; 0x34
 8004eec:	2301      	movs	r3, #1
 8004eee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f383 8810 	msr	PRIMASK, r3
}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4922      	ldr	r1, [pc, #136]	; (8004f8c <UART_CheckIdleState+0x150>)
 8004f04:	400a      	ands	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f383 8810 	msr	PRIMASK, r3
}
 8004f12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f14:	f3ef 8310 	mrs	r3, PRIMASK
 8004f18:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f1a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f1e:	2301      	movs	r3, #1
 8004f20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f383 8810 	msr	PRIMASK, r3
}
 8004f28:	46c0      	nop			; (mov r8, r8)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2101      	movs	r1, #1
 8004f36:	438a      	bics	r2, r1
 8004f38:	609a      	str	r2, [r3, #8]
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	f383 8810 	msr	PRIMASK, r3
}
 8004f44:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	228c      	movs	r2, #140	; 0x8c
 8004f4a:	2120      	movs	r1, #32
 8004f4c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2284      	movs	r2, #132	; 0x84
 8004f52:	2100      	movs	r1, #0
 8004f54:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e012      	b.n	8004f80 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2288      	movs	r2, #136	; 0x88
 8004f5e:	2120      	movs	r1, #32
 8004f60:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	228c      	movs	r2, #140	; 0x8c
 8004f66:	2120      	movs	r1, #32
 8004f68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2284      	movs	r2, #132	; 0x84
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b010      	add	sp, #64	; 0x40
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	01ffffff 	.word	0x01ffffff
 8004f8c:	fffffedf 	.word	0xfffffedf

08004f90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	1dfb      	adds	r3, r7, #7
 8004f9e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa0:	e051      	b.n	8005046 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	d04e      	beq.n	8005046 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa8:	f7fc f8ee 	bl	8001188 <HAL_GetTick>
 8004fac:	0002      	movs	r2, r0
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d302      	bcc.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x2e>
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e051      	b.n	8005066 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d03b      	beq.n	8005046 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b80      	cmp	r3, #128	; 0x80
 8004fd2:	d038      	beq.n	8005046 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b40      	cmp	r3, #64	; 0x40
 8004fd8:	d035      	beq.n	8005046 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	2208      	movs	r2, #8
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d111      	bne.n	800500c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2208      	movs	r2, #8
 8004fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	f000 f83c 	bl	8005070 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2290      	movs	r2, #144	; 0x90
 8004ffc:	2108      	movs	r1, #8
 8004ffe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2284      	movs	r2, #132	; 0x84
 8005004:	2100      	movs	r1, #0
 8005006:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e02c      	b.n	8005066 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69da      	ldr	r2, [r3, #28]
 8005012:	2380      	movs	r3, #128	; 0x80
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	401a      	ands	r2, r3
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	429a      	cmp	r2, r3
 800501e:	d112      	bne.n	8005046 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2280      	movs	r2, #128	; 0x80
 8005026:	0112      	lsls	r2, r2, #4
 8005028:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	0018      	movs	r0, r3
 800502e:	f000 f81f 	bl	8005070 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2290      	movs	r2, #144	; 0x90
 8005036:	2120      	movs	r1, #32
 8005038:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2284      	movs	r2, #132	; 0x84
 800503e:	2100      	movs	r1, #0
 8005040:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e00f      	b.n	8005066 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	4013      	ands	r3, r2
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	425a      	negs	r2, r3
 8005056:	4153      	adcs	r3, r2
 8005058:	b2db      	uxtb	r3, r3
 800505a:	001a      	movs	r2, r3
 800505c:	1dfb      	adds	r3, r7, #7
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d09e      	beq.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	0018      	movs	r0, r3
 8005068:	46bd      	mov	sp, r7
 800506a:	b004      	add	sp, #16
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08e      	sub	sp, #56	; 0x38
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005078:	f3ef 8310 	mrs	r3, PRIMASK
 800507c:	617b      	str	r3, [r7, #20]
  return(result);
 800507e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005080:	637b      	str	r3, [r7, #52]	; 0x34
 8005082:	2301      	movs	r3, #1
 8005084:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f383 8810 	msr	PRIMASK, r3
}
 800508c:	46c0      	nop			; (mov r8, r8)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4926      	ldr	r1, [pc, #152]	; (8005134 <UART_EndRxTransfer+0xc4>)
 800509a:	400a      	ands	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	f383 8810 	msr	PRIMASK, r3
}
 80050a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050aa:	f3ef 8310 	mrs	r3, PRIMASK
 80050ae:	623b      	str	r3, [r7, #32]
  return(result);
 80050b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050b2:	633b      	str	r3, [r7, #48]	; 0x30
 80050b4:	2301      	movs	r3, #1
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	f383 8810 	msr	PRIMASK, r3
}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	491b      	ldr	r1, [pc, #108]	; (8005138 <UART_EndRxTransfer+0xc8>)
 80050cc:	400a      	ands	r2, r1
 80050ce:	609a      	str	r2, [r3, #8]
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	f383 8810 	msr	PRIMASK, r3
}
 80050da:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d118      	bne.n	8005116 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e4:	f3ef 8310 	mrs	r3, PRIMASK
 80050e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80050ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ee:	2301      	movs	r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f383 8810 	msr	PRIMASK, r3
}
 80050f8:	46c0      	nop			; (mov r8, r8)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2110      	movs	r1, #16
 8005106:	438a      	bics	r2, r1
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f383 8810 	msr	PRIMASK, r3
}
 8005114:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	228c      	movs	r2, #140	; 0x8c
 800511a:	2120      	movs	r1, #32
 800511c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	675a      	str	r2, [r3, #116]	; 0x74
}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	46bd      	mov	sp, r7
 800512e:	b00e      	add	sp, #56	; 0x38
 8005130:	bd80      	pop	{r7, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	fffffedf 	.word	0xfffffedf
 8005138:	effffffe 	.word	0xeffffffe

0800513c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	225e      	movs	r2, #94	; 0x5e
 800514e:	2100      	movs	r1, #0
 8005150:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2256      	movs	r2, #86	; 0x56
 8005156:	2100      	movs	r1, #0
 8005158:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	0018      	movs	r0, r3
 800515e:	f7ff fb17 	bl	8004790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	46bd      	mov	sp, r7
 8005166:	b004      	add	sp, #16
 8005168:	bd80      	pop	{r7, pc}

0800516a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b08a      	sub	sp, #40	; 0x28
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2288      	movs	r2, #136	; 0x88
 8005176:	589b      	ldr	r3, [r3, r2]
 8005178:	2b21      	cmp	r3, #33	; 0x21
 800517a:	d14c      	bne.n	8005216 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2256      	movs	r2, #86	; 0x56
 8005180:	5a9b      	ldrh	r3, [r3, r2]
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d132      	bne.n	80051ee <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005188:	f3ef 8310 	mrs	r3, PRIMASK
 800518c:	60bb      	str	r3, [r7, #8]
  return(result);
 800518e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
 8005192:	2301      	movs	r3, #1
 8005194:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f383 8810 	msr	PRIMASK, r3
}
 800519c:	46c0      	nop			; (mov r8, r8)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	438a      	bics	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f383 8810 	msr	PRIMASK, r3
}
 80051b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ba:	f3ef 8310 	mrs	r3, PRIMASK
 80051be:	617b      	str	r3, [r7, #20]
  return(result);
 80051c0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051c2:	623b      	str	r3, [r7, #32]
 80051c4:	2301      	movs	r3, #1
 80051c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	f383 8810 	msr	PRIMASK, r3
}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2140      	movs	r1, #64	; 0x40
 80051dc:	430a      	orrs	r2, r1
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f383 8810 	msr	PRIMASK, r3
}
 80051ea:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80051ec:	e013      	b.n	8005216 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f2:	781a      	ldrb	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2256      	movs	r2, #86	; 0x56
 8005208:	5a9b      	ldrh	r3, [r3, r2]
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b299      	uxth	r1, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2256      	movs	r2, #86	; 0x56
 8005214:	5299      	strh	r1, [r3, r2]
}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	46bd      	mov	sp, r7
 800521a:	b00a      	add	sp, #40	; 0x28
 800521c:	bd80      	pop	{r7, pc}

0800521e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b08c      	sub	sp, #48	; 0x30
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2288      	movs	r2, #136	; 0x88
 800522a:	589b      	ldr	r3, [r3, r2]
 800522c:	2b21      	cmp	r3, #33	; 0x21
 800522e:	d151      	bne.n	80052d4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2256      	movs	r2, #86	; 0x56
 8005234:	5a9b      	ldrh	r3, [r3, r2]
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d132      	bne.n	80052a2 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523c:	f3ef 8310 	mrs	r3, PRIMASK
 8005240:	60fb      	str	r3, [r7, #12]
  return(result);
 8005242:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
 8005246:	2301      	movs	r3, #1
 8005248:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f383 8810 	msr	PRIMASK, r3
}
 8005250:	46c0      	nop			; (mov r8, r8)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2180      	movs	r1, #128	; 0x80
 800525e:	438a      	bics	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f383 8810 	msr	PRIMASK, r3
}
 800526c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526e:	f3ef 8310 	mrs	r3, PRIMASK
 8005272:	61bb      	str	r3, [r7, #24]
  return(result);
 8005274:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
 8005278:	2301      	movs	r3, #1
 800527a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f383 8810 	msr	PRIMASK, r3
}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2140      	movs	r1, #64	; 0x40
 8005290:	430a      	orrs	r2, r1
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	f383 8810 	msr	PRIMASK, r3
}
 800529e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80052a0:	e018      	b.n	80052d4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	001a      	movs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	05d2      	lsls	r2, r2, #23
 80052b4:	0dd2      	lsrs	r2, r2, #23
 80052b6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052bc:	1c9a      	adds	r2, r3, #2
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2256      	movs	r2, #86	; 0x56
 80052c6:	5a9b      	ldrh	r3, [r3, r2]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b299      	uxth	r1, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2256      	movs	r2, #86	; 0x56
 80052d2:	5299      	strh	r1, [r3, r2]
}
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	46bd      	mov	sp, r7
 80052d8:	b00c      	add	sp, #48	; 0x30
 80052da:	bd80      	pop	{r7, pc}

080052dc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08c      	sub	sp, #48	; 0x30
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2288      	movs	r2, #136	; 0x88
 80052e8:	589b      	ldr	r3, [r3, r2]
 80052ea:	2b21      	cmp	r3, #33	; 0x21
 80052ec:	d165      	bne.n	80053ba <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80052ee:	232e      	movs	r3, #46	; 0x2e
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	216a      	movs	r1, #106	; 0x6a
 80052f6:	5a52      	ldrh	r2, [r2, r1]
 80052f8:	801a      	strh	r2, [r3, #0]
 80052fa:	e059      	b.n	80053b0 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2256      	movs	r2, #86	; 0x56
 8005300:	5a9b      	ldrh	r3, [r3, r2]
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d133      	bne.n	8005370 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005308:	f3ef 8310 	mrs	r3, PRIMASK
 800530c:	60fb      	str	r3, [r7, #12]
  return(result);
 800530e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
 8005312:	2301      	movs	r3, #1
 8005314:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f383 8810 	msr	PRIMASK, r3
}
 800531c:	46c0      	nop			; (mov r8, r8)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4926      	ldr	r1, [pc, #152]	; (80053c4 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800532a:	400a      	ands	r2, r1
 800532c:	609a      	str	r2, [r3, #8]
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f383 8810 	msr	PRIMASK, r3
}
 8005338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800533a:	f3ef 8310 	mrs	r3, PRIMASK
 800533e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005340:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
 8005344:	2301      	movs	r3, #1
 8005346:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f383 8810 	msr	PRIMASK, r3
}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2140      	movs	r1, #64	; 0x40
 800535c:	430a      	orrs	r2, r1
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	f383 8810 	msr	PRIMASK, r3
}
 800536a:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800536c:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800536e:	e024      	b.n	80053ba <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	2280      	movs	r2, #128	; 0x80
 8005378:	4013      	ands	r3, r2
 800537a:	d013      	beq.n	80053a4 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005380:	781a      	ldrb	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2256      	movs	r2, #86	; 0x56
 8005396:	5a9b      	ldrh	r3, [r3, r2]
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b299      	uxth	r1, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2256      	movs	r2, #86	; 0x56
 80053a2:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80053a4:	212e      	movs	r1, #46	; 0x2e
 80053a6:	187b      	adds	r3, r7, r1
 80053a8:	881a      	ldrh	r2, [r3, #0]
 80053aa:	187b      	adds	r3, r7, r1
 80053ac:	3a01      	subs	r2, #1
 80053ae:	801a      	strh	r2, [r3, #0]
 80053b0:	232e      	movs	r3, #46	; 0x2e
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1a0      	bne.n	80052fc <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	46bd      	mov	sp, r7
 80053be:	b00c      	add	sp, #48	; 0x30
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	ff7fffff 	.word	0xff7fffff

080053c8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08c      	sub	sp, #48	; 0x30
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2288      	movs	r2, #136	; 0x88
 80053d4:	589b      	ldr	r3, [r3, r2]
 80053d6:	2b21      	cmp	r3, #33	; 0x21
 80053d8:	d16a      	bne.n	80054b0 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80053da:	232e      	movs	r3, #46	; 0x2e
 80053dc:	18fb      	adds	r3, r7, r3
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	216a      	movs	r1, #106	; 0x6a
 80053e2:	5a52      	ldrh	r2, [r2, r1]
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	e05e      	b.n	80054a6 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2256      	movs	r2, #86	; 0x56
 80053ec:	5a9b      	ldrh	r3, [r3, r2]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d133      	bne.n	800545c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f4:	f3ef 8310 	mrs	r3, PRIMASK
 80053f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80053fa:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
 80053fe:	2301      	movs	r3, #1
 8005400:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f383 8810 	msr	PRIMASK, r3
}
 8005408:	46c0      	nop			; (mov r8, r8)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4928      	ldr	r1, [pc, #160]	; (80054b8 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8005416:	400a      	ands	r2, r1
 8005418:	609a      	str	r2, [r3, #8]
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f383 8810 	msr	PRIMASK, r3
}
 8005424:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005426:	f3ef 8310 	mrs	r3, PRIMASK
 800542a:	617b      	str	r3, [r7, #20]
  return(result);
 800542c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800542e:	623b      	str	r3, [r7, #32]
 8005430:	2301      	movs	r3, #1
 8005432:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	f383 8810 	msr	PRIMASK, r3
}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2140      	movs	r1, #64	; 0x40
 8005448:	430a      	orrs	r2, r1
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f383 8810 	msr	PRIMASK, r3
}
 8005456:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8005458:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800545a:	e029      	b.n	80054b0 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	2280      	movs	r2, #128	; 0x80
 8005464:	4013      	ands	r3, r2
 8005466:	d018      	beq.n	800549a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	001a      	movs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	05d2      	lsls	r2, r2, #23
 800547a:	0dd2      	lsrs	r2, r2, #23
 800547c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005482:	1c9a      	adds	r2, r3, #2
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2256      	movs	r2, #86	; 0x56
 800548c:	5a9b      	ldrh	r3, [r3, r2]
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b299      	uxth	r1, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2256      	movs	r2, #86	; 0x56
 8005498:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800549a:	212e      	movs	r1, #46	; 0x2e
 800549c:	187b      	adds	r3, r7, r1
 800549e:	881a      	ldrh	r2, [r3, #0]
 80054a0:	187b      	adds	r3, r7, r1
 80054a2:	3a01      	subs	r2, #1
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	232e      	movs	r3, #46	; 0x2e
 80054a8:	18fb      	adds	r3, r7, r3
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d19b      	bne.n	80053e8 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80054b0:	46c0      	nop			; (mov r8, r8)
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b00c      	add	sp, #48	; 0x30
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	ff7fffff 	.word	0xff7fffff

080054bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054c4:	f3ef 8310 	mrs	r3, PRIMASK
 80054c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80054ca:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	2301      	movs	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f383 8810 	msr	PRIMASK, r3
}
 80054d8:	46c0      	nop			; (mov r8, r8)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2140      	movs	r1, #64	; 0x40
 80054e6:	438a      	bics	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f383 8810 	msr	PRIMASK, r3
}
 80054f4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2288      	movs	r2, #136	; 0x88
 80054fa:	2120      	movs	r1, #32
 80054fc:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	0018      	movs	r0, r3
 8005508:	f7ff f93a 	bl	8004780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800550c:	46c0      	nop			; (mov r8, r8)
 800550e:	46bd      	mov	sp, r7
 8005510:	b006      	add	sp, #24
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800551c:	46c0      	nop			; (mov r8, r8)
 800551e:	46bd      	mov	sp, r7
 8005520:	b002      	add	sp, #8
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800552c:	46c0      	nop			; (mov r8, r8)
 800552e:	46bd      	mov	sp, r7
 8005530:	b002      	add	sp, #8
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800553c:	46c0      	nop			; (mov r8, r8)
 800553e:	46bd      	mov	sp, r7
 8005540:	b002      	add	sp, #8
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2284      	movs	r2, #132	; 0x84
 8005550:	5c9b      	ldrb	r3, [r3, r2]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_UARTEx_DisableFifoMode+0x16>
 8005556:	2302      	movs	r3, #2
 8005558:	e027      	b.n	80055aa <HAL_UARTEx_DisableFifoMode+0x66>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2284      	movs	r2, #132	; 0x84
 800555e:	2101      	movs	r1, #1
 8005560:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2288      	movs	r2, #136	; 0x88
 8005566:	2124      	movs	r1, #36	; 0x24
 8005568:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2101      	movs	r1, #1
 800557e:	438a      	bics	r2, r1
 8005580:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a0b      	ldr	r2, [pc, #44]	; (80055b4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005586:	4013      	ands	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2288      	movs	r2, #136	; 0x88
 800559c:	2120      	movs	r1, #32
 800559e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2284      	movs	r2, #132	; 0x84
 80055a4:	2100      	movs	r1, #0
 80055a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	0018      	movs	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b004      	add	sp, #16
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	dfffffff 	.word	0xdfffffff

080055b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2284      	movs	r2, #132	; 0x84
 80055c6:	5c9b      	ldrb	r3, [r3, r2]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e02e      	b.n	800562e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2284      	movs	r2, #132	; 0x84
 80055d4:	2101      	movs	r1, #1
 80055d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2288      	movs	r2, #136	; 0x88
 80055dc:	2124      	movs	r1, #36	; 0x24
 80055de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2101      	movs	r1, #1
 80055f4:	438a      	bics	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	08d9      	lsrs	r1, r3, #3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	0018      	movs	r0, r3
 8005610:	f000 f854 	bl	80056bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2288      	movs	r2, #136	; 0x88
 8005620:	2120      	movs	r1, #32
 8005622:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2284      	movs	r2, #132	; 0x84
 8005628:	2100      	movs	r1, #0
 800562a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	0018      	movs	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	b004      	add	sp, #16
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2284      	movs	r2, #132	; 0x84
 8005646:	5c9b      	ldrb	r3, [r3, r2]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800564c:	2302      	movs	r3, #2
 800564e:	e02f      	b.n	80056b0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2284      	movs	r2, #132	; 0x84
 8005654:	2101      	movs	r1, #1
 8005656:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2288      	movs	r2, #136	; 0x88
 800565c:	2124      	movs	r1, #36	; 0x24
 800565e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2101      	movs	r1, #1
 8005674:	438a      	bics	r2, r1
 8005676:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	4a0e      	ldr	r2, [pc, #56]	; (80056b8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005680:	4013      	ands	r3, r2
 8005682:	0019      	movs	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	0018      	movs	r0, r3
 8005692:	f000 f813 	bl	80056bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2288      	movs	r2, #136	; 0x88
 80056a2:	2120      	movs	r1, #32
 80056a4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2284      	movs	r2, #132	; 0x84
 80056aa:	2100      	movs	r1, #0
 80056ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	0018      	movs	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	b004      	add	sp, #16
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	f1ffffff 	.word	0xf1ffffff

080056bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d108      	bne.n	80056de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	226a      	movs	r2, #106	; 0x6a
 80056d0:	2101      	movs	r1, #1
 80056d2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2268      	movs	r2, #104	; 0x68
 80056d8:	2101      	movs	r1, #1
 80056da:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056dc:	e043      	b.n	8005766 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056de:	260f      	movs	r6, #15
 80056e0:	19bb      	adds	r3, r7, r6
 80056e2:	2208      	movs	r2, #8
 80056e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056e6:	200e      	movs	r0, #14
 80056e8:	183b      	adds	r3, r7, r0
 80056ea:	2208      	movs	r2, #8
 80056ec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	0e5b      	lsrs	r3, r3, #25
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	240d      	movs	r4, #13
 80056fa:	193b      	adds	r3, r7, r4
 80056fc:	2107      	movs	r1, #7
 80056fe:	400a      	ands	r2, r1
 8005700:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	0f5b      	lsrs	r3, r3, #29
 800570a:	b2da      	uxtb	r2, r3
 800570c:	250c      	movs	r5, #12
 800570e:	197b      	adds	r3, r7, r5
 8005710:	2107      	movs	r1, #7
 8005712:	400a      	ands	r2, r1
 8005714:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005716:	183b      	adds	r3, r7, r0
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	197a      	adds	r2, r7, r5
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	4914      	ldr	r1, [pc, #80]	; (8005770 <UARTEx_SetNbDataToProcess+0xb4>)
 8005720:	5c8a      	ldrb	r2, [r1, r2]
 8005722:	435a      	muls	r2, r3
 8005724:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005726:	197b      	adds	r3, r7, r5
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	4a12      	ldr	r2, [pc, #72]	; (8005774 <UARTEx_SetNbDataToProcess+0xb8>)
 800572c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800572e:	0019      	movs	r1, r3
 8005730:	f7fa fd72 	bl	8000218 <__divsi3>
 8005734:	0003      	movs	r3, r0
 8005736:	b299      	uxth	r1, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	226a      	movs	r2, #106	; 0x6a
 800573c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800573e:	19bb      	adds	r3, r7, r6
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	193a      	adds	r2, r7, r4
 8005744:	7812      	ldrb	r2, [r2, #0]
 8005746:	490a      	ldr	r1, [pc, #40]	; (8005770 <UARTEx_SetNbDataToProcess+0xb4>)
 8005748:	5c8a      	ldrb	r2, [r1, r2]
 800574a:	435a      	muls	r2, r3
 800574c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800574e:	193b      	adds	r3, r7, r4
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	4a08      	ldr	r2, [pc, #32]	; (8005774 <UARTEx_SetNbDataToProcess+0xb8>)
 8005754:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005756:	0019      	movs	r1, r3
 8005758:	f7fa fd5e 	bl	8000218 <__divsi3>
 800575c:	0003      	movs	r3, r0
 800575e:	b299      	uxth	r1, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2268      	movs	r2, #104	; 0x68
 8005764:	5299      	strh	r1, [r3, r2]
}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	46bd      	mov	sp, r7
 800576a:	b005      	add	sp, #20
 800576c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	08005860 	.word	0x08005860
 8005774:	08005868 	.word	0x08005868

08005778 <__libc_init_array>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	2600      	movs	r6, #0
 800577c:	4d0c      	ldr	r5, [pc, #48]	; (80057b0 <__libc_init_array+0x38>)
 800577e:	4c0d      	ldr	r4, [pc, #52]	; (80057b4 <__libc_init_array+0x3c>)
 8005780:	1b64      	subs	r4, r4, r5
 8005782:	10a4      	asrs	r4, r4, #2
 8005784:	42a6      	cmp	r6, r4
 8005786:	d109      	bne.n	800579c <__libc_init_array+0x24>
 8005788:	2600      	movs	r6, #0
 800578a:	f000 f821 	bl	80057d0 <_init>
 800578e:	4d0a      	ldr	r5, [pc, #40]	; (80057b8 <__libc_init_array+0x40>)
 8005790:	4c0a      	ldr	r4, [pc, #40]	; (80057bc <__libc_init_array+0x44>)
 8005792:	1b64      	subs	r4, r4, r5
 8005794:	10a4      	asrs	r4, r4, #2
 8005796:	42a6      	cmp	r6, r4
 8005798:	d105      	bne.n	80057a6 <__libc_init_array+0x2e>
 800579a:	bd70      	pop	{r4, r5, r6, pc}
 800579c:	00b3      	lsls	r3, r6, #2
 800579e:	58eb      	ldr	r3, [r5, r3]
 80057a0:	4798      	blx	r3
 80057a2:	3601      	adds	r6, #1
 80057a4:	e7ee      	b.n	8005784 <__libc_init_array+0xc>
 80057a6:	00b3      	lsls	r3, r6, #2
 80057a8:	58eb      	ldr	r3, [r5, r3]
 80057aa:	4798      	blx	r3
 80057ac:	3601      	adds	r6, #1
 80057ae:	e7f2      	b.n	8005796 <__libc_init_array+0x1e>
 80057b0:	08005878 	.word	0x08005878
 80057b4:	08005878 	.word	0x08005878
 80057b8:	08005878 	.word	0x08005878
 80057bc:	0800587c 	.word	0x0800587c

080057c0 <memset>:
 80057c0:	0003      	movs	r3, r0
 80057c2:	1882      	adds	r2, r0, r2
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d100      	bne.n	80057ca <memset+0xa>
 80057c8:	4770      	bx	lr
 80057ca:	7019      	strb	r1, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	e7f9      	b.n	80057c4 <memset+0x4>

080057d0 <_init>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr

080057dc <_fini>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr
